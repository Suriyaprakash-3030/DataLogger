
F411_Bolnno_Datalogger-V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001058c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007f80  08010730  08010730  00020730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080186b0  080186b0  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080186b0  080186b0  000286b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080186b8  080186b8  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080186b8  080186b8  000286b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080186bc  080186bc  000286bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080186c0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027a8  200001f0  080188b0  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002998  080188b0  00032998  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e7e4  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c44  00000000  00000000  0004ea47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f0  00000000  00000000  00053690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013e7  00000000  00000000  00055080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001edf0  00000000  00000000  00056467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027b76  00000000  00000000  00075257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a68ca  00000000  00000000  0009cdcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d68  00000000  00000000  00143698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b4  00000000  00000000  0014b400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010714 	.word	0x08010714

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08010714 	.word	0x08010714

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_ADC1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000f7a:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <MX_ADC1_Init+0x6c>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000f80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <MX_ADC1_Init+0x70>)
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000fc8:	f002 fd68 	bl	8003a9c <HAL_ADC_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8000fd2:	f002 f97f 	bl	80032d4 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000240c 	.word	0x2000240c
 8000fe0:	40012000 	.word	0x40012000
 8000fe4:	0f000001 	.word	0x0f000001

08000fe8 <Acc_Init>:
TiltState tilt = IDLE;




bool Acc_Init(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af04      	add	r7, sp, #16
    // Configure accelerometer with control register
			uint8_t whoAmI = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
			I2C_WriteByte(CTRL1_REG_ADDR, 0x57);
 8000ff2:	2157      	movs	r1, #87	; 0x57
 8000ff4:	2020      	movs	r0, #32
 8000ff6:	f000 fc19 	bl	800182c <I2C_WriteByte>
			HAL_Delay(100);
 8000ffa:	2064      	movs	r0, #100	; 0x64
 8000ffc:	f002 fd0a 	bl	8003a14 <HAL_Delay>
			HAL_I2C_Mem_Read(&hi2c1, 0x33, 0x0F, 1, &whoAmI, 1, HAL_MAX_DELAY);
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	220f      	movs	r2, #15
 8001012:	2133      	movs	r1, #51	; 0x33
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <Acc_Init+0x54>)
 8001016:	f003 fe39 	bl	8004c8c <HAL_I2C_Mem_Read>
			Accelerometer_Test_Flag = (whoAmI == 0x33) ?   true :   false;
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b33      	cmp	r3, #51	; 0x33
 800101e:	bf0c      	ite	eq
 8001020:	2301      	moveq	r3, #1
 8001022:	2300      	movne	r3, #0
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <Acc_Init+0x58>)
 8001028:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f002 fcf2 	bl	8003a14 <HAL_Delay>
//			if(!Accelerometer_Test_Flag)NVIC_SystemReset();
			return Accelerometer_Test_Flag;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <Acc_Init+0x58>)
 8001032:	781b      	ldrb	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20002454 	.word	0x20002454
 8001040:	2000020c 	.word	0x2000020c
 8001044:	00000000 	.word	0x00000000

08001048 <Get_Axis>:


Acclerometer_Data Get_Axis()
{
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	ed2d 8b02 	vpush	{d8}
 800104e:	b09c      	sub	sp, #112	; 0x70
 8001050:	af04      	add	r7, sp, #16



	// Angle variables

			int32_t x=0, y=0, z=0;
 8001052:	2300      	movs	r3, #0
 8001054:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001056:	2300      	movs	r3, #0
 8001058:	65bb      	str	r3, [r7, #88]	; 0x58
 800105a:	2300      	movs	r3, #0
 800105c:	657b      	str	r3, [r7, #84]	; 0x54
		    uint8_t num = 255;
 800105e:	23ff      	movs	r3, #255	; 0xff
 8001060:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		    uint8_t rawData[6];
		    int16_t accelX=0, accelY=0, accelZ=0;
 8001064:	2300      	movs	r3, #0
 8001066:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800106a:	2300      	movs	r3, #0
 800106c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001070:	2300      	movs	r3, #0
 8001072:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e




		    for (uint8_t i = 0; i < num; i++) {
 8001076:	2300      	movs	r3, #0
 8001078:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800107c:	e03f      	b.n	80010fe <Get_Axis+0xb6>
		    	HAL_I2C_Mem_Read(&hi2c1, Device_Address << 1, 0xA8 | 0x80, 1, rawData, 6, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2306      	movs	r3, #6
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2301      	movs	r3, #1
 8001090:	22a8      	movs	r2, #168	; 0xa8
 8001092:	2132      	movs	r1, #50	; 0x32
 8001094:	48cc      	ldr	r0, [pc, #816]	; (80013c8 <Get_Axis+0x380>)
 8001096:	f003 fdf9 	bl	8004c8c <HAL_I2C_Mem_Read>
		        accelX = (int16_t)((rawData[1] << 8) | rawData[0]);
 800109a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		        accelY = (int16_t)((rawData[3] << 8) | rawData[2]);
 80010ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		        accelZ = (int16_t)((rawData[5] << 8) | rawData[4]);
 80010c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		        x += accelX;
 80010d6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80010da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010dc:	4413      	add	r3, r2
 80010de:	65fb      	str	r3, [r7, #92]	; 0x5c
		        y += accelY;
 80010e0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80010e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010e6:	4413      	add	r3, r2
 80010e8:	65bb      	str	r3, [r7, #88]	; 0x58
		        z += accelZ;
 80010ea:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80010ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010f0:	4413      	add	r3, r2
 80010f2:	657b      	str	r3, [r7, #84]	; 0x54
		    for (uint8_t i = 0; i < num; i++) {
 80010f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010f8:	3301      	adds	r3, #1
 80010fa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80010fe:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001102:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001106:	429a      	cmp	r2, r3
 8001108:	d3b9      	bcc.n	800107e <Get_Axis+0x36>
		    }

		    accelX = accelX / num;
 800110a:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 800110e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001112:	fb92 f3f3 	sdiv	r3, r2, r3
 8001116:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		    accelY = accelY / num;
 800111a:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 800111e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001122:	fb92 f3f3 	sdiv	r3, r2, r3
 8001126:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		    accelZ = accelZ / num;
 800112a:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800112e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001132:	fb92 f3f3 	sdiv	r3, r2, r3
 8001136:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		    float acceleration_x = (float)accelX / 32768.0 * 2.0;
 800113a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001146:	ee17 0a90 	vmov	r0, s15
 800114a:	f7ff fa15 	bl	8000578 <__aeabi_f2d>
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4b9e      	ldr	r3, [pc, #632]	; (80013cc <Get_Axis+0x384>)
 8001154:	f7ff fb92 	bl	800087c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	f7ff f8aa 	bl	80002bc <__adddf3>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff fd32 	bl	8000bd8 <__aeabi_d2f>
 8001174:	4603      	mov	r3, r0
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
		    float acceleration_y = (float)accelY / 32768.0 * 2.0;
 8001178:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001184:	ee17 0a90 	vmov	r0, s15
 8001188:	f7ff f9f6 	bl	8000578 <__aeabi_f2d>
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	4b8e      	ldr	r3, [pc, #568]	; (80013cc <Get_Axis+0x384>)
 8001192:	f7ff fb73 	bl	800087c <__aeabi_ddiv>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	f7ff f88b 	bl	80002bc <__adddf3>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fd13 	bl	8000bd8 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	647b      	str	r3, [r7, #68]	; 0x44
		    float acceleration_z = (float)accelZ / 32768.0 * 2.0;
 80011b6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c2:	ee17 0a90 	vmov	r0, s15
 80011c6:	f7ff f9d7 	bl	8000578 <__aeabi_f2d>
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b7f      	ldr	r3, [pc, #508]	; (80013cc <Get_Axis+0x384>)
 80011d0:	f7ff fb54 	bl	800087c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	f7ff f86c 	bl	80002bc <__adddf3>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fcf4 	bl	8000bd8 <__aeabi_d2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	643b      	str	r3, [r7, #64]	; 0x40

		    // Calculate angle in radians
		    float pitch_angle = atan2(acceleration_y, sqrt(acceleration_x * acceleration_x + acceleration_z * acceleration_z));
 80011f4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80011f6:	f7ff f9bf 	bl	8000578 <__aeabi_f2d>
 80011fa:	4604      	mov	r4, r0
 80011fc:	460d      	mov	r5, r1
 80011fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001202:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001206:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800120a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800120e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001212:	ee17 0a90 	vmov	r0, s15
 8001216:	f7ff f9af 	bl	8000578 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	ec43 2b10 	vmov	d0, r2, r3
 8001222:	f00e fd37 	bl	800fc94 <sqrt>
 8001226:	eeb0 7a40 	vmov.f32	s14, s0
 800122a:	eef0 7a60 	vmov.f32	s15, s1
 800122e:	eeb0 1a47 	vmov.f32	s2, s14
 8001232:	eef0 1a67 	vmov.f32	s3, s15
 8001236:	ec45 4b10 	vmov	d0, r4, r5
 800123a:	f00e fce9 	bl	800fc10 <atan2>
 800123e:	ec53 2b10 	vmov	r2, r3, d0
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f7ff fcc7 	bl	8000bd8 <__aeabi_d2f>
 800124a:	4603      	mov	r3, r0
 800124c:	63fb      	str	r3, [r7, #60]	; 0x3c
		    float roll_angle = atan2(-acceleration_x, acceleration_z);
 800124e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001252:	eef1 7a67 	vneg.f32	s15, s15
 8001256:	ee17 3a90 	vmov	r3, s15
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f98c 	bl	8000578 <__aeabi_f2d>
 8001260:	4604      	mov	r4, r0
 8001262:	460d      	mov	r5, r1
 8001264:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001266:	f7ff f987 	bl	8000578 <__aeabi_f2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	ec43 2b11 	vmov	d1, r2, r3
 8001272:	ec45 4b10 	vmov	d0, r4, r5
 8001276:	f00e fccb 	bl	800fc10 <atan2>
 800127a:	ec53 2b10 	vmov	r2, r3, d0
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f7ff fca9 	bl	8000bd8 <__aeabi_d2f>
 8001286:	4603      	mov	r3, r0
 8001288:	63bb      	str	r3, [r7, #56]	; 0x38
		    float yaw_angle = atan2(sqrt(acceleration_x * acceleration_x + acceleration_y * acceleration_y), acceleration_z);
 800128a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800128e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001292:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001296:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800129a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129e:	ee17 0a90 	vmov	r0, s15
 80012a2:	f7ff f969 	bl	8000578 <__aeabi_f2d>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	ec43 2b10 	vmov	d0, r2, r3
 80012ae:	f00e fcf1 	bl	800fc94 <sqrt>
 80012b2:	eeb0 8a40 	vmov.f32	s16, s0
 80012b6:	eef0 8a60 	vmov.f32	s17, s1
 80012ba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80012bc:	f7ff f95c 	bl	8000578 <__aeabi_f2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	ec43 2b11 	vmov	d1, r2, r3
 80012c8:	eeb0 0a48 	vmov.f32	s0, s16
 80012cc:	eef0 0a68 	vmov.f32	s1, s17
 80012d0:	f00e fc9e 	bl	800fc10 <atan2>
 80012d4:	ec53 2b10 	vmov	r2, r3, d0
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fc7c 	bl	8000bd8 <__aeabi_d2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34

		    // radians to angle formula radian/(180/pi)
		    pitch_angle_deg = (pitch_angle * (180.0 / Pi));
 80012e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012e6:	f7ff f947 	bl	8000578 <__aeabi_f2d>
 80012ea:	a335      	add	r3, pc, #212	; (adr r3, 80013c0 <Get_Axis+0x378>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff f99a 	bl	8000628 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fc6c 	bl	8000bd8 <__aeabi_d2f>
 8001300:	4603      	mov	r3, r0
 8001302:	4a33      	ldr	r2, [pc, #204]	; (80013d0 <Get_Axis+0x388>)
 8001304:	6013      	str	r3, [r2, #0]
		    roll_angle_deg = (roll_angle * (180.0 / Pi)); // PI VALUE ALSO MACRO
 8001306:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001308:	f7ff f936 	bl	8000578 <__aeabi_f2d>
 800130c:	a32c      	add	r3, pc, #176	; (adr r3, 80013c0 <Get_Axis+0x378>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff f989 	bl	8000628 <__aeabi_dmul>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc5b 	bl	8000bd8 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	4a2b      	ldr	r2, [pc, #172]	; (80013d4 <Get_Axis+0x38c>)
 8001326:	6013      	str	r3, [r2, #0]
		    yaw_angle_deg = (yaw_angle * (180.0 / Pi));
 8001328:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800132a:	f7ff f925 	bl	8000578 <__aeabi_f2d>
 800132e:	a324      	add	r3, pc, #144	; (adr r3, 80013c0 <Get_Axis+0x378>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff f978 	bl	8000628 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fc4a 	bl	8000bd8 <__aeabi_d2f>
 8001344:	4603      	mov	r3, r0
 8001346:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <Get_Axis+0x390>)
 8001348:	6013      	str	r3, [r2, #0]
		    pitch_angle_deg= (float)((int)(pitch_angle_deg * 100)) / 100;
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Get_Axis+0x388>)
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80013dc <Get_Axis+0x394>
 8001354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001360:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80013dc <Get_Axis+0x394>
 8001364:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <Get_Axis+0x388>)
 800136a:	edc3 7a00 	vstr	s15, [r3]


		    Acclerometer_Data AXIS = {pitch_angle_deg , roll_angle_deg, yaw_angle_deg };
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <Get_Axis+0x388>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <Get_Axis+0x38c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <Get_Axis+0x390>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	61fb      	str	r3, [r7, #28]
		    if(!Sys_Start)UART_Printf("X-AXIS = %d , Y-AXIS = %d ,Z-AXIS = %d  \n",(int)pitch_angle_deg, (int)roll_angle_deg, (int)yaw_angle_deg);
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <Get_Axis+0x398>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f083 0301 	eor.w	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d02c      	beq.n	80013e8 <Get_Axis+0x3a0>
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <Get_Axis+0x388>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <Get_Axis+0x38c>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <Get_Axis+0x390>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ac:	ee17 3a90 	vmov	r3, s15
 80013b0:	ee16 2a90 	vmov	r2, s13
 80013b4:	ee17 1a10 	vmov	r1, s14
 80013b8:	480a      	ldr	r0, [pc, #40]	; (80013e4 <Get_Axis+0x39c>)
 80013ba:	f001 fd17 	bl	8002dec <UART_Printf>
 80013be:	e013      	b.n	80013e8 <Get_Axis+0x3a0>
 80013c0:	597d6ec3 	.word	0x597d6ec3
 80013c4:	404ca73e 	.word	0x404ca73e
 80013c8:	20002454 	.word	0x20002454
 80013cc:	40e00000 	.word	0x40e00000
 80013d0:	20000210 	.word	0x20000210
 80013d4:	20000214 	.word	0x20000214
 80013d8:	20000218 	.word	0x20000218
 80013dc:	42c80000 	.word	0x42c80000
 80013e0:	20002604 	.word	0x20002604
 80013e4:	08010730 	.word	0x08010730
		    return AXIS;
 80013e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ec:	f107 0214 	add.w	r2, r7, #20
 80013f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80013f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80013f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013fc:	ee06 1a90 	vmov	s13, r1
 8001400:	ee07 2a10 	vmov	s14, r2
 8001404:	ee07 3a90 	vmov	s15, r3
}
 8001408:	eeb0 0a66 	vmov.f32	s0, s13
 800140c:	eef0 0a47 	vmov.f32	s1, s14
 8001410:	eeb0 1a67 	vmov.f32	s2, s15
 8001414:	3760      	adds	r7, #96	; 0x60
 8001416:	46bd      	mov	sp, r7
 8001418:	ecbd 8b02 	vpop	{d8}
 800141c:	bdb0      	pop	{r4, r5, r7, pc}
 800141e:	bf00      	nop

08001420 <System_Start>:


uint8_t System_Start()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0

	Acclerometer_Data Angles = Get_Axis();
 8001426:	f7ff fe0f 	bl	8001048 <Get_Axis>
 800142a:	eef0 6a40 	vmov.f32	s13, s0
 800142e:	eeb0 7a60 	vmov.f32	s14, s1
 8001432:	eef0 7a41 	vmov.f32	s15, s2
 8001436:	edc7 6a01 	vstr	s13, [r7, #4]
 800143a:	ed87 7a02 	vstr	s14, [r7, #8]
 800143e:	edc7 7a03 	vstr	s15, [r7, #12]


	switch (tilt) {
 8001442:	4b5e      	ldr	r3, [pc, #376]	; (80015bc <System_Start+0x19c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b02      	cmp	r3, #2
 8001448:	f000 8086 	beq.w	8001558 <System_Start+0x138>
 800144c:	2b02      	cmp	r3, #2
 800144e:	f300 80ae 	bgt.w	80015ae <System_Start+0x18e>
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <System_Start+0x3c>
 8001456:	2b01      	cmp	r3, #1
 8001458:	d03f      	beq.n	80014da <System_Start+0xba>
 800145a:	e0a8      	b.n	80015ae <System_Start+0x18e>
		        case IDLE:
		            if ((Angles.x >= P_X_Min && Angles.x < P_X_Max)  ||  // NEED A MACRO FOR THE VALUES 70
 800145c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001460:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80015c0 <System_Start+0x1a0>
 8001464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	db08      	blt.n	8001480 <System_Start+0x60>
 800146e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001472:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80015c4 <System_Start+0x1a4>
 8001476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	d425      	bmi.n	80014cc <System_Start+0xac>
					   (Angles.y >= P_Y_Min && Angles.x < P_Y_Max)  ||
 8001480:	edd7 7a02 	vldr	s15, [r7, #8]
		            if ((Angles.x >= P_X_Min && Angles.x < P_X_Max)  ||  // NEED A MACRO FOR THE VALUES 70
 8001484:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80015c0 <System_Start+0x1a0>
 8001488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001490:	db08      	blt.n	80014a4 <System_Start+0x84>
					   (Angles.y >= P_Y_Min && Angles.x < P_Y_Max)  ||
 8001492:	edd7 7a01 	vldr	s15, [r7, #4]
 8001496:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80015c4 <System_Start+0x1a4>
 800149a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a2:	d413      	bmi.n	80014cc <System_Start+0xac>
					   (Angles.z >= P_Z_Min && Angles.x < P_Z_Max))
 80014a4:	edd7 7a03 	vldr	s15, [r7, #12]
					   (Angles.y >= P_Y_Min && Angles.x < P_Y_Max)  ||
 80014a8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80015c0 <System_Start+0x1a0>
 80014ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	da00      	bge.n	80014b8 <System_Start+0x98>
		            {
		                tilt = POSITIVE_THRESHOLD;
		                UART_Printf("Axis reach Positive Threshold \n");
		            }
		            break;
 80014b6:	e07a      	b.n	80015ae <System_Start+0x18e>
					   (Angles.z >= P_Z_Min && Angles.x < P_Z_Max))
 80014b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014bc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80015c4 <System_Start+0x1a4>
 80014c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	d400      	bmi.n	80014cc <System_Start+0xac>
		            break;
 80014ca:	e070      	b.n	80015ae <System_Start+0x18e>
		                tilt = POSITIVE_THRESHOLD;
 80014cc:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <System_Start+0x19c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
		                UART_Printf("Axis reach Positive Threshold \n");
 80014d2:	483d      	ldr	r0, [pc, #244]	; (80015c8 <System_Start+0x1a8>)
 80014d4:	f001 fc8a 	bl	8002dec <UART_Printf>
		            break;
 80014d8:	e069      	b.n	80015ae <System_Start+0x18e>

		        case POSITIVE_THRESHOLD:
		            if ((Angles.x >= N_X_Max && Angles.x < N_X_Min)||
 80014da:	edd7 7a01 	vldr	s15, [r7, #4]
 80014de:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80015cc <System_Start+0x1ac>
 80014e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	db08      	blt.n	80014fe <System_Start+0xde>
 80014ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80015d0 <System_Start+0x1b0>
 80014f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	d425      	bmi.n	800154a <System_Start+0x12a>
		                (Angles.y >= N_Y_Max && Angles.x < N_Y_Min) ||
 80014fe:	edd7 7a02 	vldr	s15, [r7, #8]
		            if ((Angles.x >= N_X_Max && Angles.x < N_X_Min)||
 8001502:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80015cc <System_Start+0x1ac>
 8001506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150e:	db08      	blt.n	8001522 <System_Start+0x102>
		                (Angles.y >= N_Y_Max && Angles.x < N_Y_Min) ||
 8001510:	edd7 7a01 	vldr	s15, [r7, #4]
 8001514:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80015d0 <System_Start+0x1b0>
 8001518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001520:	d413      	bmi.n	800154a <System_Start+0x12a>
					    (Angles.z >= N_Z_Max && Angles.x < N_Z_Min))
 8001522:	edd7 7a03 	vldr	s15, [r7, #12]
		                (Angles.y >= N_Y_Max && Angles.x < N_Y_Min) ||
 8001526:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80015cc <System_Start+0x1ac>
 800152a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	da00      	bge.n	8001536 <System_Start+0x116>

					{
		                tilt = NEGATIVE_THRESHOLD;
		                UART_Printf("Axis reach Negative Threshold \n");
		            }
		            break;
 8001534:	e03b      	b.n	80015ae <System_Start+0x18e>
					    (Angles.z >= N_Z_Max && Angles.x < N_Z_Min))
 8001536:	edd7 7a01 	vldr	s15, [r7, #4]
 800153a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80015d0 <System_Start+0x1b0>
 800153e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	d400      	bmi.n	800154a <System_Start+0x12a>
		            break;
 8001548:	e031      	b.n	80015ae <System_Start+0x18e>
		                tilt = NEGATIVE_THRESHOLD;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <System_Start+0x19c>)
 800154c:	2202      	movs	r2, #2
 800154e:	701a      	strb	r2, [r3, #0]
		                UART_Printf("Axis reach Negative Threshold \n");
 8001550:	4820      	ldr	r0, [pc, #128]	; (80015d4 <System_Start+0x1b4>)
 8001552:	f001 fc4b 	bl	8002dec <UART_Printf>
		            break;
 8001556:	e02a      	b.n	80015ae <System_Start+0x18e>

		        case NEGATIVE_THRESHOLD:
//		            if (System_On_Flag == true) {
		        		UART_Printf("System Starts \n");
 8001558:	481f      	ldr	r0, [pc, #124]	; (80015d8 <System_Start+0x1b8>)
 800155a:	f001 fc47 	bl	8002dec <UART_Printf>
		                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001564:	481d      	ldr	r0, [pc, #116]	; (80015dc <System_Start+0x1bc>)
 8001566:	f003 f939 	bl	80047dc <HAL_GPIO_WritePin>
		                HAL_Delay(500);
 800156a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800156e:	f002 fa51 	bl	8003a14 <HAL_Delay>
		                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001578:	4818      	ldr	r0, [pc, #96]	; (80015dc <System_Start+0x1bc>)
 800157a:	f003 f92f 	bl	80047dc <HAL_GPIO_WritePin>
		                HAL_Delay(500);
 800157e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001582:	f002 fa47 	bl	8003a14 <HAL_Delay>
		                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158c:	4813      	ldr	r0, [pc, #76]	; (80015dc <System_Start+0x1bc>)
 800158e:	f003 f925 	bl	80047dc <HAL_GPIO_WritePin>
		                HAL_Delay(3000);
 8001592:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001596:	f002 fa3d 	bl	8003a14 <HAL_Delay>
		                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a0:	480e      	ldr	r0, [pc, #56]	; (80015dc <System_Start+0x1bc>)
 80015a2:	f003 f91b 	bl	80047dc <HAL_GPIO_WritePin>
		                Sys_Start = true;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <System_Start+0x1c0>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
//		            }
		            break;
 80015ac:	bf00      	nop
		    }

return Sys_Start;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <System_Start+0x1c0>)
 80015b0:	781b      	ldrb	r3, [r3, #0]

}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000021c 	.word	0x2000021c
 80015c0:	42340000 	.word	0x42340000
 80015c4:	42a00000 	.word	0x42a00000
 80015c8:	0801075c 	.word	0x0801075c
 80015cc:	c2a00000 	.word	0xc2a00000
 80015d0:	c2340000 	.word	0xc2340000
 80015d4:	0801077c 	.word	0x0801077c
 80015d8:	0801079c 	.word	0x0801079c
 80015dc:	40020800 	.word	0x40020800
 80015e0:	20002604 	.word	0x20002604

080015e4 <Store_Data>:

//extern struct CollectData;
extern float Sleep_Thre;

DataSet Store_Data()
{
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b098      	sub	sp, #96	; 0x60
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]


	int Tot_Sensor = 4;
 80015ec:	2304      	movs	r3, #4
 80015ee:	65bb      	str	r3, [r7, #88]	; 0x58
	int* NTC_Temp = NTC_Array(Tot_Sensor);
 80015f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80015f2:	f000 f9a9 	bl	8001948 <NTC_Array>
 80015f6:	6578      	str	r0, [r7, #84]	; 0x54

	for (int i = 0; i < Tot_Sensor; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015fc:	e002      	b.n	8001604 <Store_Data+0x20>
 80015fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001600:	3301      	adds	r3, #1
 8001602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001604:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001608:	429a      	cmp	r2, r3
 800160a:	dbf8      	blt.n	80015fe <Store_Data+0x1a>
	}




    Acclerometer_Data Angles = Get_Axis();
 800160c:	f7ff fd1c 	bl	8001048 <Get_Axis>
 8001610:	eef0 6a40 	vmov.f32	s13, s0
 8001614:	eeb0 7a60 	vmov.f32	s14, s1
 8001618:	eef0 7a41 	vmov.f32	s15, s2
 800161c:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 8001620:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8001624:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	float U_amp =  0.0;
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	653b      	str	r3, [r7, #80]	; 0x50
	U_amp = Ultrasonic_Amplitude(U_amp);
 800162e:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8001632:	f001 fc0d 	bl	8002e50 <Ultrasonic_Amplitude>
 8001636:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	float W_res = 0.0;
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	64fb      	str	r3, [r7, #76]	; 0x4c
	W_res = Water_Res(W_res);
 8001640:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001644:	f001 fc68 	bl	8002f18 <Water_Res>
 8001648:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
	float Pres = 0.0;
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	64bb      	str	r3, [r7, #72]	; 0x48
	Pres = PresureSensorData(Pres);
 8001652:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001656:	f000 fc8f 	bl	8001f78 <PresureSensorData>
 800165a:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48



	DataSet data = { Timer_Count, Angles.x, Angles.y, Angles.z, NTC_Temp[0],NTC_Temp[1],NTC_Temp[2], NTC_Temp[3],U_amp,W_res,Pres,Sleep_Count};
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <Store_Data+0x104>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167c:	edc7 7a07 	vstr	s15, [r7, #28]
 8001680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001682:	3304      	adds	r3, #4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168e:	edc7 7a08 	vstr	s15, [r7, #32]
 8001692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001694:	3308      	adds	r3, #8
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	ee07 3a90 	vmov	s15, r3
 800169c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80016a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a6:	330c      	adds	r3, #12
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80016b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
 80016be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016c0:	637b      	str	r3, [r7, #52]	; 0x34
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <Store_Data+0x108>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	63bb      	str	r3, [r7, #56]	; 0x38

	return data;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	461d      	mov	r5, r3
 80016cc:	f107 040c 	add.w	r4, r7, #12
 80016d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

}
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	3760      	adds	r7, #96	; 0x60
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bdb0      	pop	{r4, r5, r7, pc}
 80016e8:	20000224 	.word	0x20000224
 80016ec:	20000220 	.word	0x20000220

080016f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <MX_GPIO_Init+0xd4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a2d      	ldr	r2, [pc, #180]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <MX_GPIO_Init+0xd4>)
 800172c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_GPIO_Init+0xd4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Vibrator_GPIO_Port, Vibrator_Pin, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177c:	4812      	ldr	r0, [pc, #72]	; (80017c8 <MX_GPIO_Init+0xd8>)
 800177e:	f003 f82d 	bl	80047dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Vibrator_Pin */
  GPIO_InitStruct.Pin = Vibrator_Pin;
 8001782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Vibrator_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	480b      	ldr	r0, [pc, #44]	; (80017c8 <MX_GPIO_Init+0xd8>)
 800179c:	f002 fe82 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Det_Switch_Pin */
  GPIO_InitStruct.Pin = Det_Switch_Pin;
 80017a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Det_Switch_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_GPIO_Init+0xdc>)
 80017b6:	f002 fe75 	bl	80044a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020400 	.word	0x40020400

080017d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_I2C1_Init+0x50>)
 80017d6:	4a13      	ldr	r2, [pc, #76]	; (8001824 <MX_I2C1_Init+0x54>)
 80017d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_I2C1_Init+0x50>)
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <MX_I2C1_Init+0x58>)
 80017de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_I2C1_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_I2C1_Init+0x50>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_I2C1_Init+0x50>)
 80017ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <MX_I2C1_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_I2C1_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <MX_I2C1_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_I2C1_Init+0x50>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <MX_I2C1_Init+0x50>)
 800180e:	f002 ffff 	bl	8004810 <HAL_I2C_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001818:	f001 fd5c 	bl	80032d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20002454 	.word	0x20002454
 8001824:	40005400 	.word	0x40005400
 8001828:	000186a0 	.word	0x000186a0

0800182c <I2C_WriteByte>:


 void I2C_WriteByte(uint8_t reg, uint8_t data) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af04      	add	r7, sp, #16
 8001832:	4603      	mov	r3, r0
 8001834:	460a      	mov	r2, r1
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	4613      	mov	r3, r2
 800183a:	71bb      	strb	r3, [r7, #6]
     HAL_I2C_Mem_Write(&hi2c1, Device_Address << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	b29a      	uxth	r2, r3
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	2301      	movs	r3, #1
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	1dbb      	adds	r3, r7, #6
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2301      	movs	r3, #1
 8001850:	2132      	movs	r1, #50	; 0x32
 8001852:	4803      	ldr	r0, [pc, #12]	; (8001860 <I2C_WriteByte+0x34>)
 8001854:	f003 f920 	bl	8004a98 <HAL_I2C_Mem_Write>
 }
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20002454 	.word	0x20002454

08001864 <HAL_TIM_PeriodElapsedCallback>:
 *        This function handles reading ADC values, logging data, and managing system sleep mode.
 * @param htim Timer handler pointer
 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM3 && !Sleep_flag) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d115      	bne.n	80018a2 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	f083 0301 	eor.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00e      	beq.n	80018a2 <HAL_TIM_PeriodElapsedCallback+0x3e>

			DATA_LOG();
 8001884:	f000 ff92 	bl	80027ac <DATA_LOG>
			Timer_Count+=0.5;
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x68>)
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001892:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001898:	edc3 7a00 	vstr	s15, [r3]
			Sleep_mode();
 800189c:	f000 f81a 	bl	80018d4 <Sleep_mode>
		if (htim->Instance == TIM4) {
			Sleep_flag = false;
//            UART_Printf("Hello \n");
		}
	}
}
 80018a0:	e00b      	b.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x56>
	 else if (Sleep_flag) {
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x56>
		if (htim->Instance == TIM4) {
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d102      	bne.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x56>
			Sleep_flag = false;
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40000400 	.word	0x40000400
 80018c8:	2000021d 	.word	0x2000021d
 80018cc:	20000224 	.word	0x20000224
 80018d0:	40000800 	.word	0x40000800

080018d4 <Sleep_mode>:

//extern DataSet Store_Data();

void Sleep_mode() {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0

	int Tot_Sensor = 4;
 80018da:	2304      	movs	r3, #4
 80018dc:	60bb      	str	r3, [r7, #8]
	int* NTC_Temp = NTC_Array(Tot_Sensor);
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f000 f832 	bl	8001948 <NTC_Array>
 80018e4:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < Tot_Sensor; i++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	e002      	b.n	80018f2 <Sleep_mode+0x1e>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3301      	adds	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbf8      	blt.n	80018ec <Sleep_mode+0x18>
	{
			NTC_Temp[i];
	}

	if (NTC_Temp[0] >= Sleep_temp) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b27      	cmp	r3, #39	; 0x27
 8001900:	dd17      	ble.n	8001932 <Sleep_mode+0x5e>
		Sleep_Count += 1.0;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <Sleep_mode+0x68>)
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800190c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <Sleep_mode+0x68>)
 8001912:	edc3 7a00 	vstr	s15, [r3]
		Sleep_flag = true;
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <Sleep_mode+0x6c>)
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
//		HAL_TIM_Base_Start_IT(&htim4);
//		HAL_TIM_Base_Stop_IT(&htim3);
		UART_Printf("********* Over Temp Sys going to Sleep Mode************\n");
 800191c:	4809      	ldr	r0, [pc, #36]	; (8001944 <Sleep_mode+0x70>)
 800191e:	f001 fa65 	bl	8002dec <UART_Printf>


//		UART_Printf("********* Sleep Count %d************\n",Sleep_Count);

		HAL_SuspendTick();
 8001922:	f002 f89b 	bl	8003a5c <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001926:	2101      	movs	r1, #1
 8001928:	2000      	movs	r0, #0
 800192a:	f003 ff95 	bl	8005858 <HAL_PWR_EnterSLEEPMode>
		HAL_ResumeTick();
 800192e:	f002 f8a5 	bl	8003a7c <HAL_ResumeTick>
//		HAL_TIM_Base_Start_IT(&htim4);
//		HAL_TIM_Base_Start_IT(&htim4);
	}

}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000220 	.word	0x20000220
 8001940:	2000021d 	.word	0x2000021d
 8001944:	080107ac 	.word	0x080107ac

08001948 <NTC_Array>:
#define C 0.0000000876741



int* NTC_Array(int Tot_Sensor)
{
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b098      	sub	sp, #96	; 0x60
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    // Allocate memory for the array
    int* NTC_Data = (int*)malloc(Tot_Sensor * sizeof(int));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4618      	mov	r0, r3
 8001956:	f00b fa9d 	bl	800ce94 <malloc>
 800195a:	4603      	mov	r3, r0
 800195c:	65bb      	str	r3, [r7, #88]	; 0x58

    // Check if memory allocation was successful
    if (NTC_Data == NULL) {
 800195e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <NTC_Array+0x28>
    	UART_Printf("Memory allocation failed!\n");
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <NTC_Array+0x30>)
 8001966:	f001 fa41 	bl	8002dec <UART_Printf>
        exit(1); // Exit the program if allocation fails
 800196a:	2001      	movs	r0, #1
 800196c:	f00b fa80 	bl	800ce70 <exit>
    }

    // Initialize the NTC_Data with example values
    for (int i = 0; i < Tot_Sensor; i++) {
 8001970:	2300      	movs	r3, #0
 8001972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001974:	e2e1      	b.n	8001f3a <NTC_Array+0x5f2>
 8001976:	bf00      	nop
 8001978:	080107e8 	.word	0x080107e8


    	if(i==0)
 800197c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800197e:	2b00      	cmp	r3, #0
 8001980:	f040 80ad 	bne.w	8001ade <NTC_Array+0x196>
    	{
    		 ADC_ChannelConfTypeDef sConfig = {0};
 8001984:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
    		 sConfig.Channel = ADC_CHANNEL_1;
 8001992:	2301      	movs	r3, #1
 8001994:	63bb      	str	r3, [r7, #56]	; 0x38
    		 sConfig.Rank = 1;
 8001996:	2301      	movs	r3, #1
 8001998:	63fb      	str	r3, [r7, #60]	; 0x3c
    		 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800199a:	2300      	movs	r3, #0
 800199c:	643b      	str	r3, [r7, #64]	; 0x40
    			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800199e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019a2:	4619      	mov	r1, r3
 80019a4:	48cc      	ldr	r0, [pc, #816]	; (8001cd8 <NTC_Array+0x390>)
 80019a6:	f002 fa3d 	bl	8003e24 <HAL_ADC_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <NTC_Array+0x6c>
    			  {
    			      Error_Handler();
 80019b0:	f001 fc90 	bl	80032d4 <Error_Handler>
    			  }
    			  HAL_ADC_Start(&hadc1);
 80019b4:	48c8      	ldr	r0, [pc, #800]	; (8001cd8 <NTC_Array+0x390>)
 80019b6:	f002 f8b5 	bl	8003b24 <HAL_ADC_Start>
    			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80019ba:	f04f 31ff 	mov.w	r1, #4294967295
 80019be:	48c6      	ldr	r0, [pc, #792]	; (8001cd8 <NTC_Array+0x390>)
 80019c0:	f002 f997 	bl	8003cf2 <HAL_ADC_PollForConversion>
    			  NTC_ADC_Buffer [i]= HAL_ADC_GetValue(&hadc1);
 80019c4:	48c4      	ldr	r0, [pc, #784]	; (8001cd8 <NTC_Array+0x390>)
 80019c6:	f002 fa1f 	bl	8003e08 <HAL_ADC_GetValue>
 80019ca:	ee07 0a90 	vmov	s15, r0
 80019ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d2:	4ac2      	ldr	r2, [pc, #776]	; (8001cdc <NTC_Array+0x394>)
 80019d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	edc3 7a00 	vstr	s15, [r3]
    			  HAL_ADC_Stop(&hadc1);
 80019de:	48be      	ldr	r0, [pc, #760]	; (8001cd8 <NTC_Array+0x390>)
 80019e0:	f002 f954 	bl	8003c8c <HAL_ADC_Stop>
//
//    			  float logR = log(Res / Divider_Resistor);
//
//    			  NTC_Data[i] = 1.0 / ((logR / T1_Bvalue) + (1.0 / T0)) - 275.15;

    			  float resistance = Divider_Resistor * (4095.0 / NTC_ADC_Buffer[i] - 1);
 80019e4:	4bbe      	ldr	r3, [pc, #760]	; (8001ce0 <NTC_Array+0x398>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdc5 	bl	8000578 <__aeabi_f2d>
 80019ee:	4604      	mov	r4, r0
 80019f0:	460d      	mov	r5, r1
 80019f2:	4aba      	ldr	r2, [pc, #744]	; (8001cdc <NTC_Array+0x394>)
 80019f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fdbb 	bl	8000578 <__aeabi_f2d>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	a1b0      	add	r1, pc, #704	; (adr r1, 8001cc8 <NTC_Array+0x380>)
 8001a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a0c:	f7fe ff36 	bl	800087c <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	4bb1      	ldr	r3, [pc, #708]	; (8001ce4 <NTC_Array+0x39c>)
 8001a1e:	f7fe fc4b 	bl	80002b8 <__aeabi_dsub>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4620      	mov	r0, r4
 8001a28:	4629      	mov	r1, r5
 8001a2a:	f7fe fdfd 	bl	8000628 <__aeabi_dmul>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4610      	mov	r0, r2
 8001a34:	4619      	mov	r1, r3
 8001a36:	f7ff f8cf 	bl	8000bd8 <__aeabi_d2f>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	657b      	str	r3, [r7, #84]	; 0x54

    			  NTC_Data[i] = 1.0 / ((log(resistance / Divider_Resistor)) / T1_Bvalue + 1.0 / T0) - 273.15;
 8001a3e:	4ba8      	ldr	r3, [pc, #672]	; (8001ce0 <NTC_Array+0x398>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001a48:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a4c:	ee16 0a90 	vmov	r0, s13
 8001a50:	f7fe fd92 	bl	8000578 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	ec43 2b10 	vmov	d0, r2, r3
 8001a5c:	f00e f8dc 	bl	800fc18 <log>
 8001a60:	ec55 4b10 	vmov	r4, r5, d0
 8001a64:	4ba0      	ldr	r3, [pc, #640]	; (8001ce8 <NTC_Array+0x3a0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd85 	bl	8000578 <__aeabi_f2d>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4620      	mov	r0, r4
 8001a74:	4629      	mov	r1, r5
 8001a76:	f7fe ff01 	bl	800087c <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4614      	mov	r4, r2
 8001a80:	461d      	mov	r5, r3
 8001a82:	4b9a      	ldr	r3, [pc, #616]	; (8001cec <NTC_Array+0x3a4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd76 	bl	8000578 <__aeabi_f2d>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	f04f 0000 	mov.w	r0, #0
 8001a94:	4993      	ldr	r1, [pc, #588]	; (8001ce4 <NTC_Array+0x39c>)
 8001a96:	f7fe fef1 	bl	800087c <__aeabi_ddiv>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	f7fe fc0b 	bl	80002bc <__adddf3>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	f04f 0000 	mov.w	r0, #0
 8001aae:	498d      	ldr	r1, [pc, #564]	; (8001ce4 <NTC_Array+0x39c>)
 8001ab0:	f7fe fee4 	bl	800087c <__aeabi_ddiv>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	a384      	add	r3, pc, #528	; (adr r3, 8001cd0 <NTC_Array+0x388>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fbf9 	bl	80002b8 <__aeabi_dsub>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ad4:	18d4      	adds	r4, r2, r3
 8001ad6:	f7ff f857 	bl	8000b88 <__aeabi_d2iz>
 8001ada:	4603      	mov	r3, r0
 8001adc:	6023      	str	r3, [r4, #0]

    			  /*************************NTC CALCULATION*********************************/

    	}

    	if(i==1)
 8001ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	f040 80ad 	bne.w	8001c40 <NTC_Array+0x2f8>
    	{
    		 ADC_ChannelConfTypeDef sConfig = {0};
 8001ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
    		    		 sConfig.Channel = ADC_CHANNEL_2;
 8001af4:	2302      	movs	r3, #2
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
    		    		 sConfig.Rank = 1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    		    		 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001afc:	2300      	movs	r3, #0
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
    		    			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b04:	4619      	mov	r1, r3
 8001b06:	4874      	ldr	r0, [pc, #464]	; (8001cd8 <NTC_Array+0x390>)
 8001b08:	f002 f98c 	bl	8003e24 <HAL_ADC_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <NTC_Array+0x1ce>
    		    			  {
    		    			      Error_Handler();
 8001b12:	f001 fbdf 	bl	80032d4 <Error_Handler>
    		    			  }
    		    			  HAL_ADC_Start(&hadc1);
 8001b16:	4870      	ldr	r0, [pc, #448]	; (8001cd8 <NTC_Array+0x390>)
 8001b18:	f002 f804 	bl	8003b24 <HAL_ADC_Start>
    		    			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	486d      	ldr	r0, [pc, #436]	; (8001cd8 <NTC_Array+0x390>)
 8001b22:	f002 f8e6 	bl	8003cf2 <HAL_ADC_PollForConversion>
    		    			  NTC_ADC_Buffer[i] = HAL_ADC_GetValue(&hadc1);
 8001b26:	486c      	ldr	r0, [pc, #432]	; (8001cd8 <NTC_Array+0x390>)
 8001b28:	f002 f96e 	bl	8003e08 <HAL_ADC_GetValue>
 8001b2c:	ee07 0a90 	vmov	s15, r0
 8001b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b34:	4a69      	ldr	r2, [pc, #420]	; (8001cdc <NTC_Array+0x394>)
 8001b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	edc3 7a00 	vstr	s15, [r3]
    		    			  HAL_ADC_Stop(&hadc1);
 8001b40:	4865      	ldr	r0, [pc, #404]	; (8001cd8 <NTC_Array+0x390>)
 8001b42:	f002 f8a3 	bl	8003c8c <HAL_ADC_Stop>
//
//    		    			  NTC_Data[i] = Kelvin - 273.15;



    		    			  float resistance = Divider_Resistor * (4095.0 / NTC_ADC_Buffer[i] - 1);
 8001b46:	4b66      	ldr	r3, [pc, #408]	; (8001ce0 <NTC_Array+0x398>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd14 	bl	8000578 <__aeabi_f2d>
 8001b50:	4604      	mov	r4, r0
 8001b52:	460d      	mov	r5, r1
 8001b54:	4a61      	ldr	r2, [pc, #388]	; (8001cdc <NTC_Array+0x394>)
 8001b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fd0a 	bl	8000578 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	a157      	add	r1, pc, #348	; (adr r1, 8001cc8 <NTC_Array+0x380>)
 8001b6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b6e:	f7fe fe85 	bl	800087c <__aeabi_ddiv>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4b59      	ldr	r3, [pc, #356]	; (8001ce4 <NTC_Array+0x39c>)
 8001b80:	f7fe fb9a 	bl	80002b8 <__aeabi_dsub>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4620      	mov	r0, r4
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	f7fe fd4c 	bl	8000628 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f81e 	bl	8000bd8 <__aeabi_d2f>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	653b      	str	r3, [r7, #80]	; 0x50

    		    			  NTC_Data[i] = 1.0 / ((log(resistance / Divider_Resistor)) / T1_Bvalue + 1.0 / T0) - 273.15;
 8001ba0:	4b4f      	ldr	r3, [pc, #316]	; (8001ce0 <NTC_Array+0x398>)
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001baa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bae:	ee16 0a90 	vmov	r0, s13
 8001bb2:	f7fe fce1 	bl	8000578 <__aeabi_f2d>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	ec43 2b10 	vmov	d0, r2, r3
 8001bbe:	f00e f82b 	bl	800fc18 <log>
 8001bc2:	ec55 4b10 	vmov	r4, r5, d0
 8001bc6:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <NTC_Array+0x3a0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcd4 	bl	8000578 <__aeabi_f2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	f7fe fe50 	bl	800087c <__aeabi_ddiv>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4614      	mov	r4, r2
 8001be2:	461d      	mov	r5, r3
 8001be4:	4b41      	ldr	r3, [pc, #260]	; (8001cec <NTC_Array+0x3a4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fcc5 	bl	8000578 <__aeabi_f2d>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	f04f 0000 	mov.w	r0, #0
 8001bf6:	493b      	ldr	r1, [pc, #236]	; (8001ce4 <NTC_Array+0x39c>)
 8001bf8:	f7fe fe40 	bl	800087c <__aeabi_ddiv>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe fb5a 	bl	80002bc <__adddf3>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	f04f 0000 	mov.w	r0, #0
 8001c10:	4934      	ldr	r1, [pc, #208]	; (8001ce4 <NTC_Array+0x39c>)
 8001c12:	f7fe fe33 	bl	800087c <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	a32c      	add	r3, pc, #176	; (adr r3, 8001cd0 <NTC_Array+0x388>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fb48 	bl	80002b8 <__aeabi_dsub>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c36:	18d4      	adds	r4, r2, r3
 8001c38:	f7fe ffa6 	bl	8000b88 <__aeabi_d2iz>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	6023      	str	r3, [r4, #0]

    		    			  /*************************NTC CALCULATION*********************************/
    	}
    	if(i==2)
 8001c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	f040 80c5 	bne.w	8001dd2 <NTC_Array+0x48a>
    	{
    		 ADC_ChannelConfTypeDef sConfig = {0};
 8001c48:	f107 0318 	add.w	r3, r7, #24
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
    		    		 sConfig.Channel = ADC_CHANNEL_3;
 8001c56:	2303      	movs	r3, #3
 8001c58:	61bb      	str	r3, [r7, #24]
    		    		 sConfig.Rank = 1;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	61fb      	str	r3, [r7, #28]
    		    		 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
    		    			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c62:	f107 0318 	add.w	r3, r7, #24
 8001c66:	4619      	mov	r1, r3
 8001c68:	481b      	ldr	r0, [pc, #108]	; (8001cd8 <NTC_Array+0x390>)
 8001c6a:	f002 f8db 	bl	8003e24 <HAL_ADC_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <NTC_Array+0x330>
    		    			  {
    		    			      Error_Handler();
 8001c74:	f001 fb2e 	bl	80032d4 <Error_Handler>
    		    			  }
    		    			  HAL_ADC_Start(&hadc1);
 8001c78:	4817      	ldr	r0, [pc, #92]	; (8001cd8 <NTC_Array+0x390>)
 8001c7a:	f001 ff53 	bl	8003b24 <HAL_ADC_Start>
    		    			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001c7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c82:	4815      	ldr	r0, [pc, #84]	; (8001cd8 <NTC_Array+0x390>)
 8001c84:	f002 f835 	bl	8003cf2 <HAL_ADC_PollForConversion>
    		    			  NTC_ADC_Buffer[i] = HAL_ADC_GetValue(&hadc1);
 8001c88:	4813      	ldr	r0, [pc, #76]	; (8001cd8 <NTC_Array+0x390>)
 8001c8a:	f002 f8bd 	bl	8003e08 <HAL_ADC_GetValue>
 8001c8e:	ee07 0a90 	vmov	s15, r0
 8001c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c96:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <NTC_Array+0x394>)
 8001c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	edc3 7a00 	vstr	s15, [r3]
    		    			  HAL_ADC_Stop(&hadc1);
 8001ca2:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <NTC_Array+0x390>)
 8001ca4:	f001 fff2 	bl	8003c8c <HAL_ADC_Stop>
//
//    		    			  float logR = log(Res / Divider_Resistor);
//
//    		    			  NTC_Data[i] = 1.0 / ((logR / T2_Bvalue) + (1.0 / T0)) - 275.15;

    		    			  float resistance = Divider_Resistor * (4095.0 / NTC_ADC_Buffer[i] - 1);
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <NTC_Array+0x398>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc63 	bl	8000578 <__aeabi_f2d>
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	460d      	mov	r5, r1
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <NTC_Array+0x394>)
 8001cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	e016      	b.n	8001cf0 <NTC_Array+0x3a8>
 8001cc2:	bf00      	nop
 8001cc4:	f3af 8000 	nop.w
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	40affe00 	.word	0x40affe00
 8001cd0:	66666666 	.word	0x66666666
 8001cd4:	40711266 	.word	0x40711266
 8001cd8:	2000240c 	.word	0x2000240c
 8001cdc:	20000228 	.word	0x20000228
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	3ff00000 	.word	0x3ff00000
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	20000004 	.word	0x20000004
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc41 	bl	8000578 <__aeabi_f2d>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	a197      	add	r1, pc, #604	; (adr r1, 8001f58 <NTC_Array+0x610>)
 8001cfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d00:	f7fe fdbc 	bl	800087c <__aeabi_ddiv>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	4b93      	ldr	r3, [pc, #588]	; (8001f60 <NTC_Array+0x618>)
 8001d12:	f7fe fad1 	bl	80002b8 <__aeabi_dsub>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f7fe fc83 	bl	8000628 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7fe ff55 	bl	8000bd8 <__aeabi_d2f>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	64fb      	str	r3, [r7, #76]	; 0x4c

    		    			  NTC_Data[i] = 1.0 / ((log(resistance / Divider_Resistor)) / T1_Bvalue + 1.0 / T0) - 273.15;
 8001d32:	4b8c      	ldr	r3, [pc, #560]	; (8001f64 <NTC_Array+0x61c>)
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001d3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d40:	ee16 0a90 	vmov	r0, s13
 8001d44:	f7fe fc18 	bl	8000578 <__aeabi_f2d>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	ec43 2b10 	vmov	d0, r2, r3
 8001d50:	f00d ff62 	bl	800fc18 <log>
 8001d54:	ec55 4b10 	vmov	r4, r5, d0
 8001d58:	4b83      	ldr	r3, [pc, #524]	; (8001f68 <NTC_Array+0x620>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fc0b 	bl	8000578 <__aeabi_f2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4620      	mov	r0, r4
 8001d68:	4629      	mov	r1, r5
 8001d6a:	f7fe fd87 	bl	800087c <__aeabi_ddiv>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4614      	mov	r4, r2
 8001d74:	461d      	mov	r5, r3
 8001d76:	4b7d      	ldr	r3, [pc, #500]	; (8001f6c <NTC_Array+0x624>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fbfc 	bl	8000578 <__aeabi_f2d>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	f04f 0000 	mov.w	r0, #0
 8001d88:	4975      	ldr	r1, [pc, #468]	; (8001f60 <NTC_Array+0x618>)
 8001d8a:	f7fe fd77 	bl	800087c <__aeabi_ddiv>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4620      	mov	r0, r4
 8001d94:	4629      	mov	r1, r5
 8001d96:	f7fe fa91 	bl	80002bc <__adddf3>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	f04f 0000 	mov.w	r0, #0
 8001da2:	496f      	ldr	r1, [pc, #444]	; (8001f60 <NTC_Array+0x618>)
 8001da4:	f7fe fd6a 	bl	800087c <__aeabi_ddiv>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	a367      	add	r3, pc, #412	; (adr r3, 8001f50 <NTC_Array+0x608>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fa7f 	bl	80002b8 <__aeabi_dsub>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dc8:	18d4      	adds	r4, r2, r3
 8001dca:	f7fe fedd 	bl	8000b88 <__aeabi_d2iz>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6023      	str	r3, [r4, #0]
    		    			  /*************************NTC CALCULATION*********************************/

    	}
    	if(i==3)
 8001dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	f040 80ad 	bne.w	8001f34 <NTC_Array+0x5ec>
    	{
    		 ADC_ChannelConfTypeDef sConfig = {0};
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
    		    		 sConfig.Channel = ADC_CHANNEL_4;
 8001de8:	2304      	movs	r3, #4
 8001dea:	60bb      	str	r3, [r7, #8]
    		    		 sConfig.Rank = 1;
 8001dec:	2301      	movs	r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
    		    		 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
    		    			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	4619      	mov	r1, r3
 8001dfa:	485d      	ldr	r0, [pc, #372]	; (8001f70 <NTC_Array+0x628>)
 8001dfc:	f002 f812 	bl	8003e24 <HAL_ADC_ConfigChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <NTC_Array+0x4c2>
    		    			  {
    		    			      Error_Handler();
 8001e06:	f001 fa65 	bl	80032d4 <Error_Handler>
    		    			  }
    		    			  HAL_ADC_Start(&hadc1);
 8001e0a:	4859      	ldr	r0, [pc, #356]	; (8001f70 <NTC_Array+0x628>)
 8001e0c:	f001 fe8a 	bl	8003b24 <HAL_ADC_Start>
    		    			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	4856      	ldr	r0, [pc, #344]	; (8001f70 <NTC_Array+0x628>)
 8001e16:	f001 ff6c 	bl	8003cf2 <HAL_ADC_PollForConversion>
    		    			  NTC_ADC_Buffer[i] = HAL_ADC_GetValue(&hadc1);
 8001e1a:	4855      	ldr	r0, [pc, #340]	; (8001f70 <NTC_Array+0x628>)
 8001e1c:	f001 fff4 	bl	8003e08 <HAL_ADC_GetValue>
 8001e20:	ee07 0a90 	vmov	s15, r0
 8001e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e28:	4a52      	ldr	r2, [pc, #328]	; (8001f74 <NTC_Array+0x62c>)
 8001e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	edc3 7a00 	vstr	s15, [r3]
    		    			  HAL_ADC_Stop(&hadc1);
 8001e34:	484e      	ldr	r0, [pc, #312]	; (8001f70 <NTC_Array+0x628>)
 8001e36:	f001 ff29 	bl	8003c8c <HAL_ADC_Stop>
//
//    		    			  float logR = log(Res / Divider_Resistor);
//
//    		    			  NTC_Data[i] = 1.0 / ((logR / T2_Bvalue) + (1.0 / T0)) - 275.15;

    		    			  float resistance = Divider_Resistor * (4095.0 / NTC_ADC_Buffer[i] - 1);
 8001e3a:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <NTC_Array+0x61c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fb9a 	bl	8000578 <__aeabi_f2d>
 8001e44:	4604      	mov	r4, r0
 8001e46:	460d      	mov	r5, r1
 8001e48:	4a4a      	ldr	r2, [pc, #296]	; (8001f74 <NTC_Array+0x62c>)
 8001e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb90 	bl	8000578 <__aeabi_f2d>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	a13e      	add	r1, pc, #248	; (adr r1, 8001f58 <NTC_Array+0x610>)
 8001e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e62:	f7fe fd0b 	bl	800087c <__aeabi_ddiv>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <NTC_Array+0x618>)
 8001e74:	f7fe fa20 	bl	80002b8 <__aeabi_dsub>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	f7fe fbd2 	bl	8000628 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7fe fea4 	bl	8000bd8 <__aeabi_d2f>
 8001e90:	4603      	mov	r3, r0
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48

    		    			  NTC_Data[i] = 1.0 / ((log(resistance / Divider_Resistor)) / T1_Bvalue + 1.0 / T0) - 273.15;
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <NTC_Array+0x61c>)
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001e9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ea2:	ee16 0a90 	vmov	r0, s13
 8001ea6:	f7fe fb67 	bl	8000578 <__aeabi_f2d>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	ec43 2b10 	vmov	d0, r2, r3
 8001eb2:	f00d feb1 	bl	800fc18 <log>
 8001eb6:	ec55 4b10 	vmov	r4, r5, d0
 8001eba:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <NTC_Array+0x620>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fb5a 	bl	8000578 <__aeabi_f2d>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4620      	mov	r0, r4
 8001eca:	4629      	mov	r1, r5
 8001ecc:	f7fe fcd6 	bl	800087c <__aeabi_ddiv>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4614      	mov	r4, r2
 8001ed6:	461d      	mov	r5, r3
 8001ed8:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <NTC_Array+0x624>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fb4b 	bl	8000578 <__aeabi_f2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	f04f 0000 	mov.w	r0, #0
 8001eea:	491d      	ldr	r1, [pc, #116]	; (8001f60 <NTC_Array+0x618>)
 8001eec:	f7fe fcc6 	bl	800087c <__aeabi_ddiv>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	f7fe f9e0 	bl	80002bc <__adddf3>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	f04f 0000 	mov.w	r0, #0
 8001f04:	4916      	ldr	r1, [pc, #88]	; (8001f60 <NTC_Array+0x618>)
 8001f06:	f7fe fcb9 	bl	800087c <__aeabi_ddiv>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	a30f      	add	r3, pc, #60	; (adr r3, 8001f50 <NTC_Array+0x608>)
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	f7fe f9ce 	bl	80002b8 <__aeabi_dsub>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f2a:	18d4      	adds	r4, r2, r3
 8001f2c:	f7fe fe2c 	bl	8000b88 <__aeabi_d2iz>
 8001f30:	4603      	mov	r3, r0
 8001f32:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < Tot_Sensor; i++) {
 8001f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f36:	3301      	adds	r3, #1
 8001f38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	f6ff ad1c 	blt.w	800197c <NTC_Array+0x34>


    }

    // Return the pointer to the allocated NTC_Data
    return NTC_Data;
 8001f44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3760      	adds	r7, #96	; 0x60
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	66666666 	.word	0x66666666
 8001f54:	40711266 	.word	0x40711266
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	40affe00 	.word	0x40affe00
 8001f60:	3ff00000 	.word	0x3ff00000
 8001f64:	20000000 	.word	0x20000000
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	2000240c 	.word	0x2000240c
 8001f74:	20000228 	.word	0x20000228

08001f78 <PresureSensorData>:


float Pressure_Adc =0;

float PresureSensorData(float P_SENS)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	ed87 0a01 	vstr	s0, [r7, #4]
				 ADC_ChannelConfTypeDef sConfig = {0};
 8001f82:	f107 0308 	add.w	r3, r7, #8
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
	    		 sConfig.Channel = ADC_CHANNEL_7;
 8001f90:	2307      	movs	r3, #7
 8001f92:	60bb      	str	r3, [r7, #8]
	    		 sConfig.Rank = 1;
 8001f94:	2301      	movs	r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
	    		 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]
	    			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f9c:	f107 0308 	add.w	r3, r7, #8
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	483f      	ldr	r0, [pc, #252]	; (80020a0 <PresureSensorData+0x128>)
 8001fa4:	f001 ff3e 	bl	8003e24 <HAL_ADC_ConfigChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <PresureSensorData+0x3a>
	    			  {
	    			      Error_Handler();
 8001fae:	f001 f991 	bl	80032d4 <Error_Handler>
	    			  }
	    			  HAL_ADC_Start(&hadc1);
 8001fb2:	483b      	ldr	r0, [pc, #236]	; (80020a0 <PresureSensorData+0x128>)
 8001fb4:	f001 fdb6 	bl	8003b24 <HAL_ADC_Start>
	    			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbc:	4838      	ldr	r0, [pc, #224]	; (80020a0 <PresureSensorData+0x128>)
 8001fbe:	f001 fe98 	bl	8003cf2 <HAL_ADC_PollForConversion>
	    			  Pressure_Adc = HAL_ADC_GetValue(&hadc1);
 8001fc2:	4837      	ldr	r0, [pc, #220]	; (80020a0 <PresureSensorData+0x128>)
 8001fc4:	f001 ff20 	bl	8003e08 <HAL_ADC_GetValue>
 8001fc8:	ee07 0a90 	vmov	s15, r0
 8001fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fd0:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <PresureSensorData+0x12c>)
 8001fd2:	edc3 7a00 	vstr	s15, [r3]
	    			  HAL_ADC_Stop(&hadc1);
 8001fd6:	4832      	ldr	r0, [pc, #200]	; (80020a0 <PresureSensorData+0x128>)
 8001fd8:	f001 fe58 	bl	8003c8c <HAL_ADC_Stop>

	    			 float p_volt = (Pressure_Adc * Volt_Ref) /ADC_Res;
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <PresureSensorData+0x12c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fac9 	bl	8000578 <__aeabi_f2d>
 8001fe6:	a328      	add	r3, pc, #160	; (adr r3, 8002088 <PresureSensorData+0x110>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fb1c 	bl	8000628 <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	a325      	add	r3, pc, #148	; (adr r3, 8002090 <PresureSensorData+0x118>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	f7fe fc3d 	bl	800087c <__aeabi_ddiv>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4610      	mov	r0, r2
 8002008:	4619      	mov	r1, r3
 800200a:	f7fe fde5 	bl	8000bd8 <__aeabi_d2f>
 800200e:	4603      	mov	r3, r0
 8002010:	61fb      	str	r3, [r7, #28]
	    			 float Pressure = (p_volt / Volt_Ref) / 0.01155; //  1.5-3.5mV/V and 3.3V swing as per the circuit:
 8002012:	69f8      	ldr	r0, [r7, #28]
 8002014:	f7fe fab0 	bl	8000578 <__aeabi_f2d>
 8002018:	a31b      	add	r3, pc, #108	; (adr r3, 8002088 <PresureSensorData+0x110>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe fc2d 	bl	800087c <__aeabi_ddiv>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	a31b      	add	r3, pc, #108	; (adr r3, 8002098 <PresureSensorData+0x120>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe fc24 	bl	800087c <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fdcc 	bl	8000bd8 <__aeabi_d2f>
 8002040:	4603      	mov	r3, r0
 8002042:	61bb      	str	r3, [r7, #24]
	    			 if (!isfinite(Pressure) || isnan(Pressure))
 8002044:	edd7 7a06 	vldr	s15, [r7, #24]
 8002048:	eef0 7ae7 	vabs.f32	s15, s15
 800204c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80020a8 <PresureSensorData+0x130>
 8002050:	eef4 7a47 	vcmp.f32	s15, s14
 8002054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002058:	d808      	bhi.n	800206c <PresureSensorData+0xf4>
 800205a:	ed97 7a06 	vldr	s14, [r7, #24]
 800205e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002062:	eeb4 7a67 	vcmp.f32	s14, s15
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	d702      	bvc.n	8002072 <PresureSensorData+0xfa>
	    			{
	    				 return 0.0; // Return 0 if value is -inf, inf, or nan
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	e000      	b.n	8002074 <PresureSensorData+0xfc>
	    			}

	    			 return Pressure;
 8002072:	69bb      	ldr	r3, [r7, #24]

}
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eeb0 0a67 	vmov.f32	s0, s15
 800207c:	3720      	adds	r7, #32
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	f3af 8000 	nop.w
 8002088:	66666666 	.word	0x66666666
 800208c:	400a6666 	.word	0x400a6666
 8002090:	00000000 	.word	0x00000000
 8002094:	40affe00 	.word	0x40affe00
 8002098:	c226809d 	.word	0xc226809d
 800209c:	3f87a786 	.word	0x3f87a786
 80020a0:	2000240c 	.word	0x2000240c
 80020a4:	20000238 	.word	0x20000238
 80020a8:	7f7fffff 	.word	0x7f7fffff

080020ac <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_SDIO_SD_Init(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
	 hsd.Instance = SDIO;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <MX_SDIO_SD_Init+0x38>)
 80020b2:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <MX_SDIO_SD_Init+0x3c>)
 80020b4:	601a      	str	r2, [r3, #0]
		  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <MX_SDIO_SD_Init+0x38>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
		  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <MX_SDIO_SD_Init+0x38>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
		  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <MX_SDIO_SD_Init+0x38>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	60da      	str	r2, [r3, #12]
		  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <MX_SDIO_SD_Init+0x38>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
		  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <MX_SDIO_SD_Init+0x38>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
		  hsd.Init.ClockDiv = 6;
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <MX_SDIO_SD_Init+0x38>)
 80020d6:	2206      	movs	r2, #6
 80020d8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	200024a8 	.word	0x200024a8
 80020e8:	40012c00 	.word	0x40012c00

080020ec <SD_Card_Test>:
 FILINFO fno;
 DIR dir;  //Dir
 FRESULT fresult;  // result
 UINT br, bw;  // File read/write count

uint8_t SD_Card_Test() {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	fresult = f_mount( & fs, "/", 1);
 80020f0:	2201      	movs	r2, #1
 80020f2:	4912      	ldr	r1, [pc, #72]	; (800213c <SD_Card_Test+0x50>)
 80020f4:	4812      	ldr	r0, [pc, #72]	; (8002140 <SD_Card_Test+0x54>)
 80020f6:	f009 fc1d 	bl	800b934 <f_mount>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <SD_Card_Test+0x58>)
 8002100:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <SD_Card_Test+0x58>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <SD_Card_Test+0x2a>
  {
    UART_Printf("xxxxxxxxxxCHECK SD CARD(SD card is must to store data)xxxxxxxxxx\n");
 800210a:	480f      	ldr	r0, [pc, #60]	; (8002148 <SD_Card_Test+0x5c>)
 800210c:	f000 fe6e 	bl	8002dec <UART_Printf>
    return fresult;
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <SD_Card_Test+0x58>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	e00f      	b.n	8002136 <SD_Card_Test+0x4a>
  }
  HAL_Delay(50);
 8002116:	2032      	movs	r0, #50	; 0x32
 8002118:	f001 fc7c 	bl	8003a14 <HAL_Delay>
  UART_Printf("*************SD_CARD_WORKING_FINE*************\n");
 800211c:	480b      	ldr	r0, [pc, #44]	; (800214c <SD_Card_Test+0x60>)
 800211e:	f000 fe65 	bl	8002dec <UART_Printf>
  HAL_Delay(50);
 8002122:	2032      	movs	r0, #50	; 0x32
 8002124:	f001 fc76 	bl	8003a14 <HAL_Delay>
  f_mount(NULL, "", 0);
 8002128:	2200      	movs	r2, #0
 800212a:	4909      	ldr	r1, [pc, #36]	; (8002150 <SD_Card_Test+0x64>)
 800212c:	2000      	movs	r0, #0
 800212e:	f009 fc01 	bl	800b934 <f_mount>
  return fresult;
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SD_Card_Test+0x58>)
 8002134:	781b      	ldrb	r3, [r3, #0]
}
 8002136:	4618      	mov	r0, r3
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	08010804 	.word	0x08010804
 8002140:	20000364 	.word	0x20000364
 8002144:	20002400 	.word	0x20002400
 8002148:	08010808 	.word	0x08010808
 800214c:	0801084c 	.word	0x0801084c
 8002150:	0801087c 	.word	0x0801087c

08002154 <File_Number_Create>:



uint8_t File_Number_Create()
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0

	fresult = f_mount( & fs, "/", 1);
 8002158:	2201      	movs	r2, #1
 800215a:	4943      	ldr	r1, [pc, #268]	; (8002268 <File_Number_Create+0x114>)
 800215c:	4843      	ldr	r0, [pc, #268]	; (800226c <File_Number_Create+0x118>)
 800215e:	f009 fbe9 	bl	800b934 <f_mount>
 8002162:	4603      	mov	r3, r0
 8002164:	461a      	mov	r2, r3
 8002166:	4b42      	ldr	r3, [pc, #264]	; (8002270 <File_Number_Create+0x11c>)
 8002168:	701a      	strb	r2, [r3, #0]
	  if (fresult != FR_OK)
 800216a:	4b41      	ldr	r3, [pc, #260]	; (8002270 <File_Number_Create+0x11c>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00d      	beq.n	800218e <File_Number_Create+0x3a>
	  {
		f_closedir(&dir);
 8002172:	4840      	ldr	r0, [pc, #256]	; (8002274 <File_Number_Create+0x120>)
 8002174:	f00a fc22 	bl	800c9bc <f_closedir>
		f_mount(NULL, "", 0);
 8002178:	2200      	movs	r2, #0
 800217a:	493f      	ldr	r1, [pc, #252]	; (8002278 <File_Number_Create+0x124>)
 800217c:	2000      	movs	r0, #0
 800217e:	f009 fbd9 	bl	800b934 <f_mount>
	    UART_Printf("SD CARD MOUNT ISSUE IN FILE_NUMBER_CREATE FUNCTION\n");
 8002182:	483e      	ldr	r0, [pc, #248]	; (800227c <File_Number_Create+0x128>)
 8002184:	f000 fe32 	bl	8002dec <UART_Printf>
	    return fresult;
 8002188:	4b39      	ldr	r3, [pc, #228]	; (8002270 <File_Number_Create+0x11c>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	e069      	b.n	8002262 <File_Number_Create+0x10e>
	  }
	  HAL_Delay(50);
 800218e:	2032      	movs	r0, #50	; 0x32
 8002190:	f001 fc40 	bl	8003a14 <HAL_Delay>

	fresult = f_opendir(&dir, "/");
 8002194:	4934      	ldr	r1, [pc, #208]	; (8002268 <File_Number_Create+0x114>)
 8002196:	4837      	ldr	r0, [pc, #220]	; (8002274 <File_Number_Create+0x120>)
 8002198:	f00a fb9d 	bl	800c8d6 <f_opendir>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	4b33      	ldr	r3, [pc, #204]	; (8002270 <File_Number_Create+0x11c>)
 80021a2:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80021a4:	4b32      	ldr	r3, [pc, #200]	; (8002270 <File_Number_Create+0x11c>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <File_Number_Create+0x64>
	 {
		UART_Printf("SD CARD DIR OPEN ISSUE IN FILE_NUMBER_CREATE FUNCTION\n");
 80021ac:	4834      	ldr	r0, [pc, #208]	; (8002280 <File_Number_Create+0x12c>)
 80021ae:	f000 fe1d 	bl	8002dec <UART_Printf>
		return fresult;
 80021b2:	4b2f      	ldr	r3, [pc, #188]	; (8002270 <File_Number_Create+0x11c>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	e054      	b.n	8002262 <File_Number_Create+0x10e>
	 }
	fresult = f_stat("File_Number.txt", & fileInfo);
 80021b8:	4932      	ldr	r1, [pc, #200]	; (8002284 <File_Number_Create+0x130>)
 80021ba:	4833      	ldr	r0, [pc, #204]	; (8002288 <File_Number_Create+0x134>)
 80021bc:	f00a fc24 	bl	800ca08 <f_stat>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b2a      	ldr	r3, [pc, #168]	; (8002270 <File_Number_Create+0x11c>)
 80021c6:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_NO_FILE)
 80021c8:	4b29      	ldr	r3, [pc, #164]	; (8002270 <File_Number_Create+0x11c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d011      	beq.n	80021f4 <File_Number_Create+0xa0>
	{
		UART_Printf("File_Number.txt already present\n");
 80021d0:	482e      	ldr	r0, [pc, #184]	; (800228c <File_Number_Create+0x138>)
 80021d2:	f000 fe0b 	bl	8002dec <UART_Printf>
		f_closedir(&dir);
 80021d6:	4827      	ldr	r0, [pc, #156]	; (8002274 <File_Number_Create+0x120>)
 80021d8:	f00a fbf0 	bl	800c9bc <f_closedir>
		fresult = f_mount(NULL, "", 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	4926      	ldr	r1, [pc, #152]	; (8002278 <File_Number_Create+0x124>)
 80021e0:	2000      	movs	r0, #0
 80021e2:	f009 fba7 	bl	800b934 <f_mount>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <File_Number_Create+0x11c>)
 80021ec:	701a      	strb	r2, [r3, #0]
		return fresult;
 80021ee:	4b20      	ldr	r3, [pc, #128]	; (8002270 <File_Number_Create+0x11c>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	e036      	b.n	8002262 <File_Number_Create+0x10e>
	}
	else
	{
		fresult = f_open(&fil, "File_Number.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 80021f4:	220b      	movs	r2, #11
 80021f6:	4924      	ldr	r1, [pc, #144]	; (8002288 <File_Number_Create+0x134>)
 80021f8:	4825      	ldr	r0, [pc, #148]	; (8002290 <File_Number_Create+0x13c>)
 80021fa:	f009 fbe1 	bl	800b9c0 <f_open>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <File_Number_Create+0x11c>)
 8002204:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <File_Number_Create+0x11c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d011      	beq.n	8002232 <File_Number_Create+0xde>
		{
			UART_Printf("Problem to create File_Number.txt\n");
 800220e:	4821      	ldr	r0, [pc, #132]	; (8002294 <File_Number_Create+0x140>)
 8002210:	f000 fdec 	bl	8002dec <UART_Printf>
			return fresult;
		}
	}


	f_closedir(&dir);
 8002214:	4817      	ldr	r0, [pc, #92]	; (8002274 <File_Number_Create+0x120>)
 8002216:	f00a fbd1 	bl	800c9bc <f_closedir>
	fresult = f_mount(NULL, "", 0);
 800221a:	2200      	movs	r2, #0
 800221c:	4916      	ldr	r1, [pc, #88]	; (8002278 <File_Number_Create+0x124>)
 800221e:	2000      	movs	r0, #0
 8002220:	f009 fb88 	bl	800b934 <f_mount>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <File_Number_Create+0x11c>)
 800222a:	701a      	strb	r2, [r3, #0]
	return fresult;
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <File_Number_Create+0x11c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	e017      	b.n	8002262 <File_Number_Create+0x10e>
			UART_Printf("New File_Number.txt created\n");
 8002232:	4819      	ldr	r0, [pc, #100]	; (8002298 <File_Number_Create+0x144>)
 8002234:	f000 fdda 	bl	8002dec <UART_Printf>
			f_puts("1", &fil);
 8002238:	4915      	ldr	r1, [pc, #84]	; (8002290 <File_Number_Create+0x13c>)
 800223a:	4818      	ldr	r0, [pc, #96]	; (800229c <File_Number_Create+0x148>)
 800223c:	f00a fcd1 	bl	800cbe2 <f_puts>
			f_close(&fil);
 8002240:	4813      	ldr	r0, [pc, #76]	; (8002290 <File_Number_Create+0x13c>)
 8002242:	f00a f8fa 	bl	800c43a <f_close>
			f_closedir(&dir);
 8002246:	480b      	ldr	r0, [pc, #44]	; (8002274 <File_Number_Create+0x120>)
 8002248:	f00a fbb8 	bl	800c9bc <f_closedir>
			fresult = f_mount(NULL, "", 0);
 800224c:	2200      	movs	r2, #0
 800224e:	490a      	ldr	r1, [pc, #40]	; (8002278 <File_Number_Create+0x124>)
 8002250:	2000      	movs	r0, #0
 8002252:	f009 fb6f 	bl	800b934 <f_mount>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <File_Number_Create+0x11c>)
 800225c:	701a      	strb	r2, [r3, #0]
			return fresult;
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <File_Number_Create+0x11c>)
 8002260:	781b      	ldrb	r3, [r3, #0]
}
 8002262:	4618      	mov	r0, r3
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	08010804 	.word	0x08010804
 800226c:	20000364 	.word	0x20000364
 8002270:	20002400 	.word	0x20002400
 8002274:	200023cc 	.word	0x200023cc
 8002278:	0801087c 	.word	0x0801087c
 800227c:	08010880 	.word	0x08010880
 8002280:	080108b4 	.word	0x080108b4
 8002284:	2000024c 	.word	0x2000024c
 8002288:	080108ec 	.word	0x080108ec
 800228c:	080108fc 	.word	0x080108fc
 8002290:	2000139c 	.word	0x2000139c
 8002294:	08010920 	.word	0x08010920
 8002298:	08010944 	.word	0x08010944
 800229c:	08010964 	.word	0x08010964

080022a0 <Num_Sys_Create>:




uint8_t Num_Sys_Create()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	fresult = f_mount( & fs, "/", 1);
 80022a4:	2201      	movs	r2, #1
 80022a6:	4943      	ldr	r1, [pc, #268]	; (80023b4 <Num_Sys_Create+0x114>)
 80022a8:	4843      	ldr	r0, [pc, #268]	; (80023b8 <Num_Sys_Create+0x118>)
 80022aa:	f009 fb43 	bl	800b934 <f_mount>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b42      	ldr	r3, [pc, #264]	; (80023bc <Num_Sys_Create+0x11c>)
 80022b4:	701a      	strb	r2, [r3, #0]
		  if (fresult != FR_OK)
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <Num_Sys_Create+0x11c>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00d      	beq.n	80022da <Num_Sys_Create+0x3a>
		  {
			f_closedir(&dir);
 80022be:	4840      	ldr	r0, [pc, #256]	; (80023c0 <Num_Sys_Create+0x120>)
 80022c0:	f00a fb7c 	bl	800c9bc <f_closedir>
			f_mount(NULL, "", 0);
 80022c4:	2200      	movs	r2, #0
 80022c6:	493f      	ldr	r1, [pc, #252]	; (80023c4 <Num_Sys_Create+0x124>)
 80022c8:	2000      	movs	r0, #0
 80022ca:	f009 fb33 	bl	800b934 <f_mount>
		    UART_Printf("SD CARD MOUNT ISSUE IN Num_Sys FUNCTION\n");
 80022ce:	483e      	ldr	r0, [pc, #248]	; (80023c8 <Num_Sys_Create+0x128>)
 80022d0:	f000 fd8c 	bl	8002dec <UART_Printf>
		    return fresult;
 80022d4:	4b39      	ldr	r3, [pc, #228]	; (80023bc <Num_Sys_Create+0x11c>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	e069      	b.n	80023ae <Num_Sys_Create+0x10e>
		  }
		  HAL_Delay(50);
 80022da:	2032      	movs	r0, #50	; 0x32
 80022dc:	f001 fb9a 	bl	8003a14 <HAL_Delay>

		fresult = f_opendir(&dir, "/");
 80022e0:	4934      	ldr	r1, [pc, #208]	; (80023b4 <Num_Sys_Create+0x114>)
 80022e2:	4837      	ldr	r0, [pc, #220]	; (80023c0 <Num_Sys_Create+0x120>)
 80022e4:	f00a faf7 	bl	800c8d6 <f_opendir>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b33      	ldr	r3, [pc, #204]	; (80023bc <Num_Sys_Create+0x11c>)
 80022ee:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <Num_Sys_Create+0x11c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <Num_Sys_Create+0x64>
		 {
			UART_Printf("SD CARD DIR OPEN ISSUE IN FILE_NUMBER_CREATE FUNCTION\n");
 80022f8:	4834      	ldr	r0, [pc, #208]	; (80023cc <Num_Sys_Create+0x12c>)
 80022fa:	f000 fd77 	bl	8002dec <UART_Printf>
			return fresult;
 80022fe:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <Num_Sys_Create+0x11c>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	e054      	b.n	80023ae <Num_Sys_Create+0x10e>
		 }
		fresult = f_stat("Num_Sys.txt", & fileInfo);
 8002304:	4932      	ldr	r1, [pc, #200]	; (80023d0 <Num_Sys_Create+0x130>)
 8002306:	4833      	ldr	r0, [pc, #204]	; (80023d4 <Num_Sys_Create+0x134>)
 8002308:	f00a fb7e 	bl	800ca08 <f_stat>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <Num_Sys_Create+0x11c>)
 8002312:	701a      	strb	r2, [r3, #0]
		if(fresult != FR_NO_FILE)
 8002314:	4b29      	ldr	r3, [pc, #164]	; (80023bc <Num_Sys_Create+0x11c>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d011      	beq.n	8002340 <Num_Sys_Create+0xa0>
		{
			UART_Printf("Num_Sys.txt already present\n");
 800231c:	482e      	ldr	r0, [pc, #184]	; (80023d8 <Num_Sys_Create+0x138>)
 800231e:	f000 fd65 	bl	8002dec <UART_Printf>
			f_closedir(&dir);
 8002322:	4827      	ldr	r0, [pc, #156]	; (80023c0 <Num_Sys_Create+0x120>)
 8002324:	f00a fb4a 	bl	800c9bc <f_closedir>
			fresult = f_mount(NULL, "", 0);
 8002328:	2200      	movs	r2, #0
 800232a:	4926      	ldr	r1, [pc, #152]	; (80023c4 <Num_Sys_Create+0x124>)
 800232c:	2000      	movs	r0, #0
 800232e:	f009 fb01 	bl	800b934 <f_mount>
 8002332:	4603      	mov	r3, r0
 8002334:	461a      	mov	r2, r3
 8002336:	4b21      	ldr	r3, [pc, #132]	; (80023bc <Num_Sys_Create+0x11c>)
 8002338:	701a      	strb	r2, [r3, #0]
			return fresult;
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <Num_Sys_Create+0x11c>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	e036      	b.n	80023ae <Num_Sys_Create+0x10e>
		}
		else
		{
			fresult = f_open(&fil, "Num_Sys.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8002340:	220b      	movs	r2, #11
 8002342:	4924      	ldr	r1, [pc, #144]	; (80023d4 <Num_Sys_Create+0x134>)
 8002344:	4825      	ldr	r0, [pc, #148]	; (80023dc <Num_Sys_Create+0x13c>)
 8002346:	f009 fb3b 	bl	800b9c0 <f_open>
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <Num_Sys_Create+0x11c>)
 8002350:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8002352:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <Num_Sys_Create+0x11c>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d011      	beq.n	800237e <Num_Sys_Create+0xde>
			{
				UART_Printf("Problem to create Num_Sys.txt\n");
 800235a:	4821      	ldr	r0, [pc, #132]	; (80023e0 <Num_Sys_Create+0x140>)
 800235c:	f000 fd46 	bl	8002dec <UART_Printf>
				return fresult;
			}
		}


		f_closedir(&dir);
 8002360:	4817      	ldr	r0, [pc, #92]	; (80023c0 <Num_Sys_Create+0x120>)
 8002362:	f00a fb2b 	bl	800c9bc <f_closedir>
		fresult = f_mount(NULL, "", 0);
 8002366:	2200      	movs	r2, #0
 8002368:	4916      	ldr	r1, [pc, #88]	; (80023c4 <Num_Sys_Create+0x124>)
 800236a:	2000      	movs	r0, #0
 800236c:	f009 fae2 	bl	800b934 <f_mount>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <Num_Sys_Create+0x11c>)
 8002376:	701a      	strb	r2, [r3, #0]
		return fresult;
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <Num_Sys_Create+0x11c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	e017      	b.n	80023ae <Num_Sys_Create+0x10e>
				UART_Printf("New Num_Sys.txt created\n");
 800237e:	4819      	ldr	r0, [pc, #100]	; (80023e4 <Num_Sys_Create+0x144>)
 8002380:	f000 fd34 	bl	8002dec <UART_Printf>
				f_puts("GERMAN", &fil);
 8002384:	4915      	ldr	r1, [pc, #84]	; (80023dc <Num_Sys_Create+0x13c>)
 8002386:	4818      	ldr	r0, [pc, #96]	; (80023e8 <Num_Sys_Create+0x148>)
 8002388:	f00a fc2b 	bl	800cbe2 <f_puts>
				fresult = f_close(&fil);
 800238c:	4813      	ldr	r0, [pc, #76]	; (80023dc <Num_Sys_Create+0x13c>)
 800238e:	f00a f854 	bl	800c43a <f_close>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <Num_Sys_Create+0x11c>)
 8002398:	701a      	strb	r2, [r3, #0]
				f_closedir(&dir);
 800239a:	4809      	ldr	r0, [pc, #36]	; (80023c0 <Num_Sys_Create+0x120>)
 800239c:	f00a fb0e 	bl	800c9bc <f_closedir>
				f_mount(NULL, "", 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	4908      	ldr	r1, [pc, #32]	; (80023c4 <Num_Sys_Create+0x124>)
 80023a4:	2000      	movs	r0, #0
 80023a6:	f009 fac5 	bl	800b934 <f_mount>
				return fresult;
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <Num_Sys_Create+0x11c>)
 80023ac:	781b      	ldrb	r3, [r3, #0]

}
 80023ae:	4618      	mov	r0, r3
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	08010804 	.word	0x08010804
 80023b8:	20000364 	.word	0x20000364
 80023bc:	20002400 	.word	0x20002400
 80023c0:	200023cc 	.word	0x200023cc
 80023c4:	0801087c 	.word	0x0801087c
 80023c8:	08010968 	.word	0x08010968
 80023cc:	080108b4 	.word	0x080108b4
 80023d0:	2000024c 	.word	0x2000024c
 80023d4:	08010994 	.word	0x08010994
 80023d8:	080109a0 	.word	0x080109a0
 80023dc:	2000139c 	.word	0x2000139c
 80023e0:	080109c0 	.word	0x080109c0
 80023e4:	080109e0 	.word	0x080109e0
 80023e8:	080109fc 	.word	0x080109fc

080023ec <HTML_File_Create>:
uint8_t HTML_File_Create()
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
	fresult = f_mount( & fs, "/", 1);
 80023f2:	2201      	movs	r2, #1
 80023f4:	4958      	ldr	r1, [pc, #352]	; (8002558 <HTML_File_Create+0x16c>)
 80023f6:	4859      	ldr	r0, [pc, #356]	; (800255c <HTML_File_Create+0x170>)
 80023f8:	f009 fa9c 	bl	800b934 <f_mount>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	4b57      	ldr	r3, [pc, #348]	; (8002560 <HTML_File_Create+0x174>)
 8002402:	701a      	strb	r2, [r3, #0]
			  if (fresult != FR_OK)
 8002404:	4b56      	ldr	r3, [pc, #344]	; (8002560 <HTML_File_Create+0x174>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00d      	beq.n	8002428 <HTML_File_Create+0x3c>
			  {
				f_closedir(&dir);
 800240c:	4855      	ldr	r0, [pc, #340]	; (8002564 <HTML_File_Create+0x178>)
 800240e:	f00a fad5 	bl	800c9bc <f_closedir>
				f_mount(NULL, "", 0);
 8002412:	2200      	movs	r2, #0
 8002414:	4954      	ldr	r1, [pc, #336]	; (8002568 <HTML_File_Create+0x17c>)
 8002416:	2000      	movs	r0, #0
 8002418:	f009 fa8c 	bl	800b934 <f_mount>
			    UART_Printf("SD CARD MOUNT ISSUE IN HTML file FUNCTION\n");
 800241c:	4853      	ldr	r0, [pc, #332]	; (800256c <HTML_File_Create+0x180>)
 800241e:	f000 fce5 	bl	8002dec <UART_Printf>
			    return fresult;
 8002422:	4b4f      	ldr	r3, [pc, #316]	; (8002560 <HTML_File_Create+0x174>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	e092      	b.n	800254e <HTML_File_Create+0x162>
			  }
			  HAL_Delay(50);
 8002428:	2032      	movs	r0, #50	; 0x32
 800242a:	f001 faf3 	bl	8003a14 <HAL_Delay>

			fresult = f_opendir(&dir, "/");
 800242e:	494a      	ldr	r1, [pc, #296]	; (8002558 <HTML_File_Create+0x16c>)
 8002430:	484c      	ldr	r0, [pc, #304]	; (8002564 <HTML_File_Create+0x178>)
 8002432:	f00a fa50 	bl	800c8d6 <f_opendir>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	4b49      	ldr	r3, [pc, #292]	; (8002560 <HTML_File_Create+0x174>)
 800243c:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 800243e:	4b48      	ldr	r3, [pc, #288]	; (8002560 <HTML_File_Create+0x174>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HTML_File_Create+0x66>
			 {
				UART_Printf("SD CARD DIR OPEN ISSUE IN HTML file FUNCTION\n");
 8002446:	484a      	ldr	r0, [pc, #296]	; (8002570 <HTML_File_Create+0x184>)
 8002448:	f000 fcd0 	bl	8002dec <UART_Printf>
				return fresult;
 800244c:	4b44      	ldr	r3, [pc, #272]	; (8002560 <HTML_File_Create+0x174>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	e07d      	b.n	800254e <HTML_File_Create+0x162>
			 }
			fresult = f_stat("index.html", & fileInfo);
 8002452:	4948      	ldr	r1, [pc, #288]	; (8002574 <HTML_File_Create+0x188>)
 8002454:	4848      	ldr	r0, [pc, #288]	; (8002578 <HTML_File_Create+0x18c>)
 8002456:	f00a fad7 	bl	800ca08 <f_stat>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	4b40      	ldr	r3, [pc, #256]	; (8002560 <HTML_File_Create+0x174>)
 8002460:	701a      	strb	r2, [r3, #0]
			if(fresult != FR_NO_FILE)
 8002462:	4b3f      	ldr	r3, [pc, #252]	; (8002560 <HTML_File_Create+0x174>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b04      	cmp	r3, #4
 8002468:	d011      	beq.n	800248e <HTML_File_Create+0xa2>
			{
				UART_Printf("index.html already present\n");
 800246a:	4844      	ldr	r0, [pc, #272]	; (800257c <HTML_File_Create+0x190>)
 800246c:	f000 fcbe 	bl	8002dec <UART_Printf>
				f_closedir(&dir);
 8002470:	483c      	ldr	r0, [pc, #240]	; (8002564 <HTML_File_Create+0x178>)
 8002472:	f00a faa3 	bl	800c9bc <f_closedir>
				fresult = f_mount(NULL, "", 0);
 8002476:	2200      	movs	r2, #0
 8002478:	493b      	ldr	r1, [pc, #236]	; (8002568 <HTML_File_Create+0x17c>)
 800247a:	2000      	movs	r0, #0
 800247c:	f009 fa5a 	bl	800b934 <f_mount>
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	4b36      	ldr	r3, [pc, #216]	; (8002560 <HTML_File_Create+0x174>)
 8002486:	701a      	strb	r2, [r3, #0]
				return fresult;
 8002488:	4b35      	ldr	r3, [pc, #212]	; (8002560 <HTML_File_Create+0x174>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	e05f      	b.n	800254e <HTML_File_Create+0x162>
			}
			else
			{
				fresult = f_open(&fil, "index.html", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 800248e:	220b      	movs	r2, #11
 8002490:	4939      	ldr	r1, [pc, #228]	; (8002578 <HTML_File_Create+0x18c>)
 8002492:	483b      	ldr	r0, [pc, #236]	; (8002580 <HTML_File_Create+0x194>)
 8002494:	f009 fa94 	bl	800b9c0 <f_open>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	4b30      	ldr	r3, [pc, #192]	; (8002560 <HTML_File_Create+0x174>)
 800249e:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 80024a0:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <HTML_File_Create+0x174>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HTML_File_Create+0xc4>
				{
					UART_Printf("Problem to create index.html\n");
 80024a8:	4836      	ldr	r0, [pc, #216]	; (8002584 <HTML_File_Create+0x198>)
 80024aa:	f000 fc9f 	bl	8002dec <UART_Printf>
 80024ae:	e005      	b.n	80024bc <HTML_File_Create+0xd0>
				}
				else
				{
					UART_Printf("New index.html created\n");
 80024b0:	4835      	ldr	r0, [pc, #212]	; (8002588 <HTML_File_Create+0x19c>)
 80024b2:	f000 fc9b 	bl	8002dec <UART_Printf>
					f_close(&fil);
 80024b6:	4832      	ldr	r0, [pc, #200]	; (8002580 <HTML_File_Create+0x194>)
 80024b8:	f009 ffbf 	bl	800c43a <f_close>

				}
			}

			fresult = f_open(&fil, "Num_Sys.txt", FA_READ | FA_WRITE);
 80024bc:	2203      	movs	r2, #3
 80024be:	4933      	ldr	r1, [pc, #204]	; (800258c <HTML_File_Create+0x1a0>)
 80024c0:	482f      	ldr	r0, [pc, #188]	; (8002580 <HTML_File_Create+0x194>)
 80024c2:	f009 fa7d 	bl	800b9c0 <f_open>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HTML_File_Create+0x174>)
 80024cc:	701a      	strb	r2, [r3, #0]
			f_gets(Num_File_Data, sizeof(Num_File_Data), & fil);
 80024ce:	4a2c      	ldr	r2, [pc, #176]	; (8002580 <HTML_File_Create+0x194>)
 80024d0:	210a      	movs	r1, #10
 80024d2:	482f      	ldr	r0, [pc, #188]	; (8002590 <HTML_File_Create+0x1a4>)
 80024d4:	f00a fad1 	bl	800ca7a <f_gets>
			f_close(&fil);
 80024d8:	4829      	ldr	r0, [pc, #164]	; (8002580 <HTML_File_Create+0x194>)
 80024da:	f009 ffae 	bl	800c43a <f_close>
			char sys1[] = {"GERMAN"};
 80024de:	4a2d      	ldr	r2, [pc, #180]	; (8002594 <HTML_File_Create+0x1a8>)
 80024e0:	463b      	mov	r3, r7
 80024e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024e6:	6018      	str	r0, [r3, #0]
 80024e8:	3304      	adds	r3, #4
 80024ea:	8019      	strh	r1, [r3, #0]
 80024ec:	3302      	adds	r3, #2
 80024ee:	0c0a      	lsrs	r2, r1, #16
 80024f0:	701a      	strb	r2, [r3, #0]
			f_open(&fil, "index.html", FA_READ | FA_WRITE);
 80024f2:	2203      	movs	r2, #3
 80024f4:	4920      	ldr	r1, [pc, #128]	; (8002578 <HTML_File_Create+0x18c>)
 80024f6:	4822      	ldr	r0, [pc, #136]	; (8002580 <HTML_File_Create+0x194>)
 80024f8:	f009 fa62 	bl	800b9c0 <f_open>
			UART_Printf("-----------------Pls wait File Loading--------------------- \n");
 80024fc:	4826      	ldr	r0, [pc, #152]	; (8002598 <HTML_File_Create+0x1ac>)
 80024fe:	f000 fc75 	bl	8002dec <UART_Printf>
			(strcmp(Num_File_Data,sys1)==0)? f_puts(GERMAN, & fil) : f_puts(USA, & fil);
 8002502:	463b      	mov	r3, r7
 8002504:	4619      	mov	r1, r3
 8002506:	4822      	ldr	r0, [pc, #136]	; (8002590 <HTML_File_Create+0x1a4>)
 8002508:	f7fd fe6a 	bl	80001e0 <strcmp>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d104      	bne.n	800251c <HTML_File_Create+0x130>
 8002512:	491b      	ldr	r1, [pc, #108]	; (8002580 <HTML_File_Create+0x194>)
 8002514:	4821      	ldr	r0, [pc, #132]	; (800259c <HTML_File_Create+0x1b0>)
 8002516:	f00a fb64 	bl	800cbe2 <f_puts>
 800251a:	e003      	b.n	8002524 <HTML_File_Create+0x138>
 800251c:	4918      	ldr	r1, [pc, #96]	; (8002580 <HTML_File_Create+0x194>)
 800251e:	4820      	ldr	r0, [pc, #128]	; (80025a0 <HTML_File_Create+0x1b4>)
 8002520:	f00a fb5f 	bl	800cbe2 <f_puts>
			HAL_Delay(10000);
 8002524:	f242 7010 	movw	r0, #10000	; 0x2710
 8002528:	f001 fa74 	bl	8003a14 <HAL_Delay>
//				 	f_mount(NULL, "", 0);
//				 	return 1;
//			  }
//			  else
//			  {
			f_close(&fil);
 800252c:	4814      	ldr	r0, [pc, #80]	; (8002580 <HTML_File_Create+0x194>)
 800252e:	f009 ff84 	bl	800c43a <f_close>
			f_closedir(&dir);
 8002532:	480c      	ldr	r0, [pc, #48]	; (8002564 <HTML_File_Create+0x178>)
 8002534:	f00a fa42 	bl	800c9bc <f_closedir>
			fresult = f_mount(NULL, "", 0);
 8002538:	2200      	movs	r2, #0
 800253a:	490b      	ldr	r1, [pc, #44]	; (8002568 <HTML_File_Create+0x17c>)
 800253c:	2000      	movs	r0, #0
 800253e:	f009 f9f9 	bl	800b934 <f_mount>
 8002542:	4603      	mov	r3, r0
 8002544:	461a      	mov	r2, r3
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <HTML_File_Create+0x174>)
 8002548:	701a      	strb	r2, [r3, #0]
			return fresult;
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HTML_File_Create+0x174>)
 800254c:	781b      	ldrb	r3, [r3, #0]
//			  }



}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	08010804 	.word	0x08010804
 800255c:	20000364 	.word	0x20000364
 8002560:	20002400 	.word	0x20002400
 8002564:	200023cc 	.word	0x200023cc
 8002568:	0801087c 	.word	0x0801087c
 800256c:	08010a04 	.word	0x08010a04
 8002570:	08010a30 	.word	0x08010a30
 8002574:	2000024c 	.word	0x2000024c
 8002578:	08010a60 	.word	0x08010a60
 800257c:	08010a6c 	.word	0x08010a6c
 8002580:	2000139c 	.word	0x2000139c
 8002584:	08010a88 	.word	0x08010a88
 8002588:	08010aa8 	.word	0x08010aa8
 800258c:	08010994 	.word	0x08010994
 8002590:	20000240 	.word	0x20000240
 8002594:	080109fc 	.word	0x080109fc
 8002598:	08010ac0 	.word	0x08010ac0
 800259c:	08010db8 	.word	0x08010db8
 80025a0:	08014608 	.word	0x08014608

080025a4 <Read_Log_Number>:

uint8_t Read_Log_Number(uint8_t FileNo)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]



	char File_No[10];
	f_mount(&fs, "", 1);
 80025ae:	2201      	movs	r2, #1
 80025b0:	4915      	ldr	r1, [pc, #84]	; (8002608 <Read_Log_Number+0x64>)
 80025b2:	4816      	ldr	r0, [pc, #88]	; (800260c <Read_Log_Number+0x68>)
 80025b4:	f009 f9be 	bl	800b934 <f_mount>
	f_opendir(&dir, "/");
 80025b8:	4915      	ldr	r1, [pc, #84]	; (8002610 <Read_Log_Number+0x6c>)
 80025ba:	4816      	ldr	r0, [pc, #88]	; (8002614 <Read_Log_Number+0x70>)
 80025bc:	f00a f98b 	bl	800c8d6 <f_opendir>
	fresult = f_open(&fil, "File_Number.txt", FA_READ | FA_WRITE);
 80025c0:	2203      	movs	r2, #3
 80025c2:	4915      	ldr	r1, [pc, #84]	; (8002618 <Read_Log_Number+0x74>)
 80025c4:	4815      	ldr	r0, [pc, #84]	; (800261c <Read_Log_Number+0x78>)
 80025c6:	f009 f9fb 	bl	800b9c0 <f_open>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <Read_Log_Number+0x7c>)
 80025d0:	701a      	strb	r2, [r3, #0]
	f_gets(File_No, sizeof(File_No), &fil);
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	4a11      	ldr	r2, [pc, #68]	; (800261c <Read_Log_Number+0x78>)
 80025d8:	210a      	movs	r1, #10
 80025da:	4618      	mov	r0, r3
 80025dc:	f00a fa4d 	bl	800ca7a <f_gets>
	f_close(&fil);
 80025e0:	480e      	ldr	r0, [pc, #56]	; (800261c <Read_Log_Number+0x78>)
 80025e2:	f009 ff2a 	bl	800c43a <f_close>
	f_closedir(&dir);
 80025e6:	480b      	ldr	r0, [pc, #44]	; (8002614 <Read_Log_Number+0x70>)
 80025e8:	f00a f9e8 	bl	800c9bc <f_closedir>
	f_mount(NULL, "", 0);
 80025ec:	2200      	movs	r2, #0
 80025ee:	4906      	ldr	r1, [pc, #24]	; (8002608 <Read_Log_Number+0x64>)
 80025f0:	2000      	movs	r0, #0
 80025f2:	f009 f99f 	bl	800b934 <f_mount>
	FileNo = (uint8_t)(File_No[0] - '0');
 80025f6:	7b3b      	ldrb	r3, [r7, #12]
 80025f8:	3b30      	subs	r3, #48	; 0x30
 80025fa:	71fb      	strb	r3, [r7, #7]
	return FileNo;
 80025fc:	79fb      	ldrb	r3, [r7, #7]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	0801087c 	.word	0x0801087c
 800260c:	20000364 	.word	0x20000364
 8002610:	08010804 	.word	0x08010804
 8002614:	200023cc 	.word	0x200023cc
 8002618:	080108ec 	.word	0x080108ec
 800261c:	2000139c 	.word	0x2000139c
 8002620:	20002400 	.word	0x20002400

08002624 <Read_Number_Sys>:


uint8_t Read_Number_Sys(uint8_t sys_type)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
	uint8_t system_type = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	77fb      	strb	r3, [r7, #31]
	char File_No[9];
	f_mount(&fs, "", 1);
 8002632:	2201      	movs	r2, #1
 8002634:	4920      	ldr	r1, [pc, #128]	; (80026b8 <Read_Number_Sys+0x94>)
 8002636:	4821      	ldr	r0, [pc, #132]	; (80026bc <Read_Number_Sys+0x98>)
 8002638:	f009 f97c 	bl	800b934 <f_mount>
	f_opendir(&dir, "/");
 800263c:	4920      	ldr	r1, [pc, #128]	; (80026c0 <Read_Number_Sys+0x9c>)
 800263e:	4821      	ldr	r0, [pc, #132]	; (80026c4 <Read_Number_Sys+0xa0>)
 8002640:	f00a f949 	bl	800c8d6 <f_opendir>
	fresult = f_open(&fil, "Num_Sys.txt", FA_READ | FA_WRITE);
 8002644:	2203      	movs	r2, #3
 8002646:	4920      	ldr	r1, [pc, #128]	; (80026c8 <Read_Number_Sys+0xa4>)
 8002648:	4820      	ldr	r0, [pc, #128]	; (80026cc <Read_Number_Sys+0xa8>)
 800264a:	f009 f9b9 	bl	800b9c0 <f_open>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <Read_Number_Sys+0xac>)
 8002654:	701a      	strb	r2, [r3, #0]
	f_gets(File_No, sizeof(File_No), &fil);
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <Read_Number_Sys+0xa8>)
 800265c:	2109      	movs	r1, #9
 800265e:	4618      	mov	r0, r3
 8002660:	f00a fa0b 	bl	800ca7a <f_gets>
	f_close(&fil);
 8002664:	4819      	ldr	r0, [pc, #100]	; (80026cc <Read_Number_Sys+0xa8>)
 8002666:	f009 fee8 	bl	800c43a <f_close>
	f_closedir(&dir);
 800266a:	4816      	ldr	r0, [pc, #88]	; (80026c4 <Read_Number_Sys+0xa0>)
 800266c:	f00a f9a6 	bl	800c9bc <f_closedir>
	f_mount(NULL, "", 0);
 8002670:	2200      	movs	r2, #0
 8002672:	4911      	ldr	r1, [pc, #68]	; (80026b8 <Read_Number_Sys+0x94>)
 8002674:	2000      	movs	r0, #0
 8002676:	f009 f95d 	bl	800b934 <f_mount>
	char sys1[] = {"GERMAN"};
 800267a:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <Read_Number_Sys+0xb0>)
 800267c:	f107 030c 	add.w	r3, r7, #12
 8002680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002684:	6018      	str	r0, [r3, #0]
 8002686:	3304      	adds	r3, #4
 8002688:	8019      	strh	r1, [r3, #0]
 800268a:	3302      	adds	r3, #2
 800268c:	0c0a      	lsrs	r2, r1, #16
 800268e:	701a      	strb	r2, [r3, #0]
	system_type = (strcmp(File_No , sys1)==0) ? 1 : 2;
 8002690:	f107 020c 	add.w	r2, r7, #12
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd fda0 	bl	80001e0 <strcmp>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <Read_Number_Sys+0x86>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <Read_Number_Sys+0x88>
 80026aa:	2302      	movs	r3, #2
 80026ac:	77fb      	strb	r3, [r7, #31]
	return system_type;
 80026ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	0801087c 	.word	0x0801087c
 80026bc:	20000364 	.word	0x20000364
 80026c0:	08010804 	.word	0x08010804
 80026c4:	200023cc 	.word	0x200023cc
 80026c8:	08010994 	.word	0x08010994
 80026cc:	2000139c 	.word	0x2000139c
 80026d0:	20002400 	.word	0x20002400
 80026d4:	080109fc 	.word	0x080109fc

080026d8 <Create_DataLog_File>:



void Create_DataLog_File()
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0

    char File[20];
    NumberSystem = Read_Number_Sys(NumberSystem);
 80026de:	4b25      	ldr	r3, [pc, #148]	; (8002774 <Create_DataLog_File+0x9c>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff9e 	bl	8002624 <Read_Number_Sys>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b21      	ldr	r3, [pc, #132]	; (8002774 <Create_DataLog_File+0x9c>)
 80026ee:	701a      	strb	r2, [r3, #0]
    sprintf(File, "%s%d.csv", File_Name, Current_Log_File_No);
 80026f0:	4b21      	ldr	r3, [pc, #132]	; (8002778 <Create_DataLog_File+0xa0>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	4638      	mov	r0, r7
 80026f6:	4a21      	ldr	r2, [pc, #132]	; (800277c <Create_DataLog_File+0xa4>)
 80026f8:	4921      	ldr	r1, [pc, #132]	; (8002780 <Create_DataLog_File+0xa8>)
 80026fa:	f00b f9a7 	bl	800da4c <siprintf>
    fresult = f_mount(&fs, "", 1);
 80026fe:	2201      	movs	r2, #1
 8002700:	4920      	ldr	r1, [pc, #128]	; (8002784 <Create_DataLog_File+0xac>)
 8002702:	4821      	ldr	r0, [pc, #132]	; (8002788 <Create_DataLog_File+0xb0>)
 8002704:	f009 f916 	bl	800b934 <f_mount>
 8002708:	4603      	mov	r3, r0
 800270a:	461a      	mov	r2, r3
 800270c:	4b1f      	ldr	r3, [pc, #124]	; (800278c <Create_DataLog_File+0xb4>)
 800270e:	701a      	strb	r2, [r3, #0]
    f_opendir(&dir, "/");
 8002710:	491f      	ldr	r1, [pc, #124]	; (8002790 <Create_DataLog_File+0xb8>)
 8002712:	4820      	ldr	r0, [pc, #128]	; (8002794 <Create_DataLog_File+0xbc>)
 8002714:	f00a f8df 	bl	800c8d6 <f_opendir>
    fresult = f_open(&fil, File, FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8002718:	463b      	mov	r3, r7
 800271a:	220b      	movs	r2, #11
 800271c:	4619      	mov	r1, r3
 800271e:	481e      	ldr	r0, [pc, #120]	; (8002798 <Create_DataLog_File+0xc0>)
 8002720:	f009 f94e 	bl	800b9c0 <f_open>
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <Create_DataLog_File+0xb4>)
 800272a:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800272c:	4b17      	ldr	r3, [pc, #92]	; (800278c <Create_DataLog_File+0xb4>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d112      	bne.n	800275a <Create_DataLog_File+0x82>
    {

    	const char* header = (NumberSystem == 1)
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <Create_DataLog_File+0x9c>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <Create_DataLog_File+0x68>
 800273c:	4b17      	ldr	r3, [pc, #92]	; (800279c <Create_DataLog_File+0xc4>)
 800273e:	e000      	b.n	8002742 <Create_DataLog_File+0x6a>
 8002740:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <Create_DataLog_File+0xc8>)
 8002742:	617b      	str	r3, [r7, #20]
    	    ? "Time; X-axis; Y-axis; Z-axis; On_brd_TEMP; TEMP1; TEMP2; TEMP3; 40khz;R_Water;Pressure; Sleep_cnt \n"
    	    : "Time, X-axis, Y-axis, Z-axis, On_brd_TEMP, TEMP1, TEMP2, TEMP3, 40khz,R_Water,Pressure, Sleep_cnt \n";

    	f_puts(header, &fil);
 8002744:	4914      	ldr	r1, [pc, #80]	; (8002798 <Create_DataLog_File+0xc0>)
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f00a fa4b 	bl	800cbe2 <f_puts>
        f_close(&fil);
 800274c:	4812      	ldr	r0, [pc, #72]	; (8002798 <Create_DataLog_File+0xc0>)
 800274e:	f009 fe74 	bl	800c43a <f_close>
        UART_Printf("Data_log file created and attributes loaded\n");
 8002752:	4814      	ldr	r0, [pc, #80]	; (80027a4 <Create_DataLog_File+0xcc>)
 8002754:	f000 fb4a 	bl	8002dec <UART_Printf>
 8002758:	e002      	b.n	8002760 <Create_DataLog_File+0x88>
    }
    else
    {
        UART_Printf("Issue while open Data_log file \n");
 800275a:	4813      	ldr	r0, [pc, #76]	; (80027a8 <Create_DataLog_File+0xd0>)
 800275c:	f000 fb46 	bl	8002dec <UART_Printf>
    }
    f_mount(NULL, "", 0);
 8002760:	2200      	movs	r2, #0
 8002762:	4908      	ldr	r1, [pc, #32]	; (8002784 <Create_DataLog_File+0xac>)
 8002764:	2000      	movs	r0, #0
 8002766:	f009 f8e5 	bl	800b934 <f_mount>
}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000024a 	.word	0x2000024a
 8002778:	20002605 	.word	0x20002605
 800277c:	08017e50 	.word	0x08017e50
 8002780:	08010b00 	.word	0x08010b00
 8002784:	0801087c 	.word	0x0801087c
 8002788:	20000364 	.word	0x20000364
 800278c:	20002400 	.word	0x20002400
 8002790:	08010804 	.word	0x08010804
 8002794:	200023cc 	.word	0x200023cc
 8002798:	2000139c 	.word	0x2000139c
 800279c:	08010b0c 	.word	0x08010b0c
 80027a0:	08010b70 	.word	0x08010b70
 80027a4:	08010bd4 	.word	0x08010bd4
 80027a8:	08010c04 	.word	0x08010c04

080027ac <DATA_LOG>:

//extern DataSet Store_Data();

void DATA_LOG()
{
 80027ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b0:	b0ec      	sub	sp, #432	; 0x1b0
 80027b2:	af16      	add	r7, sp, #88	; 0x58
	 char buffer[200];

	 DataSet data = Store_Data();
 80027b4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80027b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe ff11 	bl	80015e4 <Store_Data>

	  if(NumberSystem==2)//USA
 80027c2:	4bb4      	ldr	r3, [pc, #720]	; (8002a94 <DATA_LOG+0x2e8>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	f040 80a4 	bne.w	8002914 <DATA_LOG+0x168>
	  {
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 80027cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80027d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fece 	bl	8000578 <__aeabi_f2d>
 80027dc:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 80027e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80027e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fec4 	bl	8000578 <__aeabi_f2d>
 80027f0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80027f4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80027f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd feba 	bl	8000578 <__aeabi_f2d>
 8002804:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8002808:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800280c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd feb0 	bl	8000578 <__aeabi_f2d>
 8002818:	e9c7 0108 	strd	r0, r1, [r7, #32]
					data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 800281c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002820:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002824:	691b      	ldr	r3, [r3, #16]
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fea6 	bl	8000578 <__aeabi_f2d>
 800282c:	e9c7 0106 	strd	r0, r1, [r7, #24]
					data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 8002830:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002834:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002838:	695b      	ldr	r3, [r3, #20]
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 800283a:	4618      	mov	r0, r3
 800283c:	f7fd fe9c 	bl	8000578 <__aeabi_f2d>
 8002840:	e9c7 0104 	strd	r0, r1, [r7, #16]
					data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 8002844:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002848:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800284c:	699b      	ldr	r3, [r3, #24]
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe92 	bl	8000578 <__aeabi_f2d>
 8002854:	e9c7 0102 	strd	r0, r1, [r7, #8]
					data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 8002858:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800285c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002860:	69db      	ldr	r3, [r3, #28]
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd fe88 	bl	8000578 <__aeabi_f2d>
 8002868:	e9c7 0100 	strd	r0, r1, [r7]
					data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 800286c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002870:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002874:	6a1b      	ldr	r3, [r3, #32]
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe7e 	bl	8000578 <__aeabi_f2d>
 800287c:	4682      	mov	sl, r0
 800287e:	468b      	mov	fp, r1
					data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 8002880:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002884:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 800288a:	4618      	mov	r0, r3
 800288c:	f7fd fe74 	bl	8000578 <__aeabi_f2d>
 8002890:	4680      	mov	r8, r0
 8002892:	4689      	mov	r9, r1
					data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 8002894:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002898:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe6a 	bl	8000578 <__aeabi_f2d>
 80028a4:	4604      	mov	r4, r0
 80028a6:	460d      	mov	r5, r1
					data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 80028a8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80028ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fe60 	bl	8000578 <__aeabi_f2d>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80028c0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80028c4:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 80028c8:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80028cc:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 80028d0:	ed97 7b00 	vldr	d7, [r7]
 80028d4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80028d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80028dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80028e0:	ed97 7b04 	vldr	d7, [r7, #16]
 80028e4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80028e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80028ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80028f0:	ed97 7b08 	vldr	d7, [r7, #32]
 80028f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80028f8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80028fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002900:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002904:	ed8d 7b00 	vstr	d7, [sp]
 8002908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800290c:	4962      	ldr	r1, [pc, #392]	; (8002a98 <DATA_LOG+0x2ec>)
 800290e:	f00b f89d 	bl	800da4c <siprintf>
 8002912:	e0d6      	b.n	8002ac2 <DATA_LOG+0x316>
	  }
	  else if(NumberSystem==1)//GERMAN
 8002914:	4b5f      	ldr	r3, [pc, #380]	; (8002a94 <DATA_LOG+0x2e8>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	f040 80d2 	bne.w	8002ac2 <DATA_LOG+0x316>
	  {
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 800291e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002922:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe25 	bl	8000578 <__aeabi_f2d>
 800292e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8002932:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002936:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fe1b 	bl	8000578 <__aeabi_f2d>
 8002942:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8002946:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800294a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fe11 	bl	8000578 <__aeabi_f2d>
 8002956:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 800295a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800295e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4618      	mov	r0, r3
 8002966:	f7fd fe07 	bl	8000578 <__aeabi_f2d>
 800296a:	e9c7 0108 	strd	r0, r1, [r7, #32]
				data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 800296e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002972:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002976:	691b      	ldr	r3, [r3, #16]
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fdfd 	bl	8000578 <__aeabi_f2d>
 800297e:	e9c7 0106 	strd	r0, r1, [r7, #24]
				data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 8002982:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002986:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800298a:	695b      	ldr	r3, [r3, #20]
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fdf3 	bl	8000578 <__aeabi_f2d>
 8002992:	e9c7 0104 	strd	r0, r1, [r7, #16]
				data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 8002996:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800299a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800299e:	699b      	ldr	r3, [r3, #24]
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fde9 	bl	8000578 <__aeabi_f2d>
 80029a6:	e9c7 0102 	strd	r0, r1, [r7, #8]
				data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 80029aa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029b2:	69db      	ldr	r3, [r3, #28]
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fddf 	bl	8000578 <__aeabi_f2d>
 80029ba:	e9c7 0100 	strd	r0, r1, [r7]
				data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 80029be:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029c6:	6a1b      	ldr	r3, [r3, #32]
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fdd5 	bl	8000578 <__aeabi_f2d>
 80029ce:	4682      	mov	sl, r0
 80029d0:	468b      	mov	fp, r1
				data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 80029d2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fdcb 	bl	8000578 <__aeabi_f2d>
 80029e2:	4680      	mov	r8, r0
 80029e4:	4689      	mov	r9, r1
				data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 80029e6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fdc1 	bl	8000578 <__aeabi_f2d>
 80029f6:	4604      	mov	r4, r0
 80029f8:	460d      	mov	r5, r1
				data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 80029fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fdb7 	bl	8000578 <__aeabi_f2d>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002a12:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8002a16:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8002a1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8002a1e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8002a22:	ed97 7b00 	vldr	d7, [r7]
 8002a26:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002a2a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a2e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002a32:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a36:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002a3a:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002a42:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a46:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002a4a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002a4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002a52:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002a56:	ed8d 7b00 	vstr	d7, [sp]
 8002a5a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a5e:	490f      	ldr	r1, [pc, #60]	; (8002a9c <DATA_LOG+0x2f0>)
 8002a60:	f00a fff4 	bl	800da4c <siprintf>

	  for( int i=0;i<sizeof(buffer);i++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a6a:	e026      	b.n	8002aba <DATA_LOG+0x30e>
	  {
		  switch (buffer[i])
 8002a6c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a70:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002a74:	4413      	add	r3, r2
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b2c      	cmp	r3, #44	; 0x2c
 8002a7a:	d002      	beq.n	8002a82 <DATA_LOG+0x2d6>
 8002a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8002a7e:	d00f      	beq.n	8002aa0 <DATA_LOG+0x2f4>
 8002a80:	e016      	b.n	8002ab0 <DATA_LOG+0x304>
		  {
		  case ',':
			  buffer[i]=';';
 8002a82:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a86:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002a8a:	4413      	add	r3, r2
 8002a8c:	223b      	movs	r2, #59	; 0x3b
 8002a8e:	701a      	strb	r2, [r3, #0]
			  break;
 8002a90:	e00e      	b.n	8002ab0 <DATA_LOG+0x304>
 8002a92:	bf00      	nop
 8002a94:	2000024a 	.word	0x2000024a
 8002a98:	08010c28 	.word	0x08010c28
 8002a9c:	08010c50 	.word	0x08010c50
		  case '.':
			  buffer[i] = ',';
 8002aa0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002aa4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002aa8:	4413      	add	r3, r2
 8002aaa:	222c      	movs	r2, #44	; 0x2c
 8002aac:	701a      	strb	r2, [r3, #0]
			  break;
 8002aae:	bf00      	nop
	  for( int i=0;i<sizeof(buffer);i++)
 8002ab0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002aba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002abe:	2bc7      	cmp	r3, #199	; 0xc7
 8002ac0:	d9d4      	bls.n	8002a6c <DATA_LOG+0x2c0>
	  }
	  }
	  }

	  	  int File_Size = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	  	  char temp[20];
	  	f_mount(&fs, "", 1);
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4932      	ldr	r1, [pc, #200]	; (8002b94 <DATA_LOG+0x3e8>)
 8002acc:	4832      	ldr	r0, [pc, #200]	; (8002b98 <DATA_LOG+0x3ec>)
 8002ace:	f008 ff31 	bl	800b934 <f_mount>
	  	f_opendir(&dir, "/");
 8002ad2:	4932      	ldr	r1, [pc, #200]	; (8002b9c <DATA_LOG+0x3f0>)
 8002ad4:	4832      	ldr	r0, [pc, #200]	; (8002ba0 <DATA_LOG+0x3f4>)
 8002ad6:	f009 fefe 	bl	800c8d6 <f_opendir>
	  	sprintf(temp, "%s%d.csv", File_Name,Current_Log_File_No);
 8002ada:	4b32      	ldr	r3, [pc, #200]	; (8002ba4 <DATA_LOG+0x3f8>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002ae2:	4a31      	ldr	r2, [pc, #196]	; (8002ba8 <DATA_LOG+0x3fc>)
 8002ae4:	4931      	ldr	r1, [pc, #196]	; (8002bac <DATA_LOG+0x400>)
 8002ae6:	f00a ffb1 	bl	800da4c <siprintf>
	  	f_open(&fil, temp, FA_READ | FA_WRITE);
 8002aea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002aee:	2203      	movs	r2, #3
 8002af0:	4619      	mov	r1, r3
 8002af2:	482f      	ldr	r0, [pc, #188]	; (8002bb0 <DATA_LOG+0x404>)
 8002af4:	f008 ff64 	bl	800b9c0 <f_open>
	  	f_lseek(&fil, f_size(&fil));
 8002af8:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <DATA_LOG+0x404>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4619      	mov	r1, r3
 8002afe:	482c      	ldr	r0, [pc, #176]	; (8002bb0 <DATA_LOG+0x404>)
 8002b00:	f009 fcc5 	bl	800c48e <f_lseek>
	  	fresult = f_puts(buffer, &fil);
 8002b04:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002b08:	4929      	ldr	r1, [pc, #164]	; (8002bb0 <DATA_LOG+0x404>)
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f00a f869 	bl	800cbe2 <f_puts>
 8002b10:	4603      	mov	r3, r0
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <DATA_LOG+0x408>)
 8002b16:	701a      	strb	r2, [r3, #0]
	  	f_stat(temp, &fileInfo);
 8002b18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b1c:	4926      	ldr	r1, [pc, #152]	; (8002bb8 <DATA_LOG+0x40c>)
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f009 ff72 	bl	800ca08 <f_stat>
	  	File_Size = fileInfo.fsize;
 8002b24:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <DATA_LOG+0x40c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	  	f_close(&fil);
 8002b2c:	4820      	ldr	r0, [pc, #128]	; (8002bb0 <DATA_LOG+0x404>)
 8002b2e:	f009 fc84 	bl	800c43a <f_close>
	  	f_closedir(&dir);
 8002b32:	481b      	ldr	r0, [pc, #108]	; (8002ba0 <DATA_LOG+0x3f4>)
 8002b34:	f009 ff42 	bl	800c9bc <f_closedir>
	  	f_mount(NULL, "", 0);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	4916      	ldr	r1, [pc, #88]	; (8002b94 <DATA_LOG+0x3e8>)
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f008 fef9 	bl	800b934 <f_mount>
	  	if(Log_File_Num == 0)
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <DATA_LOG+0x410>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	f083 0301 	eor.w	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <DATA_LOG+0x3ae>
	  	{
	  		Update_Log_Num();
 8002b50:	f000 f838 	bl	8002bc4 <Update_Log_Num>
	  		Log_File_Num = 1;
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <DATA_LOG+0x410>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
	    }
	  	UART_Printf("Data saved in log file = %s%d file size = %d Bytes   amp = %f\n",File_Name,Current_Log_File_No,File_Size,data.Amplitude);
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <DATA_LOG+0x3f8>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	461c      	mov	r4, r3
 8002b60:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002b64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fd04 	bl	8000578 <__aeabi_f2d>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	e9cd 2300 	strd	r2, r3, [sp]
 8002b78:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002b7c:	4622      	mov	r2, r4
 8002b7e:	490a      	ldr	r1, [pc, #40]	; (8002ba8 <DATA_LOG+0x3fc>)
 8002b80:	480f      	ldr	r0, [pc, #60]	; (8002bc0 <DATA_LOG+0x414>)
 8002b82:	f000 f933 	bl	8002dec <UART_Printf>
}
 8002b86:	bf00      	nop
 8002b88:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b92:	bf00      	nop
 8002b94:	0801087c 	.word	0x0801087c
 8002b98:	20000364 	.word	0x20000364
 8002b9c:	08010804 	.word	0x08010804
 8002ba0:	200023cc 	.word	0x200023cc
 8002ba4:	20002605 	.word	0x20002605
 8002ba8:	08017e50 	.word	0x08017e50
 8002bac:	08010b00 	.word	0x08010b00
 8002bb0:	2000139c 	.word	0x2000139c
 8002bb4:	20002400 	.word	0x20002400
 8002bb8:	2000024c 	.word	0x2000024c
 8002bbc:	2000023c 	.word	0x2000023c
 8002bc0:	08010c78 	.word	0x08010c78

08002bc4 <Update_Log_Num>:

void Update_Log_Num()
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
	uint8_t Log_Number = Current_Log_File_No+1;
 8002bca:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <Update_Log_Num+0x70>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
	char Log[10];
	sprintf(Log,"%d",Log_Number);
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	4918      	ldr	r1, [pc, #96]	; (8002c38 <Update_Log_Num+0x74>)
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f00a ff37 	bl	800da4c <siprintf>
	f_mount( & fs, "/", 1);
 8002bde:	2201      	movs	r2, #1
 8002be0:	4916      	ldr	r1, [pc, #88]	; (8002c3c <Update_Log_Num+0x78>)
 8002be2:	4817      	ldr	r0, [pc, #92]	; (8002c40 <Update_Log_Num+0x7c>)
 8002be4:	f008 fea6 	bl	800b934 <f_mount>
	f_opendir(&dir, "/");
 8002be8:	4914      	ldr	r1, [pc, #80]	; (8002c3c <Update_Log_Num+0x78>)
 8002bea:	4816      	ldr	r0, [pc, #88]	; (8002c44 <Update_Log_Num+0x80>)
 8002bec:	f009 fe73 	bl	800c8d6 <f_opendir>
	f_stat("File_Number.txt", & fileInfo);
 8002bf0:	4915      	ldr	r1, [pc, #84]	; (8002c48 <Update_Log_Num+0x84>)
 8002bf2:	4816      	ldr	r0, [pc, #88]	; (8002c4c <Update_Log_Num+0x88>)
 8002bf4:	f009 ff08 	bl	800ca08 <f_stat>
	f_open(&fil, "File_Number.txt", FA_WRITE | FA_READ);
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	4914      	ldr	r1, [pc, #80]	; (8002c4c <Update_Log_Num+0x88>)
 8002bfc:	4814      	ldr	r0, [pc, #80]	; (8002c50 <Update_Log_Num+0x8c>)
 8002bfe:	f008 fedf 	bl	800b9c0 <f_open>
	f_puts(Log, &fil);
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	4912      	ldr	r1, [pc, #72]	; (8002c50 <Update_Log_Num+0x8c>)
 8002c06:	4618      	mov	r0, r3
 8002c08:	f009 ffeb 	bl	800cbe2 <f_puts>
	f_close(&fil);
 8002c0c:	4810      	ldr	r0, [pc, #64]	; (8002c50 <Update_Log_Num+0x8c>)
 8002c0e:	f009 fc14 	bl	800c43a <f_close>
	f_closedir(&dir);
 8002c12:	480c      	ldr	r0, [pc, #48]	; (8002c44 <Update_Log_Num+0x80>)
 8002c14:	f009 fed2 	bl	800c9bc <f_closedir>
	f_mount(NULL, "", 0);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	490e      	ldr	r1, [pc, #56]	; (8002c54 <Update_Log_Num+0x90>)
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f008 fe89 	bl	800b934 <f_mount>
	UART_Printf("Log Number Updated %d \n",Log_Number);
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	4619      	mov	r1, r3
 8002c26:	480c      	ldr	r0, [pc, #48]	; (8002c58 <Update_Log_Num+0x94>)
 8002c28:	f000 f8e0 	bl	8002dec <UART_Printf>

}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20002605 	.word	0x20002605
 8002c38:	08010cb8 	.word	0x08010cb8
 8002c3c:	08010804 	.word	0x08010804
 8002c40:	20000364 	.word	0x20000364
 8002c44:	200023cc 	.word	0x200023cc
 8002c48:	2000024c 	.word	0x2000024c
 8002c4c:	080108ec 	.word	0x080108ec
 8002c50:	2000139c 	.word	0x2000139c
 8002c54:	0801087c 	.word	0x0801087c
 8002c58:	08010cbc 	.word	0x08010cbc

08002c5c <MX_TIM3_Init>:
#include "Define.h"
/**
 * @brief Initializes TIM3 for a specific purpose, like periodic interrupts.
 */
void MX_TIM3_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c62:	f107 0308 	add.w	r3, r7, #8
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c70:	463b      	mov	r3, r7
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	; (8002cf4 <MX_TIM3_Init+0x98>)
 8002c7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9199;
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002c80:	f242 32ef 	movw	r2, #9199	; 0x23ef
 8002c84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = ((Loop_Time*10)-1);
 8002c8c:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002c8e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002c92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c94:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ca0:	4813      	ldr	r0, [pc, #76]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002ca2:	f004 fc2f 	bl	8007504 <HAL_TIM_Base_Init>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002cac:	f000 fb12 	bl	80032d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cb6:	f107 0308 	add.w	r3, r7, #8
 8002cba:	4619      	mov	r1, r3
 8002cbc:	480c      	ldr	r0, [pc, #48]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002cbe:	f004 fdc3 	bl	8007848 <HAL_TIM_ConfigClockSource>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002cc8:	f000 fb04 	bl	80032d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cd4:	463b      	mov	r3, r7
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002cda:	f004 ffcb 	bl	8007c74 <HAL_TIMEx_MasterConfigSynchronization>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002ce4:	f000 faf6 	bl	80032d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ce8:	bf00      	nop
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	2000252c 	.word	0x2000252c
 8002cf4:	40000400 	.word	0x40000400

08002cf8 <MX_TIM4_Init>:

/**
 * @brief Initializes TIM4 for a specific purpose, like periodic interrupts.
 */
void MX_TIM4_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cfe:	f107 0308 	add.w	r3, r7, #8
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	609a      	str	r2, [r3, #8]
 8002d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d0c:	463b      	mov	r3, r7
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d14:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <MX_TIM4_Init+0x94>)
 8002d16:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <MX_TIM4_Init+0x98>)
 8002d18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9199;
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	; (8002d8c <MX_TIM4_Init+0x94>)
 8002d1c:	f242 32ef 	movw	r2, #9199	; 0x23ef
 8002d20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d22:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <MX_TIM4_Init+0x94>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = ((Sleep_Time*10)-1);
 8002d28:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <MX_TIM4_Init+0x94>)
 8002d2a:	4a1a      	ldr	r2, [pc, #104]	; (8002d94 <MX_TIM4_Init+0x9c>)
 8002d2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2e:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <MX_TIM4_Init+0x94>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d34:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <MX_TIM4_Init+0x94>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d3a:	4814      	ldr	r0, [pc, #80]	; (8002d8c <MX_TIM4_Init+0x94>)
 8002d3c:	f004 fbe2 	bl	8007504 <HAL_TIM_Base_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002d46:	f000 fac5 	bl	80032d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d50:	f107 0308 	add.w	r3, r7, #8
 8002d54:	4619      	mov	r1, r3
 8002d56:	480d      	ldr	r0, [pc, #52]	; (8002d8c <MX_TIM4_Init+0x94>)
 8002d58:	f004 fd76 	bl	8007848 <HAL_TIM_ConfigClockSource>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002d62:	f000 fab7 	bl	80032d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d66:	2300      	movs	r3, #0
 8002d68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d6e:	463b      	mov	r3, r7
 8002d70:	4619      	mov	r1, r3
 8002d72:	4806      	ldr	r0, [pc, #24]	; (8002d8c <MX_TIM4_Init+0x94>)
 8002d74:	f004 ff7e 	bl	8007c74 <HAL_TIMEx_MasterConfigSynchronization>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002d7e:	f000 faa9 	bl	80032d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20002574 	.word	0x20002574
 8002d90:	40000800 	.word	0x40000800
 8002d94:	0001869f 	.word	0x0001869f

08002d98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART1_UART_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <MX_USART1_UART_Init+0x4c>)
 8002d9e:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <MX_USART1_UART_Init+0x50>)
 8002da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <MX_USART1_UART_Init+0x4c>)
 8002da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002da8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <MX_USART1_UART_Init+0x4c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <MX_USART1_UART_Init+0x4c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <MX_USART1_UART_Init+0x4c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <MX_USART1_UART_Init+0x4c>)
 8002dbe:	220c      	movs	r2, #12
 8002dc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <MX_USART1_UART_Init+0x4c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <MX_USART1_UART_Init+0x4c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dce:	4805      	ldr	r0, [pc, #20]	; (8002de4 <MX_USART1_UART_Init+0x4c>)
 8002dd0:	f004 ffd2 	bl	8007d78 <HAL_UART_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002dda:	f000 fa7b 	bl	80032d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200025bc 	.word	0x200025bc
 8002de8:	40011000 	.word	0x40011000

08002dec <UART_Printf>:


 //-------------------------------------UART PRINT -->BEGIN-------------------------------------------//
 void UART_Printf(const char * fmt, ...) {
 8002dec:	b40f      	push	{r0, r1, r2, r3}
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b0c2      	sub	sp, #264	; 0x108
 8002df2:	af00      	add	r7, sp, #0
   char buff[256];
   va_list args;
   va_start(args, fmt);
 8002df4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8002df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e00:	601a      	str	r2, [r3, #0]
   vsnprintf(buff, sizeof(buff), fmt, args);
 8002e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e0a:	f107 0008 	add.w	r0, r7, #8
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e18:	f00a fea6 	bl	800db68 <vsniprintf>
   HAL_UART_Transmit( & huart1, (uint8_t * ) buff, strlen(buff), HAL_MAX_DELAY);
 8002e1c:	f107 0308 	add.w	r3, r7, #8
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd fa3d 	bl	80002a0 <strlen>
 8002e26:	4603      	mov	r3, r0
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	f107 0108 	add.w	r1, r7, #8
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	4805      	ldr	r0, [pc, #20]	; (8002e48 <UART_Printf+0x5c>)
 8002e34:	f004 fff0 	bl	8007e18 <HAL_UART_Transmit>
   va_end(args);
 }
 8002e38:	bf00      	nop
 8002e3a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e44:	b004      	add	sp, #16
 8002e46:	4770      	bx	lr
 8002e48:	200025bc 	.word	0x200025bc
 8002e4c:	00000000 	.word	0x00000000

08002e50 <Ultrasonic_Amplitude>:
#define VREF 3.3          // Reference voltage
#define ADC_RESOLUTION 4096.0 // ADC resolution (12-bit)

float U_adcBuffer = 0;
float Ultrasonic_Amplitude(float U_amp)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	ed87 0a01 	vstr	s0, [r7, #4]

					ADC_ChannelConfTypeDef sConfig = {0};
 8002e5a:	f107 030c 	add.w	r3, r7, #12
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	60da      	str	r2, [r3, #12]
		    		 sConfig.Channel = ADC_CHANNEL_0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
		    		 sConfig.Rank = 1;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	613b      	str	r3, [r7, #16]
		    		 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
		    			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e74:	f107 030c 	add.w	r3, r7, #12
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4823      	ldr	r0, [pc, #140]	; (8002f08 <Ultrasonic_Amplitude+0xb8>)
 8002e7c:	f000 ffd2 	bl	8003e24 <HAL_ADC_ConfigChannel>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <Ultrasonic_Amplitude+0x3a>
		    			  {
		    			      Error_Handler();
 8002e86:	f000 fa25 	bl	80032d4 <Error_Handler>
		    			  }

		    			 HAL_ADC_Start(&hadc1);
 8002e8a:	481f      	ldr	r0, [pc, #124]	; (8002f08 <Ultrasonic_Amplitude+0xb8>)
 8002e8c:	f000 fe4a 	bl	8003b24 <HAL_ADC_Start>
		    			 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002e90:	f04f 31ff 	mov.w	r1, #4294967295
 8002e94:	481c      	ldr	r0, [pc, #112]	; (8002f08 <Ultrasonic_Amplitude+0xb8>)
 8002e96:	f000 ff2c 	bl	8003cf2 <HAL_ADC_PollForConversion>
		    			 U_adcBuffer = HAL_ADC_GetValue(&hadc1);
 8002e9a:	481b      	ldr	r0, [pc, #108]	; (8002f08 <Ultrasonic_Amplitude+0xb8>)
 8002e9c:	f000 ffb4 	bl	8003e08 <HAL_ADC_GetValue>
 8002ea0:	ee07 0a90 	vmov	s15, r0
 8002ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea8:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <Ultrasonic_Amplitude+0xbc>)
 8002eaa:	edc3 7a00 	vstr	s15, [r3]
		    			 HAL_ADC_Stop(&hadc1);
 8002eae:	4816      	ldr	r0, [pc, #88]	; (8002f08 <Ultrasonic_Amplitude+0xb8>)
 8002eb0:	f000 feec 	bl	8003c8c <HAL_ADC_Stop>

		    			 float khz = ((float)U_adcBuffer / ADC_RESOLUTION) * VREF;
 8002eb4:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <Ultrasonic_Amplitude+0xbc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fd fb5d 	bl	8000578 <__aeabi_f2d>
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <Ultrasonic_Amplitude+0xc0>)
 8002ec4:	f7fd fcda 	bl	800087c <__aeabi_ddiv>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	a30b      	add	r3, pc, #44	; (adr r3, 8002f00 <Ultrasonic_Amplitude+0xb0>)
 8002ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed6:	f7fd fba7 	bl	8000628 <__aeabi_dmul>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f7fd fe79 	bl	8000bd8 <__aeabi_d2f>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	61fb      	str	r3, [r7, #28]
		    			 return khz;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	ee07 3a90 	vmov	s15, r3
//		    			         return 0.0; // Return 0 if value is -inf, inf, or nan
//		    			  }
//		    			  return khz;


}
 8002ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	f3af 8000 	nop.w
 8002f00:	66666666 	.word	0x66666666
 8002f04:	400a6666 	.word	0x400a6666
 8002f08:	2000240c 	.word	0x2000240c
 8002f0c:	20002404 	.word	0x20002404
 8002f10:	40b00000 	.word	0x40b00000
 8002f14:	00000000 	.word	0x00000000

08002f18 <Water_Res>:
#include "ADC.h"
#include "Water_Resistance.h"

float w_adcBuffer = 0;
float Water_Res(float W_res)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	ed87 0a01 	vstr	s0, [r7, #4]

					ADC_ChannelConfTypeDef sConfig = {0};
 8002f22:	f107 0308 	add.w	r3, r7, #8
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	60da      	str	r2, [r3, #12]
		    		 sConfig.Channel = ADC_CHANNEL_8;
 8002f30:	2308      	movs	r3, #8
 8002f32:	60bb      	str	r3, [r7, #8]
		    		 sConfig.Rank = 1;
 8002f34:	2301      	movs	r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
		    		 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
		    			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f3c:	f107 0308 	add.w	r3, r7, #8
 8002f40:	4619      	mov	r1, r3
 8002f42:	483f      	ldr	r0, [pc, #252]	; (8003040 <Water_Res+0x128>)
 8002f44:	f000 ff6e 	bl	8003e24 <HAL_ADC_ConfigChannel>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <Water_Res+0x3a>
		    			  {
		    			      Error_Handler();
 8002f4e:	f000 f9c1 	bl	80032d4 <Error_Handler>
		    			  }
		    			  HAL_ADC_Start(&hadc1);
 8002f52:	483b      	ldr	r0, [pc, #236]	; (8003040 <Water_Res+0x128>)
 8002f54:	f000 fde6 	bl	8003b24 <HAL_ADC_Start>
		    			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002f58:	f04f 31ff 	mov.w	r1, #4294967295
 8002f5c:	4838      	ldr	r0, [pc, #224]	; (8003040 <Water_Res+0x128>)
 8002f5e:	f000 fec8 	bl	8003cf2 <HAL_ADC_PollForConversion>
		    			  w_adcBuffer = HAL_ADC_GetValue(&hadc1);
 8002f62:	4837      	ldr	r0, [pc, #220]	; (8003040 <Water_Res+0x128>)
 8002f64:	f000 ff50 	bl	8003e08 <HAL_ADC_GetValue>
 8002f68:	ee07 0a90 	vmov	s15, r0
 8002f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f70:	4b34      	ldr	r3, [pc, #208]	; (8003044 <Water_Res+0x12c>)
 8002f72:	edc3 7a00 	vstr	s15, [r3]
		    			  HAL_ADC_Stop(&hadc1);
 8002f76:	4832      	ldr	r0, [pc, #200]	; (8003040 <Water_Res+0x128>)
 8002f78:	f000 fe88 	bl	8003c8c <HAL_ADC_Stop>
		    			  float OP_voltage = w_adcBuffer * Volt_Ref / ADC_Res;
 8002f7c:	4b31      	ldr	r3, [pc, #196]	; (8003044 <Water_Res+0x12c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd faf9 	bl	8000578 <__aeabi_f2d>
 8002f86:	a328      	add	r3, pc, #160	; (adr r3, 8003028 <Water_Res+0x110>)
 8002f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8c:	f7fd fb4c 	bl	8000628 <__aeabi_dmul>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	a325      	add	r3, pc, #148	; (adr r3, 8003030 <Water_Res+0x118>)
 8002f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9e:	f7fd fc6d 	bl	800087c <__aeabi_ddiv>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f7fd fe15 	bl	8000bd8 <__aeabi_d2f>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	61fb      	str	r3, [r7, #28]
		    			  float Rwater = ((1000 * Volt_Ref)/ OP_voltage)-1000;// 1000 IS 1K ITS USED IN VOLT DIVIDER CIRCUIT IN DATALOGGER formula:R1 = ((R2XVIN)/VOUT)-R2
 8002fb2:	69f8      	ldr	r0, [r7, #28]
 8002fb4:	f7fd fae0 	bl	8000578 <__aeabi_f2d>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	a11e      	add	r1, pc, #120	; (adr r1, 8003038 <Water_Res+0x120>)
 8002fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fc2:	f7fd fc5b 	bl	800087c <__aeabi_ddiv>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <Water_Res+0x130>)
 8002fd4:	f7fd f970 	bl	80002b8 <__aeabi_dsub>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f7fd fdfa 	bl	8000bd8 <__aeabi_d2f>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	61bb      	str	r3, [r7, #24]
		    			  if (!isfinite(Rwater) || isnan(Rwater))
 8002fe8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fec:	eef0 7ae7 	vabs.f32	s15, s15
 8002ff0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800304c <Water_Res+0x134>
 8002ff4:	eef4 7a47 	vcmp.f32	s15, s14
 8002ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffc:	d808      	bhi.n	8003010 <Water_Res+0xf8>
 8002ffe:	ed97 7a06 	vldr	s14, [r7, #24]
 8003002:	edd7 7a06 	vldr	s15, [r7, #24]
 8003006:	eeb4 7a67 	vcmp.f32	s14, s15
 800300a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300e:	d702      	bvc.n	8003016 <Water_Res+0xfe>
		    			  	{
		    				  return 0.0; // Return 0 if value is -inf, inf, or nan
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	e000      	b.n	8003018 <Water_Res+0x100>
		    			  	}


		    			  return Rwater;
 8003016:	69bb      	ldr	r3, [r7, #24]


}
 8003018:	ee07 3a90 	vmov	s15, r3
 800301c:	eeb0 0a67 	vmov.f32	s0, s15
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	66666666 	.word	0x66666666
 800302c:	400a6666 	.word	0x400a6666
 8003030:	00000000 	.word	0x00000000
 8003034:	40affe00 	.word	0x40affe00
 8003038:	00000000 	.word	0x00000000
 800303c:	40a9c800 	.word	0x40a9c800
 8003040:	2000240c 	.word	0x2000240c
 8003044:	20002408 	.word	0x20002408
 8003048:	408f4000 	.word	0x408f4000
 800304c:	7f7fffff 	.word	0x7f7fffff

08003050 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003054:	f3bf 8f4f 	dsb	sy
}
 8003058:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <__NVIC_SystemReset+0x24>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003062:	4904      	ldr	r1, [pc, #16]	; (8003074 <__NVIC_SystemReset+0x24>)
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <__NVIC_SystemReset+0x28>)
 8003066:	4313      	orrs	r3, r2
 8003068:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800306a:	f3bf 8f4f 	dsb	sy
}
 800306e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <__NVIC_SystemReset+0x20>
 8003074:	e000ed00 	.word	0xe000ed00
 8003078:	05fa0004 	.word	0x05fa0004

0800307c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003082:	f000 fc55 	bl	8003930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003086:	f000 f8bd 	bl	8003204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800308a:	f7fe fb31 	bl	80016f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800308e:	f7fd ff71 	bl	8000f74 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003092:	f7fe fb9d 	bl	80017d0 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8003096:	f7ff f809 	bl	80020ac <MX_SDIO_SD_Init>
  MX_TIM3_Init();
 800309a:	f7ff fddf 	bl	8002c5c <MX_TIM3_Init>
  MX_TIM4_Init();
 800309e:	f7ff fe2b 	bl	8002cf8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80030a2:	f7ff fe79 	bl	8002d98 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80030a6:	f005 ffe7 	bl	8009078 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  /************************Accelerometer_status*****************************/
  bool Acc_Status = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	71fb      	strb	r3, [r7, #7]
  uint8_t i = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	71bb      	strb	r3, [r7, #6]
  while(!Acc_Status)
 80030b2:	e014      	b.n	80030de <main+0x62>
  {
	  Acc_Status = Acc_Init();
 80030b4:	f7fd ff98 	bl	8000fe8 <Acc_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	71fb      	strb	r3, [r7, #7]
	  UART_Printf("Acclerometer Testing time %d\n",i);
 80030bc:	79bb      	ldrb	r3, [r7, #6]
 80030be:	4619      	mov	r1, r3
 80030c0:	4847      	ldr	r0, [pc, #284]	; (80031e0 <main+0x164>)
 80030c2:	f7ff fe93 	bl	8002dec <UART_Printf>
	  i++;
 80030c6:	79bb      	ldrb	r3, [r7, #6]
 80030c8:	3301      	adds	r3, #1
 80030ca:	71bb      	strb	r3, [r7, #6]
	  HAL_Delay(500);
 80030cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030d0:	f000 fca0 	bl	8003a14 <HAL_Delay>
	   if(i>10)
 80030d4:	79bb      	ldrb	r3, [r7, #6]
 80030d6:	2b0a      	cmp	r3, #10
 80030d8:	d901      	bls.n	80030de <main+0x62>
	   {
		   NVIC_SystemReset();
 80030da:	f7ff ffb9 	bl	8003050 <__NVIC_SystemReset>
  while(!Acc_Status)
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	f083 0301 	eor.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1e4      	bne.n	80030b4 <main+0x38>
	   }
  }
  UART_Printf("Accelerometer Working \n");
 80030ea:	483e      	ldr	r0, [pc, #248]	; (80031e4 <main+0x168>)
 80030ec:	f7ff fe7e 	bl	8002dec <UART_Printf>
  /************************Accelerometer_status*****************************/


  /************************SD CARD_status*****************************/

  uint8_t sdCardStatus = SD_Card_Test();
 80030f0:	f7fe fffc 	bl	80020ec <SD_Card_Test>
 80030f4:	4603      	mov	r3, r0
 80030f6:	717b      	strb	r3, [r7, #5]
   while (sdCardStatus != FR_OK)
 80030f8:	e007      	b.n	800310a <main+0x8e>
   {
     sdCardStatus = SD_Card_Test();
 80030fa:	f7fe fff7 	bl	80020ec <SD_Card_Test>
 80030fe:	4603      	mov	r3, r0
 8003100:	717b      	strb	r3, [r7, #5]
     HAL_Delay(500);
 8003102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003106:	f000 fc85 	bl	8003a14 <HAL_Delay>
   while (sdCardStatus != FR_OK)
 800310a:	797b      	ldrb	r3, [r7, #5]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f4      	bne.n	80030fa <main+0x7e>

  /************************SD CARD_status*****************************/

   /************************SD CARD_Create Number file.txt*****************************/

 uint8_t F_N_C = File_Number_Create();
 8003110:	f7ff f820 	bl	8002154 <File_Number_Create>
 8003114:	4603      	mov	r3, r0
 8003116:	713b      	strb	r3, [r7, #4]
  while(F_N_C != FR_OK)
 8003118:	e007      	b.n	800312a <main+0xae>
  {
	  F_N_C = File_Number_Create();
 800311a:	f7ff f81b 	bl	8002154 <File_Number_Create>
 800311e:	4603      	mov	r3, r0
 8003120:	713b      	strb	r3, [r7, #4]
   HAL_Delay(500);
 8003122:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003126:	f000 fc75 	bl	8003a14 <HAL_Delay>
  while(F_N_C != FR_OK)
 800312a:	793b      	ldrb	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1f4      	bne.n	800311a <main+0x9e>
   /************************SD CARD_Create Number file.txt*****************************/


   /************************SD CARD_Create Num_sys.txt*****************************/

  uint8_t Num_SYS = Num_Sys_Create();
 8003130:	f7ff f8b6 	bl	80022a0 <Num_Sys_Create>
 8003134:	4603      	mov	r3, r0
 8003136:	70fb      	strb	r3, [r7, #3]
  while(Num_SYS != FR_OK)
 8003138:	e007      	b.n	800314a <main+0xce>
  {
	  Num_SYS = Num_Sys_Create();  //Germany OR USA
 800313a:	f7ff f8b1 	bl	80022a0 <Num_Sys_Create>
 800313e:	4603      	mov	r3, r0
 8003140:	70fb      	strb	r3, [r7, #3]
   HAL_Delay(500);
 8003142:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003146:	f000 fc65 	bl	8003a14 <HAL_Delay>
  while(Num_SYS != FR_OK)
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f4      	bne.n	800313a <main+0xbe>
  }

   /************************SD CARD_Create Num_sys.txt*****************************/

   /************************SD CARD_Create HTML*****************************/
  uint8_t HTML = HTML_File_Create();
 8003150:	f7ff f94c 	bl	80023ec <HTML_File_Create>
 8003154:	4603      	mov	r3, r0
 8003156:	70bb      	strb	r3, [r7, #2]
  while (HTML !=FR_OK)
 8003158:	e007      	b.n	800316a <main+0xee>
  {
   HTML = HTML_File_Create();
 800315a:	f7ff f947 	bl	80023ec <HTML_File_Create>
 800315e:	4603      	mov	r3, r0
 8003160:	70bb      	strb	r3, [r7, #2]
   HAL_Delay(500);
 8003162:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003166:	f000 fc55 	bl	8003a14 <HAL_Delay>
  while (HTML !=FR_OK)
 800316a:	78bb      	ldrb	r3, [r7, #2]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f4      	bne.n	800315a <main+0xde>
  }

   /************************SD CARD_Create HTML*****************************/

   uint8_t Sys_Type = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	707b      	strb	r3, [r7, #1]
   Sys_Type = Read_Number_Sys(Sys_Type);
 8003174:	787b      	ldrb	r3, [r7, #1]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fa54 	bl	8002624 <Read_Number_Sys>
 800317c:	4603      	mov	r3, r0
 800317e:	707b      	strb	r3, [r7, #1]
   (Sys_Type == 1)? UART_Printf("Device Storage Type is GERMANY \n"):UART_Printf("Device Storage Type is USA \n");
 8003180:	787b      	ldrb	r3, [r7, #1]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d103      	bne.n	800318e <main+0x112>
 8003186:	4818      	ldr	r0, [pc, #96]	; (80031e8 <main+0x16c>)
 8003188:	f7ff fe30 	bl	8002dec <UART_Printf>
 800318c:	e002      	b.n	8003194 <main+0x118>
 800318e:	4817      	ldr	r0, [pc, #92]	; (80031ec <main+0x170>)
 8003190:	f7ff fe2c 	bl	8002dec <UART_Printf>



   /************************Get Log file Number*****************************/

      Current_Log_File_No =  Read_Log_Number(Current_Log_File_No);
 8003194:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <main+0x174>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fa03 	bl	80025a4 <Read_Log_Number>
 800319e:	4603      	mov	r3, r0
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <main+0x174>)
 80031a4:	701a      	strb	r2, [r3, #0]
      UART_Printf("Current Log File Number is %d \n",Current_Log_File_No);
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <main+0x174>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	4619      	mov	r1, r3
 80031ac:	4811      	ldr	r0, [pc, #68]	; (80031f4 <main+0x178>)
 80031ae:	f7ff fe1d 	bl	8002dec <UART_Printf>
   /************************Get Log file Number*****************************/


   /************************SD CARD_Create DataLog*****************************/

   Create_DataLog_File();
 80031b2:	f7ff fa91 	bl	80026d8 <Create_DataLog_File>
   /************************SD CARD_Create DataLog*****************************/



   /************************System_Start*****************************/
   while(!Sys_Start)
 80031b6:	e005      	b.n	80031c4 <main+0x148>
   {
   System_Start();
 80031b8:	f7fe f932 	bl	8001420 <System_Start>
   HAL_Delay(500);
 80031bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031c0:	f000 fc28 	bl	8003a14 <HAL_Delay>
   while(!Sys_Start)
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <main+0x17c>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	f083 0301 	eor.w	r3, r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f2      	bne.n	80031b8 <main+0x13c>



  /************************Start_Timer_Interrupt*****************************/

   HAL_TIM_Base_Start_IT(&htim3);
 80031d2:	480a      	ldr	r0, [pc, #40]	; (80031fc <main+0x180>)
 80031d4:	f004 f9e6 	bl	80075a4 <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start_IT(&htim4);
 80031d8:	4809      	ldr	r0, [pc, #36]	; (8003200 <main+0x184>)
 80031da:	f004 f9e3 	bl	80075a4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80031de:	e7fe      	b.n	80031de <main+0x162>
 80031e0:	08010cd4 	.word	0x08010cd4
 80031e4:	08010cf4 	.word	0x08010cf4
 80031e8:	08010d0c 	.word	0x08010d0c
 80031ec:	08010d30 	.word	0x08010d30
 80031f0:	20002605 	.word	0x20002605
 80031f4:	08010d50 	.word	0x08010d50
 80031f8:	20002604 	.word	0x20002604
 80031fc:	2000252c 	.word	0x2000252c
 8003200:	20002574 	.word	0x20002574

08003204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b094      	sub	sp, #80	; 0x50
 8003208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800320a:	f107 0320 	add.w	r3, r7, #32
 800320e:	2230      	movs	r2, #48	; 0x30
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f00a fcb6 	bl	800db84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003228:	2300      	movs	r3, #0
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	4b27      	ldr	r3, [pc, #156]	; (80032cc <SystemClock_Config+0xc8>)
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	4a26      	ldr	r2, [pc, #152]	; (80032cc <SystemClock_Config+0xc8>)
 8003232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003236:	6413      	str	r3, [r2, #64]	; 0x40
 8003238:	4b24      	ldr	r3, [pc, #144]	; (80032cc <SystemClock_Config+0xc8>)
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003244:	2300      	movs	r3, #0
 8003246:	607b      	str	r3, [r7, #4]
 8003248:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <SystemClock_Config+0xcc>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a20      	ldr	r2, [pc, #128]	; (80032d0 <SystemClock_Config+0xcc>)
 800324e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <SystemClock_Config+0xcc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003260:	2301      	movs	r3, #1
 8003262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800326a:	2302      	movs	r3, #2
 800326c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800326e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003274:	2310      	movs	r3, #16
 8003276:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003278:	23c0      	movs	r3, #192	; 0xc0
 800327a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800327c:	2302      	movs	r3, #2
 800327e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003280:	2304      	movs	r3, #4
 8003282:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003284:	f107 0320 	add.w	r3, r7, #32
 8003288:	4618      	mov	r0, r3
 800328a:	f002 fb03 	bl	8005894 <HAL_RCC_OscConfig>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003294:	f000 f81e 	bl	80032d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003298:	230f      	movs	r3, #15
 800329a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800329c:	2302      	movs	r3, #2
 800329e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80032ae:	f107 030c 	add.w	r3, r7, #12
 80032b2:	2103      	movs	r1, #3
 80032b4:	4618      	mov	r0, r3
 80032b6:	f002 fd65 	bl	8005d84 <HAL_RCC_ClockConfig>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80032c0:	f000 f808 	bl	80032d4 <Error_Handler>
  }
}
 80032c4:	bf00      	nop
 80032c6:	3750      	adds	r7, #80	; 0x50
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40007000 	.word	0x40007000

080032d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032d8:	b672      	cpsid	i
}
 80032da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032dc:	e7fe      	b.n	80032dc <Error_Handler+0x8>
	...

080032e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_MspInit+0x4c>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	4a0f      	ldr	r2, [pc, #60]	; (800332c <HAL_MspInit+0x4c>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f4:	6453      	str	r3, [r2, #68]	; 0x44
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <HAL_MspInit+0x4c>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_MspInit+0x4c>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	4a08      	ldr	r2, [pc, #32]	; (800332c <HAL_MspInit+0x4c>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003310:	6413      	str	r3, [r2, #64]	; 0x40
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_MspInit+0x4c>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800

08003330 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	; 0x28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	f107 0314 	add.w	r3, r7, #20
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a24      	ldr	r2, [pc, #144]	; (80033e0 <HAL_ADC_MspInit+0xb0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d141      	bne.n	80033d6 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <HAL_ADC_MspInit+0xb4>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <HAL_ADC_MspInit+0xb4>)
 800335c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003360:	6453      	str	r3, [r2, #68]	; 0x44
 8003362:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <HAL_ADC_MspInit+0xb4>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <HAL_ADC_MspInit+0xb4>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4a1b      	ldr	r2, [pc, #108]	; (80033e4 <HAL_ADC_MspInit+0xb4>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
 800337e:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <HAL_ADC_MspInit+0xb4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <HAL_ADC_MspInit+0xb4>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a14      	ldr	r2, [pc, #80]	; (80033e4 <HAL_ADC_MspInit+0xb4>)
 8003394:	f043 0302 	orr.w	r3, r3, #2
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_ADC_MspInit+0xb4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Ultrsonic_Pin|T1_Pin|T2_Pin|T3_Pin
 80033a6:	239f      	movs	r3, #159	; 0x9f
 80033a8:	617b      	str	r3, [r7, #20]
                          |T4_Pin|PR_SEN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033aa:	2303      	movs	r3, #3
 80033ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b2:	f107 0314 	add.w	r3, r7, #20
 80033b6:	4619      	mov	r1, r3
 80033b8:	480b      	ldr	r0, [pc, #44]	; (80033e8 <HAL_ADC_MspInit+0xb8>)
 80033ba:	f001 f873 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Water_Res_Pin;
 80033be:	2301      	movs	r3, #1
 80033c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033c2:	2303      	movs	r3, #3
 80033c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Water_Res_GPIO_Port, &GPIO_InitStruct);
 80033ca:	f107 0314 	add.w	r3, r7, #20
 80033ce:	4619      	mov	r1, r3
 80033d0:	4806      	ldr	r0, [pc, #24]	; (80033ec <HAL_ADC_MspInit+0xbc>)
 80033d2:	f001 f867 	bl	80044a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033d6:	bf00      	nop
 80033d8:	3728      	adds	r7, #40	; 0x28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40012000 	.word	0x40012000
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40020000 	.word	0x40020000
 80033ec:	40020400 	.word	0x40020400

080033f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a19      	ldr	r2, [pc, #100]	; (8003474 <HAL_I2C_MspInit+0x84>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d12b      	bne.n	800346a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	4b18      	ldr	r3, [pc, #96]	; (8003478 <HAL_I2C_MspInit+0x88>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a17      	ldr	r2, [pc, #92]	; (8003478 <HAL_I2C_MspInit+0x88>)
 800341c:	f043 0302 	orr.w	r3, r3, #2
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b15      	ldr	r3, [pc, #84]	; (8003478 <HAL_I2C_MspInit+0x88>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800342e:	23c0      	movs	r3, #192	; 0xc0
 8003430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003432:	2312      	movs	r3, #18
 8003434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343a:	2303      	movs	r3, #3
 800343c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800343e:	2304      	movs	r3, #4
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	4619      	mov	r1, r3
 8003448:	480c      	ldr	r0, [pc, #48]	; (800347c <HAL_I2C_MspInit+0x8c>)
 800344a:	f001 f82b 	bl	80044a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_I2C_MspInit+0x88>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	4a08      	ldr	r2, [pc, #32]	; (8003478 <HAL_I2C_MspInit+0x88>)
 8003458:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800345c:	6413      	str	r3, [r2, #64]	; 0x40
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_I2C_MspInit+0x88>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800346a:	bf00      	nop
 800346c:	3728      	adds	r7, #40	; 0x28
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40005400 	.word	0x40005400
 8003478:	40023800 	.word	0x40023800
 800347c:	40020400 	.word	0x40020400

08003480 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a29      	ldr	r2, [pc, #164]	; (8003544 <HAL_SD_MspInit+0xc4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d14b      	bne.n	800353a <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_SD_MspInit+0xc8>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	4a27      	ldr	r2, [pc, #156]	; (8003548 <HAL_SD_MspInit+0xc8>)
 80034ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034b0:	6453      	str	r3, [r2, #68]	; 0x44
 80034b2:	4b25      	ldr	r3, [pc, #148]	; (8003548 <HAL_SD_MspInit+0xc8>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	4b21      	ldr	r3, [pc, #132]	; (8003548 <HAL_SD_MspInit+0xc8>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a20      	ldr	r2, [pc, #128]	; (8003548 <HAL_SD_MspInit+0xc8>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <HAL_SD_MspInit+0xc8>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <HAL_SD_MspInit+0xc8>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	4a19      	ldr	r2, [pc, #100]	; (8003548 <HAL_SD_MspInit+0xc8>)
 80034e4:	f043 0302 	orr.w	r3, r3, #2
 80034e8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ea:	4b17      	ldr	r3, [pc, #92]	; (8003548 <HAL_SD_MspInit+0xc8>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80034f6:	f44f 7350 	mov.w	r3, #832	; 0x340
 80034fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	2302      	movs	r3, #2
 80034fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003504:	2303      	movs	r3, #3
 8003506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003508:	230c      	movs	r3, #12
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	4619      	mov	r1, r3
 8003512:	480e      	ldr	r0, [pc, #56]	; (800354c <HAL_SD_MspInit+0xcc>)
 8003514:	f000 ffc6 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
 8003518:	f248 0330 	movw	r3, #32816	; 0x8030
 800351c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	2302      	movs	r3, #2
 8003520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003526:	2303      	movs	r3, #3
 8003528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800352a:	230c      	movs	r3, #12
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	4619      	mov	r1, r3
 8003534:	4806      	ldr	r0, [pc, #24]	; (8003550 <HAL_SD_MspInit+0xd0>)
 8003536:	f000 ffb5 	bl	80044a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800353a:	bf00      	nop
 800353c:	3728      	adds	r7, #40	; 0x28
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40012c00 	.word	0x40012c00
 8003548:	40023800 	.word	0x40023800
 800354c:	40020000 	.word	0x40020000
 8003550:	40020400 	.word	0x40020400

08003554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <HAL_TIM_Base_MspInit+0x80>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d116      	bne.n	8003594 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_TIM_Base_MspInit+0x84>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <HAL_TIM_Base_MspInit+0x84>)
 8003570:	f043 0302 	orr.w	r3, r3, #2
 8003574:	6413      	str	r3, [r2, #64]	; 0x40
 8003576:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <HAL_TIM_Base_MspInit+0x84>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003582:	2200      	movs	r2, #0
 8003584:	2100      	movs	r1, #0
 8003586:	201d      	movs	r0, #29
 8003588:	f000 ff55 	bl	8004436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800358c:	201d      	movs	r0, #29
 800358e:	f000 ff6e 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003592:	e01a      	b.n	80035ca <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a10      	ldr	r2, [pc, #64]	; (80035dc <HAL_TIM_Base_MspInit+0x88>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d115      	bne.n	80035ca <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <HAL_TIM_Base_MspInit+0x84>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <HAL_TIM_Base_MspInit+0x84>)
 80035a8:	f043 0304 	orr.w	r3, r3, #4
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_TIM_Base_MspInit+0x84>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80035ba:	2200      	movs	r2, #0
 80035bc:	2100      	movs	r1, #0
 80035be:	201e      	movs	r0, #30
 80035c0:	f000 ff39 	bl	8004436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035c4:	201e      	movs	r0, #30
 80035c6:	f000 ff52 	bl	800446e <HAL_NVIC_EnableIRQ>
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40000800 	.word	0x40000800

080035e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	; 0x28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a28      	ldr	r2, [pc, #160]	; (80036a0 <HAL_UART_MspInit+0xc0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d14a      	bne.n	8003698 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <HAL_UART_MspInit+0xc4>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	4a26      	ldr	r2, [pc, #152]	; (80036a4 <HAL_UART_MspInit+0xc4>)
 800360c:	f043 0310 	orr.w	r3, r3, #16
 8003610:	6453      	str	r3, [r2, #68]	; 0x44
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <HAL_UART_MspInit+0xc4>)
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <HAL_UART_MspInit+0xc4>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <HAL_UART_MspInit+0xc4>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6313      	str	r3, [r2, #48]	; 0x30
 800362e:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <HAL_UART_MspInit+0xc4>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <HAL_UART_MspInit+0xc4>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4a18      	ldr	r2, [pc, #96]	; (80036a4 <HAL_UART_MspInit+0xc4>)
 8003644:	f043 0302 	orr.w	r3, r3, #2
 8003648:	6313      	str	r3, [r2, #48]	; 0x30
 800364a:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <HAL_UART_MspInit+0xc4>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800365a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365c:	2302      	movs	r3, #2
 800365e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003664:	2303      	movs	r3, #3
 8003666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003668:	2307      	movs	r3, #7
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	4619      	mov	r1, r3
 8003672:	480d      	ldr	r0, [pc, #52]	; (80036a8 <HAL_UART_MspInit+0xc8>)
 8003674:	f000 ff16 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003678:	2308      	movs	r3, #8
 800367a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367c:	2302      	movs	r3, #2
 800367e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003680:	2300      	movs	r3, #0
 8003682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003684:	2303      	movs	r3, #3
 8003686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003688:	2307      	movs	r3, #7
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	4619      	mov	r1, r3
 8003692:	4806      	ldr	r0, [pc, #24]	; (80036ac <HAL_UART_MspInit+0xcc>)
 8003694:	f000 ff06 	bl	80044a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003698:	bf00      	nop
 800369a:	3728      	adds	r7, #40	; 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40011000 	.word	0x40011000
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40020000 	.word	0x40020000
 80036ac:	40020400 	.word	0x40020400

080036b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036b4:	e7fe      	b.n	80036b4 <NMI_Handler+0x4>

080036b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036b6:	b480      	push	{r7}
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036ba:	e7fe      	b.n	80036ba <HardFault_Handler+0x4>

080036bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036c0:	e7fe      	b.n	80036c0 <MemManage_Handler+0x4>

080036c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036c2:	b480      	push	{r7}
 80036c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036c6:	e7fe      	b.n	80036c6 <BusFault_Handler+0x4>

080036c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036cc:	e7fe      	b.n	80036cc <UsageFault_Handler+0x4>

080036ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036ce:	b480      	push	{r7}
 80036d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036ea:	b480      	push	{r7}
 80036ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036fc:	f000 f96a 	bl	80039d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003700:	bf00      	nop
 8003702:	bd80      	pop	{r7, pc}

08003704 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003708:	4802      	ldr	r0, [pc, #8]	; (8003714 <TIM3_IRQHandler+0x10>)
 800370a:	f003 ffad 	bl	8007668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	2000252c 	.word	0x2000252c

08003718 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800371c:	4802      	ldr	r0, [pc, #8]	; (8003728 <TIM4_IRQHandler+0x10>)
 800371e:	f003 ffa3 	bl	8007668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20002574 	.word	0x20002574

0800372c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  return 1;
 8003730:	2301      	movs	r3, #1
}
 8003732:	4618      	mov	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <_kill>:

int _kill(int pid, int sig)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003746:	f00a fa7f 	bl	800dc48 <__errno>
 800374a:	4603      	mov	r3, r0
 800374c:	2216      	movs	r2, #22
 800374e:	601a      	str	r2, [r3, #0]
  return -1;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_exit>:

void _exit (int status)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003764:	f04f 31ff 	mov.w	r1, #4294967295
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ffe7 	bl	800373c <_kill>
  while (1) {}    /* Make sure we hang here */
 800376e:	e7fe      	b.n	800376e <_exit+0x12>

08003770 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e00a      	b.n	8003798 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003782:	f3af 8000 	nop.w
 8003786:	4601      	mov	r1, r0
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	60ba      	str	r2, [r7, #8]
 800378e:	b2ca      	uxtb	r2, r1
 8003790:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	3301      	adds	r3, #1
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	dbf0      	blt.n	8003782 <_read+0x12>
  }

  return len;
 80037a0:	687b      	ldr	r3, [r7, #4]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e009      	b.n	80037d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	60ba      	str	r2, [r7, #8]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	3301      	adds	r3, #1
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	dbf1      	blt.n	80037bc <_write+0x12>
  }
  return len;
 80037d8:	687b      	ldr	r3, [r7, #4]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <_close>:

int _close(int file)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800380a:	605a      	str	r2, [r3, #4]
  return 0;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <_isatty>:

int _isatty(int file)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003822:	2301      	movs	r3, #1
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003854:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <_sbrk+0x5c>)
 8003856:	4b15      	ldr	r3, [pc, #84]	; (80038ac <_sbrk+0x60>)
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <_sbrk+0x64>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <_sbrk+0x64>)
 800386a:	4a12      	ldr	r2, [pc, #72]	; (80038b4 <_sbrk+0x68>)
 800386c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <_sbrk+0x64>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	429a      	cmp	r2, r3
 800387a:	d207      	bcs.n	800388c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800387c:	f00a f9e4 	bl	800dc48 <__errno>
 8003880:	4603      	mov	r3, r0
 8003882:	220c      	movs	r2, #12
 8003884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
 800388a:	e009      	b.n	80038a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800388c:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <_sbrk+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003892:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <_sbrk+0x64>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	4a05      	ldr	r2, [pc, #20]	; (80038b0 <_sbrk+0x64>)
 800389c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800389e:	68fb      	ldr	r3, [r7, #12]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20020000 	.word	0x20020000
 80038ac:	00000400 	.word	0x00000400
 80038b0:	20002608 	.word	0x20002608
 80038b4:	20002998 	.word	0x20002998

080038b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <SystemInit+0x20>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	4a05      	ldr	r2, [pc, #20]	; (80038d8 <SystemInit+0x20>)
 80038c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80038dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003914 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80038e0:	f7ff ffea 	bl	80038b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038e4:	480c      	ldr	r0, [pc, #48]	; (8003918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038e6:	490d      	ldr	r1, [pc, #52]	; (800391c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038e8:	4a0d      	ldr	r2, [pc, #52]	; (8003920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038ec:	e002      	b.n	80038f4 <LoopCopyDataInit>

080038ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038f2:	3304      	adds	r3, #4

080038f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038f8:	d3f9      	bcc.n	80038ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038fa:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038fc:	4c0a      	ldr	r4, [pc, #40]	; (8003928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80038fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003900:	e001      	b.n	8003906 <LoopFillZerobss>

08003902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003904:	3204      	adds	r2, #4

08003906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003908:	d3fb      	bcc.n	8003902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800390a:	f00a f9a3 	bl	800dc54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800390e:	f7ff fbb5 	bl	800307c <main>
  bx  lr    
 8003912:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800391c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003920:	080186c0 	.word	0x080186c0
  ldr r2, =_sbss
 8003924:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003928:	20002998 	.word	0x20002998

0800392c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800392c:	e7fe      	b.n	800392c <ADC_IRQHandler>
	...

08003930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <HAL_Init+0x40>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a0d      	ldr	r2, [pc, #52]	; (8003970 <HAL_Init+0x40>)
 800393a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800393e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_Init+0x40>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <HAL_Init+0x40>)
 8003946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800394a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <HAL_Init+0x40>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a07      	ldr	r2, [pc, #28]	; (8003970 <HAL_Init+0x40>)
 8003952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003958:	2003      	movs	r0, #3
 800395a:	f000 fd61 	bl	8004420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800395e:	200f      	movs	r0, #15
 8003960:	f000 f808 	bl	8003974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003964:	f7ff fcbc 	bl	80032e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40023c00 	.word	0x40023c00

08003974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800397c:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_InitTick+0x54>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <HAL_InitTick+0x58>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	4619      	mov	r1, r3
 8003986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800398a:	fbb3 f3f1 	udiv	r3, r3, r1
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fd79 	bl	800448a <HAL_SYSTICK_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e00e      	b.n	80039c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b0f      	cmp	r3, #15
 80039a6:	d80a      	bhi.n	80039be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039a8:	2200      	movs	r2, #0
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295
 80039b0:	f000 fd41 	bl	8004436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039b4:	4a06      	ldr	r2, [pc, #24]	; (80039d0 <HAL_InitTick+0x5c>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e000      	b.n	80039c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	2000000c 	.word	0x2000000c
 80039cc:	20000014 	.word	0x20000014
 80039d0:	20000010 	.word	0x20000010

080039d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_IncTick+0x20>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_IncTick+0x24>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4413      	add	r3, r2
 80039e4:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <HAL_IncTick+0x24>)
 80039e6:	6013      	str	r3, [r2, #0]
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000014 	.word	0x20000014
 80039f8:	2000260c 	.word	0x2000260c

080039fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <HAL_GetTick+0x14>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	2000260c 	.word	0x2000260c

08003a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a1c:	f7ff ffee 	bl	80039fc <HAL_GetTick>
 8003a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d005      	beq.n	8003a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <HAL_Delay+0x44>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
  }


  while((HAL_GetTick() - tickstart) < wait)
 8003a3a:	bf00      	nop
 8003a3c:	f7ff ffde 	bl	80039fc <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d8f7      	bhi.n	8003a3c <HAL_Delay+0x28>
  {
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000014 	.word	0x20000014

08003a5c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_SuspendTick+0x1c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <HAL_SuspendTick+0x1c>)
 8003a66:	f023 0302 	bic.w	r3, r3, #2
 8003a6a:	6013      	str	r3, [r2, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	e000e010 	.word	0xe000e010

08003a7c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_ResumeTick+0x1c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a04      	ldr	r2, [pc, #16]	; (8003a98 <HAL_ResumeTick+0x1c>)
 8003a86:	f043 0302 	orr.w	r3, r3, #2
 8003a8a:	6013      	str	r3, [r2, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	e000e010 	.word	0xe000e010

08003a9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e033      	b.n	8003b1a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fc38 	bl	8003330 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d118      	bne.n	8003b0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ae2:	f023 0302 	bic.w	r3, r3, #2
 8003ae6:	f043 0202 	orr.w	r2, r3, #2
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 faca 	bl	8004088 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f023 0303 	bic.w	r3, r3, #3
 8003b02:	f043 0201 	orr.w	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
 8003b0a:	e001      	b.n	8003b10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_ADC_Start+0x1a>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e097      	b.n	8003c6e <HAL_ADC_Start+0x14a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d018      	beq.n	8003b86 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b64:	4b45      	ldr	r3, [pc, #276]	; (8003c7c <HAL_ADC_Start+0x158>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a45      	ldr	r2, [pc, #276]	; (8003c80 <HAL_ADC_Start+0x15c>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	0c9a      	lsrs	r2, r3, #18
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003b78:	e002      	b.n	8003b80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f9      	bne.n	8003b7a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d15f      	bne.n	8003c54 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd2:	d106      	bne.n	8003be2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd8:	f023 0206 	bic.w	r2, r3, #6
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	645a      	str	r2, [r3, #68]	; 0x44
 8003be0:	e002      	b.n	8003be8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bf0:	4b24      	ldr	r3, [pc, #144]	; (8003c84 <HAL_ADC_Start+0x160>)
 8003bf2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003bfc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10f      	bne.n	8003c2a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d129      	bne.n	8003c6c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	e020      	b.n	8003c6c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a16      	ldr	r2, [pc, #88]	; (8003c88 <HAL_ADC_Start+0x164>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d11b      	bne.n	8003c6c <HAL_ADC_Start+0x148>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d114      	bne.n	8003c6c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c50:	609a      	str	r2, [r3, #8]
 8003c52:	e00b      	b.n	8003c6c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	f043 0201 	orr.w	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	2000000c 	.word	0x2000000c
 8003c80:	431bde83 	.word	0x431bde83
 8003c84:	40012300 	.word	0x40012300
 8003c88:	40012000 	.word	0x40012000

08003c8c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_ADC_Stop+0x16>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e021      	b.n	8003ce6 <HAL_ADC_Stop+0x5a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0201 	bic.w	r2, r2, #1
 8003cb8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	f043 0201 	orr.w	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0e:	d113      	bne.n	8003d38 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1e:	d10b      	bne.n	8003d38 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f043 0220 	orr.w	r2, r3, #32
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e063      	b.n	8003e00 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d38:	f7ff fe60 	bl	80039fc <HAL_GetTick>
 8003d3c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d3e:	e021      	b.n	8003d84 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d01d      	beq.n	8003d84 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <HAL_ADC_PollForConversion+0x6c>
 8003d4e:	f7ff fe55 	bl	80039fc <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d212      	bcs.n	8003d84 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d00b      	beq.n	8003d84 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f043 0204 	orr.w	r2, r3, #4
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e03d      	b.n	8003e00 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d1d6      	bne.n	8003d40 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f06f 0212 	mvn.w	r2, #18
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d123      	bne.n	8003dfe <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d11f      	bne.n	8003dfe <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d006      	beq.n	8003dda <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d111      	bne.n	8003dfe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d105      	bne.n	8003dfe <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f043 0201 	orr.w	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x1c>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e113      	b.n	8004068 <HAL_ADC_ConfigChannel+0x244>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b09      	cmp	r3, #9
 8003e4e:	d925      	bls.n	8003e9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68d9      	ldr	r1, [r3, #12]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4613      	mov	r3, r2
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	4413      	add	r3, r2
 8003e64:	3b1e      	subs	r3, #30
 8003e66:	2207      	movs	r2, #7
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43da      	mvns	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	400a      	ands	r2, r1
 8003e74:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68d9      	ldr	r1, [r3, #12]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	4618      	mov	r0, r3
 8003e88:	4603      	mov	r3, r0
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	4403      	add	r3, r0
 8003e8e:	3b1e      	subs	r3, #30
 8003e90:	409a      	lsls	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	60da      	str	r2, [r3, #12]
 8003e9a:	e022      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6919      	ldr	r1, [r3, #16]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4613      	mov	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	2207      	movs	r2, #7
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	400a      	ands	r2, r1
 8003ebe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6919      	ldr	r1, [r3, #16]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4403      	add	r3, r0
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b06      	cmp	r3, #6
 8003ee8:	d824      	bhi.n	8003f34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	3b05      	subs	r3, #5
 8003efc:	221f      	movs	r2, #31
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43da      	mvns	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	400a      	ands	r2, r1
 8003f0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	4618      	mov	r0, r3
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	3b05      	subs	r3, #5
 8003f26:	fa00 f203 	lsl.w	r2, r0, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	635a      	str	r2, [r3, #52]	; 0x34
 8003f32:	e04c      	b.n	8003fce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b0c      	cmp	r3, #12
 8003f3a:	d824      	bhi.n	8003f86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3b23      	subs	r3, #35	; 0x23
 8003f4e:	221f      	movs	r2, #31
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43da      	mvns	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	400a      	ands	r2, r1
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	3b23      	subs	r3, #35	; 0x23
 8003f78:	fa00 f203 	lsl.w	r2, r0, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
 8003f84:	e023      	b.n	8003fce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	3b41      	subs	r3, #65	; 0x41
 8003f98:	221f      	movs	r2, #31
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	43da      	mvns	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	400a      	ands	r2, r1
 8003fa6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3b41      	subs	r3, #65	; 0x41
 8003fc2:	fa00 f203 	lsl.w	r2, r0, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fce:	4b29      	ldr	r3, [pc, #164]	; (8004074 <HAL_ADC_ConfigChannel+0x250>)
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a28      	ldr	r2, [pc, #160]	; (8004078 <HAL_ADC_ConfigChannel+0x254>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d10f      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x1d8>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b12      	cmp	r3, #18
 8003fe2:	d10b      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <HAL_ADC_ConfigChannel+0x254>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d12b      	bne.n	800405e <HAL_ADC_ConfigChannel+0x23a>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1c      	ldr	r2, [pc, #112]	; (800407c <HAL_ADC_ConfigChannel+0x258>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <HAL_ADC_ConfigChannel+0x1f4>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b11      	cmp	r3, #17
 8004016:	d122      	bne.n	800405e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a11      	ldr	r2, [pc, #68]	; (800407c <HAL_ADC_ConfigChannel+0x258>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d111      	bne.n	800405e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <HAL_ADC_ConfigChannel+0x25c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a11      	ldr	r2, [pc, #68]	; (8004084 <HAL_ADC_ConfigChannel+0x260>)
 8004040:	fba2 2303 	umull	r2, r3, r2, r3
 8004044:	0c9a      	lsrs	r2, r3, #18
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004050:	e002      	b.n	8004058 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	3b01      	subs	r3, #1
 8004056:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f9      	bne.n	8004052 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40012300 	.word	0x40012300
 8004078:	40012000 	.word	0x40012000
 800407c:	10000012 	.word	0x10000012
 8004080:	2000000c 	.word	0x2000000c
 8004084:	431bde83 	.word	0x431bde83

08004088 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004090:	4b79      	ldr	r3, [pc, #484]	; (8004278 <ADC_Init+0x1f0>)
 8004092:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	431a      	orrs	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	021a      	lsls	r2, r3, #8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80040e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6859      	ldr	r1, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004102:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6899      	ldr	r1, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	4a58      	ldr	r2, [pc, #352]	; (800427c <ADC_Init+0x1f4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d022      	beq.n	8004166 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800412e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6899      	ldr	r1, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004150:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6899      	ldr	r1, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	e00f      	b.n	8004186 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004174:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004184:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0202 	bic.w	r2, r2, #2
 8004194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6899      	ldr	r1, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	7e1b      	ldrb	r3, [r3, #24]
 80041a0:	005a      	lsls	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01b      	beq.n	80041ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80041d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6859      	ldr	r1, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	3b01      	subs	r3, #1
 80041e0:	035a      	lsls	r2, r3, #13
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	e007      	b.n	80041fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	3b01      	subs	r3, #1
 8004218:	051a      	lsls	r2, r3, #20
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004230:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6899      	ldr	r1, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800423e:	025a      	lsls	r2, r3, #9
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6899      	ldr	r1, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	029a      	lsls	r2, r3, #10
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	609a      	str	r2, [r3, #8]
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	40012300 	.word	0x40012300
 800427c:	0f000001 	.word	0x0f000001

08004280 <__NVIC_SetPriorityGrouping>:
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800429c:	4013      	ands	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042b2:	4a04      	ldr	r2, [pc, #16]	; (80042c4 <__NVIC_SetPriorityGrouping+0x44>)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	60d3      	str	r3, [r2, #12]
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <__NVIC_GetPriorityGrouping>:
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <__NVIC_GetPriorityGrouping+0x18>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	0a1b      	lsrs	r3, r3, #8
 80042d2:	f003 0307 	and.w	r3, r3, #7
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	e000ed00 	.word	0xe000ed00

080042e4 <__NVIC_EnableIRQ>:
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	db0b      	blt.n	800430e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	f003 021f 	and.w	r2, r3, #31
 80042fc:	4907      	ldr	r1, [pc, #28]	; (800431c <__NVIC_EnableIRQ+0x38>)
 80042fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	2001      	movs	r0, #1
 8004306:	fa00 f202 	lsl.w	r2, r0, r2
 800430a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	e000e100 	.word	0xe000e100

08004320 <__NVIC_SetPriority>:
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	6039      	str	r1, [r7, #0]
 800432a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800432c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004330:	2b00      	cmp	r3, #0
 8004332:	db0a      	blt.n	800434a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	490c      	ldr	r1, [pc, #48]	; (800436c <__NVIC_SetPriority+0x4c>)
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	0112      	lsls	r2, r2, #4
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	440b      	add	r3, r1
 8004344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004348:	e00a      	b.n	8004360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	4908      	ldr	r1, [pc, #32]	; (8004370 <__NVIC_SetPriority+0x50>)
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	3b04      	subs	r3, #4
 8004358:	0112      	lsls	r2, r2, #4
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	440b      	add	r3, r1
 800435e:	761a      	strb	r2, [r3, #24]
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	e000e100 	.word	0xe000e100
 8004370:	e000ed00 	.word	0xe000ed00

08004374 <NVIC_EncodePriority>:
{
 8004374:	b480      	push	{r7}
 8004376:	b089      	sub	sp, #36	; 0x24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f1c3 0307 	rsb	r3, r3, #7
 800438e:	2b04      	cmp	r3, #4
 8004390:	bf28      	it	cs
 8004392:	2304      	movcs	r3, #4
 8004394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	3304      	adds	r3, #4
 800439a:	2b06      	cmp	r3, #6
 800439c:	d902      	bls.n	80043a4 <NVIC_EncodePriority+0x30>
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	3b03      	subs	r3, #3
 80043a2:	e000      	b.n	80043a6 <NVIC_EncodePriority+0x32>
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a8:	f04f 32ff 	mov.w	r2, #4294967295
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43da      	mvns	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	401a      	ands	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043bc:	f04f 31ff 	mov.w	r1, #4294967295
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	fa01 f303 	lsl.w	r3, r1, r3
 80043c6:	43d9      	mvns	r1, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043cc:	4313      	orrs	r3, r2
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3724      	adds	r7, #36	; 0x24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043ec:	d301      	bcc.n	80043f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ee:	2301      	movs	r3, #1
 80043f0:	e00f      	b.n	8004412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043f2:	4a0a      	ldr	r2, [pc, #40]	; (800441c <SysTick_Config+0x40>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043fa:	210f      	movs	r1, #15
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	f7ff ff8e 	bl	8004320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <SysTick_Config+0x40>)
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800440a:	4b04      	ldr	r3, [pc, #16]	; (800441c <SysTick_Config+0x40>)
 800440c:	2207      	movs	r2, #7
 800440e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	e000e010 	.word	0xe000e010

08004420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff ff29 	bl	8004280 <__NVIC_SetPriorityGrouping>
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004436:	b580      	push	{r7, lr}
 8004438:	b086      	sub	sp, #24
 800443a:	af00      	add	r7, sp, #0
 800443c:	4603      	mov	r3, r0
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004448:	f7ff ff3e 	bl	80042c8 <__NVIC_GetPriorityGrouping>
 800444c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	6978      	ldr	r0, [r7, #20]
 8004454:	f7ff ff8e 	bl	8004374 <NVIC_EncodePriority>
 8004458:	4602      	mov	r2, r0
 800445a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800445e:	4611      	mov	r1, r2
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff5d 	bl	8004320 <__NVIC_SetPriority>
}
 8004466:	bf00      	nop
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	4603      	mov	r3, r0
 8004476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff31 	bl	80042e4 <__NVIC_EnableIRQ>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff ffa2 	bl	80043dc <SysTick_Config>
 8004498:	4603      	mov	r3, r0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b089      	sub	sp, #36	; 0x24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
 80044be:	e159      	b.n	8004774 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044c0:	2201      	movs	r2, #1
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	429a      	cmp	r2, r3
 80044da:	f040 8148 	bne.w	800476e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d005      	beq.n	80044f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d130      	bne.n	8004558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	2203      	movs	r2, #3
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4013      	ands	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800452c:	2201      	movs	r2, #1
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 0201 	and.w	r2, r3, #1
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b03      	cmp	r3, #3
 8004562:	d017      	beq.n	8004594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d123      	bne.n	80045e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	08da      	lsrs	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3208      	adds	r2, #8
 80045a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	220f      	movs	r2, #15
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	08da      	lsrs	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3208      	adds	r2, #8
 80045e2:	69b9      	ldr	r1, [r7, #24]
 80045e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	2203      	movs	r2, #3
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4013      	ands	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0203 	and.w	r2, r3, #3
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80a2 	beq.w	800476e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	4b57      	ldr	r3, [pc, #348]	; (800478c <HAL_GPIO_Init+0x2e8>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	4a56      	ldr	r2, [pc, #344]	; (800478c <HAL_GPIO_Init+0x2e8>)
 8004634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004638:	6453      	str	r3, [r2, #68]	; 0x44
 800463a:	4b54      	ldr	r3, [pc, #336]	; (800478c <HAL_GPIO_Init+0x2e8>)
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004646:	4a52      	ldr	r2, [pc, #328]	; (8004790 <HAL_GPIO_Init+0x2ec>)
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	3302      	adds	r3, #2
 800464e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	220f      	movs	r2, #15
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a49      	ldr	r2, [pc, #292]	; (8004794 <HAL_GPIO_Init+0x2f0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d019      	beq.n	80046a6 <HAL_GPIO_Init+0x202>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a48      	ldr	r2, [pc, #288]	; (8004798 <HAL_GPIO_Init+0x2f4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <HAL_GPIO_Init+0x1fe>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a47      	ldr	r2, [pc, #284]	; (800479c <HAL_GPIO_Init+0x2f8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00d      	beq.n	800469e <HAL_GPIO_Init+0x1fa>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a46      	ldr	r2, [pc, #280]	; (80047a0 <HAL_GPIO_Init+0x2fc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <HAL_GPIO_Init+0x1f6>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a45      	ldr	r2, [pc, #276]	; (80047a4 <HAL_GPIO_Init+0x300>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d101      	bne.n	8004696 <HAL_GPIO_Init+0x1f2>
 8004692:	2304      	movs	r3, #4
 8004694:	e008      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 8004696:	2307      	movs	r3, #7
 8004698:	e006      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 800469a:	2303      	movs	r3, #3
 800469c:	e004      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 800469e:	2302      	movs	r3, #2
 80046a0:	e002      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <HAL_GPIO_Init+0x204>
 80046a6:	2300      	movs	r3, #0
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	f002 0203 	and.w	r2, r2, #3
 80046ae:	0092      	lsls	r2, r2, #2
 80046b0:	4093      	lsls	r3, r2
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046b8:	4935      	ldr	r1, [pc, #212]	; (8004790 <HAL_GPIO_Init+0x2ec>)
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	089b      	lsrs	r3, r3, #2
 80046be:	3302      	adds	r3, #2
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046c6:	4b38      	ldr	r3, [pc, #224]	; (80047a8 <HAL_GPIO_Init+0x304>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046ea:	4a2f      	ldr	r2, [pc, #188]	; (80047a8 <HAL_GPIO_Init+0x304>)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046f0:	4b2d      	ldr	r3, [pc, #180]	; (80047a8 <HAL_GPIO_Init+0x304>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004714:	4a24      	ldr	r2, [pc, #144]	; (80047a8 <HAL_GPIO_Init+0x304>)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800471a:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <HAL_GPIO_Init+0x304>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	43db      	mvns	r3, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4013      	ands	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800473e:	4a1a      	ldr	r2, [pc, #104]	; (80047a8 <HAL_GPIO_Init+0x304>)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004744:	4b18      	ldr	r3, [pc, #96]	; (80047a8 <HAL_GPIO_Init+0x304>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	43db      	mvns	r3, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004768:	4a0f      	ldr	r2, [pc, #60]	; (80047a8 <HAL_GPIO_Init+0x304>)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3301      	adds	r3, #1
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	2b0f      	cmp	r3, #15
 8004778:	f67f aea2 	bls.w	80044c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800477c:	bf00      	nop
 800477e:	bf00      	nop
 8004780:	3724      	adds	r7, #36	; 0x24
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
 8004790:	40013800 	.word	0x40013800
 8004794:	40020000 	.word	0x40020000
 8004798:	40020400 	.word	0x40020400
 800479c:	40020800 	.word	0x40020800
 80047a0:	40020c00 	.word	0x40020c00
 80047a4:	40021000 	.word	0x40021000
 80047a8:	40013c00 	.word	0x40013c00

080047ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	887b      	ldrh	r3, [r7, #2]
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	e001      	b.n	80047ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	807b      	strh	r3, [r7, #2]
 80047e8:	4613      	mov	r3, r2
 80047ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047ec:	787b      	ldrb	r3, [r7, #1]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047f2:	887a      	ldrh	r2, [r7, #2]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047f8:	e003      	b.n	8004802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047fa:	887b      	ldrh	r3, [r7, #2]
 80047fc:	041a      	lsls	r2, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	619a      	str	r2, [r3, #24]
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e12b      	b.n	8004a7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fe fdda 	bl	80033f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2224      	movs	r2, #36	; 0x24
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004862:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004872:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004874:	f001 fc7c 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 8004878:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4a81      	ldr	r2, [pc, #516]	; (8004a84 <HAL_I2C_Init+0x274>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d807      	bhi.n	8004894 <HAL_I2C_Init+0x84>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4a80      	ldr	r2, [pc, #512]	; (8004a88 <HAL_I2C_Init+0x278>)
 8004888:	4293      	cmp	r3, r2
 800488a:	bf94      	ite	ls
 800488c:	2301      	movls	r3, #1
 800488e:	2300      	movhi	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	e006      	b.n	80048a2 <HAL_I2C_Init+0x92>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4a7d      	ldr	r2, [pc, #500]	; (8004a8c <HAL_I2C_Init+0x27c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	bf94      	ite	ls
 800489c:	2301      	movls	r3, #1
 800489e:	2300      	movhi	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e0e7      	b.n	8004a7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4a78      	ldr	r2, [pc, #480]	; (8004a90 <HAL_I2C_Init+0x280>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	0c9b      	lsrs	r3, r3, #18
 80048b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4a6a      	ldr	r2, [pc, #424]	; (8004a84 <HAL_I2C_Init+0x274>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d802      	bhi.n	80048e4 <HAL_I2C_Init+0xd4>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	3301      	adds	r3, #1
 80048e2:	e009      	b.n	80048f8 <HAL_I2C_Init+0xe8>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	4a69      	ldr	r2, [pc, #420]	; (8004a94 <HAL_I2C_Init+0x284>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	099b      	lsrs	r3, r3, #6
 80048f6:	3301      	adds	r3, #1
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6812      	ldr	r2, [r2, #0]
 80048fc:	430b      	orrs	r3, r1
 80048fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800490a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	495c      	ldr	r1, [pc, #368]	; (8004a84 <HAL_I2C_Init+0x274>)
 8004914:	428b      	cmp	r3, r1
 8004916:	d819      	bhi.n	800494c <HAL_I2C_Init+0x13c>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1e59      	subs	r1, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	fbb1 f3f3 	udiv	r3, r1, r3
 8004926:	1c59      	adds	r1, r3, #1
 8004928:	f640 73fc 	movw	r3, #4092	; 0xffc
 800492c:	400b      	ands	r3, r1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_I2C_Init+0x138>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1e59      	subs	r1, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004940:	3301      	adds	r3, #1
 8004942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004946:	e051      	b.n	80049ec <HAL_I2C_Init+0x1dc>
 8004948:	2304      	movs	r3, #4
 800494a:	e04f      	b.n	80049ec <HAL_I2C_Init+0x1dc>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d111      	bne.n	8004978 <HAL_I2C_Init+0x168>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	1e58      	subs	r0, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6859      	ldr	r1, [r3, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	440b      	add	r3, r1
 8004962:	fbb0 f3f3 	udiv	r3, r0, r3
 8004966:	3301      	adds	r3, #1
 8004968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	e012      	b.n	800499e <HAL_I2C_Init+0x18e>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1e58      	subs	r0, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	0099      	lsls	r1, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	fbb0 f3f3 	udiv	r3, r0, r3
 800498e:	3301      	adds	r3, #1
 8004990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf0c      	ite	eq
 8004998:	2301      	moveq	r3, #1
 800499a:	2300      	movne	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_I2C_Init+0x196>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e022      	b.n	80049ec <HAL_I2C_Init+0x1dc>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10e      	bne.n	80049cc <HAL_I2C_Init+0x1bc>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1e58      	subs	r0, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6859      	ldr	r1, [r3, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	440b      	add	r3, r1
 80049bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c0:	3301      	adds	r3, #1
 80049c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ca:	e00f      	b.n	80049ec <HAL_I2C_Init+0x1dc>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	1e58      	subs	r0, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6859      	ldr	r1, [r3, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	0099      	lsls	r1, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e2:	3301      	adds	r3, #1
 80049e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	6809      	ldr	r1, [r1, #0]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69da      	ldr	r2, [r3, #28]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6911      	ldr	r1, [r2, #16]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68d2      	ldr	r2, [r2, #12]
 8004a26:	4311      	orrs	r1, r2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	000186a0 	.word	0x000186a0
 8004a88:	001e847f 	.word	0x001e847f
 8004a8c:	003d08ff 	.word	0x003d08ff
 8004a90:	431bde83 	.word	0x431bde83
 8004a94:	10624dd3 	.word	0x10624dd3

08004a98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	817b      	strh	r3, [r7, #10]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	813b      	strh	r3, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ab2:	f7fe ffa3 	bl	80039fc <HAL_GetTick>
 8004ab6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	f040 80d9 	bne.w	8004c78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	2319      	movs	r3, #25
 8004acc:	2201      	movs	r2, #1
 8004ace:	496d      	ldr	r1, [pc, #436]	; (8004c84 <HAL_I2C_Mem_Write+0x1ec>)
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fc8b 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
 8004ade:	e0cc      	b.n	8004c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_I2C_Mem_Write+0x56>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e0c5      	b.n	8004c7a <HAL_I2C_Mem_Write+0x1e2>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d007      	beq.n	8004b14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2221      	movs	r2, #33	; 0x21
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2240      	movs	r2, #64	; 0x40
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a3a      	ldr	r2, [r7, #32]
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4a4d      	ldr	r2, [pc, #308]	; (8004c88 <HAL_I2C_Mem_Write+0x1f0>)
 8004b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b56:	88f8      	ldrh	r0, [r7, #6]
 8004b58:	893a      	ldrh	r2, [r7, #8]
 8004b5a:	8979      	ldrh	r1, [r7, #10]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	4603      	mov	r3, r0
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fac2 	bl	80050f0 <I2C_RequestMemoryWrite>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d052      	beq.n	8004c18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e081      	b.n	8004c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fd50 	bl	8005620 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00d      	beq.n	8004ba2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d107      	bne.n	8004b9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e06b      	b.n	8004c7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	781a      	ldrb	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d11b      	bne.n	8004c18 <HAL_I2C_Mem_Write+0x180>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d017      	beq.n	8004c18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	781a      	ldrb	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1aa      	bne.n	8004b76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fd43 	bl	80056b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00d      	beq.n	8004c4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d107      	bne.n	8004c48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e016      	b.n	8004c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	e000      	b.n	8004c7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c78:	2302      	movs	r3, #2
  }
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	00100002 	.word	0x00100002
 8004c88:	ffff0000 	.word	0xffff0000

08004c8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08c      	sub	sp, #48	; 0x30
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	4608      	mov	r0, r1
 8004c96:	4611      	mov	r1, r2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	817b      	strh	r3, [r7, #10]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	813b      	strh	r3, [r7, #8]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ca6:	f7fe fea9 	bl	80039fc <HAL_GetTick>
 8004caa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	f040 8214 	bne.w	80050e2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	2319      	movs	r3, #25
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	497b      	ldr	r1, [pc, #492]	; (8004eb0 <HAL_I2C_Mem_Read+0x224>)
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fb91 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e207      	b.n	80050e4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_I2C_Mem_Read+0x56>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e200      	b.n	80050e4 <HAL_I2C_Mem_Read+0x458>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d007      	beq.n	8004d08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2222      	movs	r2, #34	; 0x22
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2240      	movs	r2, #64	; 0x40
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4a5b      	ldr	r2, [pc, #364]	; (8004eb4 <HAL_I2C_Mem_Read+0x228>)
 8004d48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d4a:	88f8      	ldrh	r0, [r7, #6]
 8004d4c:	893a      	ldrh	r2, [r7, #8]
 8004d4e:	8979      	ldrh	r1, [r7, #10]
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	4603      	mov	r3, r0
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 fa5e 	bl	800521c <I2C_RequestMemoryRead>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e1bc      	b.n	80050e4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d113      	bne.n	8004d9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d72:	2300      	movs	r3, #0
 8004d74:	623b      	str	r3, [r7, #32]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	623b      	str	r3, [r7, #32]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	623b      	str	r3, [r7, #32]
 8004d86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	e190      	b.n	80050bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d11b      	bne.n	8004dda <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db2:	2300      	movs	r3, #0
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	e170      	b.n	80050bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d11b      	bne.n	8004e1a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e02:	2300      	movs	r3, #0
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	e150      	b.n	80050bc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e30:	e144      	b.n	80050bc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	f200 80f1 	bhi.w	800501e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d123      	bne.n	8004e8c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 fc79 	bl	8005740 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e145      	b.n	80050e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e8a:	e117      	b.n	80050bc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d14e      	bne.n	8004f32 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	4906      	ldr	r1, [pc, #24]	; (8004eb8 <HAL_I2C_Mem_Read+0x22c>)
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 faa4 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e11a      	b.n	80050e4 <HAL_I2C_Mem_Read+0x458>
 8004eae:	bf00      	nop
 8004eb0:	00100002 	.word	0x00100002
 8004eb4:	ffff0000 	.word	0xffff0000
 8004eb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f30:	e0c4      	b.n	80050bc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	2200      	movs	r2, #0
 8004f3a:	496c      	ldr	r1, [pc, #432]	; (80050ec <HAL_I2C_Mem_Read+0x460>)
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 fa55 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0cb      	b.n	80050e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	2200      	movs	r2, #0
 8004f96:	4955      	ldr	r1, [pc, #340]	; (80050ec <HAL_I2C_Mem_Read+0x460>)
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fa27 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e09d      	b.n	80050e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800501c:	e04e      	b.n	80050bc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800501e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005020:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fb8c 	bl	8005740 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e058      	b.n	80050e4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b04      	cmp	r3, #4
 8005070:	d124      	bne.n	80050bc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005076:	2b03      	cmp	r3, #3
 8005078:	d107      	bne.n	800508a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005088:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f47f aeb6 	bne.w	8004e32 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	e000      	b.n	80050e4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
  }
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3728      	adds	r7, #40	; 0x28
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	00010004 	.word	0x00010004

080050f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	4608      	mov	r0, r1
 80050fa:	4611      	mov	r1, r2
 80050fc:	461a      	mov	r2, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	817b      	strh	r3, [r7, #10]
 8005102:	460b      	mov	r3, r1
 8005104:	813b      	strh	r3, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005118:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	2200      	movs	r2, #0
 8005122:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 f960 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00d      	beq.n	800514e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005140:	d103      	bne.n	800514a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005148:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e05f      	b.n	800520e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800514e:	897b      	ldrh	r3, [r7, #10]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	461a      	mov	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800515c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	6a3a      	ldr	r2, [r7, #32]
 8005162:	492d      	ldr	r1, [pc, #180]	; (8005218 <I2C_RequestMemoryWrite+0x128>)
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f9bb 	bl	80054e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e04c      	b.n	800520e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518c:	6a39      	ldr	r1, [r7, #32]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fa46 	bl	8005620 <I2C_WaitOnTXEFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00d      	beq.n	80051b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d107      	bne.n	80051b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e02b      	b.n	800520e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d105      	bne.n	80051c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051bc:	893b      	ldrh	r3, [r7, #8]
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	611a      	str	r2, [r3, #16]
 80051c6:	e021      	b.n	800520c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051c8:	893b      	ldrh	r3, [r7, #8]
 80051ca:	0a1b      	lsrs	r3, r3, #8
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d8:	6a39      	ldr	r1, [r7, #32]
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 fa20 	bl	8005620 <I2C_WaitOnTXEFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00d      	beq.n	8005202 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d107      	bne.n	80051fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e005      	b.n	800520e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005202:	893b      	ldrh	r3, [r7, #8]
 8005204:	b2da      	uxtb	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	00010002 	.word	0x00010002

0800521c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	4608      	mov	r0, r1
 8005226:	4611      	mov	r1, r2
 8005228:	461a      	mov	r2, r3
 800522a:	4603      	mov	r3, r0
 800522c:	817b      	strh	r3, [r7, #10]
 800522e:	460b      	mov	r3, r1
 8005230:	813b      	strh	r3, [r7, #8]
 8005232:	4613      	mov	r3, r2
 8005234:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005244:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005254:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	2200      	movs	r2, #0
 800525e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f8c2 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00d      	beq.n	800528a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527c:	d103      	bne.n	8005286 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005284:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e0aa      	b.n	80053e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800528a:	897b      	ldrh	r3, [r7, #10]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005298:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	6a3a      	ldr	r2, [r7, #32]
 800529e:	4952      	ldr	r1, [pc, #328]	; (80053e8 <I2C_RequestMemoryRead+0x1cc>)
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 f91d 	bl	80054e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e097      	b.n	80053e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c8:	6a39      	ldr	r1, [r7, #32]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f9a8 	bl	8005620 <I2C_WaitOnTXEFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00d      	beq.n	80052f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d107      	bne.n	80052ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e076      	b.n	80053e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d105      	bne.n	8005304 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052f8:	893b      	ldrh	r3, [r7, #8]
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	611a      	str	r2, [r3, #16]
 8005302:	e021      	b.n	8005348 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005304:	893b      	ldrh	r3, [r7, #8]
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	b29b      	uxth	r3, r3
 800530a:	b2da      	uxtb	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005314:	6a39      	ldr	r1, [r7, #32]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f982 	bl	8005620 <I2C_WaitOnTXEFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00d      	beq.n	800533e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	2b04      	cmp	r3, #4
 8005328:	d107      	bne.n	800533a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005338:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e050      	b.n	80053e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800533e:	893b      	ldrh	r3, [r7, #8]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534a:	6a39      	ldr	r1, [r7, #32]
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f967 	bl	8005620 <I2C_WaitOnTXEFlagUntilTimeout>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00d      	beq.n	8005374 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	2b04      	cmp	r3, #4
 800535e:	d107      	bne.n	8005370 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e035      	b.n	80053e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005382:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	2200      	movs	r2, #0
 800538c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f82b 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00d      	beq.n	80053b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053aa:	d103      	bne.n	80053b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e013      	b.n	80053e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053b8:	897b      	ldrh	r3, [r7, #10]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	f043 0301 	orr.w	r3, r3, #1
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	6a3a      	ldr	r2, [r7, #32]
 80053cc:	4906      	ldr	r1, [pc, #24]	; (80053e8 <I2C_RequestMemoryRead+0x1cc>)
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f886 	bl	80054e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	00010002 	.word	0x00010002

080053ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	4613      	mov	r3, r2
 80053fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053fc:	e048      	b.n	8005490 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005404:	d044      	beq.n	8005490 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005406:	f7fe faf9 	bl	80039fc <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d302      	bcc.n	800541c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d139      	bne.n	8005490 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	0c1b      	lsrs	r3, r3, #16
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b01      	cmp	r3, #1
 8005424:	d10d      	bne.n	8005442 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	43da      	mvns	r2, r3
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	4013      	ands	r3, r2
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	bf0c      	ite	eq
 8005438:	2301      	moveq	r3, #1
 800543a:	2300      	movne	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	e00c      	b.n	800545c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	43da      	mvns	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4013      	ands	r3, r2
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	bf0c      	ite	eq
 8005454:	2301      	moveq	r3, #1
 8005456:	2300      	movne	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	429a      	cmp	r2, r3
 8005460:	d116      	bne.n	8005490 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	f043 0220 	orr.w	r2, r3, #32
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e023      	b.n	80054d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	0c1b      	lsrs	r3, r3, #16
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b01      	cmp	r3, #1
 8005498:	d10d      	bne.n	80054b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	43da      	mvns	r2, r3
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	4013      	ands	r3, r2
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	bf0c      	ite	eq
 80054ac:	2301      	moveq	r3, #1
 80054ae:	2300      	movne	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	e00c      	b.n	80054d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	43da      	mvns	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4013      	ands	r3, r2
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d093      	beq.n	80053fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054ee:	e071      	b.n	80055d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054fe:	d123      	bne.n	8005548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005518:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	f043 0204 	orr.w	r2, r3, #4
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e067      	b.n	8005618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554e:	d041      	beq.n	80055d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005550:	f7fe fa54 	bl	80039fc <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	429a      	cmp	r2, r3
 800555e:	d302      	bcc.n	8005566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d136      	bne.n	80055d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	0c1b      	lsrs	r3, r3, #16
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	d10c      	bne.n	800558a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	43da      	mvns	r2, r3
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4013      	ands	r3, r2
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	bf14      	ite	ne
 8005582:	2301      	movne	r3, #1
 8005584:	2300      	moveq	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	e00b      	b.n	80055a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	43da      	mvns	r2, r3
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	4013      	ands	r3, r2
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	bf14      	ite	ne
 800559c:	2301      	movne	r3, #1
 800559e:	2300      	moveq	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d016      	beq.n	80055d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	f043 0220 	orr.w	r2, r3, #32
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e021      	b.n	8005618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	0c1b      	lsrs	r3, r3, #16
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d10c      	bne.n	80055f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	43da      	mvns	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4013      	ands	r3, r2
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bf14      	ite	ne
 80055f0:	2301      	movne	r3, #1
 80055f2:	2300      	moveq	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	e00b      	b.n	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	43da      	mvns	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4013      	ands	r3, r2
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	bf14      	ite	ne
 800560a:	2301      	movne	r3, #1
 800560c:	2300      	moveq	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	f47f af6d 	bne.w	80054f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800562c:	e034      	b.n	8005698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 f8e3 	bl	80057fa <I2C_IsAcknowledgeFailed>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e034      	b.n	80056a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005644:	d028      	beq.n	8005698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005646:	f7fe f9d9 	bl	80039fc <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	429a      	cmp	r2, r3
 8005654:	d302      	bcc.n	800565c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11d      	bne.n	8005698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005666:	2b80      	cmp	r3, #128	; 0x80
 8005668:	d016      	beq.n	8005698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	f043 0220 	orr.w	r2, r3, #32
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e007      	b.n	80056a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a2:	2b80      	cmp	r3, #128	; 0x80
 80056a4:	d1c3      	bne.n	800562e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056bc:	e034      	b.n	8005728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f89b 	bl	80057fa <I2C_IsAcknowledgeFailed>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e034      	b.n	8005738 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d028      	beq.n	8005728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d6:	f7fe f991 	bl	80039fc <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d302      	bcc.n	80056ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d11d      	bne.n	8005728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f003 0304 	and.w	r3, r3, #4
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d016      	beq.n	8005728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	f043 0220 	orr.w	r2, r3, #32
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e007      	b.n	8005738 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b04      	cmp	r3, #4
 8005734:	d1c3      	bne.n	80056be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800574c:	e049      	b.n	80057e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b10      	cmp	r3, #16
 800575a:	d119      	bne.n	8005790 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0210 	mvn.w	r2, #16
 8005764:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e030      	b.n	80057f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005790:	f7fe f934 	bl	80039fc <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	429a      	cmp	r2, r3
 800579e:	d302      	bcc.n	80057a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d11d      	bne.n	80057e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d016      	beq.n	80057e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f043 0220 	orr.w	r2, r3, #32
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e007      	b.n	80057f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	d1ae      	bne.n	800574e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005810:	d11b      	bne.n	800584a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800581a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2220      	movs	r2, #32
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f043 0204 	orr.w	r2, r3, #4
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005864:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <HAL_PWR_EnterSLEEPMode+0x38>)
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	4a09      	ldr	r2, [pc, #36]	; (8005890 <HAL_PWR_EnterSLEEPMode+0x38>)
 800586a:	f023 0304 	bic.w	r3, r3, #4
 800586e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d005      	beq.n	8005882 <HAL_PWR_EnterSLEEPMode+0x2a>
    /* Request Wait For Interrupt */
//    __WFI();
  }
  else
  {
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 8005876:	78fb      	ldrb	r3, [r7, #3]
 8005878:	2b03      	cmp	r3, #3
 800587a:	d002      	beq.n	8005882 <HAL_PWR_EnterSLEEPMode+0x2a>
    {
      /* Clear all pending event */
      __SEV();
 800587c:	bf40      	sev
      __WFE();
 800587e:	bf20      	wfe
      __WFE();
 8005880:	bf20      	wfe
    }

    /* Request Wait For Event */
//    __WFI();
  }
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	e000ed00 	.word	0xe000ed00

08005894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e267      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d075      	beq.n	800599e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058b2:	4b88      	ldr	r3, [pc, #544]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 030c 	and.w	r3, r3, #12
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d00c      	beq.n	80058d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058be:	4b85      	ldr	r3, [pc, #532]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d112      	bne.n	80058f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058ca:	4b82      	ldr	r3, [pc, #520]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058d6:	d10b      	bne.n	80058f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d8:	4b7e      	ldr	r3, [pc, #504]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d05b      	beq.n	800599c <HAL_RCC_OscConfig+0x108>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d157      	bne.n	800599c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e242      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f8:	d106      	bne.n	8005908 <HAL_RCC_OscConfig+0x74>
 80058fa:	4b76      	ldr	r3, [pc, #472]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a75      	ldr	r2, [pc, #468]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	e01d      	b.n	8005944 <HAL_RCC_OscConfig+0xb0>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005910:	d10c      	bne.n	800592c <HAL_RCC_OscConfig+0x98>
 8005912:	4b70      	ldr	r3, [pc, #448]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a6f      	ldr	r2, [pc, #444]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	4b6d      	ldr	r3, [pc, #436]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a6c      	ldr	r2, [pc, #432]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	e00b      	b.n	8005944 <HAL_RCC_OscConfig+0xb0>
 800592c:	4b69      	ldr	r3, [pc, #420]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a68      	ldr	r2, [pc, #416]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	4b66      	ldr	r3, [pc, #408]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a65      	ldr	r2, [pc, #404]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 800593e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d013      	beq.n	8005974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594c:	f7fe f856 	bl	80039fc <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005954:	f7fe f852 	bl	80039fc <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	; 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e207      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005966:	4b5b      	ldr	r3, [pc, #364]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCC_OscConfig+0xc0>
 8005972:	e014      	b.n	800599e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005974:	f7fe f842 	bl	80039fc <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800597c:	f7fe f83e 	bl	80039fc <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b64      	cmp	r3, #100	; 0x64
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e1f3      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800598e:	4b51      	ldr	r3, [pc, #324]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f0      	bne.n	800597c <HAL_RCC_OscConfig+0xe8>
 800599a:	e000      	b.n	800599e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800599c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d063      	beq.n	8005a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059aa:	4b4a      	ldr	r3, [pc, #296]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 030c 	and.w	r3, r3, #12
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00b      	beq.n	80059ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059b6:	4b47      	ldr	r3, [pc, #284]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d11c      	bne.n	80059fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059c2:	4b44      	ldr	r3, [pc, #272]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d116      	bne.n	80059fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ce:	4b41      	ldr	r3, [pc, #260]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <HAL_RCC_OscConfig+0x152>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d001      	beq.n	80059e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e1c7      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e6:	4b3b      	ldr	r3, [pc, #236]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4937      	ldr	r1, [pc, #220]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059fa:	e03a      	b.n	8005a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d020      	beq.n	8005a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a04:	4b34      	ldr	r3, [pc, #208]	; (8005ad8 <HAL_RCC_OscConfig+0x244>)
 8005a06:	2201      	movs	r2, #1
 8005a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0a:	f7fd fff7 	bl	80039fc <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a12:	f7fd fff3 	bl	80039fc <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e1a8      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a24:	4b2b      	ldr	r3, [pc, #172]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f0      	beq.n	8005a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a30:	4b28      	ldr	r3, [pc, #160]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	4925      	ldr	r1, [pc, #148]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	600b      	str	r3, [r1, #0]
 8005a44:	e015      	b.n	8005a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a46:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <HAL_RCC_OscConfig+0x244>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4c:	f7fd ffd6 	bl	80039fc <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a54:	f7fd ffd2 	bl	80039fc <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e187      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a66:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f0      	bne.n	8005a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d036      	beq.n	8005aec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d016      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a86:	4b15      	ldr	r3, [pc, #84]	; (8005adc <HAL_RCC_OscConfig+0x248>)
 8005a88:	2201      	movs	r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a8c:	f7fd ffb6 	bl	80039fc <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a94:	f7fd ffb2 	bl	80039fc <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e167      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <HAL_RCC_OscConfig+0x240>)
 8005aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0f0      	beq.n	8005a94 <HAL_RCC_OscConfig+0x200>
 8005ab2:	e01b      	b.n	8005aec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ab4:	4b09      	ldr	r3, [pc, #36]	; (8005adc <HAL_RCC_OscConfig+0x248>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aba:	f7fd ff9f 	bl	80039fc <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ac0:	e00e      	b.n	8005ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ac2:	f7fd ff9b 	bl	80039fc <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d907      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e150      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	42470000 	.word	0x42470000
 8005adc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ae0:	4b88      	ldr	r3, [pc, #544]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1ea      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8097 	beq.w	8005c28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005afa:	2300      	movs	r3, #0
 8005afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005afe:	4b81      	ldr	r3, [pc, #516]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10f      	bne.n	8005b2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60bb      	str	r3, [r7, #8]
 8005b0e:	4b7d      	ldr	r3, [pc, #500]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	4a7c      	ldr	r2, [pc, #496]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b18:	6413      	str	r3, [r2, #64]	; 0x40
 8005b1a:	4b7a      	ldr	r3, [pc, #488]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b22:	60bb      	str	r3, [r7, #8]
 8005b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b26:	2301      	movs	r3, #1
 8005b28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b2a:	4b77      	ldr	r3, [pc, #476]	; (8005d08 <HAL_RCC_OscConfig+0x474>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d118      	bne.n	8005b68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b36:	4b74      	ldr	r3, [pc, #464]	; (8005d08 <HAL_RCC_OscConfig+0x474>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a73      	ldr	r2, [pc, #460]	; (8005d08 <HAL_RCC_OscConfig+0x474>)
 8005b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b42:	f7fd ff5b 	bl	80039fc <HAL_GetTick>
 8005b46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b4a:	f7fd ff57 	bl	80039fc <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e10c      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5c:	4b6a      	ldr	r3, [pc, #424]	; (8005d08 <HAL_RCC_OscConfig+0x474>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0f0      	beq.n	8005b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d106      	bne.n	8005b7e <HAL_RCC_OscConfig+0x2ea>
 8005b70:	4b64      	ldr	r3, [pc, #400]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b74:	4a63      	ldr	r2, [pc, #396]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b76:	f043 0301 	orr.w	r3, r3, #1
 8005b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b7c:	e01c      	b.n	8005bb8 <HAL_RCC_OscConfig+0x324>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2b05      	cmp	r3, #5
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x30c>
 8005b86:	4b5f      	ldr	r3, [pc, #380]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	4a5e      	ldr	r2, [pc, #376]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b8c:	f043 0304 	orr.w	r3, r3, #4
 8005b90:	6713      	str	r3, [r2, #112]	; 0x70
 8005b92:	4b5c      	ldr	r3, [pc, #368]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b96:	4a5b      	ldr	r2, [pc, #364]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b9e:	e00b      	b.n	8005bb8 <HAL_RCC_OscConfig+0x324>
 8005ba0:	4b58      	ldr	r3, [pc, #352]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba4:	4a57      	ldr	r2, [pc, #348]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005ba6:	f023 0301 	bic.w	r3, r3, #1
 8005baa:	6713      	str	r3, [r2, #112]	; 0x70
 8005bac:	4b55      	ldr	r3, [pc, #340]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb0:	4a54      	ldr	r2, [pc, #336]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005bb2:	f023 0304 	bic.w	r3, r3, #4
 8005bb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d015      	beq.n	8005bec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc0:	f7fd ff1c 	bl	80039fc <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc6:	e00a      	b.n	8005bde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc8:	f7fd ff18 	bl	80039fc <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e0cb      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bde:	4b49      	ldr	r3, [pc, #292]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0ee      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x334>
 8005bea:	e014      	b.n	8005c16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bec:	f7fd ff06 	bl	80039fc <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bf2:	e00a      	b.n	8005c0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf4:	f7fd ff02 	bl	80039fc <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e0b5      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c0a:	4b3e      	ldr	r3, [pc, #248]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1ee      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d105      	bne.n	8005c28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c1c:	4b39      	ldr	r3, [pc, #228]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	4a38      	ldr	r2, [pc, #224]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80a1 	beq.w	8005d74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c32:	4b34      	ldr	r3, [pc, #208]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 030c 	and.w	r3, r3, #12
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d05c      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d141      	bne.n	8005cca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c46:	4b31      	ldr	r3, [pc, #196]	; (8005d0c <HAL_RCC_OscConfig+0x478>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c4c:	f7fd fed6 	bl	80039fc <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c54:	f7fd fed2 	bl	80039fc <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e087      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c66:	4b27      	ldr	r3, [pc, #156]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f0      	bne.n	8005c54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69da      	ldr	r2, [r3, #28]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	019b      	lsls	r3, r3, #6
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	041b      	lsls	r3, r3, #16
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	061b      	lsls	r3, r3, #24
 8005c96:	491b      	ldr	r1, [pc, #108]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c9c:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <HAL_RCC_OscConfig+0x478>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca2:	f7fd feab 	bl	80039fc <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005caa:	f7fd fea7 	bl	80039fc <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e05c      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cbc:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0f0      	beq.n	8005caa <HAL_RCC_OscConfig+0x416>
 8005cc8:	e054      	b.n	8005d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cca:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <HAL_RCC_OscConfig+0x478>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd0:	f7fd fe94 	bl	80039fc <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd8:	f7fd fe90 	bl	80039fc <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e045      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cea:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <HAL_RCC_OscConfig+0x470>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f0      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x444>
 8005cf6:	e03d      	b.n	8005d74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d107      	bne.n	8005d10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e038      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
 8005d04:	40023800 	.word	0x40023800
 8005d08:	40007000 	.word	0x40007000
 8005d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d10:	4b1b      	ldr	r3, [pc, #108]	; (8005d80 <HAL_RCC_OscConfig+0x4ec>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d028      	beq.n	8005d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d121      	bne.n	8005d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d11a      	bne.n	8005d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d40:	4013      	ands	r3, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d111      	bne.n	8005d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d107      	bne.n	8005d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40023800 	.word	0x40023800

08005d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0cc      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d98:	4b68      	ldr	r3, [pc, #416]	; (8005f3c <HAL_RCC_ClockConfig+0x1b8>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d90c      	bls.n	8005dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da6:	4b65      	ldr	r3, [pc, #404]	; (8005f3c <HAL_RCC_ClockConfig+0x1b8>)
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dae:	4b63      	ldr	r3, [pc, #396]	; (8005f3c <HAL_RCC_ClockConfig+0x1b8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d001      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e0b8      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d020      	beq.n	8005e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dd8:	4b59      	ldr	r3, [pc, #356]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	4a58      	ldr	r2, [pc, #352]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005de2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0308 	and.w	r3, r3, #8
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005df0:	4b53      	ldr	r3, [pc, #332]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	4a52      	ldr	r2, [pc, #328]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dfc:	4b50      	ldr	r3, [pc, #320]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	494d      	ldr	r1, [pc, #308]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d044      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d107      	bne.n	8005e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e22:	4b47      	ldr	r3, [pc, #284]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d119      	bne.n	8005e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e07f      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d003      	beq.n	8005e42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d107      	bne.n	8005e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e42:	4b3f      	ldr	r3, [pc, #252]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d109      	bne.n	8005e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e06f      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e52:	4b3b      	ldr	r3, [pc, #236]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e067      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e62:	4b37      	ldr	r3, [pc, #220]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f023 0203 	bic.w	r2, r3, #3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	4934      	ldr	r1, [pc, #208]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e74:	f7fd fdc2 	bl	80039fc <HAL_GetTick>
 8005e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e7a:	e00a      	b.n	8005e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e7c:	f7fd fdbe 	bl	80039fc <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e04f      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e92:	4b2b      	ldr	r3, [pc, #172]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 020c 	and.w	r2, r3, #12
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d1eb      	bne.n	8005e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ea4:	4b25      	ldr	r3, [pc, #148]	; (8005f3c <HAL_RCC_ClockConfig+0x1b8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d20c      	bcs.n	8005ecc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eb2:	4b22      	ldr	r3, [pc, #136]	; (8005f3c <HAL_RCC_ClockConfig+0x1b8>)
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eba:	4b20      	ldr	r3, [pc, #128]	; (8005f3c <HAL_RCC_ClockConfig+0x1b8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e032      	b.n	8005f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d008      	beq.n	8005eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ed8:	4b19      	ldr	r3, [pc, #100]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	4916      	ldr	r1, [pc, #88]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d009      	beq.n	8005f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ef6:	4b12      	ldr	r3, [pc, #72]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	490e      	ldr	r1, [pc, #56]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f0a:	f000 f821 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	091b      	lsrs	r3, r3, #4
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	490a      	ldr	r1, [pc, #40]	; (8005f44 <HAL_RCC_ClockConfig+0x1c0>)
 8005f1c:	5ccb      	ldrb	r3, [r1, r3]
 8005f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f22:	4a09      	ldr	r2, [pc, #36]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f26:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fd fd22 	bl	8003974 <HAL_InitTick>

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40023c00 	.word	0x40023c00
 8005f40:	40023800 	.word	0x40023800
 8005f44:	08017e5c 	.word	0x08017e5c
 8005f48:	2000000c 	.word	0x2000000c
 8005f4c:	20000010 	.word	0x20000010

08005f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f54:	b094      	sub	sp, #80	; 0x50
 8005f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f68:	4b79      	ldr	r3, [pc, #484]	; (8006150 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 030c 	and.w	r3, r3, #12
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d00d      	beq.n	8005f90 <HAL_RCC_GetSysClockFreq+0x40>
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	f200 80e1 	bhi.w	800613c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <HAL_RCC_GetSysClockFreq+0x34>
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d003      	beq.n	8005f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8005f82:	e0db      	b.n	800613c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f84:	4b73      	ldr	r3, [pc, #460]	; (8006154 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f88:	e0db      	b.n	8006142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f8a:	4b72      	ldr	r3, [pc, #456]	; (8006154 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f8e:	e0d8      	b.n	8006142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f90:	4b6f      	ldr	r3, [pc, #444]	; (8006150 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f98:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f9a:	4b6d      	ldr	r3, [pc, #436]	; (8006150 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d063      	beq.n	800606e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa6:	4b6a      	ldr	r3, [pc, #424]	; (8006150 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	099b      	lsrs	r3, r3, #6
 8005fac:	2200      	movs	r2, #0
 8005fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8005fba:	2300      	movs	r3, #0
 8005fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	f04f 0000 	mov.w	r0, #0
 8005fca:	f04f 0100 	mov.w	r1, #0
 8005fce:	0159      	lsls	r1, r3, #5
 8005fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fd4:	0150      	lsls	r0, r2, #5
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4621      	mov	r1, r4
 8005fdc:	1a51      	subs	r1, r2, r1
 8005fde:	6139      	str	r1, [r7, #16]
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	f04f 0300 	mov.w	r3, #0
 8005ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ff4:	4659      	mov	r1, fp
 8005ff6:	018b      	lsls	r3, r1, #6
 8005ff8:	4651      	mov	r1, sl
 8005ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ffe:	4651      	mov	r1, sl
 8006000:	018a      	lsls	r2, r1, #6
 8006002:	4651      	mov	r1, sl
 8006004:	ebb2 0801 	subs.w	r8, r2, r1
 8006008:	4659      	mov	r1, fp
 800600a:	eb63 0901 	sbc.w	r9, r3, r1
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800601a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800601e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006022:	4690      	mov	r8, r2
 8006024:	4699      	mov	r9, r3
 8006026:	4623      	mov	r3, r4
 8006028:	eb18 0303 	adds.w	r3, r8, r3
 800602c:	60bb      	str	r3, [r7, #8]
 800602e:	462b      	mov	r3, r5
 8006030:	eb49 0303 	adc.w	r3, r9, r3
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	f04f 0200 	mov.w	r2, #0
 800603a:	f04f 0300 	mov.w	r3, #0
 800603e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006042:	4629      	mov	r1, r5
 8006044:	028b      	lsls	r3, r1, #10
 8006046:	4621      	mov	r1, r4
 8006048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800604c:	4621      	mov	r1, r4
 800604e:	028a      	lsls	r2, r1, #10
 8006050:	4610      	mov	r0, r2
 8006052:	4619      	mov	r1, r3
 8006054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006056:	2200      	movs	r2, #0
 8006058:	62bb      	str	r3, [r7, #40]	; 0x28
 800605a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800605c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006060:	f7fa fe0a 	bl	8000c78 <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4613      	mov	r3, r2
 800606a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800606c:	e058      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800606e:	4b38      	ldr	r3, [pc, #224]	; (8006150 <HAL_RCC_GetSysClockFreq+0x200>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	099b      	lsrs	r3, r3, #6
 8006074:	2200      	movs	r2, #0
 8006076:	4618      	mov	r0, r3
 8006078:	4611      	mov	r1, r2
 800607a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800607e:	623b      	str	r3, [r7, #32]
 8006080:	2300      	movs	r3, #0
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
 8006084:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006088:	4642      	mov	r2, r8
 800608a:	464b      	mov	r3, r9
 800608c:	f04f 0000 	mov.w	r0, #0
 8006090:	f04f 0100 	mov.w	r1, #0
 8006094:	0159      	lsls	r1, r3, #5
 8006096:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800609a:	0150      	lsls	r0, r2, #5
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4641      	mov	r1, r8
 80060a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80060a6:	4649      	mov	r1, r9
 80060a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060c0:	ebb2 040a 	subs.w	r4, r2, sl
 80060c4:	eb63 050b 	sbc.w	r5, r3, fp
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	00eb      	lsls	r3, r5, #3
 80060d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060d6:	00e2      	lsls	r2, r4, #3
 80060d8:	4614      	mov	r4, r2
 80060da:	461d      	mov	r5, r3
 80060dc:	4643      	mov	r3, r8
 80060de:	18e3      	adds	r3, r4, r3
 80060e0:	603b      	str	r3, [r7, #0]
 80060e2:	464b      	mov	r3, r9
 80060e4:	eb45 0303 	adc.w	r3, r5, r3
 80060e8:	607b      	str	r3, [r7, #4]
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060f6:	4629      	mov	r1, r5
 80060f8:	028b      	lsls	r3, r1, #10
 80060fa:	4621      	mov	r1, r4
 80060fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006100:	4621      	mov	r1, r4
 8006102:	028a      	lsls	r2, r1, #10
 8006104:	4610      	mov	r0, r2
 8006106:	4619      	mov	r1, r3
 8006108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800610a:	2200      	movs	r2, #0
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	61fa      	str	r2, [r7, #28]
 8006110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006114:	f7fa fdb0 	bl	8000c78 <__aeabi_uldivmod>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4613      	mov	r3, r2
 800611e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006120:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <HAL_RCC_GetSysClockFreq+0x200>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	0c1b      	lsrs	r3, r3, #16
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	3301      	adds	r3, #1
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006134:	fbb2 f3f3 	udiv	r3, r2, r3
 8006138:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800613a:	e002      	b.n	8006142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <HAL_RCC_GetSysClockFreq+0x204>)
 800613e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006144:	4618      	mov	r0, r3
 8006146:	3750      	adds	r7, #80	; 0x50
 8006148:	46bd      	mov	sp, r7
 800614a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800614e:	bf00      	nop
 8006150:	40023800 	.word	0x40023800
 8006154:	00f42400 	.word	0x00f42400

08006158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800615c:	4b03      	ldr	r3, [pc, #12]	; (800616c <HAL_RCC_GetHCLKFreq+0x14>)
 800615e:	681b      	ldr	r3, [r3, #0]
}
 8006160:	4618      	mov	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	2000000c 	.word	0x2000000c

08006170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006174:	f7ff fff0 	bl	8006158 <HAL_RCC_GetHCLKFreq>
 8006178:	4602      	mov	r2, r0
 800617a:	4b05      	ldr	r3, [pc, #20]	; (8006190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	0a9b      	lsrs	r3, r3, #10
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	4903      	ldr	r1, [pc, #12]	; (8006194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006186:	5ccb      	ldrb	r3, [r1, r3]
 8006188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800618c:	4618      	mov	r0, r3
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40023800 	.word	0x40023800
 8006194:	08017e6c 	.word	0x08017e6c

08006198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800619c:	f7ff ffdc 	bl	8006158 <HAL_RCC_GetHCLKFreq>
 80061a0:	4602      	mov	r2, r0
 80061a2:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	0b5b      	lsrs	r3, r3, #13
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	4903      	ldr	r1, [pc, #12]	; (80061bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061ae:	5ccb      	ldrb	r3, [r1, r3]
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40023800 	.word	0x40023800
 80061bc:	08017e6c 	.word	0x08017e6c

080061c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e022      	b.n	8006218 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d105      	bne.n	80061ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fd f94b 	bl	8003480 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2203      	movs	r2, #3
 80061ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f814 	bl	8006220 <HAL_SD_InitCard>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e00a      	b.n	8006218 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006220:	b5b0      	push	{r4, r5, r7, lr}
 8006222:	b08e      	sub	sp, #56	; 0x38
 8006224:	af04      	add	r7, sp, #16
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006228:	2300      	movs	r3, #0
 800622a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006230:	2300      	movs	r3, #0
 8006232:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006238:	2300      	movs	r3, #0
 800623a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800623c:	2376      	movs	r3, #118	; 0x76
 800623e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681d      	ldr	r5, [r3, #0]
 8006244:	466c      	mov	r4, sp
 8006246:	f107 0314 	add.w	r3, r7, #20
 800624a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800624e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006252:	f107 0308 	add.w	r3, r7, #8
 8006256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006258:	4628      	mov	r0, r5
 800625a:	f002 f999 	bl	8008590 <SDIO_Init>
 800625e:	4603      	mov	r3, r0
 8006260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e04f      	b.n	8006310 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006270:	4b29      	ldr	r3, [pc, #164]	; (8006318 <HAL_SD_InitCard+0xf8>)
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4618      	mov	r0, r3
 800627c:	f002 f9d1 	bl	8008622 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006280:	4b25      	ldr	r3, [pc, #148]	; (8006318 <HAL_SD_InitCard+0xf8>)
 8006282:	2201      	movs	r2, #1
 8006284:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006286:	2002      	movs	r0, #2
 8006288:	f7fd fbc4 	bl	8003a14 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 ff13 	bl	80070b8 <SD_PowerON>
 8006292:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00b      	beq.n	80062b2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e02e      	b.n	8006310 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fe32 	bl	8006f1c <SD_InitCard>
 80062b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e01b      	b.n	8006310 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062e0:	4618      	mov	r0, r3
 80062e2:	f002 fa30 	bl	8008746 <SDMMC_CmdBlockLength>
 80062e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00f      	beq.n	800630e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a0a      	ldr	r2, [pc, #40]	; (800631c <HAL_SD_InitCard+0xfc>)
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3728      	adds	r7, #40	; 0x28
 8006314:	46bd      	mov	sp, r7
 8006316:	bdb0      	pop	{r4, r5, r7, pc}
 8006318:	422580a0 	.word	0x422580a0
 800631c:	004005ff 	.word	0x004005ff

08006320 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b092      	sub	sp, #72	; 0x48
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800632e:	f7fd fb65 	bl	80039fc <HAL_GetTick>
 8006332:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d107      	bne.n	8006352 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e1c5      	b.n	80066de <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b01      	cmp	r3, #1
 800635c:	f040 81b8 	bne.w	80066d0 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	441a      	add	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006370:	429a      	cmp	r2, r3
 8006372:	d907      	bls.n	8006384 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e1ac      	b.n	80066de <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2203      	movs	r2, #3
 8006388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2200      	movs	r2, #0
 8006392:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006398:	2b01      	cmp	r3, #1
 800639a:	d002      	beq.n	80063a2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639e:	025b      	lsls	r3, r3, #9
 80063a0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063a2:	f04f 33ff 	mov.w	r3, #4294967295
 80063a6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	025b      	lsls	r3, r3, #9
 80063ac:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80063ae:	2390      	movs	r3, #144	; 0x90
 80063b0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80063b2:	2302      	movs	r3, #2
 80063b4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80063ba:	2301      	movs	r3, #1
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f107 0214 	add.w	r2, r7, #20
 80063c6:	4611      	mov	r1, r2
 80063c8:	4618      	mov	r0, r3
 80063ca:	f002 f990 	bl	80086ee <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d90a      	bls.n	80063ea <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2202      	movs	r2, #2
 80063d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063e0:	4618      	mov	r0, r3
 80063e2:	f002 f9f4 	bl	80087ce <SDMMC_CmdReadMultiBlock>
 80063e6:	6478      	str	r0, [r7, #68]	; 0x44
 80063e8:	e009      	b.n	80063fe <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2201      	movs	r2, #1
 80063ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063f6:	4618      	mov	r0, r3
 80063f8:	f002 f9c7 	bl	800878a <SDMMC_CmdReadSingleBlock>
 80063fc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80063fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006400:	2b00      	cmp	r3, #0
 8006402:	d012      	beq.n	800642a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a7e      	ldr	r2, [pc, #504]	; (8006604 <HAL_SD_ReadBlocks+0x2e4>)
 800640a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006412:	431a      	orrs	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e159      	b.n	80066de <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800642e:	e061      	b.n	80064f4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d03c      	beq.n	80064b8 <HAL_SD_ReadBlocks+0x198>
 800643e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d039      	beq.n	80064b8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006444:	2300      	movs	r3, #0
 8006446:	643b      	str	r3, [r7, #64]	; 0x40
 8006448:	e033      	b.n	80064b2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f002 f8c9 	bl	80085e6 <SDIO_ReadFIFO>
 8006454:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	b2da      	uxtb	r2, r3
 800645a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006460:	3301      	adds	r3, #1
 8006462:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006466:	3b01      	subs	r3, #1
 8006468:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	0a1b      	lsrs	r3, r3, #8
 800646e:	b2da      	uxtb	r2, r3
 8006470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006472:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	3301      	adds	r3, #1
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800647a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647c:	3b01      	subs	r3, #1
 800647e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	0c1b      	lsrs	r3, r3, #16
 8006484:	b2da      	uxtb	r2, r3
 8006486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006488:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800648a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648c:	3301      	adds	r3, #1
 800648e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006492:	3b01      	subs	r3, #1
 8006494:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	0e1b      	lsrs	r3, r3, #24
 800649a:	b2da      	uxtb	r2, r3
 800649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	3301      	adds	r3, #1
 80064a4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80064a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a8:	3b01      	subs	r3, #1
 80064aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80064ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ae:	3301      	adds	r3, #1
 80064b0:	643b      	str	r3, [r7, #64]	; 0x40
 80064b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b4:	2b07      	cmp	r3, #7
 80064b6:	d9c8      	bls.n	800644a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80064b8:	f7fd faa0 	bl	80039fc <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d902      	bls.n	80064ce <HAL_SD_ReadBlocks+0x1ae>
 80064c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d112      	bne.n	80064f4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a4c      	ldr	r2, [pc, #304]	; (8006604 <HAL_SD_ReadBlocks+0x2e4>)
 80064d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e0f4      	b.n	80066de <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064fa:	f240 332a 	movw	r3, #810	; 0x32a
 80064fe:	4013      	ands	r3, r2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d095      	beq.n	8006430 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650e:	2b00      	cmp	r3, #0
 8006510:	d022      	beq.n	8006558 <HAL_SD_ReadBlocks+0x238>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d91f      	bls.n	8006558 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651c:	2b03      	cmp	r3, #3
 800651e:	d01b      	beq.n	8006558 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4618      	mov	r0, r3
 8006526:	f002 f9b9 	bl	800889c <SDMMC_CmdStopTransfer>
 800652a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800652c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800652e:	2b00      	cmp	r3, #0
 8006530:	d012      	beq.n	8006558 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a33      	ldr	r2, [pc, #204]	; (8006604 <HAL_SD_ReadBlocks+0x2e4>)
 8006538:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800653e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006540:	431a      	orrs	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e0c2      	b.n	80066de <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655e:	f003 0308 	and.w	r3, r3, #8
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <HAL_SD_ReadBlocks+0x254>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006570:	2b00      	cmp	r3, #0
 8006572:	d012      	beq.n	800659a <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a22      	ldr	r2, [pc, #136]	; (8006604 <HAL_SD_ReadBlocks+0x2e4>)
 800657a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	f043 0208 	orr.w	r2, r3, #8
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e0a1      	b.n	80066de <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d012      	beq.n	80065ce <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a15      	ldr	r2, [pc, #84]	; (8006604 <HAL_SD_ReadBlocks+0x2e4>)
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	f043 0202 	orr.w	r2, r3, #2
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e087      	b.n	80066de <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d064      	beq.n	80066a6 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a08      	ldr	r2, [pc, #32]	; (8006604 <HAL_SD_ReadBlocks+0x2e4>)
 80065e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	f043 0220 	orr.w	r2, r3, #32
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e06d      	b.n	80066de <HAL_SD_ReadBlocks+0x3be>
 8006602:	bf00      	nop
 8006604:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4618      	mov	r0, r3
 800660e:	f001 ffea 	bl	80085e6 <SDIO_ReadFIFO>
 8006612:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	b2da      	uxtb	r2, r3
 8006618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800661c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661e:	3301      	adds	r3, #1
 8006620:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006624:	3b01      	subs	r3, #1
 8006626:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	0a1b      	lsrs	r3, r3, #8
 800662c:	b2da      	uxtb	r2, r3
 800662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006630:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006634:	3301      	adds	r3, #1
 8006636:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663a:	3b01      	subs	r3, #1
 800663c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800663e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006640:	0c1b      	lsrs	r3, r3, #16
 8006642:	b2da      	uxtb	r2, r3
 8006644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006646:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664a:	3301      	adds	r3, #1
 800664c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800664e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006650:	3b01      	subs	r3, #1
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	0e1b      	lsrs	r3, r3, #24
 8006658:	b2da      	uxtb	r2, r3
 800665a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800665e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006660:	3301      	adds	r3, #1
 8006662:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006666:	3b01      	subs	r3, #1
 8006668:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800666a:	f7fd f9c7 	bl	80039fc <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006676:	429a      	cmp	r2, r3
 8006678:	d902      	bls.n	8006680 <HAL_SD_ReadBlocks+0x360>
 800667a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800667c:	2b00      	cmp	r3, #0
 800667e:	d112      	bne.n	80066a6 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a18      	ldr	r2, [pc, #96]	; (80066e8 <HAL_SD_ReadBlocks+0x3c8>)
 8006686:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e01b      	b.n	80066de <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <HAL_SD_ReadBlocks+0x39a>
 80066b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1a6      	bne.n	8006608 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f240 523a 	movw	r2, #1338	; 0x53a
 80066c2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	e006      	b.n	80066de <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
  }
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3748      	adds	r7, #72	; 0x48
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	004005ff 	.word	0x004005ff

080066ec <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b092      	sub	sp, #72	; 0x48
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80066fa:	f7fd f97f 	bl	80039fc <HAL_GetTick>
 80066fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d107      	bne.n	800671e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e16d      	b.n	80069fa <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b01      	cmp	r3, #1
 8006728:	f040 8160 	bne.w	80069ec <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	441a      	add	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673c:	429a      	cmp	r2, r3
 800673e:	d907      	bls.n	8006750 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e154      	b.n	80069fa <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2203      	movs	r2, #3
 8006754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2200      	movs	r2, #0
 800675e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006764:	2b01      	cmp	r3, #1
 8006766:	d002      	beq.n	800676e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	025b      	lsls	r3, r3, #9
 800676c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800676e:	f04f 33ff 	mov.w	r3, #4294967295
 8006772:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	025b      	lsls	r3, r3, #9
 8006778:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800677a:	2390      	movs	r3, #144	; 0x90
 800677c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800677e:	2300      	movs	r3, #0
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006782:	2300      	movs	r3, #0
 8006784:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006786:	2301      	movs	r3, #1
 8006788:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f107 0218 	add.w	r2, r7, #24
 8006792:	4611      	mov	r1, r2
 8006794:	4618      	mov	r0, r3
 8006796:	f001 ffaa 	bl	80086ee <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d90a      	bls.n	80067b6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067ac:	4618      	mov	r0, r3
 80067ae:	f002 f852 	bl	8008856 <SDMMC_CmdWriteMultiBlock>
 80067b2:	6478      	str	r0, [r7, #68]	; 0x44
 80067b4:	e009      	b.n	80067ca <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2210      	movs	r2, #16
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067c2:	4618      	mov	r0, r3
 80067c4:	f002 f825 	bl	8008812 <SDMMC_CmdWriteSingleBlock>
 80067c8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80067ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d012      	beq.n	80067f6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a8b      	ldr	r2, [pc, #556]	; (8006a04 <HAL_SD_WriteBlocks+0x318>)
 80067d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067de:	431a      	orrs	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e101      	b.n	80069fa <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80067fa:	e065      	b.n	80068c8 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d040      	beq.n	800688c <HAL_SD_WriteBlocks+0x1a0>
 800680a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d03d      	beq.n	800688c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006810:	2300      	movs	r3, #0
 8006812:	643b      	str	r3, [r7, #64]	; 0x40
 8006814:	e037      	b.n	8006886 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800681c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681e:	3301      	adds	r3, #1
 8006820:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006824:	3b01      	subs	r3, #1
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	021a      	lsls	r2, r3, #8
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006836:	3301      	adds	r3, #1
 8006838:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800683a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683c:	3b01      	subs	r3, #1
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	041a      	lsls	r2, r3, #16
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800684c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684e:	3301      	adds	r3, #1
 8006850:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006854:	3b01      	subs	r3, #1
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	061a      	lsls	r2, r3, #24
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006866:	3301      	adds	r3, #1
 8006868:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800686a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686c:	3b01      	subs	r3, #1
 800686e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f107 0214 	add.w	r2, r7, #20
 8006878:	4611      	mov	r1, r2
 800687a:	4618      	mov	r0, r3
 800687c:	f001 fec0 	bl	8008600 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006882:	3301      	adds	r3, #1
 8006884:	643b      	str	r3, [r7, #64]	; 0x40
 8006886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006888:	2b07      	cmp	r3, #7
 800688a:	d9c4      	bls.n	8006816 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800688c:	f7fd f8b6 	bl	80039fc <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006898:	429a      	cmp	r2, r3
 800689a:	d902      	bls.n	80068a2 <HAL_SD_WriteBlocks+0x1b6>
 800689c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d112      	bne.n	80068c8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a57      	ldr	r2, [pc, #348]	; (8006a04 <HAL_SD_WriteBlocks+0x318>)
 80068a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b0:	431a      	orrs	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e098      	b.n	80069fa <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ce:	f240 331a 	movw	r3, #794	; 0x31a
 80068d2:	4013      	ands	r3, r2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d091      	beq.n	80067fc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d022      	beq.n	800692c <HAL_SD_WriteBlocks+0x240>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d91f      	bls.n	800692c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d01b      	beq.n	800692c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f001 ffcf 	bl	800889c <SDMMC_CmdStopTransfer>
 80068fe:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006902:	2b00      	cmp	r3, #0
 8006904:	d012      	beq.n	800692c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a3e      	ldr	r2, [pc, #248]	; (8006a04 <HAL_SD_WriteBlocks+0x318>)
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006914:	431a      	orrs	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e066      	b.n	80069fa <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <HAL_SD_WriteBlocks+0x25c>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006944:	2b00      	cmp	r3, #0
 8006946:	d012      	beq.n	800696e <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a2d      	ldr	r2, [pc, #180]	; (8006a04 <HAL_SD_WriteBlocks+0x318>)
 800694e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	f043 0208 	orr.w	r2, r3, #8
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e045      	b.n	80069fa <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d012      	beq.n	80069a2 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a20      	ldr	r2, [pc, #128]	; (8006a04 <HAL_SD_WriteBlocks+0x318>)
 8006982:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	f043 0202 	orr.w	r2, r3, #2
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e02b      	b.n	80069fa <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a8:	f003 0310 	and.w	r3, r3, #16
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d012      	beq.n	80069d6 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a13      	ldr	r2, [pc, #76]	; (8006a04 <HAL_SD_WriteBlocks+0x318>)
 80069b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	f043 0210 	orr.w	r2, r3, #16
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e011      	b.n	80069fa <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f240 523a 	movw	r2, #1338	; 0x53a
 80069de:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	e006      	b.n	80069fa <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
  }
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3748      	adds	r7, #72	; 0x48
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	004005ff 	.word	0x004005ff

08006a08 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a16:	0f9b      	lsrs	r3, r3, #30
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a22:	0e9b      	lsrs	r3, r3, #26
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	f003 030f 	and.w	r3, r3, #15
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a34:	0e1b      	lsrs	r3, r3, #24
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a46:	0c1b      	lsrs	r3, r3, #16
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a52:	0a1b      	lsrs	r3, r3, #8
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a68:	0d1b      	lsrs	r3, r3, #20
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a74:	0c1b      	lsrs	r3, r3, #16
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	f003 030f 	and.w	r3, r3, #15
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a86:	0bdb      	lsrs	r3, r3, #15
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a98:	0b9b      	lsrs	r3, r3, #14
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aaa:	0b5b      	lsrs	r3, r3, #13
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006abc:	0b1b      	lsrs	r3, r3, #12
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2200      	movs	r2, #0
 8006ace:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d163      	bne.n	8006ba0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006adc:	009a      	lsls	r2, r3, #2
 8006ade:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006ae8:	0f92      	lsrs	r2, r2, #30
 8006aea:	431a      	orrs	r2, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006af4:	0edb      	lsrs	r3, r3, #27
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b06:	0e1b      	lsrs	r3, r3, #24
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b18:	0d5b      	lsrs	r3, r3, #21
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b2a:	0c9b      	lsrs	r3, r3, #18
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b3c:	0bdb      	lsrs	r3, r3, #15
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	f003 0307 	and.w	r3, r3, #7
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	7e1b      	ldrb	r3, [r3, #24]
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	3302      	adds	r3, #2
 8006b60:	2201      	movs	r2, #1
 8006b62:	fa02 f303 	lsl.w	r3, r2, r3
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b6a:	fb03 f202 	mul.w	r2, r3, r2
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	7a1b      	ldrb	r3, [r3, #8]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	f003 030f 	and.w	r3, r3, #15
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	409a      	lsls	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006b8c:	0a52      	lsrs	r2, r2, #9
 8006b8e:	fb03 f202 	mul.w	r2, r3, r2
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b9c:	661a      	str	r2, [r3, #96]	; 0x60
 8006b9e:	e031      	b.n	8006c04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d11d      	bne.n	8006be4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bac:	041b      	lsls	r3, r3, #16
 8006bae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bb6:	0c1b      	lsrs	r3, r3, #16
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	029a      	lsls	r2, r3, #10
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bd8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	661a      	str	r2, [r3, #96]	; 0x60
 8006be2:	e00f      	b.n	8006c04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a58      	ldr	r2, [pc, #352]	; (8006d4c <HAL_SD_GetCardCSD+0x344>)
 8006bea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e09d      	b.n	8006d40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c08:	0b9b      	lsrs	r3, r3, #14
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c1a:	09db      	lsrs	r3, r3, #7
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3c:	0fdb      	lsrs	r3, r3, #31
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c48:	0f5b      	lsrs	r3, r3, #29
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	f003 0303 	and.w	r3, r3, #3
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	0e9b      	lsrs	r3, r3, #26
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6c:	0d9b      	lsrs	r3, r3, #22
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7e:	0d5b      	lsrs	r3, r3, #21
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9a:	0c1b      	lsrs	r3, r3, #16
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cae:	0bdb      	lsrs	r3, r3, #15
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc2:	0b9b      	lsrs	r3, r3, #14
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd6:	0b5b      	lsrs	r3, r3, #13
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cea:	0b1b      	lsrs	r3, r3, #12
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	0a9b      	lsrs	r3, r3, #10
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d12:	0a1b      	lsrs	r3, r3, #8
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d26:	085b      	lsrs	r3, r3, #1
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	004005ff 	.word	0x004005ff

08006d50 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006da8:	b5b0      	push	{r4, r5, r7, lr}
 8006daa:	b08e      	sub	sp, #56	; 0x38
 8006dac:	af04      	add	r7, sp, #16
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2203      	movs	r2, #3
 8006dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d02e      	beq.n	8006e26 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dce:	d106      	bne.n	8006dde <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	639a      	str	r2, [r3, #56]	; 0x38
 8006ddc:	e029      	b.n	8006e32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de4:	d10a      	bne.n	8006dfc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fa1c 	bl	8007224 <SD_WideBus_Enable>
 8006dec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	431a      	orrs	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	639a      	str	r2, [r3, #56]	; 0x38
 8006dfa:	e01a      	b.n	8006e32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10a      	bne.n	8006e18 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fa59 	bl	80072ba <SD_WideBus_Disable>
 8006e08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	431a      	orrs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	639a      	str	r2, [r3, #56]	; 0x38
 8006e16:	e00c      	b.n	8006e32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	639a      	str	r2, [r3, #56]	; 0x38
 8006e24:	e005      	b.n	8006e32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a26      	ldr	r2, [pc, #152]	; (8006ed8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006e40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e50:	e01f      	b.n	8006e92 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681d      	ldr	r5, [r3, #0]
 8006e78:	466c      	mov	r4, sp
 8006e7a:	f107 0314 	add.w	r3, r7, #20
 8006e7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e86:	f107 0308 	add.w	r3, r7, #8
 8006e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	f001 fb7f 	bl	8008590 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f001 fc53 	bl	8008746 <SDMMC_CmdBlockLength>
 8006ea0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00c      	beq.n	8006ec2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a0a      	ldr	r2, [pc, #40]	; (8006ed8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3728      	adds	r7, #40	; 0x28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	004005ff 	.word	0x004005ff

08006edc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006ee8:	f107 030c 	add.w	r3, r7, #12
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f970 	bl	80071d4 <SD_SendStatus>
 8006ef4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	0a5b      	lsrs	r3, r3, #9
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006f12:	693b      	ldr	r3, [r7, #16]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f1c:	b5b0      	push	{r4, r5, r7, lr}
 8006f1e:	b094      	sub	sp, #80	; 0x50
 8006f20:	af04      	add	r7, sp, #16
 8006f22:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006f24:	2301      	movs	r3, #1
 8006f26:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f001 fb86 	bl	800863e <SDIO_GetPowerState>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d102      	bne.n	8006f3e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006f3c:	e0b8      	b.n	80070b0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d02f      	beq.n	8006fa6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f001 fdb0 	bl	8008ab0 <SDMMC_CmdSendCID>
 8006f50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <SD_InitCard+0x40>
    {
      return errorstate;
 8006f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5a:	e0a9      	b.n	80070b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2100      	movs	r1, #0
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 fbb0 	bl	80086c8 <SDIO_GetResponse>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2104      	movs	r1, #4
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 fba7 	bl	80086c8 <SDIO_GetResponse>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2108      	movs	r1, #8
 8006f86:	4618      	mov	r0, r3
 8006f88:	f001 fb9e 	bl	80086c8 <SDIO_GetResponse>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	210c      	movs	r1, #12
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f001 fb95 	bl	80086c8 <SDIO_GetResponse>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d00d      	beq.n	8006fca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f107 020e 	add.w	r2, r7, #14
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 fdb6 	bl	8008b2a <SDMMC_CmdSetRelAdd>
 8006fbe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <SD_InitCard+0xae>
    {
      return errorstate;
 8006fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc8:	e072      	b.n	80070b0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d036      	beq.n	8007040 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006fd2:	89fb      	ldrh	r3, [r7, #14]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe2:	041b      	lsls	r3, r3, #16
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f001 fd80 	bl	8008aec <SDMMC_CmdSendCSD>
 8006fec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff6:	e05b      	b.n	80070b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f001 fb62 	bl	80086c8 <SDIO_GetResponse>
 8007004:	4602      	mov	r2, r0
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2104      	movs	r1, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f001 fb59 	bl	80086c8 <SDIO_GetResponse>
 8007016:	4602      	mov	r2, r0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2108      	movs	r1, #8
 8007022:	4618      	mov	r0, r3
 8007024:	f001 fb50 	bl	80086c8 <SDIO_GetResponse>
 8007028:	4602      	mov	r2, r0
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	210c      	movs	r1, #12
 8007034:	4618      	mov	r0, r3
 8007036:	f001 fb47 	bl	80086c8 <SDIO_GetResponse>
 800703a:	4602      	mov	r2, r0
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2104      	movs	r1, #4
 8007046:	4618      	mov	r0, r3
 8007048:	f001 fb3e 	bl	80086c8 <SDIO_GetResponse>
 800704c:	4603      	mov	r3, r0
 800704e:	0d1a      	lsrs	r2, r3, #20
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007054:	f107 0310 	add.w	r3, r7, #16
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff fcd4 	bl	8006a08 <HAL_SD_GetCardCSD>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007066:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800706a:	e021      	b.n	80070b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6819      	ldr	r1, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007074:	041b      	lsls	r3, r3, #16
 8007076:	2200      	movs	r2, #0
 8007078:	461c      	mov	r4, r3
 800707a:	4615      	mov	r5, r2
 800707c:	4622      	mov	r2, r4
 800707e:	462b      	mov	r3, r5
 8007080:	4608      	mov	r0, r1
 8007082:	f001 fc2d 	bl	80088e0 <SDMMC_CmdSelDesel>
 8007086:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <SD_InitCard+0x176>
  {
    return errorstate;
 800708e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007090:	e00e      	b.n	80070b0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681d      	ldr	r5, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	466c      	mov	r4, sp
 800709a:	f103 0210 	add.w	r2, r3, #16
 800709e:	ca07      	ldmia	r2, {r0, r1, r2}
 80070a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070a4:	3304      	adds	r3, #4
 80070a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070a8:	4628      	mov	r0, r5
 80070aa:	f001 fa71 	bl	8008590 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3740      	adds	r7, #64	; 0x40
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bdb0      	pop	{r4, r5, r7, pc}

080070b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	2300      	movs	r3, #0
 80070ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 fc28 	bl	8008926 <SDMMC_CmdGoIdleState>
 80070d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	e072      	b.n	80071c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f001 fc3b 	bl	8008962 <SDMMC_CmdOperCond>
 80070ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00d      	beq.n	8007110 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	f001 fc11 	bl	8008926 <SDMMC_CmdGoIdleState>
 8007104:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d004      	beq.n	8007116 <SD_PowerON+0x5e>
    {
      return errorstate;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	e05b      	b.n	80071c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711a:	2b01      	cmp	r3, #1
 800711c:	d137      	bne.n	800718e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2100      	movs	r1, #0
 8007124:	4618      	mov	r0, r3
 8007126:	f001 fc3b 	bl	80089a0 <SDMMC_CmdAppCommand>
 800712a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d02d      	beq.n	800718e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007132:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007136:	e047      	b.n	80071c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2100      	movs	r1, #0
 800713e:	4618      	mov	r0, r3
 8007140:	f001 fc2e 	bl	80089a0 <SDMMC_CmdAppCommand>
 8007144:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <SD_PowerON+0x98>
    {
      return errorstate;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	e03b      	b.n	80071c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	491e      	ldr	r1, [pc, #120]	; (80071d0 <SD_PowerON+0x118>)
 8007156:	4618      	mov	r0, r3
 8007158:	f001 fc44 	bl	80089e4 <SDMMC_CmdAppOperCommand>
 800715c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007164:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007168:	e02e      	b.n	80071c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2100      	movs	r1, #0
 8007170:	4618      	mov	r0, r3
 8007172:	f001 faa9 	bl	80086c8 <SDIO_GetResponse>
 8007176:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	0fdb      	lsrs	r3, r3, #31
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <SD_PowerON+0xcc>
 8007180:	2301      	movs	r3, #1
 8007182:	e000      	b.n	8007186 <SD_PowerON+0xce>
 8007184:	2300      	movs	r3, #0
 8007186:	613b      	str	r3, [r7, #16]

    count++;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	3301      	adds	r3, #1
 800718c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007194:	4293      	cmp	r3, r2
 8007196:	d802      	bhi.n	800719e <SD_PowerON+0xe6>
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0cc      	beq.n	8007138 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d902      	bls.n	80071ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80071a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071ac:	e00c      	b.n	80071c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	645a      	str	r2, [r3, #68]	; 0x44
 80071be:	e002      	b.n	80071c6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	c1100000 	.word	0xc1100000

080071d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d102      	bne.n	80071ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80071e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071e8:	e018      	b.n	800721c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f2:	041b      	lsls	r3, r3, #16
 80071f4:	4619      	mov	r1, r3
 80071f6:	4610      	mov	r0, r2
 80071f8:	f001 fcb8 	bl	8008b6c <SDMMC_CmdSendStatus>
 80071fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	e009      	b.n	800721c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2100      	movs	r1, #0
 800720e:	4618      	mov	r0, r3
 8007210:	f001 fa5a 	bl	80086c8 <SDIO_GetResponse>
 8007214:	4602      	mov	r2, r0
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800722c:	2300      	movs	r3, #0
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	2300      	movs	r3, #0
 8007232:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2100      	movs	r1, #0
 800723a:	4618      	mov	r0, r3
 800723c:	f001 fa44 	bl	80086c8 <SDIO_GetResponse>
 8007240:	4603      	mov	r3, r0
 8007242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007246:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800724a:	d102      	bne.n	8007252 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800724c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007250:	e02f      	b.n	80072b2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007252:	f107 030c 	add.w	r3, r7, #12
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f879 	bl	8007350 <SD_FindSCR>
 800725e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	e023      	b.n	80072b2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d01c      	beq.n	80072ae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800727c:	041b      	lsls	r3, r3, #16
 800727e:	4619      	mov	r1, r3
 8007280:	4610      	mov	r0, r2
 8007282:	f001 fb8d 	bl	80089a0 <SDMMC_CmdAppCommand>
 8007286:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	e00f      	b.n	80072b2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2102      	movs	r1, #2
 8007298:	4618      	mov	r0, r3
 800729a:	f001 fbc6 	bl	8008a2a <SDMMC_CmdBusWidth>
 800729e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	e003      	b.n	80072b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80072aa:	2300      	movs	r3, #0
 80072ac:	e001      	b.n	80072b2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b086      	sub	sp, #24
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	2300      	movs	r3, #0
 80072c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2100      	movs	r1, #0
 80072d0:	4618      	mov	r0, r3
 80072d2:	f001 f9f9 	bl	80086c8 <SDIO_GetResponse>
 80072d6:	4603      	mov	r3, r0
 80072d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072e0:	d102      	bne.n	80072e8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072e6:	e02f      	b.n	8007348 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072e8:	f107 030c 	add.w	r3, r7, #12
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f82e 	bl	8007350 <SD_FindSCR>
 80072f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	e023      	b.n	8007348 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d01c      	beq.n	8007344 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007312:	041b      	lsls	r3, r3, #16
 8007314:	4619      	mov	r1, r3
 8007316:	4610      	mov	r0, r2
 8007318:	f001 fb42 	bl	80089a0 <SDMMC_CmdAppCommand>
 800731c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	e00f      	b.n	8007348 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2100      	movs	r1, #0
 800732e:	4618      	mov	r0, r3
 8007330:	f001 fb7b 	bl	8008a2a <SDMMC_CmdBusWidth>
 8007334:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	e003      	b.n	8007348 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007340:	2300      	movs	r3, #0
 8007342:	e001      	b.n	8007348 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007344:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007350:	b590      	push	{r4, r7, lr}
 8007352:	b08f      	sub	sp, #60	; 0x3c
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800735a:	f7fc fb4f 	bl	80039fc <HAL_GetTick>
 800735e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007364:	2300      	movs	r3, #0
 8007366:	60bb      	str	r3, [r7, #8]
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2108      	movs	r1, #8
 8007376:	4618      	mov	r0, r3
 8007378:	f001 f9e5 	bl	8008746 <SDMMC_CmdBlockLength>
 800737c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	e0b9      	b.n	80074fc <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007390:	041b      	lsls	r3, r3, #16
 8007392:	4619      	mov	r1, r3
 8007394:	4610      	mov	r0, r2
 8007396:	f001 fb03 	bl	80089a0 <SDMMC_CmdAppCommand>
 800739a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	e0aa      	b.n	80074fc <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073a6:	f04f 33ff 	mov.w	r3, #4294967295
 80073aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80073ac:	2308      	movs	r3, #8
 80073ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80073b0:	2330      	movs	r3, #48	; 0x30
 80073b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80073b4:	2302      	movs	r3, #2
 80073b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80073bc:	2301      	movs	r3, #1
 80073be:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f107 0210 	add.w	r2, r7, #16
 80073c8:	4611      	mov	r1, r2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f001 f98f 	bl	80086ee <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 fb4a 	bl	8008a6e <SDMMC_CmdSendSCR>
 80073da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d02a      	beq.n	8007438 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80073e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e4:	e08a      	b.n	80074fc <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00f      	beq.n	8007414 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6819      	ldr	r1, [r3, #0]
 80073f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	f107 0208 	add.w	r2, r7, #8
 8007400:	18d4      	adds	r4, r2, r3
 8007402:	4608      	mov	r0, r1
 8007404:	f001 f8ef 	bl	80085e6 <SDIO_ReadFIFO>
 8007408:	4603      	mov	r3, r0
 800740a:	6023      	str	r3, [r4, #0]
      index++;
 800740c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740e:	3301      	adds	r3, #1
 8007410:	637b      	str	r3, [r7, #52]	; 0x34
 8007412:	e006      	b.n	8007422 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d012      	beq.n	8007448 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007422:	f7fc faeb 	bl	80039fc <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d102      	bne.n	8007438 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007432:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007436:	e061      	b.n	80074fc <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0cf      	beq.n	80073e6 <SD_FindSCR+0x96>
 8007446:	e000      	b.n	800744a <SD_FindSCR+0xfa>
      break;
 8007448:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007450:	f003 0308 	and.w	r3, r3, #8
 8007454:	2b00      	cmp	r3, #0
 8007456:	d106      	bne.n	8007466 <SD_FindSCR+0x116>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007462:	2b00      	cmp	r3, #0
 8007464:	d005      	beq.n	8007472 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2208      	movs	r2, #8
 800746c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800746e:	2308      	movs	r3, #8
 8007470:	e044      	b.n	80074fc <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2202      	movs	r2, #2
 8007486:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007488:	2302      	movs	r3, #2
 800748a:	e037      	b.n	80074fc <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2220      	movs	r2, #32
 80074a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80074a2:	2320      	movs	r3, #32
 80074a4:	e02a      	b.n	80074fc <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80074ae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	061a      	lsls	r2, r3, #24
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	0a1b      	lsrs	r3, r3, #8
 80074c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074c6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	0e1b      	lsrs	r3, r3, #24
 80074cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d0:	601a      	str	r2, [r3, #0]
    scr++;
 80074d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d4:	3304      	adds	r3, #4
 80074d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	061a      	lsls	r2, r3, #24
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	0a1b      	lsrs	r3, r3, #8
 80074ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074ee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	0e1b      	lsrs	r3, r3, #24
 80074f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	373c      	adds	r7, #60	; 0x3c
 8007500:	46bd      	mov	sp, r7
 8007502:	bd90      	pop	{r4, r7, pc}

08007504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e041      	b.n	800759a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d106      	bne.n	8007530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7fc f812 	bl	8003554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3304      	adds	r3, #4
 8007540:	4619      	mov	r1, r3
 8007542:	4610      	mov	r0, r2
 8007544:	f000 fa70 	bl	8007a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d001      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e044      	b.n	8007646 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f042 0201 	orr.w	r2, r2, #1
 80075d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a1e      	ldr	r2, [pc, #120]	; (8007654 <HAL_TIM_Base_Start_IT+0xb0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d018      	beq.n	8007610 <HAL_TIM_Base_Start_IT+0x6c>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e6:	d013      	beq.n	8007610 <HAL_TIM_Base_Start_IT+0x6c>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a1a      	ldr	r2, [pc, #104]	; (8007658 <HAL_TIM_Base_Start_IT+0xb4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00e      	beq.n	8007610 <HAL_TIM_Base_Start_IT+0x6c>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a19      	ldr	r2, [pc, #100]	; (800765c <HAL_TIM_Base_Start_IT+0xb8>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d009      	beq.n	8007610 <HAL_TIM_Base_Start_IT+0x6c>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a17      	ldr	r2, [pc, #92]	; (8007660 <HAL_TIM_Base_Start_IT+0xbc>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d004      	beq.n	8007610 <HAL_TIM_Base_Start_IT+0x6c>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a16      	ldr	r2, [pc, #88]	; (8007664 <HAL_TIM_Base_Start_IT+0xc0>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d111      	bne.n	8007634 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b06      	cmp	r3, #6
 8007620:	d010      	beq.n	8007644 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 0201 	orr.w	r2, r2, #1
 8007630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007632:	e007      	b.n	8007644 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f042 0201 	orr.w	r2, r2, #1
 8007642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	40010000 	.word	0x40010000
 8007658:	40000400 	.word	0x40000400
 800765c:	40000800 	.word	0x40000800
 8007660:	40000c00 	.word	0x40000c00
 8007664:	40014000 	.word	0x40014000

08007668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d020      	beq.n	80076cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d01b      	beq.n	80076cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0202 	mvn.w	r2, #2
 800769c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f999 	bl	80079ea <HAL_TIM_IC_CaptureCallback>
 80076b8:	e005      	b.n	80076c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f98b 	bl	80079d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f99c 	bl	80079fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d020      	beq.n	8007718 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d01b      	beq.n	8007718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f06f 0204 	mvn.w	r2, #4
 80076e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2202      	movs	r2, #2
 80076ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f973 	bl	80079ea <HAL_TIM_IC_CaptureCallback>
 8007704:	e005      	b.n	8007712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f965 	bl	80079d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f976 	bl	80079fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d020      	beq.n	8007764 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f003 0308 	and.w	r3, r3, #8
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01b      	beq.n	8007764 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0208 	mvn.w	r2, #8
 8007734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2204      	movs	r2, #4
 800773a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f94d 	bl	80079ea <HAL_TIM_IC_CaptureCallback>
 8007750:	e005      	b.n	800775e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f93f 	bl	80079d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f950 	bl	80079fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f003 0310 	and.w	r3, r3, #16
 800776a:	2b00      	cmp	r3, #0
 800776c:	d020      	beq.n	80077b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b00      	cmp	r3, #0
 8007776:	d01b      	beq.n	80077b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f06f 0210 	mvn.w	r2, #16
 8007780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2208      	movs	r2, #8
 8007786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f927 	bl	80079ea <HAL_TIM_IC_CaptureCallback>
 800779c:	e005      	b.n	80077aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f919 	bl	80079d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f92a 	bl	80079fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00c      	beq.n	80077d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d007      	beq.n	80077d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0201 	mvn.w	r2, #1
 80077cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7fa f848 	bl	8001864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00c      	beq.n	80077f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d007      	beq.n	80077f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fab6 	bl	8007d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00c      	beq.n	800781c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007808:	2b00      	cmp	r3, #0
 800780a:	d007      	beq.n	800781c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f8fb 	bl	8007a12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00c      	beq.n	8007840 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b00      	cmp	r3, #0
 800782e:	d007      	beq.n	8007840 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f06f 0220 	mvn.w	r2, #32
 8007838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa88 	bl	8007d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007840:	bf00      	nop
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800785c:	2b01      	cmp	r3, #1
 800785e:	d101      	bne.n	8007864 <HAL_TIM_ConfigClockSource+0x1c>
 8007860:	2302      	movs	r3, #2
 8007862:	e0b4      	b.n	80079ce <HAL_TIM_ConfigClockSource+0x186>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800788a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800789c:	d03e      	beq.n	800791c <HAL_TIM_ConfigClockSource+0xd4>
 800789e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078a2:	f200 8087 	bhi.w	80079b4 <HAL_TIM_ConfigClockSource+0x16c>
 80078a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078aa:	f000 8086 	beq.w	80079ba <HAL_TIM_ConfigClockSource+0x172>
 80078ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b2:	d87f      	bhi.n	80079b4 <HAL_TIM_ConfigClockSource+0x16c>
 80078b4:	2b70      	cmp	r3, #112	; 0x70
 80078b6:	d01a      	beq.n	80078ee <HAL_TIM_ConfigClockSource+0xa6>
 80078b8:	2b70      	cmp	r3, #112	; 0x70
 80078ba:	d87b      	bhi.n	80079b4 <HAL_TIM_ConfigClockSource+0x16c>
 80078bc:	2b60      	cmp	r3, #96	; 0x60
 80078be:	d050      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x11a>
 80078c0:	2b60      	cmp	r3, #96	; 0x60
 80078c2:	d877      	bhi.n	80079b4 <HAL_TIM_ConfigClockSource+0x16c>
 80078c4:	2b50      	cmp	r3, #80	; 0x50
 80078c6:	d03c      	beq.n	8007942 <HAL_TIM_ConfigClockSource+0xfa>
 80078c8:	2b50      	cmp	r3, #80	; 0x50
 80078ca:	d873      	bhi.n	80079b4 <HAL_TIM_ConfigClockSource+0x16c>
 80078cc:	2b40      	cmp	r3, #64	; 0x40
 80078ce:	d058      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0x13a>
 80078d0:	2b40      	cmp	r3, #64	; 0x40
 80078d2:	d86f      	bhi.n	80079b4 <HAL_TIM_ConfigClockSource+0x16c>
 80078d4:	2b30      	cmp	r3, #48	; 0x30
 80078d6:	d064      	beq.n	80079a2 <HAL_TIM_ConfigClockSource+0x15a>
 80078d8:	2b30      	cmp	r3, #48	; 0x30
 80078da:	d86b      	bhi.n	80079b4 <HAL_TIM_ConfigClockSource+0x16c>
 80078dc:	2b20      	cmp	r3, #32
 80078de:	d060      	beq.n	80079a2 <HAL_TIM_ConfigClockSource+0x15a>
 80078e0:	2b20      	cmp	r3, #32
 80078e2:	d867      	bhi.n	80079b4 <HAL_TIM_ConfigClockSource+0x16c>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d05c      	beq.n	80079a2 <HAL_TIM_ConfigClockSource+0x15a>
 80078e8:	2b10      	cmp	r3, #16
 80078ea:	d05a      	beq.n	80079a2 <HAL_TIM_ConfigClockSource+0x15a>
 80078ec:	e062      	b.n	80079b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078fe:	f000 f999 	bl	8007c34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	609a      	str	r2, [r3, #8]
      break;
 800791a:	e04f      	b.n	80079bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800792c:	f000 f982 	bl	8007c34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689a      	ldr	r2, [r3, #8]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800793e:	609a      	str	r2, [r3, #8]
      break;
 8007940:	e03c      	b.n	80079bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800794e:	461a      	mov	r2, r3
 8007950:	f000 f8f6 	bl	8007b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2150      	movs	r1, #80	; 0x50
 800795a:	4618      	mov	r0, r3
 800795c:	f000 f94f 	bl	8007bfe <TIM_ITRx_SetConfig>
      break;
 8007960:	e02c      	b.n	80079bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800796e:	461a      	mov	r2, r3
 8007970:	f000 f915 	bl	8007b9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2160      	movs	r1, #96	; 0x60
 800797a:	4618      	mov	r0, r3
 800797c:	f000 f93f 	bl	8007bfe <TIM_ITRx_SetConfig>
      break;
 8007980:	e01c      	b.n	80079bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800798e:	461a      	mov	r2, r3
 8007990:	f000 f8d6 	bl	8007b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2140      	movs	r1, #64	; 0x40
 800799a:	4618      	mov	r0, r3
 800799c:	f000 f92f 	bl	8007bfe <TIM_ITRx_SetConfig>
      break;
 80079a0:	e00c      	b.n	80079bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4619      	mov	r1, r3
 80079ac:	4610      	mov	r0, r2
 80079ae:	f000 f926 	bl	8007bfe <TIM_ITRx_SetConfig>
      break;
 80079b2:	e003      	b.n	80079bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	73fb      	strb	r3, [r7, #15]
      break;
 80079b8:	e000      	b.n	80079bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a1a:	bf00      	nop
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
	...

08007a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a3a      	ldr	r2, [pc, #232]	; (8007b24 <TIM_Base_SetConfig+0xfc>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d00f      	beq.n	8007a60 <TIM_Base_SetConfig+0x38>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a46:	d00b      	beq.n	8007a60 <TIM_Base_SetConfig+0x38>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a37      	ldr	r2, [pc, #220]	; (8007b28 <TIM_Base_SetConfig+0x100>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d007      	beq.n	8007a60 <TIM_Base_SetConfig+0x38>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a36      	ldr	r2, [pc, #216]	; (8007b2c <TIM_Base_SetConfig+0x104>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d003      	beq.n	8007a60 <TIM_Base_SetConfig+0x38>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a35      	ldr	r2, [pc, #212]	; (8007b30 <TIM_Base_SetConfig+0x108>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d108      	bne.n	8007a72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a2b      	ldr	r2, [pc, #172]	; (8007b24 <TIM_Base_SetConfig+0xfc>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d01b      	beq.n	8007ab2 <TIM_Base_SetConfig+0x8a>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a80:	d017      	beq.n	8007ab2 <TIM_Base_SetConfig+0x8a>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a28      	ldr	r2, [pc, #160]	; (8007b28 <TIM_Base_SetConfig+0x100>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d013      	beq.n	8007ab2 <TIM_Base_SetConfig+0x8a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a27      	ldr	r2, [pc, #156]	; (8007b2c <TIM_Base_SetConfig+0x104>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d00f      	beq.n	8007ab2 <TIM_Base_SetConfig+0x8a>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a26      	ldr	r2, [pc, #152]	; (8007b30 <TIM_Base_SetConfig+0x108>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d00b      	beq.n	8007ab2 <TIM_Base_SetConfig+0x8a>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a25      	ldr	r2, [pc, #148]	; (8007b34 <TIM_Base_SetConfig+0x10c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d007      	beq.n	8007ab2 <TIM_Base_SetConfig+0x8a>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a24      	ldr	r2, [pc, #144]	; (8007b38 <TIM_Base_SetConfig+0x110>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d003      	beq.n	8007ab2 <TIM_Base_SetConfig+0x8a>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a23      	ldr	r2, [pc, #140]	; (8007b3c <TIM_Base_SetConfig+0x114>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d108      	bne.n	8007ac4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a0e      	ldr	r2, [pc, #56]	; (8007b24 <TIM_Base_SetConfig+0xfc>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d103      	bne.n	8007af8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	691a      	ldr	r2, [r3, #16]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d105      	bne.n	8007b16 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f023 0201 	bic.w	r2, r3, #1
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	611a      	str	r2, [r3, #16]
  }
}
 8007b16:	bf00      	nop
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	40010000 	.word	0x40010000
 8007b28:	40000400 	.word	0x40000400
 8007b2c:	40000800 	.word	0x40000800
 8007b30:	40000c00 	.word	0x40000c00
 8007b34:	40014000 	.word	0x40014000
 8007b38:	40014400 	.word	0x40014400
 8007b3c:	40014800 	.word	0x40014800

08007b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	f023 0201 	bic.w	r2, r3, #1
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	011b      	lsls	r3, r3, #4
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f023 030a 	bic.w	r3, r3, #10
 8007b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	621a      	str	r2, [r3, #32]
}
 8007b92:	bf00      	nop
 8007b94:	371c      	adds	r7, #28
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b087      	sub	sp, #28
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	60f8      	str	r0, [r7, #12]
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	f023 0210 	bic.w	r2, r3, #16
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	031b      	lsls	r3, r3, #12
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	621a      	str	r2, [r3, #32]
}
 8007bf2:	bf00      	nop
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	f043 0307 	orr.w	r3, r3, #7
 8007c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	609a      	str	r2, [r3, #8]
}
 8007c28:	bf00      	nop
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	021a      	lsls	r2, r3, #8
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	431a      	orrs	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	609a      	str	r2, [r3, #8]
}
 8007c68:	bf00      	nop
 8007c6a:	371c      	adds	r7, #28
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d101      	bne.n	8007c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e050      	b.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2202      	movs	r2, #2
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a1c      	ldr	r2, [pc, #112]	; (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d018      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd8:	d013      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a18      	ldr	r2, [pc, #96]	; (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d00e      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a16      	ldr	r2, [pc, #88]	; (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d009      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a15      	ldr	r2, [pc, #84]	; (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d004      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a13      	ldr	r2, [pc, #76]	; (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d10c      	bne.n	8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	40010000 	.word	0x40010000
 8007d40:	40000400 	.word	0x40000400
 8007d44:	40000800 	.word	0x40000800
 8007d48:	40000c00 	.word	0x40000c00
 8007d4c:	40014000 	.word	0x40014000

08007d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e042      	b.n	8007e10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d106      	bne.n	8007da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7fb fc1e 	bl	80035e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2224      	movs	r2, #36	; 0x24
 8007da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f973 	bl	80080a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	691a      	ldr	r2, [r3, #16]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	695a      	ldr	r2, [r3, #20]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	; 0x28
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	4613      	mov	r3, r2
 8007e26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	d175      	bne.n	8007f24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d002      	beq.n	8007e44 <HAL_UART_Transmit+0x2c>
 8007e3e:	88fb      	ldrh	r3, [r7, #6]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e06e      	b.n	8007f26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2221      	movs	r2, #33	; 0x21
 8007e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e56:	f7fb fdd1 	bl	80039fc <HAL_GetTick>
 8007e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	88fa      	ldrh	r2, [r7, #6]
 8007e60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	88fa      	ldrh	r2, [r7, #6]
 8007e66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e70:	d108      	bne.n	8007e84 <HAL_UART_Transmit+0x6c>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d104      	bne.n	8007e84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	61bb      	str	r3, [r7, #24]
 8007e82:	e003      	b.n	8007e8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e8c:	e02e      	b.n	8007eec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2200      	movs	r2, #0
 8007e96:	2180      	movs	r1, #128	; 0x80
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 f848 	bl	8007f2e <UART_WaitOnFlagUntilTimeout>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d005      	beq.n	8007eb0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e03a      	b.n	8007f26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10b      	bne.n	8007ece <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ec4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	3302      	adds	r3, #2
 8007eca:	61bb      	str	r3, [r7, #24]
 8007ecc:	e007      	b.n	8007ede <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	781a      	ldrb	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	3301      	adds	r3, #1
 8007edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1cb      	bne.n	8007e8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2200      	movs	r2, #0
 8007efe:	2140      	movs	r1, #64	; 0x40
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 f814 	bl	8007f2e <UART_WaitOnFlagUntilTimeout>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d005      	beq.n	8007f18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e006      	b.n	8007f26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	e000      	b.n	8007f26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007f24:	2302      	movs	r3, #2
  }
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3720      	adds	r7, #32
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b086      	sub	sp, #24
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	60f8      	str	r0, [r7, #12]
 8007f36:	60b9      	str	r1, [r7, #8]
 8007f38:	603b      	str	r3, [r7, #0]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f3e:	e03b      	b.n	8007fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f46:	d037      	beq.n	8007fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f48:	f7fb fd58 	bl	80039fc <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	6a3a      	ldr	r2, [r7, #32]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d302      	bcc.n	8007f5e <UART_WaitOnFlagUntilTimeout+0x30>
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e03a      	b.n	8007fd8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d023      	beq.n	8007fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b80      	cmp	r3, #128	; 0x80
 8007f74:	d020      	beq.n	8007fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2b40      	cmp	r3, #64	; 0x40
 8007f7a:	d01d      	beq.n	8007fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0308 	and.w	r3, r3, #8
 8007f86:	2b08      	cmp	r3, #8
 8007f88:	d116      	bne.n	8007fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 f81d 	bl	8007fe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2208      	movs	r2, #8
 8007faa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e00f      	b.n	8007fd8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	bf0c      	ite	eq
 8007fc8:	2301      	moveq	r3, #1
 8007fca:	2300      	movne	r3, #0
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	461a      	mov	r2, r3
 8007fd0:	79fb      	ldrb	r3, [r7, #7]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d0b4      	beq.n	8007f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b095      	sub	sp, #84	; 0x54
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	330c      	adds	r3, #12
 8007fee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff2:	e853 3f00 	ldrex	r3, [r3]
 8007ff6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	330c      	adds	r3, #12
 8008006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008008:	643a      	str	r2, [r7, #64]	; 0x40
 800800a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800800e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008010:	e841 2300 	strex	r3, r2, [r1]
 8008014:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e5      	bne.n	8007fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3314      	adds	r3, #20
 8008022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	e853 3f00 	ldrex	r3, [r3]
 800802a:	61fb      	str	r3, [r7, #28]
   return(result);
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	f023 0301 	bic.w	r3, r3, #1
 8008032:	64bb      	str	r3, [r7, #72]	; 0x48
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3314      	adds	r3, #20
 800803a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800803c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800803e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e5      	bne.n	800801c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008054:	2b01      	cmp	r3, #1
 8008056:	d119      	bne.n	800808c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	330c      	adds	r3, #12
 800805e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	60bb      	str	r3, [r7, #8]
   return(result);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f023 0310 	bic.w	r3, r3, #16
 800806e:	647b      	str	r3, [r7, #68]	; 0x44
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	330c      	adds	r3, #12
 8008076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008078:	61ba      	str	r2, [r7, #24]
 800807a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	6979      	ldr	r1, [r7, #20]
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	613b      	str	r3, [r7, #16]
   return(result);
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e5      	bne.n	8008058 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2220      	movs	r2, #32
 8008090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	631a      	str	r2, [r3, #48]	; 0x30
}
 800809a:	bf00      	nop
 800809c:	3754      	adds	r7, #84	; 0x54
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
	...

080080a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080ac:	b0c0      	sub	sp, #256	; 0x100
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c4:	68d9      	ldr	r1, [r3, #12]
 80080c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	ea40 0301 	orr.w	r3, r0, r1
 80080d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	431a      	orrs	r2, r3
 80080e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	431a      	orrs	r2, r3
 80080e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008100:	f021 010c 	bic.w	r1, r1, #12
 8008104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800810e:	430b      	orrs	r3, r1
 8008110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800811e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008122:	6999      	ldr	r1, [r3, #24]
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	ea40 0301 	orr.w	r3, r0, r1
 800812e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	4b8f      	ldr	r3, [pc, #572]	; (8008374 <UART_SetConfig+0x2cc>)
 8008138:	429a      	cmp	r2, r3
 800813a:	d005      	beq.n	8008148 <UART_SetConfig+0xa0>
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b8d      	ldr	r3, [pc, #564]	; (8008378 <UART_SetConfig+0x2d0>)
 8008144:	429a      	cmp	r2, r3
 8008146:	d104      	bne.n	8008152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008148:	f7fe f826 	bl	8006198 <HAL_RCC_GetPCLK2Freq>
 800814c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008150:	e003      	b.n	800815a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008152:	f7fe f80d 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 8008156:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800815a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008164:	f040 810c 	bne.w	8008380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800816c:	2200      	movs	r2, #0
 800816e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008172:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800817a:	4622      	mov	r2, r4
 800817c:	462b      	mov	r3, r5
 800817e:	1891      	adds	r1, r2, r2
 8008180:	65b9      	str	r1, [r7, #88]	; 0x58
 8008182:	415b      	adcs	r3, r3
 8008184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800818a:	4621      	mov	r1, r4
 800818c:	eb12 0801 	adds.w	r8, r2, r1
 8008190:	4629      	mov	r1, r5
 8008192:	eb43 0901 	adc.w	r9, r3, r1
 8008196:	f04f 0200 	mov.w	r2, #0
 800819a:	f04f 0300 	mov.w	r3, #0
 800819e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081aa:	4690      	mov	r8, r2
 80081ac:	4699      	mov	r9, r3
 80081ae:	4623      	mov	r3, r4
 80081b0:	eb18 0303 	adds.w	r3, r8, r3
 80081b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081b8:	462b      	mov	r3, r5
 80081ba:	eb49 0303 	adc.w	r3, r9, r3
 80081be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081d6:	460b      	mov	r3, r1
 80081d8:	18db      	adds	r3, r3, r3
 80081da:	653b      	str	r3, [r7, #80]	; 0x50
 80081dc:	4613      	mov	r3, r2
 80081de:	eb42 0303 	adc.w	r3, r2, r3
 80081e2:	657b      	str	r3, [r7, #84]	; 0x54
 80081e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081ec:	f7f8 fd44 	bl	8000c78 <__aeabi_uldivmod>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4b61      	ldr	r3, [pc, #388]	; (800837c <UART_SetConfig+0x2d4>)
 80081f6:	fba3 2302 	umull	r2, r3, r3, r2
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	011c      	lsls	r4, r3, #4
 80081fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008202:	2200      	movs	r2, #0
 8008204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008208:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800820c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008210:	4642      	mov	r2, r8
 8008212:	464b      	mov	r3, r9
 8008214:	1891      	adds	r1, r2, r2
 8008216:	64b9      	str	r1, [r7, #72]	; 0x48
 8008218:	415b      	adcs	r3, r3
 800821a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800821c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008220:	4641      	mov	r1, r8
 8008222:	eb12 0a01 	adds.w	sl, r2, r1
 8008226:	4649      	mov	r1, r9
 8008228:	eb43 0b01 	adc.w	fp, r3, r1
 800822c:	f04f 0200 	mov.w	r2, #0
 8008230:	f04f 0300 	mov.w	r3, #0
 8008234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800823c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008240:	4692      	mov	sl, r2
 8008242:	469b      	mov	fp, r3
 8008244:	4643      	mov	r3, r8
 8008246:	eb1a 0303 	adds.w	r3, sl, r3
 800824a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800824e:	464b      	mov	r3, r9
 8008250:	eb4b 0303 	adc.w	r3, fp, r3
 8008254:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008264:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800826c:	460b      	mov	r3, r1
 800826e:	18db      	adds	r3, r3, r3
 8008270:	643b      	str	r3, [r7, #64]	; 0x40
 8008272:	4613      	mov	r3, r2
 8008274:	eb42 0303 	adc.w	r3, r2, r3
 8008278:	647b      	str	r3, [r7, #68]	; 0x44
 800827a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800827e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008282:	f7f8 fcf9 	bl	8000c78 <__aeabi_uldivmod>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4611      	mov	r1, r2
 800828c:	4b3b      	ldr	r3, [pc, #236]	; (800837c <UART_SetConfig+0x2d4>)
 800828e:	fba3 2301 	umull	r2, r3, r3, r1
 8008292:	095b      	lsrs	r3, r3, #5
 8008294:	2264      	movs	r2, #100	; 0x64
 8008296:	fb02 f303 	mul.w	r3, r2, r3
 800829a:	1acb      	subs	r3, r1, r3
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082a2:	4b36      	ldr	r3, [pc, #216]	; (800837c <UART_SetConfig+0x2d4>)
 80082a4:	fba3 2302 	umull	r2, r3, r3, r2
 80082a8:	095b      	lsrs	r3, r3, #5
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082b0:	441c      	add	r4, r3
 80082b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082c4:	4642      	mov	r2, r8
 80082c6:	464b      	mov	r3, r9
 80082c8:	1891      	adds	r1, r2, r2
 80082ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80082cc:	415b      	adcs	r3, r3
 80082ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082d4:	4641      	mov	r1, r8
 80082d6:	1851      	adds	r1, r2, r1
 80082d8:	6339      	str	r1, [r7, #48]	; 0x30
 80082da:	4649      	mov	r1, r9
 80082dc:	414b      	adcs	r3, r1
 80082de:	637b      	str	r3, [r7, #52]	; 0x34
 80082e0:	f04f 0200 	mov.w	r2, #0
 80082e4:	f04f 0300 	mov.w	r3, #0
 80082e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80082ec:	4659      	mov	r1, fp
 80082ee:	00cb      	lsls	r3, r1, #3
 80082f0:	4651      	mov	r1, sl
 80082f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082f6:	4651      	mov	r1, sl
 80082f8:	00ca      	lsls	r2, r1, #3
 80082fa:	4610      	mov	r0, r2
 80082fc:	4619      	mov	r1, r3
 80082fe:	4603      	mov	r3, r0
 8008300:	4642      	mov	r2, r8
 8008302:	189b      	adds	r3, r3, r2
 8008304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008308:	464b      	mov	r3, r9
 800830a:	460a      	mov	r2, r1
 800830c:	eb42 0303 	adc.w	r3, r2, r3
 8008310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008320:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008328:	460b      	mov	r3, r1
 800832a:	18db      	adds	r3, r3, r3
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28
 800832e:	4613      	mov	r3, r2
 8008330:	eb42 0303 	adc.w	r3, r2, r3
 8008334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800833a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800833e:	f7f8 fc9b 	bl	8000c78 <__aeabi_uldivmod>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	4b0d      	ldr	r3, [pc, #52]	; (800837c <UART_SetConfig+0x2d4>)
 8008348:	fba3 1302 	umull	r1, r3, r3, r2
 800834c:	095b      	lsrs	r3, r3, #5
 800834e:	2164      	movs	r1, #100	; 0x64
 8008350:	fb01 f303 	mul.w	r3, r1, r3
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	3332      	adds	r3, #50	; 0x32
 800835a:	4a08      	ldr	r2, [pc, #32]	; (800837c <UART_SetConfig+0x2d4>)
 800835c:	fba2 2303 	umull	r2, r3, r2, r3
 8008360:	095b      	lsrs	r3, r3, #5
 8008362:	f003 0207 	and.w	r2, r3, #7
 8008366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4422      	add	r2, r4
 800836e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008370:	e106      	b.n	8008580 <UART_SetConfig+0x4d8>
 8008372:	bf00      	nop
 8008374:	40011000 	.word	0x40011000
 8008378:	40011400 	.word	0x40011400
 800837c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008384:	2200      	movs	r2, #0
 8008386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800838a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800838e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008392:	4642      	mov	r2, r8
 8008394:	464b      	mov	r3, r9
 8008396:	1891      	adds	r1, r2, r2
 8008398:	6239      	str	r1, [r7, #32]
 800839a:	415b      	adcs	r3, r3
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
 800839e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083a2:	4641      	mov	r1, r8
 80083a4:	1854      	adds	r4, r2, r1
 80083a6:	4649      	mov	r1, r9
 80083a8:	eb43 0501 	adc.w	r5, r3, r1
 80083ac:	f04f 0200 	mov.w	r2, #0
 80083b0:	f04f 0300 	mov.w	r3, #0
 80083b4:	00eb      	lsls	r3, r5, #3
 80083b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083ba:	00e2      	lsls	r2, r4, #3
 80083bc:	4614      	mov	r4, r2
 80083be:	461d      	mov	r5, r3
 80083c0:	4643      	mov	r3, r8
 80083c2:	18e3      	adds	r3, r4, r3
 80083c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083c8:	464b      	mov	r3, r9
 80083ca:	eb45 0303 	adc.w	r3, r5, r3
 80083ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083e2:	f04f 0200 	mov.w	r2, #0
 80083e6:	f04f 0300 	mov.w	r3, #0
 80083ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80083ee:	4629      	mov	r1, r5
 80083f0:	008b      	lsls	r3, r1, #2
 80083f2:	4621      	mov	r1, r4
 80083f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083f8:	4621      	mov	r1, r4
 80083fa:	008a      	lsls	r2, r1, #2
 80083fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008400:	f7f8 fc3a 	bl	8000c78 <__aeabi_uldivmod>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4b60      	ldr	r3, [pc, #384]	; (800858c <UART_SetConfig+0x4e4>)
 800840a:	fba3 2302 	umull	r2, r3, r3, r2
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	011c      	lsls	r4, r3, #4
 8008412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008416:	2200      	movs	r2, #0
 8008418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800841c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008424:	4642      	mov	r2, r8
 8008426:	464b      	mov	r3, r9
 8008428:	1891      	adds	r1, r2, r2
 800842a:	61b9      	str	r1, [r7, #24]
 800842c:	415b      	adcs	r3, r3
 800842e:	61fb      	str	r3, [r7, #28]
 8008430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008434:	4641      	mov	r1, r8
 8008436:	1851      	adds	r1, r2, r1
 8008438:	6139      	str	r1, [r7, #16]
 800843a:	4649      	mov	r1, r9
 800843c:	414b      	adcs	r3, r1
 800843e:	617b      	str	r3, [r7, #20]
 8008440:	f04f 0200 	mov.w	r2, #0
 8008444:	f04f 0300 	mov.w	r3, #0
 8008448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800844c:	4659      	mov	r1, fp
 800844e:	00cb      	lsls	r3, r1, #3
 8008450:	4651      	mov	r1, sl
 8008452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008456:	4651      	mov	r1, sl
 8008458:	00ca      	lsls	r2, r1, #3
 800845a:	4610      	mov	r0, r2
 800845c:	4619      	mov	r1, r3
 800845e:	4603      	mov	r3, r0
 8008460:	4642      	mov	r2, r8
 8008462:	189b      	adds	r3, r3, r2
 8008464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008468:	464b      	mov	r3, r9
 800846a:	460a      	mov	r2, r1
 800846c:	eb42 0303 	adc.w	r3, r2, r3
 8008470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	67bb      	str	r3, [r7, #120]	; 0x78
 800847e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	f04f 0300 	mov.w	r3, #0
 8008488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800848c:	4649      	mov	r1, r9
 800848e:	008b      	lsls	r3, r1, #2
 8008490:	4641      	mov	r1, r8
 8008492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008496:	4641      	mov	r1, r8
 8008498:	008a      	lsls	r2, r1, #2
 800849a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800849e:	f7f8 fbeb 	bl	8000c78 <__aeabi_uldivmod>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4611      	mov	r1, r2
 80084a8:	4b38      	ldr	r3, [pc, #224]	; (800858c <UART_SetConfig+0x4e4>)
 80084aa:	fba3 2301 	umull	r2, r3, r3, r1
 80084ae:	095b      	lsrs	r3, r3, #5
 80084b0:	2264      	movs	r2, #100	; 0x64
 80084b2:	fb02 f303 	mul.w	r3, r2, r3
 80084b6:	1acb      	subs	r3, r1, r3
 80084b8:	011b      	lsls	r3, r3, #4
 80084ba:	3332      	adds	r3, #50	; 0x32
 80084bc:	4a33      	ldr	r2, [pc, #204]	; (800858c <UART_SetConfig+0x4e4>)
 80084be:	fba2 2303 	umull	r2, r3, r2, r3
 80084c2:	095b      	lsrs	r3, r3, #5
 80084c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084c8:	441c      	add	r4, r3
 80084ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084ce:	2200      	movs	r2, #0
 80084d0:	673b      	str	r3, [r7, #112]	; 0x70
 80084d2:	677a      	str	r2, [r7, #116]	; 0x74
 80084d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084d8:	4642      	mov	r2, r8
 80084da:	464b      	mov	r3, r9
 80084dc:	1891      	adds	r1, r2, r2
 80084de:	60b9      	str	r1, [r7, #8]
 80084e0:	415b      	adcs	r3, r3
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084e8:	4641      	mov	r1, r8
 80084ea:	1851      	adds	r1, r2, r1
 80084ec:	6039      	str	r1, [r7, #0]
 80084ee:	4649      	mov	r1, r9
 80084f0:	414b      	adcs	r3, r1
 80084f2:	607b      	str	r3, [r7, #4]
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	f04f 0300 	mov.w	r3, #0
 80084fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008500:	4659      	mov	r1, fp
 8008502:	00cb      	lsls	r3, r1, #3
 8008504:	4651      	mov	r1, sl
 8008506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800850a:	4651      	mov	r1, sl
 800850c:	00ca      	lsls	r2, r1, #3
 800850e:	4610      	mov	r0, r2
 8008510:	4619      	mov	r1, r3
 8008512:	4603      	mov	r3, r0
 8008514:	4642      	mov	r2, r8
 8008516:	189b      	adds	r3, r3, r2
 8008518:	66bb      	str	r3, [r7, #104]	; 0x68
 800851a:	464b      	mov	r3, r9
 800851c:	460a      	mov	r2, r1
 800851e:	eb42 0303 	adc.w	r3, r2, r3
 8008522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	663b      	str	r3, [r7, #96]	; 0x60
 800852e:	667a      	str	r2, [r7, #100]	; 0x64
 8008530:	f04f 0200 	mov.w	r2, #0
 8008534:	f04f 0300 	mov.w	r3, #0
 8008538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800853c:	4649      	mov	r1, r9
 800853e:	008b      	lsls	r3, r1, #2
 8008540:	4641      	mov	r1, r8
 8008542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008546:	4641      	mov	r1, r8
 8008548:	008a      	lsls	r2, r1, #2
 800854a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800854e:	f7f8 fb93 	bl	8000c78 <__aeabi_uldivmod>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4b0d      	ldr	r3, [pc, #52]	; (800858c <UART_SetConfig+0x4e4>)
 8008558:	fba3 1302 	umull	r1, r3, r3, r2
 800855c:	095b      	lsrs	r3, r3, #5
 800855e:	2164      	movs	r1, #100	; 0x64
 8008560:	fb01 f303 	mul.w	r3, r1, r3
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	011b      	lsls	r3, r3, #4
 8008568:	3332      	adds	r3, #50	; 0x32
 800856a:	4a08      	ldr	r2, [pc, #32]	; (800858c <UART_SetConfig+0x4e4>)
 800856c:	fba2 2303 	umull	r2, r3, r2, r3
 8008570:	095b      	lsrs	r3, r3, #5
 8008572:	f003 020f 	and.w	r2, r3, #15
 8008576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4422      	add	r2, r4
 800857e:	609a      	str	r2, [r3, #8]
}
 8008580:	bf00      	nop
 8008582:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008586:	46bd      	mov	sp, r7
 8008588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800858c:	51eb851f 	.word	0x51eb851f

08008590 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008590:	b084      	sub	sp, #16
 8008592:	b480      	push	{r7}
 8008594:	b085      	sub	sp, #20
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	f107 001c 	add.w	r0, r7, #28
 800859e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80085a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80085a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80085aa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80085ae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80085b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80085b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80085b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80085ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	4313      	orrs	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80085ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	431a      	orrs	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	b004      	add	sp, #16
 80085e4:	4770      	bx	lr

080085e6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2203      	movs	r2, #3
 800862e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0303 	and.w	r3, r3, #3
}
 800864e:	4618      	mov	r0, r3
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800865a:	b480      	push	{r7}
 800865c:	b085      	sub	sp, #20
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008664:	2300      	movs	r3, #0
 8008666:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008678:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800867e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008684:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	4313      	orrs	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008694:	f023 030f 	bic.w	r3, r3, #15
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	431a      	orrs	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	b2db      	uxtb	r3, r3
}
 80086bc:	4618      	mov	r0, r3
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	3314      	adds	r3, #20
 80086d6:	461a      	mov	r2, r3
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	4413      	add	r3, r2
 80086dc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
}  
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008714:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800871a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008720:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	4313      	orrs	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	431a      	orrs	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008738:	2300      	movs	r3, #0

}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b088      	sub	sp, #32
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008754:	2310      	movs	r3, #16
 8008756:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008758:	2340      	movs	r3, #64	; 0x40
 800875a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800875c:	2300      	movs	r3, #0
 800875e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008764:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008766:	f107 0308 	add.w	r3, r7, #8
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7ff ff74 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008772:	f241 3288 	movw	r2, #5000	; 0x1388
 8008776:	2110      	movs	r1, #16
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fa19 	bl	8008bb0 <SDMMC_GetCmdResp1>
 800877e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008780:	69fb      	ldr	r3, [r7, #28]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3720      	adds	r7, #32
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b088      	sub	sp, #32
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008798:	2311      	movs	r3, #17
 800879a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800879c:	2340      	movs	r3, #64	; 0x40
 800879e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087a0:	2300      	movs	r3, #0
 80087a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087aa:	f107 0308 	add.w	r3, r7, #8
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7ff ff52 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80087b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ba:	2111      	movs	r1, #17
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f9f7 	bl	8008bb0 <SDMMC_GetCmdResp1>
 80087c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087c4:	69fb      	ldr	r3, [r7, #28]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3720      	adds	r7, #32
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b088      	sub	sp, #32
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80087dc:	2312      	movs	r3, #18
 80087de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80087e0:	2340      	movs	r3, #64	; 0x40
 80087e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087e4:	2300      	movs	r3, #0
 80087e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087ee:	f107 0308 	add.w	r3, r7, #8
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7ff ff30 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80087fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80087fe:	2112      	movs	r1, #18
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f9d5 	bl	8008bb0 <SDMMC_GetCmdResp1>
 8008806:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008808:	69fb      	ldr	r3, [r7, #28]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3720      	adds	r7, #32
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b088      	sub	sp, #32
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008820:	2318      	movs	r3, #24
 8008822:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008824:	2340      	movs	r3, #64	; 0x40
 8008826:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008828:	2300      	movs	r3, #0
 800882a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800882c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008830:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008832:	f107 0308 	add.w	r3, r7, #8
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7ff ff0e 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800883e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008842:	2118      	movs	r1, #24
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f9b3 	bl	8008bb0 <SDMMC_GetCmdResp1>
 800884a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800884c:	69fb      	ldr	r3, [r7, #28]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3720      	adds	r7, #32
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b088      	sub	sp, #32
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008864:	2319      	movs	r3, #25
 8008866:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008868:	2340      	movs	r3, #64	; 0x40
 800886a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800886c:	2300      	movs	r3, #0
 800886e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008874:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008876:	f107 0308 	add.w	r3, r7, #8
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff feec 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008882:	f241 3288 	movw	r2, #5000	; 0x1388
 8008886:	2119      	movs	r1, #25
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f991 	bl	8008bb0 <SDMMC_GetCmdResp1>
 800888e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008890:	69fb      	ldr	r3, [r7, #28]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3720      	adds	r7, #32
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b088      	sub	sp, #32
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80088a8:	230c      	movs	r3, #12
 80088aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80088ac:	2340      	movs	r3, #64	; 0x40
 80088ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088b0:	2300      	movs	r3, #0
 80088b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088ba:	f107 0308 	add.w	r3, r7, #8
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff feca 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80088c6:	4a05      	ldr	r2, [pc, #20]	; (80088dc <SDMMC_CmdStopTransfer+0x40>)
 80088c8:	210c      	movs	r1, #12
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f970 	bl	8008bb0 <SDMMC_GetCmdResp1>
 80088d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088d2:	69fb      	ldr	r3, [r7, #28]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3720      	adds	r7, #32
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	05f5e100 	.word	0x05f5e100

080088e0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08a      	sub	sp, #40	; 0x28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80088f0:	2307      	movs	r3, #7
 80088f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80088f4:	2340      	movs	r3, #64	; 0x40
 80088f6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088f8:	2300      	movs	r3, #0
 80088fa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008900:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008902:	f107 0310 	add.w	r3, r7, #16
 8008906:	4619      	mov	r1, r3
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f7ff fea6 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800890e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008912:	2107      	movs	r1, #7
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 f94b 	bl	8008bb0 <SDMMC_GetCmdResp1>
 800891a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800891e:	4618      	mov	r0, r3
 8008920:	3728      	adds	r7, #40	; 0x28
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b088      	sub	sp, #32
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800892e:	2300      	movs	r3, #0
 8008930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008932:	2300      	movs	r3, #0
 8008934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008936:	2300      	movs	r3, #0
 8008938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800893a:	2300      	movs	r3, #0
 800893c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800893e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008942:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008944:	f107 0308 	add.w	r3, r7, #8
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff fe85 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fb65 	bl	8009020 <SDMMC_GetCmdError>
 8008956:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008958:	69fb      	ldr	r3, [r7, #28]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3720      	adds	r7, #32
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b088      	sub	sp, #32
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800896a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800896e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008970:	2308      	movs	r3, #8
 8008972:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008974:	2340      	movs	r3, #64	; 0x40
 8008976:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008978:	2300      	movs	r3, #0
 800897a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800897c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008980:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008982:	f107 0308 	add.w	r3, r7, #8
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff fe66 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 faf8 	bl	8008f84 <SDMMC_GetCmdResp7>
 8008994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008996:	69fb      	ldr	r3, [r7, #28]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3720      	adds	r7, #32
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80089ae:	2337      	movs	r3, #55	; 0x37
 80089b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80089b2:	2340      	movs	r3, #64	; 0x40
 80089b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089b6:	2300      	movs	r3, #0
 80089b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089c0:	f107 0308 	add.w	r3, r7, #8
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff fe47 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80089cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d0:	2137      	movs	r1, #55	; 0x37
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f8ec 	bl	8008bb0 <SDMMC_GetCmdResp1>
 80089d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089da:	69fb      	ldr	r3, [r7, #28]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3720      	adds	r7, #32
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b088      	sub	sp, #32
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80089fa:	2329      	movs	r3, #41	; 0x29
 80089fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80089fe:	2340      	movs	r3, #64	; 0x40
 8008a00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a02:	2300      	movs	r3, #0
 8008a04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a0c:	f107 0308 	add.w	r3, r7, #8
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff fe21 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f9ff 	bl	8008e1c <SDMMC_GetCmdResp3>
 8008a1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a20:	69fb      	ldr	r3, [r7, #28]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3720      	adds	r7, #32
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b088      	sub	sp, #32
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008a38:	2306      	movs	r3, #6
 8008a3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a3c:	2340      	movs	r3, #64	; 0x40
 8008a3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a40:	2300      	movs	r3, #0
 8008a42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a4a:	f107 0308 	add.w	r3, r7, #8
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7ff fe02 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a5a:	2106      	movs	r1, #6
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f8a7 	bl	8008bb0 <SDMMC_GetCmdResp1>
 8008a62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a64:	69fb      	ldr	r3, [r7, #28]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3720      	adds	r7, #32
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b088      	sub	sp, #32
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008a76:	2300      	movs	r3, #0
 8008a78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008a7a:	2333      	movs	r3, #51	; 0x33
 8008a7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a7e:	2340      	movs	r3, #64	; 0x40
 8008a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a82:	2300      	movs	r3, #0
 8008a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a8c:	f107 0308 	add.w	r3, r7, #8
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff fde1 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a9c:	2133      	movs	r1, #51	; 0x33
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f886 	bl	8008bb0 <SDMMC_GetCmdResp1>
 8008aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008aa6:	69fb      	ldr	r3, [r7, #28]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3720      	adds	r7, #32
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008abc:	2302      	movs	r3, #2
 8008abe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008ac0:	23c0      	movs	r3, #192	; 0xc0
 8008ac2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008acc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ace:	f107 0308 	add.w	r3, r7, #8
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7ff fdc0 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f956 	bl	8008d8c <SDMMC_GetCmdResp2>
 8008ae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ae2:	69fb      	ldr	r3, [r7, #28]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3720      	adds	r7, #32
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008afa:	2309      	movs	r3, #9
 8008afc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008afe:	23c0      	movs	r3, #192	; 0xc0
 8008b00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b02:	2300      	movs	r3, #0
 8008b04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b0c:	f107 0308 	add.w	r3, r7, #8
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7ff fda1 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f937 	bl	8008d8c <SDMMC_GetCmdResp2>
 8008b1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b20:	69fb      	ldr	r3, [r7, #28]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3720      	adds	r7, #32
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b088      	sub	sp, #32
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b3c:	2340      	movs	r3, #64	; 0x40
 8008b3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b4a:	f107 0308 	add.w	r3, r7, #8
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff fd82 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	2103      	movs	r1, #3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f99c 	bl	8008e98 <SDMMC_GetCmdResp6>
 8008b60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b62:	69fb      	ldr	r3, [r7, #28]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3720      	adds	r7, #32
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008b7a:	230d      	movs	r3, #13
 8008b7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b7e:	2340      	movs	r3, #64	; 0x40
 8008b80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b82:	2300      	movs	r3, #0
 8008b84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b8c:	f107 0308 	add.w	r3, r7, #8
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff fd61 	bl	800865a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b9c:	210d      	movs	r1, #13
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f806 	bl	8008bb0 <SDMMC_GetCmdResp1>
 8008ba4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ba6:	69fb      	ldr	r3, [r7, #28]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3720      	adds	r7, #32
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008bbe:	4b70      	ldr	r3, [pc, #448]	; (8008d80 <SDMMC_GetCmdResp1+0x1d0>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a70      	ldr	r2, [pc, #448]	; (8008d84 <SDMMC_GetCmdResp1+0x1d4>)
 8008bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc8:	0a5a      	lsrs	r2, r3, #9
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	fb02 f303 	mul.w	r3, r2, r3
 8008bd0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	1e5a      	subs	r2, r3, #1
 8008bd6:	61fa      	str	r2, [r7, #28]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d102      	bne.n	8008be2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008be0:	e0c9      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0ef      	beq.n	8008bd2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1ea      	bne.n	8008bd2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c00:	f003 0304 	and.w	r3, r3, #4
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d004      	beq.n	8008c12 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2204      	movs	r2, #4
 8008c0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c0e:	2304      	movs	r3, #4
 8008c10:	e0b1      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d004      	beq.n	8008c28 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2201      	movs	r2, #1
 8008c22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e0a6      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	22c5      	movs	r2, #197	; 0xc5
 8008c2c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f7ff fd3d 	bl	80086ae <SDIO_GetCommandResponse>
 8008c34:	4603      	mov	r3, r0
 8008c36:	461a      	mov	r2, r3
 8008c38:	7afb      	ldrb	r3, [r7, #11]
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d001      	beq.n	8008c42 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e099      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008c42:	2100      	movs	r1, #0
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f7ff fd3f 	bl	80086c8 <SDIO_GetResponse>
 8008c4a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	4b4e      	ldr	r3, [pc, #312]	; (8008d88 <SDMMC_GetCmdResp1+0x1d8>)
 8008c50:	4013      	ands	r3, r2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008c56:	2300      	movs	r3, #0
 8008c58:	e08d      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	da02      	bge.n	8008c66 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008c60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c64:	e087      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008c70:	2340      	movs	r3, #64	; 0x40
 8008c72:	e080      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008c7e:	2380      	movs	r3, #128	; 0x80
 8008c80:	e079      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d002      	beq.n	8008c92 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c90:	e071      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ca0:	e069      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cb0:	e061      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008cbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cc0:	e059      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cd0:	e051      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ce0:	e049      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008cec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008cf0:	e041      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d00:	e039      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d10:	e031      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008d1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d20:	e029      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008d2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008d30:	e021      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008d3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d40:	e019      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008d4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d50:	e011      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008d5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008d60:	e009      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f003 0308 	and.w	r3, r3, #8
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d002      	beq.n	8008d72 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008d6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008d70:	e001      	b.n	8008d76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3720      	adds	r7, #32
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	2000000c 	.word	0x2000000c
 8008d84:	10624dd3 	.word	0x10624dd3
 8008d88:	fdffe008 	.word	0xfdffe008

08008d8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d94:	4b1f      	ldr	r3, [pc, #124]	; (8008e14 <SDMMC_GetCmdResp2+0x88>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a1f      	ldr	r2, [pc, #124]	; (8008e18 <SDMMC_GetCmdResp2+0x8c>)
 8008d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9e:	0a5b      	lsrs	r3, r3, #9
 8008da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da4:	fb02 f303 	mul.w	r3, r2, r3
 8008da8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	1e5a      	subs	r2, r3, #1
 8008dae:	60fa      	str	r2, [r7, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d102      	bne.n	8008dba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008db4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008db8:	e026      	b.n	8008e08 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d0ef      	beq.n	8008daa <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1ea      	bne.n	8008daa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd8:	f003 0304 	and.w	r3, r3, #4
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d004      	beq.n	8008dea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2204      	movs	r2, #4
 8008de4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008de6:	2304      	movs	r3, #4
 8008de8:	e00e      	b.n	8008e08 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d004      	beq.n	8008e00 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e003      	b.n	8008e08 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	22c5      	movs	r2, #197	; 0xc5
 8008e04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	2000000c 	.word	0x2000000c
 8008e18:	10624dd3 	.word	0x10624dd3

08008e1c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e24:	4b1a      	ldr	r3, [pc, #104]	; (8008e90 <SDMMC_GetCmdResp3+0x74>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a1a      	ldr	r2, [pc, #104]	; (8008e94 <SDMMC_GetCmdResp3+0x78>)
 8008e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2e:	0a5b      	lsrs	r3, r3, #9
 8008e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e34:	fb02 f303 	mul.w	r3, r2, r3
 8008e38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	1e5a      	subs	r2, r3, #1
 8008e3e:	60fa      	str	r2, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d102      	bne.n	8008e4a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e48:	e01b      	b.n	8008e82 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d0ef      	beq.n	8008e3a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1ea      	bne.n	8008e3a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e68:	f003 0304 	and.w	r3, r3, #4
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d004      	beq.n	8008e7a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2204      	movs	r2, #4
 8008e74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e76:	2304      	movs	r3, #4
 8008e78:	e003      	b.n	8008e82 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	22c5      	movs	r2, #197	; 0xc5
 8008e7e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	2000000c 	.word	0x2000000c
 8008e94:	10624dd3 	.word	0x10624dd3

08008e98 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ea6:	4b35      	ldr	r3, [pc, #212]	; (8008f7c <SDMMC_GetCmdResp6+0xe4>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a35      	ldr	r2, [pc, #212]	; (8008f80 <SDMMC_GetCmdResp6+0xe8>)
 8008eac:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb0:	0a5b      	lsrs	r3, r3, #9
 8008eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eb6:	fb02 f303 	mul.w	r3, r2, r3
 8008eba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	1e5a      	subs	r2, r3, #1
 8008ec0:	61fa      	str	r2, [r7, #28]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d102      	bne.n	8008ecc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ec6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008eca:	e052      	b.n	8008f72 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0ef      	beq.n	8008ebc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1ea      	bne.n	8008ebc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eea:	f003 0304 	and.w	r3, r3, #4
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d004      	beq.n	8008efc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2204      	movs	r2, #4
 8008ef6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ef8:	2304      	movs	r3, #4
 8008efa:	e03a      	b.n	8008f72 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d004      	beq.n	8008f12 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e02f      	b.n	8008f72 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f7ff fbcb 	bl	80086ae <SDIO_GetCommandResponse>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	7afb      	ldrb	r3, [r7, #11]
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d001      	beq.n	8008f26 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e025      	b.n	8008f72 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	22c5      	movs	r2, #197	; 0xc5
 8008f2a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f7ff fbca 	bl	80086c8 <SDIO_GetResponse>
 8008f34:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d106      	bne.n	8008f4e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	0c1b      	lsrs	r3, r3, #16
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	e011      	b.n	8008f72 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f5c:	e009      	b.n	8008f72 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f6c:	e001      	b.n	8008f72 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008f6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3720      	adds	r7, #32
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	2000000c 	.word	0x2000000c
 8008f80:	10624dd3 	.word	0x10624dd3

08008f84 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f8c:	4b22      	ldr	r3, [pc, #136]	; (8009018 <SDMMC_GetCmdResp7+0x94>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a22      	ldr	r2, [pc, #136]	; (800901c <SDMMC_GetCmdResp7+0x98>)
 8008f92:	fba2 2303 	umull	r2, r3, r2, r3
 8008f96:	0a5b      	lsrs	r3, r3, #9
 8008f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f9c:	fb02 f303 	mul.w	r3, r2, r3
 8008fa0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	1e5a      	subs	r2, r3, #1
 8008fa6:	60fa      	str	r2, [r7, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d102      	bne.n	8008fb2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fb0:	e02c      	b.n	800900c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d0ef      	beq.n	8008fa2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1ea      	bne.n	8008fa2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd0:	f003 0304 	and.w	r3, r3, #4
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d004      	beq.n	8008fe2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2204      	movs	r2, #4
 8008fdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fde:	2304      	movs	r3, #4
 8008fe0:	e014      	b.n	800900c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d004      	beq.n	8008ff8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e009      	b.n	800900c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2240      	movs	r2, #64	; 0x40
 8009008:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800900a:	2300      	movs	r3, #0
  
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	2000000c 	.word	0x2000000c
 800901c:	10624dd3 	.word	0x10624dd3

08009020 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009028:	4b11      	ldr	r3, [pc, #68]	; (8009070 <SDMMC_GetCmdError+0x50>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a11      	ldr	r2, [pc, #68]	; (8009074 <SDMMC_GetCmdError+0x54>)
 800902e:	fba2 2303 	umull	r2, r3, r2, r3
 8009032:	0a5b      	lsrs	r3, r3, #9
 8009034:	f241 3288 	movw	r2, #5000	; 0x1388
 8009038:	fb02 f303 	mul.w	r3, r2, r3
 800903c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	1e5a      	subs	r2, r3, #1
 8009042:	60fa      	str	r2, [r7, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d102      	bne.n	800904e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009048:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800904c:	e009      	b.n	8009062 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0f1      	beq.n	800903e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	22c5      	movs	r2, #197	; 0xc5
 800905e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	2000000c 	.word	0x2000000c
 8009074:	10624dd3 	.word	0x10624dd3

08009078 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800907c:	4904      	ldr	r1, [pc, #16]	; (8009090 <MX_FATFS_Init+0x18>)
 800907e:	4805      	ldr	r0, [pc, #20]	; (8009094 <MX_FATFS_Init+0x1c>)
 8009080:	f003 fe20 	bl	800ccc4 <FATFS_LinkDriver>
 8009084:	4603      	mov	r3, r0
 8009086:	461a      	mov	r2, r3
 8009088:	4b03      	ldr	r3, [pc, #12]	; (8009098 <MX_FATFS_Init+0x20>)
 800908a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800908c:	bf00      	nop
 800908e:	bd80      	pop	{r7, pc}
 8009090:	20002614 	.word	0x20002614
 8009094:	08017e74 	.word	0x08017e74
 8009098:	20002610 	.word	0x20002610

0800909c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800909c:	b480      	push	{r7}
 800909e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80090a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80090b6:	f000 f879 	bl	80091ac <BSP_SD_IsDetected>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d001      	beq.n	80090c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e012      	b.n	80090ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80090c4:	480b      	ldr	r0, [pc, #44]	; (80090f4 <BSP_SD_Init+0x48>)
 80090c6:	f7fd f87b 	bl	80061c0 <HAL_SD_Init>
 80090ca:	4603      	mov	r3, r0
 80090cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d109      	bne.n	80090e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80090d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80090d8:	4806      	ldr	r0, [pc, #24]	; (80090f4 <BSP_SD_Init+0x48>)
 80090da:	f7fd fe65 	bl	8006da8 <HAL_SD_ConfigWideBusOperation>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80090e8:	79fb      	ldrb	r3, [r7, #7]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	200024a8 	.word	0x200024a8

080090f8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af02      	add	r7, sp, #8
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	68f9      	ldr	r1, [r7, #12]
 8009114:	4806      	ldr	r0, [pc, #24]	; (8009130 <BSP_SD_ReadBlocks+0x38>)
 8009116:	f7fd f903 	bl	8006320 <HAL_SD_ReadBlocks>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009124:	7dfb      	ldrb	r3, [r7, #23]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	200024a8 	.word	0x200024a8

08009134 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b088      	sub	sp, #32
 8009138:	af02      	add	r7, sp, #8
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	68f9      	ldr	r1, [r7, #12]
 8009150:	4806      	ldr	r0, [pc, #24]	; (800916c <BSP_SD_WriteBlocks+0x38>)
 8009152:	f7fd facb 	bl	80066ec <HAL_SD_WriteBlocks>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009160:	7dfb      	ldrb	r3, [r7, #23]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	200024a8 	.word	0x200024a8

08009170 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009174:	4805      	ldr	r0, [pc, #20]	; (800918c <BSP_SD_GetCardState+0x1c>)
 8009176:	f7fd feb1 	bl	8006edc <HAL_SD_GetCardState>
 800917a:	4603      	mov	r3, r0
 800917c:	2b04      	cmp	r3, #4
 800917e:	bf14      	ite	ne
 8009180:	2301      	movne	r3, #1
 8009182:	2300      	moveq	r3, #0
 8009184:	b2db      	uxtb	r3, r3
}
 8009186:	4618      	mov	r0, r3
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	200024a8 	.word	0x200024a8

08009190 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009198:	6879      	ldr	r1, [r7, #4]
 800919a:	4803      	ldr	r0, [pc, #12]	; (80091a8 <BSP_SD_GetCardInfo+0x18>)
 800919c:	f7fd fdd8 	bl	8006d50 <HAL_SD_GetCardInfo>
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	200024a8 	.word	0x200024a8

080091ac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80091b2:	2301      	movs	r3, #1
 80091b4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80091b6:	f000 f80b 	bl	80091d0 <BSP_PlatformIsDetected>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d101      	bne.n	80091c4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80091c0:	2300      	movs	r3, #0
 80091c2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	b2db      	uxtb	r3, r3
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80091d6:	2301      	movs	r3, #1
 80091d8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80091da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80091de:	4806      	ldr	r0, [pc, #24]	; (80091f8 <BSP_PlatformIsDetected+0x28>)
 80091e0:	f7fb fae4 	bl	80047ac <HAL_GPIO_ReadPin>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80091ea:	2300      	movs	r3, #0
 80091ec:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80091ee:	79fb      	ldrb	r3, [r7, #7]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	40020400 	.word	0x40020400

080091fc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	4603      	mov	r3, r0
 8009204:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009206:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <SD_CheckStatus+0x38>)
 8009208:	2201      	movs	r2, #1
 800920a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800920c:	f7ff ffb0 	bl	8009170 <BSP_SD_GetCardState>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d107      	bne.n	8009226 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009216:	4b07      	ldr	r3, [pc, #28]	; (8009234 <SD_CheckStatus+0x38>)
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	b2db      	uxtb	r3, r3
 800921c:	f023 0301 	bic.w	r3, r3, #1
 8009220:	b2da      	uxtb	r2, r3
 8009222:	4b04      	ldr	r3, [pc, #16]	; (8009234 <SD_CheckStatus+0x38>)
 8009224:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009226:	4b03      	ldr	r3, [pc, #12]	; (8009234 <SD_CheckStatus+0x38>)
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	b2db      	uxtb	r3, r3
}
 800922c:	4618      	mov	r0, r3
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	20000015 	.word	0x20000015

08009238 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009242:	4b0b      	ldr	r3, [pc, #44]	; (8009270 <SD_initialize+0x38>)
 8009244:	2201      	movs	r2, #1
 8009246:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009248:	f7ff ff30 	bl	80090ac <BSP_SD_Init>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d107      	bne.n	8009262 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	4618      	mov	r0, r3
 8009256:	f7ff ffd1 	bl	80091fc <SD_CheckStatus>
 800925a:	4603      	mov	r3, r0
 800925c:	461a      	mov	r2, r3
 800925e:	4b04      	ldr	r3, [pc, #16]	; (8009270 <SD_initialize+0x38>)
 8009260:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009262:	4b03      	ldr	r3, [pc, #12]	; (8009270 <SD_initialize+0x38>)
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	b2db      	uxtb	r3, r3
}
 8009268:	4618      	mov	r0, r3
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	20000015 	.word	0x20000015

08009274 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	4603      	mov	r3, r0
 800927c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	4618      	mov	r0, r3
 8009282:	f7ff ffbb 	bl	80091fc <SD_CheckStatus>
 8009286:	4603      	mov	r3, r0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	4603      	mov	r3, r0
 800929e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80092a4:	f04f 33ff 	mov.w	r3, #4294967295
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	68b8      	ldr	r0, [r7, #8]
 80092ae:	f7ff ff23 	bl	80090f8 <BSP_SD_ReadBlocks>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d107      	bne.n	80092c8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80092b8:	bf00      	nop
 80092ba:	f7ff ff59 	bl	8009170 <BSP_SD_GetCardState>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1fa      	bne.n	80092ba <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b086      	sub	sp, #24
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	603b      	str	r3, [r7, #0]
 80092de:	4603      	mov	r3, r0
 80092e0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80092e6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	6879      	ldr	r1, [r7, #4]
 80092ee:	68b8      	ldr	r0, [r7, #8]
 80092f0:	f7ff ff20 	bl	8009134 <BSP_SD_WriteBlocks>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d107      	bne.n	800930a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80092fa:	bf00      	nop
 80092fc:	f7ff ff38 	bl	8009170 <BSP_SD_GetCardState>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1fa      	bne.n	80092fc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800930a:	7dfb      	ldrb	r3, [r7, #23]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08c      	sub	sp, #48	; 0x30
 8009318:	af00      	add	r7, sp, #0
 800931a:	4603      	mov	r3, r0
 800931c:	603a      	str	r2, [r7, #0]
 800931e:	71fb      	strb	r3, [r7, #7]
 8009320:	460b      	mov	r3, r1
 8009322:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800932a:	4b25      	ldr	r3, [pc, #148]	; (80093c0 <SD_ioctl+0xac>)
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	b2db      	uxtb	r3, r3
 8009330:	f003 0301 	and.w	r3, r3, #1
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <SD_ioctl+0x28>
 8009338:	2303      	movs	r3, #3
 800933a:	e03c      	b.n	80093b6 <SD_ioctl+0xa2>

  switch (cmd)
 800933c:	79bb      	ldrb	r3, [r7, #6]
 800933e:	2b03      	cmp	r3, #3
 8009340:	d834      	bhi.n	80093ac <SD_ioctl+0x98>
 8009342:	a201      	add	r2, pc, #4	; (adr r2, 8009348 <SD_ioctl+0x34>)
 8009344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009348:	08009359 	.word	0x08009359
 800934c:	08009361 	.word	0x08009361
 8009350:	08009379 	.word	0x08009379
 8009354:	08009393 	.word	0x08009393
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800935e:	e028      	b.n	80093b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009360:	f107 030c 	add.w	r3, r7, #12
 8009364:	4618      	mov	r0, r3
 8009366:	f7ff ff13 	bl	8009190 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800936a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009370:	2300      	movs	r3, #0
 8009372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009376:	e01c      	b.n	80093b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009378:	f107 030c 	add.w	r3, r7, #12
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff ff07 	bl	8009190 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009384:	b29a      	uxth	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009390:	e00f      	b.n	80093b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009392:	f107 030c 	add.w	r3, r7, #12
 8009396:	4618      	mov	r0, r3
 8009398:	f7ff fefa 	bl	8009190 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939e:	0a5a      	lsrs	r2, r3, #9
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80093aa:	e002      	b.n	80093b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80093ac:	2304      	movs	r3, #4
 80093ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80093b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3730      	adds	r7, #48	; 0x30
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20000015 	.word	0x20000015

080093c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	4603      	mov	r3, r0
 80093cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80093ce:	79fb      	ldrb	r3, [r7, #7]
 80093d0:	4a08      	ldr	r2, [pc, #32]	; (80093f4 <disk_status+0x30>)
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	79fa      	ldrb	r2, [r7, #7]
 80093dc:	4905      	ldr	r1, [pc, #20]	; (80093f4 <disk_status+0x30>)
 80093de:	440a      	add	r2, r1
 80093e0:	7a12      	ldrb	r2, [r2, #8]
 80093e2:	4610      	mov	r0, r2
 80093e4:	4798      	blx	r3
 80093e6:	4603      	mov	r3, r0
 80093e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	20002840 	.word	0x20002840

080093f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	4603      	mov	r3, r0
 8009400:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009406:	79fb      	ldrb	r3, [r7, #7]
 8009408:	4a0e      	ldr	r2, [pc, #56]	; (8009444 <disk_initialize+0x4c>)
 800940a:	5cd3      	ldrb	r3, [r2, r3]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d114      	bne.n	800943a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009410:	79fb      	ldrb	r3, [r7, #7]
 8009412:	4a0c      	ldr	r2, [pc, #48]	; (8009444 <disk_initialize+0x4c>)
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4413      	add	r3, r2
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	79fa      	ldrb	r2, [r7, #7]
 800941e:	4909      	ldr	r1, [pc, #36]	; (8009444 <disk_initialize+0x4c>)
 8009420:	440a      	add	r2, r1
 8009422:	7a12      	ldrb	r2, [r2, #8]
 8009424:	4610      	mov	r0, r2
 8009426:	4798      	blx	r3
 8009428:	4603      	mov	r3, r0
 800942a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d103      	bne.n	800943a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009432:	79fb      	ldrb	r3, [r7, #7]
 8009434:	4a03      	ldr	r2, [pc, #12]	; (8009444 <disk_initialize+0x4c>)
 8009436:	2101      	movs	r1, #1
 8009438:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800943a:	7bfb      	ldrb	r3, [r7, #15]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	20002840 	.word	0x20002840

08009448 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009448:	b590      	push	{r4, r7, lr}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	60b9      	str	r1, [r7, #8]
 8009450:	607a      	str	r2, [r7, #4]
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	4a0a      	ldr	r2, [pc, #40]	; (8009484 <disk_read+0x3c>)
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	689c      	ldr	r4, [r3, #8]
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	4a07      	ldr	r2, [pc, #28]	; (8009484 <disk_read+0x3c>)
 8009468:	4413      	add	r3, r2
 800946a:	7a18      	ldrb	r0, [r3, #8]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	68b9      	ldr	r1, [r7, #8]
 8009472:	47a0      	blx	r4
 8009474:	4603      	mov	r3, r0
 8009476:	75fb      	strb	r3, [r7, #23]
  return res;
 8009478:	7dfb      	ldrb	r3, [r7, #23]
}
 800947a:	4618      	mov	r0, r3
 800947c:	371c      	adds	r7, #28
 800947e:	46bd      	mov	sp, r7
 8009480:	bd90      	pop	{r4, r7, pc}
 8009482:	bf00      	nop
 8009484:	20002840 	.word	0x20002840

08009488 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009488:	b590      	push	{r4, r7, lr}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	60b9      	str	r1, [r7, #8]
 8009490:	607a      	str	r2, [r7, #4]
 8009492:	603b      	str	r3, [r7, #0]
 8009494:	4603      	mov	r3, r0
 8009496:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	4a0a      	ldr	r2, [pc, #40]	; (80094c4 <disk_write+0x3c>)
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	68dc      	ldr	r4, [r3, #12]
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	4a07      	ldr	r2, [pc, #28]	; (80094c4 <disk_write+0x3c>)
 80094a8:	4413      	add	r3, r2
 80094aa:	7a18      	ldrb	r0, [r3, #8]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	68b9      	ldr	r1, [r7, #8]
 80094b2:	47a0      	blx	r4
 80094b4:	4603      	mov	r3, r0
 80094b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	371c      	adds	r7, #28
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd90      	pop	{r4, r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20002840 	.word	0x20002840

080094c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	603a      	str	r2, [r7, #0]
 80094d2:	71fb      	strb	r3, [r7, #7]
 80094d4:	460b      	mov	r3, r1
 80094d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80094d8:	79fb      	ldrb	r3, [r7, #7]
 80094da:	4a09      	ldr	r2, [pc, #36]	; (8009500 <disk_ioctl+0x38>)
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4413      	add	r3, r2
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	79fa      	ldrb	r2, [r7, #7]
 80094e6:	4906      	ldr	r1, [pc, #24]	; (8009500 <disk_ioctl+0x38>)
 80094e8:	440a      	add	r2, r1
 80094ea:	7a10      	ldrb	r0, [r2, #8]
 80094ec:	79b9      	ldrb	r1, [r7, #6]
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	4798      	blx	r3
 80094f2:	4603      	mov	r3, r0
 80094f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20002840 	.word	0x20002840

08009504 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	3301      	adds	r3, #1
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009514:	89fb      	ldrh	r3, [r7, #14]
 8009516:	021b      	lsls	r3, r3, #8
 8009518:	b21a      	sxth	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	b21b      	sxth	r3, r3
 8009520:	4313      	orrs	r3, r2
 8009522:	b21b      	sxth	r3, r3
 8009524:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009526:	89fb      	ldrh	r3, [r7, #14]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3303      	adds	r3, #3
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	021b      	lsls	r3, r3, #8
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	3202      	adds	r2, #2
 800954c:	7812      	ldrb	r2, [r2, #0]
 800954e:	4313      	orrs	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	021b      	lsls	r3, r3, #8
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	3201      	adds	r2, #1
 800955a:	7812      	ldrb	r2, [r2, #0]
 800955c:	4313      	orrs	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	021b      	lsls	r3, r3, #8
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	7812      	ldrb	r2, [r2, #0]
 8009568:	4313      	orrs	r3, r2
 800956a:	60fb      	str	r3, [r7, #12]
	return rv;
 800956c:	68fb      	ldr	r3, [r7, #12]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3714      	adds	r7, #20
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	460b      	mov	r3, r1
 8009584:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	607a      	str	r2, [r7, #4]
 800958c:	887a      	ldrh	r2, [r7, #2]
 800958e:	b2d2      	uxtb	r2, r2
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	887b      	ldrh	r3, [r7, #2]
 8009594:	0a1b      	lsrs	r3, r3, #8
 8009596:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	607a      	str	r2, [r7, #4]
 800959e:	887a      	ldrh	r2, [r7, #2]
 80095a0:	b2d2      	uxtb	r2, r2
 80095a2:	701a      	strb	r2, [r3, #0]
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	607a      	str	r2, [r7, #4]
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	b2d2      	uxtb	r2, r2
 80095c4:	701a      	strb	r2, [r3, #0]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	0a1b      	lsrs	r3, r3, #8
 80095ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	607a      	str	r2, [r7, #4]
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	b2d2      	uxtb	r2, r2
 80095d6:	701a      	strb	r2, [r3, #0]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	0a1b      	lsrs	r3, r3, #8
 80095dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	b2d2      	uxtb	r2, r2
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	0a1b      	lsrs	r3, r3, #8
 80095ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	1c5a      	adds	r2, r3, #1
 80095f4:	607a      	str	r2, [r7, #4]
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	b2d2      	uxtb	r2, r2
 80095fa:	701a      	strb	r2, [r3, #0]
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00d      	beq.n	800963e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009622:	693a      	ldr	r2, [r7, #16]
 8009624:	1c53      	adds	r3, r2, #1
 8009626:	613b      	str	r3, [r7, #16]
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	1c59      	adds	r1, r3, #1
 800962c:	6179      	str	r1, [r7, #20]
 800962e:	7812      	ldrb	r2, [r2, #0]
 8009630:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	3b01      	subs	r3, #1
 8009636:	607b      	str	r3, [r7, #4]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1f1      	bne.n	8009622 <mem_cpy+0x1a>
	}
}
 800963e:	bf00      	nop
 8009640:	371c      	adds	r7, #28
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800964a:	b480      	push	{r7}
 800964c:	b087      	sub	sp, #28
 800964e:	af00      	add	r7, sp, #0
 8009650:	60f8      	str	r0, [r7, #12]
 8009652:	60b9      	str	r1, [r7, #8]
 8009654:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	617a      	str	r2, [r7, #20]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	b2d2      	uxtb	r2, r2
 8009664:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	3b01      	subs	r3, #1
 800966a:	607b      	str	r3, [r7, #4]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1f3      	bne.n	800965a <mem_set+0x10>
}
 8009672:	bf00      	nop
 8009674:	bf00      	nop
 8009676:	371c      	adds	r7, #28
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009680:	b480      	push	{r7}
 8009682:	b089      	sub	sp, #36	; 0x24
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	61fb      	str	r3, [r7, #28]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009694:	2300      	movs	r3, #0
 8009696:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	61fa      	str	r2, [r7, #28]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	4619      	mov	r1, r3
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	1c5a      	adds	r2, r3, #1
 80096a6:	61ba      	str	r2, [r7, #24]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	1acb      	subs	r3, r1, r3
 80096ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	607b      	str	r3, [r7, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d002      	beq.n	80096c0 <mem_cmp+0x40>
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d0eb      	beq.n	8009698 <mem_cmp+0x18>

	return r;
 80096c0:	697b      	ldr	r3, [r7, #20]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3724      	adds	r7, #36	; 0x24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80096ce:	b480      	push	{r7}
 80096d0:	b083      	sub	sp, #12
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80096d8:	e002      	b.n	80096e0 <chk_chr+0x12>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	3301      	adds	r3, #1
 80096de:	607b      	str	r3, [r7, #4]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d005      	beq.n	80096f4 <chk_chr+0x26>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d1f2      	bne.n	80096da <chk_chr+0xc>
	return *str;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	781b      	ldrb	r3, [r3, #0]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800970e:	2300      	movs	r3, #0
 8009710:	60bb      	str	r3, [r7, #8]
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	60fb      	str	r3, [r7, #12]
 8009716:	e029      	b.n	800976c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009718:	4a27      	ldr	r2, [pc, #156]	; (80097b8 <chk_lock+0xb4>)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	011b      	lsls	r3, r3, #4
 800971e:	4413      	add	r3, r2
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d01d      	beq.n	8009762 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009726:	4a24      	ldr	r2, [pc, #144]	; (80097b8 <chk_lock+0xb4>)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	011b      	lsls	r3, r3, #4
 800972c:	4413      	add	r3, r2
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	429a      	cmp	r2, r3
 8009736:	d116      	bne.n	8009766 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009738:	4a1f      	ldr	r2, [pc, #124]	; (80097b8 <chk_lock+0xb4>)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	011b      	lsls	r3, r3, #4
 800973e:	4413      	add	r3, r2
 8009740:	3304      	adds	r3, #4
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009748:	429a      	cmp	r2, r3
 800974a:	d10c      	bne.n	8009766 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800974c:	4a1a      	ldr	r2, [pc, #104]	; (80097b8 <chk_lock+0xb4>)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	011b      	lsls	r3, r3, #4
 8009752:	4413      	add	r3, r2
 8009754:	3308      	adds	r3, #8
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800975c:	429a      	cmp	r2, r3
 800975e:	d102      	bne.n	8009766 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009760:	e007      	b.n	8009772 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009762:	2301      	movs	r3, #1
 8009764:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3301      	adds	r3, #1
 800976a:	60fb      	str	r3, [r7, #12]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d9d2      	bls.n	8009718 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d109      	bne.n	800978c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d102      	bne.n	8009784 <chk_lock+0x80>
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d101      	bne.n	8009788 <chk_lock+0x84>
 8009784:	2300      	movs	r3, #0
 8009786:	e010      	b.n	80097aa <chk_lock+0xa6>
 8009788:	2312      	movs	r3, #18
 800978a:	e00e      	b.n	80097aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d108      	bne.n	80097a4 <chk_lock+0xa0>
 8009792:	4a09      	ldr	r2, [pc, #36]	; (80097b8 <chk_lock+0xb4>)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	011b      	lsls	r3, r3, #4
 8009798:	4413      	add	r3, r2
 800979a:	330c      	adds	r3, #12
 800979c:	881b      	ldrh	r3, [r3, #0]
 800979e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097a2:	d101      	bne.n	80097a8 <chk_lock+0xa4>
 80097a4:	2310      	movs	r3, #16
 80097a6:	e000      	b.n	80097aa <chk_lock+0xa6>
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	20002620 	.word	0x20002620

080097bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80097c2:	2300      	movs	r3, #0
 80097c4:	607b      	str	r3, [r7, #4]
 80097c6:	e002      	b.n	80097ce <enq_lock+0x12>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3301      	adds	r3, #1
 80097cc:	607b      	str	r3, [r7, #4]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d806      	bhi.n	80097e2 <enq_lock+0x26>
 80097d4:	4a09      	ldr	r2, [pc, #36]	; (80097fc <enq_lock+0x40>)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	011b      	lsls	r3, r3, #4
 80097da:	4413      	add	r3, r2
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1f2      	bne.n	80097c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	bf14      	ite	ne
 80097e8:	2301      	movne	r3, #1
 80097ea:	2300      	moveq	r3, #0
 80097ec:	b2db      	uxtb	r3, r3
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	370c      	adds	r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	20002620 	.word	0x20002620

08009800 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800980a:	2300      	movs	r3, #0
 800980c:	60fb      	str	r3, [r7, #12]
 800980e:	e01f      	b.n	8009850 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009810:	4a41      	ldr	r2, [pc, #260]	; (8009918 <inc_lock+0x118>)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	011b      	lsls	r3, r3, #4
 8009816:	4413      	add	r3, r2
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	429a      	cmp	r2, r3
 8009820:	d113      	bne.n	800984a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009822:	4a3d      	ldr	r2, [pc, #244]	; (8009918 <inc_lock+0x118>)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	011b      	lsls	r3, r3, #4
 8009828:	4413      	add	r3, r2
 800982a:	3304      	adds	r3, #4
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009832:	429a      	cmp	r2, r3
 8009834:	d109      	bne.n	800984a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009836:	4a38      	ldr	r2, [pc, #224]	; (8009918 <inc_lock+0x118>)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	011b      	lsls	r3, r3, #4
 800983c:	4413      	add	r3, r2
 800983e:	3308      	adds	r3, #8
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009846:	429a      	cmp	r2, r3
 8009848:	d006      	beq.n	8009858 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3301      	adds	r3, #1
 800984e:	60fb      	str	r3, [r7, #12]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d9dc      	bls.n	8009810 <inc_lock+0x10>
 8009856:	e000      	b.n	800985a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009858:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b02      	cmp	r3, #2
 800985e:	d132      	bne.n	80098c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]
 8009864:	e002      	b.n	800986c <inc_lock+0x6c>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	3301      	adds	r3, #1
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d806      	bhi.n	8009880 <inc_lock+0x80>
 8009872:	4a29      	ldr	r2, [pc, #164]	; (8009918 <inc_lock+0x118>)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	011b      	lsls	r3, r3, #4
 8009878:	4413      	add	r3, r2
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1f2      	bne.n	8009866 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b02      	cmp	r3, #2
 8009884:	d101      	bne.n	800988a <inc_lock+0x8a>
 8009886:	2300      	movs	r3, #0
 8009888:	e040      	b.n	800990c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	4922      	ldr	r1, [pc, #136]	; (8009918 <inc_lock+0x118>)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	011b      	lsls	r3, r3, #4
 8009894:	440b      	add	r3, r1
 8009896:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	689a      	ldr	r2, [r3, #8]
 800989c:	491e      	ldr	r1, [pc, #120]	; (8009918 <inc_lock+0x118>)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	011b      	lsls	r3, r3, #4
 80098a2:	440b      	add	r3, r1
 80098a4:	3304      	adds	r3, #4
 80098a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	695a      	ldr	r2, [r3, #20]
 80098ac:	491a      	ldr	r1, [pc, #104]	; (8009918 <inc_lock+0x118>)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	011b      	lsls	r3, r3, #4
 80098b2:	440b      	add	r3, r1
 80098b4:	3308      	adds	r3, #8
 80098b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80098b8:	4a17      	ldr	r2, [pc, #92]	; (8009918 <inc_lock+0x118>)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	4413      	add	r3, r2
 80098c0:	330c      	adds	r3, #12
 80098c2:	2200      	movs	r2, #0
 80098c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d009      	beq.n	80098e0 <inc_lock+0xe0>
 80098cc:	4a12      	ldr	r2, [pc, #72]	; (8009918 <inc_lock+0x118>)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	011b      	lsls	r3, r3, #4
 80098d2:	4413      	add	r3, r2
 80098d4:	330c      	adds	r3, #12
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <inc_lock+0xe0>
 80098dc:	2300      	movs	r3, #0
 80098de:	e015      	b.n	800990c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d108      	bne.n	80098f8 <inc_lock+0xf8>
 80098e6:	4a0c      	ldr	r2, [pc, #48]	; (8009918 <inc_lock+0x118>)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	011b      	lsls	r3, r3, #4
 80098ec:	4413      	add	r3, r2
 80098ee:	330c      	adds	r3, #12
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	3301      	adds	r3, #1
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	e001      	b.n	80098fc <inc_lock+0xfc>
 80098f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098fc:	4906      	ldr	r1, [pc, #24]	; (8009918 <inc_lock+0x118>)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	011b      	lsls	r3, r3, #4
 8009902:	440b      	add	r3, r1
 8009904:	330c      	adds	r3, #12
 8009906:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3301      	adds	r3, #1
}
 800990c:	4618      	mov	r0, r3
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	20002620 	.word	0x20002620

0800991c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3b01      	subs	r3, #1
 8009928:	607b      	str	r3, [r7, #4]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d825      	bhi.n	800997c <dec_lock+0x60>
		n = Files[i].ctr;
 8009930:	4a17      	ldr	r2, [pc, #92]	; (8009990 <dec_lock+0x74>)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	011b      	lsls	r3, r3, #4
 8009936:	4413      	add	r3, r2
 8009938:	330c      	adds	r3, #12
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800993e:	89fb      	ldrh	r3, [r7, #14]
 8009940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009944:	d101      	bne.n	800994a <dec_lock+0x2e>
 8009946:	2300      	movs	r3, #0
 8009948:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800994a:	89fb      	ldrh	r3, [r7, #14]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <dec_lock+0x3a>
 8009950:	89fb      	ldrh	r3, [r7, #14]
 8009952:	3b01      	subs	r3, #1
 8009954:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009956:	4a0e      	ldr	r2, [pc, #56]	; (8009990 <dec_lock+0x74>)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	011b      	lsls	r3, r3, #4
 800995c:	4413      	add	r3, r2
 800995e:	330c      	adds	r3, #12
 8009960:	89fa      	ldrh	r2, [r7, #14]
 8009962:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009964:	89fb      	ldrh	r3, [r7, #14]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d105      	bne.n	8009976 <dec_lock+0x5a>
 800996a:	4a09      	ldr	r2, [pc, #36]	; (8009990 <dec_lock+0x74>)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	4413      	add	r3, r2
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	737b      	strb	r3, [r7, #13]
 800997a:	e001      	b.n	8009980 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800997c:	2302      	movs	r3, #2
 800997e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009980:	7b7b      	ldrb	r3, [r7, #13]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	20002620 	.word	0x20002620

08009994 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800999c:	2300      	movs	r3, #0
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	e010      	b.n	80099c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80099a2:	4a0d      	ldr	r2, [pc, #52]	; (80099d8 <clear_lock+0x44>)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	011b      	lsls	r3, r3, #4
 80099a8:	4413      	add	r3, r2
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d105      	bne.n	80099be <clear_lock+0x2a>
 80099b2:	4a09      	ldr	r2, [pc, #36]	; (80099d8 <clear_lock+0x44>)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	011b      	lsls	r3, r3, #4
 80099b8:	4413      	add	r3, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	3301      	adds	r3, #1
 80099c2:	60fb      	str	r3, [r7, #12]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d9eb      	bls.n	80099a2 <clear_lock+0xe>
	}
}
 80099ca:	bf00      	nop
 80099cc:	bf00      	nop
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	20002620 	.word	0x20002620

080099dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	78db      	ldrb	r3, [r3, #3]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d034      	beq.n	8009a5a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	7858      	ldrb	r0, [r3, #1]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a00:	2301      	movs	r3, #1
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	f7ff fd40 	bl	8009488 <disk_write>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d002      	beq.n	8009a14 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	73fb      	strb	r3, [r7, #15]
 8009a12:	e022      	b.n	8009a5a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	1ad2      	subs	r2, r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d217      	bcs.n	8009a5a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	789b      	ldrb	r3, [r3, #2]
 8009a2e:	613b      	str	r3, [r7, #16]
 8009a30:	e010      	b.n	8009a54 <sync_window+0x78>
					wsect += fs->fsize;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	4413      	add	r3, r2
 8009a3a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	7858      	ldrb	r0, [r3, #1]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a46:	2301      	movs	r3, #1
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	f7ff fd1d 	bl	8009488 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	3b01      	subs	r3, #1
 8009a52:	613b      	str	r3, [r7, #16]
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d8eb      	bhi.n	8009a32 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d01b      	beq.n	8009ab4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7ff ffad 	bl	80099dc <sync_window>
 8009a82:	4603      	mov	r3, r0
 8009a84:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d113      	bne.n	8009ab4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	7858      	ldrb	r0, [r3, #1]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a96:	2301      	movs	r3, #1
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	f7ff fcd5 	bl	8009448 <disk_read>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d004      	beq.n	8009aae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
	...

08009ac0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7ff ff87 	bl	80099dc <sync_window>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d159      	bne.n	8009b8c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	2b03      	cmp	r3, #3
 8009ade:	d149      	bne.n	8009b74 <sync_fs+0xb4>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	791b      	ldrb	r3, [r3, #4]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d145      	bne.n	8009b74 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	899b      	ldrh	r3, [r3, #12]
 8009af2:	461a      	mov	r2, r3
 8009af4:	2100      	movs	r1, #0
 8009af6:	f7ff fda8 	bl	800964a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	3338      	adds	r3, #56	; 0x38
 8009afe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b02:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7ff fd37 	bl	800957a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	3338      	adds	r3, #56	; 0x38
 8009b10:	4921      	ldr	r1, [pc, #132]	; (8009b98 <sync_fs+0xd8>)
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7ff fd4c 	bl	80095b0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	3338      	adds	r3, #56	; 0x38
 8009b1c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009b20:	491e      	ldr	r1, [pc, #120]	; (8009b9c <sync_fs+0xdc>)
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff fd44 	bl	80095b0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3338      	adds	r3, #56	; 0x38
 8009b2c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	4619      	mov	r1, r3
 8009b36:	4610      	mov	r0, r2
 8009b38:	f7ff fd3a 	bl	80095b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	3338      	adds	r3, #56	; 0x38
 8009b40:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	f7ff fd30 	bl	80095b0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	7858      	ldrb	r0, [r3, #1]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b68:	2301      	movs	r3, #1
 8009b6a:	f7ff fc8d 	bl	8009488 <disk_write>
			fs->fsi_flag = 0;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	785b      	ldrb	r3, [r3, #1]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff fca3 	bl	80094c8 <disk_ioctl>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <sync_fs+0xcc>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	41615252 	.word	0x41615252
 8009b9c:	61417272 	.word	0x61417272

08009ba0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	3b02      	subs	r3, #2
 8009bae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	69db      	ldr	r3, [r3, #28]
 8009bb4:	3b02      	subs	r3, #2
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d301      	bcc.n	8009bc0 <clust2sect+0x20>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	e008      	b.n	8009bd2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	895b      	ldrh	r3, [r3, #10]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	fb03 f202 	mul.w	r2, r3, r2
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd0:	4413      	add	r3, r2
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b086      	sub	sp, #24
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d904      	bls.n	8009bfe <get_fat+0x20>
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	69db      	ldr	r3, [r3, #28]
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d302      	bcc.n	8009c04 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009bfe:	2301      	movs	r3, #1
 8009c00:	617b      	str	r3, [r7, #20]
 8009c02:	e0bb      	b.n	8009d7c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009c04:	f04f 33ff 	mov.w	r3, #4294967295
 8009c08:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	f000 8083 	beq.w	8009d1a <get_fat+0x13c>
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	f300 80a7 	bgt.w	8009d68 <get_fat+0x18a>
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d002      	beq.n	8009c24 <get_fat+0x46>
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d056      	beq.n	8009cd0 <get_fat+0xf2>
 8009c22:	e0a1      	b.n	8009d68 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	60fb      	str	r3, [r7, #12]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	085b      	lsrs	r3, r3, #1
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	4413      	add	r3, r2
 8009c30:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	899b      	ldrh	r3, [r3, #12]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c42:	4413      	add	r3, r2
 8009c44:	4619      	mov	r1, r3
 8009c46:	6938      	ldr	r0, [r7, #16]
 8009c48:	f7ff ff0c 	bl	8009a64 <move_window>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f040 808d 	bne.w	8009d6e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	60fa      	str	r2, [r7, #12]
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	8992      	ldrh	r2, [r2, #12]
 8009c5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c62:	fb01 f202 	mul.w	r2, r1, r2
 8009c66:	1a9b      	subs	r3, r3, r2
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009c70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	899b      	ldrh	r3, [r3, #12]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c82:	4413      	add	r3, r2
 8009c84:	4619      	mov	r1, r3
 8009c86:	6938      	ldr	r0, [r7, #16]
 8009c88:	f7ff feec 	bl	8009a64 <move_window>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d16f      	bne.n	8009d72 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	899b      	ldrh	r3, [r3, #12]
 8009c96:	461a      	mov	r2, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c9e:	fb01 f202 	mul.w	r2, r1, r2
 8009ca2:	1a9b      	subs	r3, r3, r2
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009cac:	021b      	lsls	r3, r3, #8
 8009cae:	461a      	mov	r2, r3
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	f003 0301 	and.w	r3, r3, #1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d002      	beq.n	8009cc6 <get_fat+0xe8>
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	091b      	lsrs	r3, r3, #4
 8009cc4:	e002      	b.n	8009ccc <get_fat+0xee>
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ccc:	617b      	str	r3, [r7, #20]
			break;
 8009cce:	e055      	b.n	8009d7c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	899b      	ldrh	r3, [r3, #12]
 8009cd8:	085b      	lsrs	r3, r3, #1
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	4619      	mov	r1, r3
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ce4:	4413      	add	r3, r2
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6938      	ldr	r0, [r7, #16]
 8009cea:	f7ff febb 	bl	8009a64 <move_window>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d140      	bne.n	8009d76 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	005b      	lsls	r3, r3, #1
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	8992      	ldrh	r2, [r2, #12]
 8009d02:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d06:	fb00 f202 	mul.w	r2, r0, r2
 8009d0a:	1a9b      	subs	r3, r3, r2
 8009d0c:	440b      	add	r3, r1
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff fbf8 	bl	8009504 <ld_word>
 8009d14:	4603      	mov	r3, r0
 8009d16:	617b      	str	r3, [r7, #20]
			break;
 8009d18:	e030      	b.n	8009d7c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	899b      	ldrh	r3, [r3, #12]
 8009d22:	089b      	lsrs	r3, r3, #2
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	4619      	mov	r1, r3
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d2e:	4413      	add	r3, r2
 8009d30:	4619      	mov	r1, r3
 8009d32:	6938      	ldr	r0, [r7, #16]
 8009d34:	f7ff fe96 	bl	8009a64 <move_window>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d11d      	bne.n	8009d7a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	8992      	ldrh	r2, [r2, #12]
 8009d4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d50:	fb00 f202 	mul.w	r2, r0, r2
 8009d54:	1a9b      	subs	r3, r3, r2
 8009d56:	440b      	add	r3, r1
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7ff fbeb 	bl	8009534 <ld_dword>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009d64:	617b      	str	r3, [r7, #20]
			break;
 8009d66:	e009      	b.n	8009d7c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009d68:	2301      	movs	r3, #1
 8009d6a:	617b      	str	r3, [r7, #20]
 8009d6c:	e006      	b.n	8009d7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d6e:	bf00      	nop
 8009d70:	e004      	b.n	8009d7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d72:	bf00      	nop
 8009d74:	e002      	b.n	8009d7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d76:	bf00      	nop
 8009d78:	e000      	b.n	8009d7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d7a:	bf00      	nop
		}
	}

	return val;
 8009d7c:	697b      	ldr	r3, [r7, #20]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009d86:	b590      	push	{r4, r7, lr}
 8009d88:	b089      	sub	sp, #36	; 0x24
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	60f8      	str	r0, [r7, #12]
 8009d8e:	60b9      	str	r1, [r7, #8]
 8009d90:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009d92:	2302      	movs	r3, #2
 8009d94:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	f240 8109 	bls.w	8009fb0 <put_fat+0x22a>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	f080 8103 	bcs.w	8009fb0 <put_fat+0x22a>
		switch (fs->fs_type) {
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	f000 80b6 	beq.w	8009f20 <put_fat+0x19a>
 8009db4:	2b03      	cmp	r3, #3
 8009db6:	f300 80fb 	bgt.w	8009fb0 <put_fat+0x22a>
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d003      	beq.n	8009dc6 <put_fat+0x40>
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	f000 8083 	beq.w	8009eca <put_fat+0x144>
 8009dc4:	e0f4      	b.n	8009fb0 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	61bb      	str	r3, [r7, #24]
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	085b      	lsrs	r3, r3, #1
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	899b      	ldrh	r3, [r3, #12]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	fbb3 f3f1 	udiv	r3, r3, r1
 8009de4:	4413      	add	r3, r2
 8009de6:	4619      	mov	r1, r3
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f7ff fe3b 	bl	8009a64 <move_window>
 8009dee:	4603      	mov	r3, r0
 8009df0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009df2:	7ffb      	ldrb	r3, [r7, #31]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f040 80d4 	bne.w	8009fa2 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	61ba      	str	r2, [r7, #24]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	8992      	ldrh	r2, [r2, #12]
 8009e0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e0e:	fb00 f202 	mul.w	r2, r0, r2
 8009e12:	1a9b      	subs	r3, r3, r2
 8009e14:	440b      	add	r3, r1
 8009e16:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00d      	beq.n	8009e3e <put_fat+0xb8>
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	b25b      	sxtb	r3, r3
 8009e28:	f003 030f 	and.w	r3, r3, #15
 8009e2c:	b25a      	sxtb	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	011b      	lsls	r3, r3, #4
 8009e34:	b25b      	sxtb	r3, r3
 8009e36:	4313      	orrs	r3, r2
 8009e38:	b25b      	sxtb	r3, r3
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	e001      	b.n	8009e42 <put_fat+0xbc>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	899b      	ldrh	r3, [r3, #12]
 8009e54:	4619      	mov	r1, r3
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e5c:	4413      	add	r3, r2
 8009e5e:	4619      	mov	r1, r3
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f7ff fdff 	bl	8009a64 <move_window>
 8009e66:	4603      	mov	r3, r0
 8009e68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e6a:	7ffb      	ldrb	r3, [r7, #31]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f040 809a 	bne.w	8009fa6 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	899b      	ldrh	r3, [r3, #12]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e84:	fb00 f202 	mul.w	r2, r0, r2
 8009e88:	1a9b      	subs	r3, r3, r2
 8009e8a:	440b      	add	r3, r1
 8009e8c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d003      	beq.n	8009ea0 <put_fat+0x11a>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	091b      	lsrs	r3, r3, #4
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	e00e      	b.n	8009ebe <put_fat+0x138>
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	b25b      	sxtb	r3, r3
 8009ea6:	f023 030f 	bic.w	r3, r3, #15
 8009eaa:	b25a      	sxtb	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	0a1b      	lsrs	r3, r3, #8
 8009eb0:	b25b      	sxtb	r3, r3
 8009eb2:	f003 030f 	and.w	r3, r3, #15
 8009eb6:	b25b      	sxtb	r3, r3
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	b25b      	sxtb	r3, r3
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	70da      	strb	r2, [r3, #3]
			break;
 8009ec8:	e072      	b.n	8009fb0 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	899b      	ldrh	r3, [r3, #12]
 8009ed2:	085b      	lsrs	r3, r3, #1
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ede:	4413      	add	r3, r2
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f7ff fdbe 	bl	8009a64 <move_window>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009eec:	7ffb      	ldrb	r3, [r7, #31]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d15b      	bne.n	8009faa <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	005b      	lsls	r3, r3, #1
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	8992      	ldrh	r2, [r2, #12]
 8009f00:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f04:	fb00 f202 	mul.w	r2, r0, r2
 8009f08:	1a9b      	subs	r3, r3, r2
 8009f0a:	440b      	add	r3, r1
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	b292      	uxth	r2, r2
 8009f10:	4611      	mov	r1, r2
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7ff fb31 	bl	800957a <st_word>
			fs->wflag = 1;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	70da      	strb	r2, [r3, #3]
			break;
 8009f1e:	e047      	b.n	8009fb0 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	899b      	ldrh	r3, [r3, #12]
 8009f28:	089b      	lsrs	r3, r3, #2
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f34:	4413      	add	r3, r2
 8009f36:	4619      	mov	r1, r3
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f7ff fd93 	bl	8009a64 <move_window>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f42:	7ffb      	ldrb	r3, [r7, #31]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d132      	bne.n	8009fae <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	8992      	ldrh	r2, [r2, #12]
 8009f5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f60:	fb00 f202 	mul.w	r2, r0, r2
 8009f64:	1a9b      	subs	r3, r3, r2
 8009f66:	440b      	add	r3, r1
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7ff fae3 	bl	8009534 <ld_dword>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009f74:	4323      	orrs	r3, r4
 8009f76:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	8992      	ldrh	r2, [r2, #12]
 8009f86:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f8a:	fb00 f202 	mul.w	r2, r0, r2
 8009f8e:	1a9b      	subs	r3, r3, r2
 8009f90:	440b      	add	r3, r1
 8009f92:	6879      	ldr	r1, [r7, #4]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7ff fb0b 	bl	80095b0 <st_dword>
			fs->wflag = 1;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	70da      	strb	r2, [r3, #3]
			break;
 8009fa0:	e006      	b.n	8009fb0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009fa2:	bf00      	nop
 8009fa4:	e004      	b.n	8009fb0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009fa6:	bf00      	nop
 8009fa8:	e002      	b.n	8009fb0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009faa:	bf00      	nop
 8009fac:	e000      	b.n	8009fb0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009fae:	bf00      	nop
		}
	}
	return res;
 8009fb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3724      	adds	r7, #36	; 0x24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd90      	pop	{r4, r7, pc}

08009fba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b088      	sub	sp, #32
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	60f8      	str	r0, [r7, #12]
 8009fc2:	60b9      	str	r1, [r7, #8]
 8009fc4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d904      	bls.n	8009fe0 <remove_chain+0x26>
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d301      	bcc.n	8009fe4 <remove_chain+0x2a>
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	e04b      	b.n	800a07c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00c      	beq.n	800a004 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009fea:	f04f 32ff 	mov.w	r2, #4294967295
 8009fee:	6879      	ldr	r1, [r7, #4]
 8009ff0:	69b8      	ldr	r0, [r7, #24]
 8009ff2:	f7ff fec8 	bl	8009d86 <put_fat>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009ffa:	7ffb      	ldrb	r3, [r7, #31]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <remove_chain+0x4a>
 800a000:	7ffb      	ldrb	r3, [r7, #31]
 800a002:	e03b      	b.n	800a07c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f7ff fde9 	bl	8009bde <get_fat>
 800a00c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d031      	beq.n	800a078 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d101      	bne.n	800a01e <remove_chain+0x64>
 800a01a:	2302      	movs	r3, #2
 800a01c:	e02e      	b.n	800a07c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a024:	d101      	bne.n	800a02a <remove_chain+0x70>
 800a026:	2301      	movs	r3, #1
 800a028:	e028      	b.n	800a07c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a02a:	2200      	movs	r2, #0
 800a02c:	68b9      	ldr	r1, [r7, #8]
 800a02e:	69b8      	ldr	r0, [r7, #24]
 800a030:	f7ff fea9 	bl	8009d86 <put_fat>
 800a034:	4603      	mov	r3, r0
 800a036:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a038:	7ffb      	ldrb	r3, [r7, #31]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <remove_chain+0x88>
 800a03e:	7ffb      	ldrb	r3, [r7, #31]
 800a040:	e01c      	b.n	800a07c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	699a      	ldr	r2, [r3, #24]
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	69db      	ldr	r3, [r3, #28]
 800a04a:	3b02      	subs	r3, #2
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d20b      	bcs.n	800a068 <remove_chain+0xae>
			fs->free_clst++;
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	1c5a      	adds	r2, r3, #1
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	791b      	ldrb	r3, [r3, #4]
 800a05e:	f043 0301 	orr.w	r3, r3, #1
 800a062:	b2da      	uxtb	r2, r3
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	69db      	ldr	r3, [r3, #28]
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	429a      	cmp	r2, r3
 800a074:	d3c6      	bcc.n	800a004 <remove_chain+0x4a>
 800a076:	e000      	b.n	800a07a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a078:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3720      	adds	r7, #32
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10d      	bne.n	800a0b6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d004      	beq.n	800a0b0 <create_chain+0x2c>
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	69db      	ldr	r3, [r3, #28]
 800a0aa:	69ba      	ldr	r2, [r7, #24]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d31b      	bcc.n	800a0e8 <create_chain+0x64>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	61bb      	str	r3, [r7, #24]
 800a0b4:	e018      	b.n	800a0e8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7ff fd90 	bl	8009bde <get_fat>
 800a0be:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d801      	bhi.n	800a0ca <create_chain+0x46>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e070      	b.n	800a1ac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d0:	d101      	bne.n	800a0d6 <create_chain+0x52>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	e06a      	b.n	800a1ac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d201      	bcs.n	800a0e4 <create_chain+0x60>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	e063      	b.n	800a1ac <create_chain+0x128>
		scl = clst;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	69fa      	ldr	r2, [r7, #28]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d307      	bcc.n	800a10c <create_chain+0x88>
				ncl = 2;
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a100:	69fa      	ldr	r2, [r7, #28]
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	429a      	cmp	r2, r3
 800a106:	d901      	bls.n	800a10c <create_chain+0x88>
 800a108:	2300      	movs	r3, #0
 800a10a:	e04f      	b.n	800a1ac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a10c:	69f9      	ldr	r1, [r7, #28]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7ff fd65 	bl	8009bde <get_fat>
 800a114:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00e      	beq.n	800a13a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d003      	beq.n	800a12a <create_chain+0xa6>
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a128:	d101      	bne.n	800a12e <create_chain+0xaa>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	e03e      	b.n	800a1ac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a12e:	69fa      	ldr	r2, [r7, #28]
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	429a      	cmp	r2, r3
 800a134:	d1da      	bne.n	800a0ec <create_chain+0x68>
 800a136:	2300      	movs	r3, #0
 800a138:	e038      	b.n	800a1ac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a13a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a13c:	f04f 32ff 	mov.w	r2, #4294967295
 800a140:	69f9      	ldr	r1, [r7, #28]
 800a142:	6938      	ldr	r0, [r7, #16]
 800a144:	f7ff fe1f 	bl	8009d86 <put_fat>
 800a148:	4603      	mov	r3, r0
 800a14a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a14c:	7dfb      	ldrb	r3, [r7, #23]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d109      	bne.n	800a166 <create_chain+0xe2>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d006      	beq.n	800a166 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a158:	69fa      	ldr	r2, [r7, #28]
 800a15a:	6839      	ldr	r1, [r7, #0]
 800a15c:	6938      	ldr	r0, [r7, #16]
 800a15e:	f7ff fe12 	bl	8009d86 <put_fat>
 800a162:	4603      	mov	r3, r0
 800a164:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a166:	7dfb      	ldrb	r3, [r7, #23]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d116      	bne.n	800a19a <create_chain+0x116>
		fs->last_clst = ncl;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	69fa      	ldr	r2, [r7, #28]
 800a170:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	699a      	ldr	r2, [r3, #24]
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	69db      	ldr	r3, [r3, #28]
 800a17a:	3b02      	subs	r3, #2
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d804      	bhi.n	800a18a <create_chain+0x106>
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	1e5a      	subs	r2, r3, #1
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	791b      	ldrb	r3, [r3, #4]
 800a18e:	f043 0301 	orr.w	r3, r3, #1
 800a192:	b2da      	uxtb	r2, r3
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	711a      	strb	r2, [r3, #4]
 800a198:	e007      	b.n	800a1aa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d102      	bne.n	800a1a6 <create_chain+0x122>
 800a1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a4:	e000      	b.n	800a1a8 <create_chain+0x124>
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a1aa:	69fb      	ldr	r3, [r7, #28]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3720      	adds	r7, #32
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b087      	sub	sp, #28
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	899b      	ldrh	r3, [r3, #12]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	8952      	ldrh	r2, [r2, #10]
 800a1dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	1d1a      	adds	r2, r3, #4
 800a1e6:	613a      	str	r2, [r7, #16]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <clmt_clust+0x42>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e010      	b.n	800a218 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d307      	bcc.n	800a20e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	617b      	str	r3, [r7, #20]
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	3304      	adds	r3, #4
 800a20a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a20c:	e7e9      	b.n	800a1e2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a20e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	4413      	add	r3, r2
}
 800a218:	4618      	mov	r0, r3
 800a21a:	371c      	adds	r7, #28
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a23a:	d204      	bcs.n	800a246 <dir_sdi+0x22>
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	f003 031f 	and.w	r3, r3, #31
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <dir_sdi+0x26>
		return FR_INT_ERR;
 800a246:	2302      	movs	r3, #2
 800a248:	e071      	b.n	800a32e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d106      	bne.n	800a26a <dir_sdi+0x46>
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	2b02      	cmp	r3, #2
 800a262:	d902      	bls.n	800a26a <dir_sdi+0x46>
		clst = fs->dirbase;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a268:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10c      	bne.n	800a28a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	095b      	lsrs	r3, r3, #5
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	8912      	ldrh	r2, [r2, #8]
 800a278:	4293      	cmp	r3, r2
 800a27a:	d301      	bcc.n	800a280 <dir_sdi+0x5c>
 800a27c:	2302      	movs	r3, #2
 800a27e:	e056      	b.n	800a32e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	61da      	str	r2, [r3, #28]
 800a288:	e02d      	b.n	800a2e6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	895b      	ldrh	r3, [r3, #10]
 800a28e:	461a      	mov	r2, r3
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	899b      	ldrh	r3, [r3, #12]
 800a294:	fb02 f303 	mul.w	r3, r2, r3
 800a298:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a29a:	e019      	b.n	800a2d0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6979      	ldr	r1, [r7, #20]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7ff fc9c 	bl	8009bde <get_fat>
 800a2a6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ae:	d101      	bne.n	800a2b4 <dir_sdi+0x90>
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e03c      	b.n	800a32e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d904      	bls.n	800a2c4 <dir_sdi+0xa0>
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	69db      	ldr	r3, [r3, #28]
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d301      	bcc.n	800a2c8 <dir_sdi+0xa4>
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	e032      	b.n	800a32e <dir_sdi+0x10a>
			ofs -= csz;
 800a2c8:	683a      	ldr	r2, [r7, #0]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d2e1      	bcs.n	800a29c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a2d8:	6979      	ldr	r1, [r7, #20]
 800a2da:	6938      	ldr	r0, [r7, #16]
 800a2dc:	f7ff fc60 	bl	8009ba0 <clust2sect>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	69db      	ldr	r3, [r3, #28]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <dir_sdi+0xd4>
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	e01a      	b.n	800a32e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	69da      	ldr	r2, [r3, #28]
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	899b      	ldrh	r3, [r3, #12]
 800a300:	4619      	mov	r1, r3
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	fbb3 f3f1 	udiv	r3, r3, r1
 800a308:	441a      	add	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	899b      	ldrh	r3, [r3, #12]
 800a318:	461a      	mov	r2, r3
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a320:	fb00 f202 	mul.w	r2, r0, r2
 800a324:	1a9b      	subs	r3, r3, r2
 800a326:	18ca      	adds	r2, r1, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3718      	adds	r7, #24
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b086      	sub	sp, #24
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	3320      	adds	r3, #32
 800a34c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	69db      	ldr	r3, [r3, #28]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d003      	beq.n	800a35e <dir_next+0x28>
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a35c:	d301      	bcc.n	800a362 <dir_next+0x2c>
 800a35e:	2304      	movs	r3, #4
 800a360:	e0bb      	b.n	800a4da <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	899b      	ldrh	r3, [r3, #12]
 800a366:	461a      	mov	r2, r3
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a36e:	fb01 f202 	mul.w	r2, r1, r2
 800a372:	1a9b      	subs	r3, r3, r2
 800a374:	2b00      	cmp	r3, #0
 800a376:	f040 809d 	bne.w	800a4b4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10b      	bne.n	800a3a4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	095b      	lsrs	r3, r3, #5
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	8912      	ldrh	r2, [r2, #8]
 800a394:	4293      	cmp	r3, r2
 800a396:	f0c0 808d 	bcc.w	800a4b4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	61da      	str	r2, [r3, #28]
 800a3a0:	2304      	movs	r3, #4
 800a3a2:	e09a      	b.n	800a4da <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	899b      	ldrh	r3, [r3, #12]
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	8952      	ldrh	r2, [r2, #10]
 800a3b4:	3a01      	subs	r2, #1
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d17b      	bne.n	800a4b4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	f7ff fc0a 	bl	8009bde <get_fat>
 800a3ca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d801      	bhi.n	800a3d6 <dir_next+0xa0>
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	e081      	b.n	800a4da <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3dc:	d101      	bne.n	800a3e2 <dir_next+0xac>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e07b      	b.n	800a4da <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	697a      	ldr	r2, [r7, #20]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d359      	bcc.n	800a4a0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d104      	bne.n	800a3fc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	61da      	str	r2, [r3, #28]
 800a3f8:	2304      	movs	r3, #4
 800a3fa:	e06e      	b.n	800a4da <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	4619      	mov	r1, r3
 800a404:	4610      	mov	r0, r2
 800a406:	f7ff fe3d 	bl	800a084 <create_chain>
 800a40a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <dir_next+0xe0>
 800a412:	2307      	movs	r3, #7
 800a414:	e061      	b.n	800a4da <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d101      	bne.n	800a420 <dir_next+0xea>
 800a41c:	2302      	movs	r3, #2
 800a41e:	e05c      	b.n	800a4da <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a426:	d101      	bne.n	800a42c <dir_next+0xf6>
 800a428:	2301      	movs	r3, #1
 800a42a:	e056      	b.n	800a4da <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f7ff fad5 	bl	80099dc <sync_window>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d001      	beq.n	800a43c <dir_next+0x106>
 800a438:	2301      	movs	r3, #1
 800a43a:	e04e      	b.n	800a4da <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	899b      	ldrh	r3, [r3, #12]
 800a446:	461a      	mov	r2, r3
 800a448:	2100      	movs	r1, #0
 800a44a:	f7ff f8fe 	bl	800964a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a44e:	2300      	movs	r3, #0
 800a450:	613b      	str	r3, [r7, #16]
 800a452:	6979      	ldr	r1, [r7, #20]
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f7ff fba3 	bl	8009ba0 <clust2sect>
 800a45a:	4602      	mov	r2, r0
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	635a      	str	r2, [r3, #52]	; 0x34
 800a460:	e012      	b.n	800a488 <dir_next+0x152>
						fs->wflag = 1;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2201      	movs	r2, #1
 800a466:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7ff fab7 	bl	80099dc <sync_window>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <dir_next+0x142>
 800a474:	2301      	movs	r3, #1
 800a476:	e030      	b.n	800a4da <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	3301      	adds	r3, #1
 800a47c:	613b      	str	r3, [r7, #16]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	635a      	str	r2, [r3, #52]	; 0x34
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	895b      	ldrh	r3, [r3, #10]
 800a48c:	461a      	mov	r2, r3
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	4293      	cmp	r3, r2
 800a492:	d3e6      	bcc.n	800a462 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	1ad2      	subs	r2, r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	697a      	ldr	r2, [r7, #20]
 800a4a4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a4a6:	6979      	ldr	r1, [r7, #20]
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f7ff fb79 	bl	8009ba0 <clust2sect>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	899b      	ldrh	r3, [r3, #12]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4cc:	fb00 f202 	mul.w	r2, r0, r2
 800a4d0:	1a9b      	subs	r3, r3, r2
 800a4d2:	18ca      	adds	r2, r1, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b086      	sub	sp, #24
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7ff fe95 	bl	800a224 <dir_sdi>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d12b      	bne.n	800a55c <dir_alloc+0x7a>
		n = 0;
 800a504:	2300      	movs	r3, #0
 800a506:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	69db      	ldr	r3, [r3, #28]
 800a50c:	4619      	mov	r1, r3
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f7ff faa8 	bl	8009a64 <move_window>
 800a514:	4603      	mov	r3, r0
 800a516:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a518:	7dfb      	ldrb	r3, [r7, #23]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d11d      	bne.n	800a55a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	2be5      	cmp	r3, #229	; 0xe5
 800a526:	d004      	beq.n	800a532 <dir_alloc+0x50>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a1b      	ldr	r3, [r3, #32]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d107      	bne.n	800a542 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	3301      	adds	r3, #1
 800a536:	613b      	str	r3, [r7, #16]
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d102      	bne.n	800a546 <dir_alloc+0x64>
 800a540:	e00c      	b.n	800a55c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a542:	2300      	movs	r3, #0
 800a544:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a546:	2101      	movs	r1, #1
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7ff fef4 	bl	800a336 <dir_next>
 800a54e:	4603      	mov	r3, r0
 800a550:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a552:	7dfb      	ldrb	r3, [r7, #23]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d0d7      	beq.n	800a508 <dir_alloc+0x26>
 800a558:	e000      	b.n	800a55c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a55a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a55c:	7dfb      	ldrb	r3, [r7, #23]
 800a55e:	2b04      	cmp	r3, #4
 800a560:	d101      	bne.n	800a566 <dir_alloc+0x84>
 800a562:	2307      	movs	r3, #7
 800a564:	75fb      	strb	r3, [r7, #23]
	return res;
 800a566:	7dfb      	ldrb	r3, [r7, #23]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3718      	adds	r7, #24
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	331a      	adds	r3, #26
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fe ffc0 	bl	8009504 <ld_word>
 800a584:	4603      	mov	r3, r0
 800a586:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	2b03      	cmp	r3, #3
 800a58e:	d109      	bne.n	800a5a4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	3314      	adds	r3, #20
 800a594:	4618      	mov	r0, r3
 800a596:	f7fe ffb5 	bl	8009504 <ld_word>
 800a59a:	4603      	mov	r3, r0
 800a59c:	041b      	lsls	r3, r3, #16
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	331a      	adds	r3, #26
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	b292      	uxth	r2, r2
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe ffd8 	bl	800957a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	2b03      	cmp	r3, #3
 800a5d0:	d109      	bne.n	800a5e6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	f103 0214 	add.w	r2, r3, #20
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	0c1b      	lsrs	r3, r3, #16
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	4619      	mov	r1, r3
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	f7fe ffca 	bl	800957a <st_word>
	}
}
 800a5e6:	bf00      	nop
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
	...

0800a5f0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a5f0:	b590      	push	{r4, r7, lr}
 800a5f2:	b087      	sub	sp, #28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	331a      	adds	r3, #26
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe ff80 	bl	8009504 <ld_word>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <cmp_lfn+0x1e>
 800a60a:	2300      	movs	r3, #0
 800a60c:	e059      	b.n	800a6c2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a616:	1e5a      	subs	r2, r3, #1
 800a618:	4613      	mov	r3, r2
 800a61a:	005b      	lsls	r3, r3, #1
 800a61c:	4413      	add	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a624:	2301      	movs	r3, #1
 800a626:	81fb      	strh	r3, [r7, #14]
 800a628:	2300      	movs	r3, #0
 800a62a:	613b      	str	r3, [r7, #16]
 800a62c:	e033      	b.n	800a696 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a62e:	4a27      	ldr	r2, [pc, #156]	; (800a6cc <cmp_lfn+0xdc>)
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	4413      	add	r3, r2
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	461a      	mov	r2, r3
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	4413      	add	r3, r2
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fe ff61 	bl	8009504 <ld_word>
 800a642:	4603      	mov	r3, r0
 800a644:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a646:	89fb      	ldrh	r3, [r7, #14]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d01a      	beq.n	800a682 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	2bfe      	cmp	r3, #254	; 0xfe
 800a650:	d812      	bhi.n	800a678 <cmp_lfn+0x88>
 800a652:	89bb      	ldrh	r3, [r7, #12]
 800a654:	4618      	mov	r0, r3
 800a656:	f002 fb81 	bl	800cd5c <ff_wtoupper>
 800a65a:	4603      	mov	r3, r0
 800a65c:	461c      	mov	r4, r3
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	1c5a      	adds	r2, r3, #1
 800a662:	617a      	str	r2, [r7, #20]
 800a664:	005b      	lsls	r3, r3, #1
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	4413      	add	r3, r2
 800a66a:	881b      	ldrh	r3, [r3, #0]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f002 fb75 	bl	800cd5c <ff_wtoupper>
 800a672:	4603      	mov	r3, r0
 800a674:	429c      	cmp	r4, r3
 800a676:	d001      	beq.n	800a67c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a678:	2300      	movs	r3, #0
 800a67a:	e022      	b.n	800a6c2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a67c:	89bb      	ldrh	r3, [r7, #12]
 800a67e:	81fb      	strh	r3, [r7, #14]
 800a680:	e006      	b.n	800a690 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a682:	89bb      	ldrh	r3, [r7, #12]
 800a684:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a688:	4293      	cmp	r3, r2
 800a68a:	d001      	beq.n	800a690 <cmp_lfn+0xa0>
 800a68c:	2300      	movs	r3, #0
 800a68e:	e018      	b.n	800a6c2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	3301      	adds	r3, #1
 800a694:	613b      	str	r3, [r7, #16]
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	2b0c      	cmp	r3, #12
 800a69a:	d9c8      	bls.n	800a62e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00b      	beq.n	800a6c0 <cmp_lfn+0xd0>
 800a6a8:	89fb      	ldrh	r3, [r7, #14]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d008      	beq.n	800a6c0 <cmp_lfn+0xd0>
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	881b      	ldrh	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <cmp_lfn+0xd0>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	e000      	b.n	800a6c2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a6c0:	2301      	movs	r3, #1
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	371c      	adds	r7, #28
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd90      	pop	{r4, r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	08017f08 	.word	0x08017f08

0800a6d0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b088      	sub	sp, #32
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	4611      	mov	r1, r2
 800a6dc:	461a      	mov	r2, r3
 800a6de:	460b      	mov	r3, r1
 800a6e0:	71fb      	strb	r3, [r7, #7]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	330d      	adds	r3, #13
 800a6ea:	79ba      	ldrb	r2, [r7, #6]
 800a6ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	330b      	adds	r3, #11
 800a6f2:	220f      	movs	r2, #15
 800a6f4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	330c      	adds	r3, #12
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	331a      	adds	r3, #26
 800a702:	2100      	movs	r1, #0
 800a704:	4618      	mov	r0, r3
 800a706:	f7fe ff38 	bl	800957a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a70a:	79fb      	ldrb	r3, [r7, #7]
 800a70c:	1e5a      	subs	r2, r3, #1
 800a70e:	4613      	mov	r3, r2
 800a710:	005b      	lsls	r3, r3, #1
 800a712:	4413      	add	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	82fb      	strh	r3, [r7, #22]
 800a71e:	2300      	movs	r3, #0
 800a720:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a722:	8afb      	ldrh	r3, [r7, #22]
 800a724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a728:	4293      	cmp	r3, r2
 800a72a:	d007      	beq.n	800a73c <put_lfn+0x6c>
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	1c5a      	adds	r2, r3, #1
 800a730:	61fa      	str	r2, [r7, #28]
 800a732:	005b      	lsls	r3, r3, #1
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	4413      	add	r3, r2
 800a738:	881b      	ldrh	r3, [r3, #0]
 800a73a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a73c:	4a17      	ldr	r2, [pc, #92]	; (800a79c <put_lfn+0xcc>)
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	4413      	add	r3, r2
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	461a      	mov	r2, r3
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	4413      	add	r3, r2
 800a74a:	8afa      	ldrh	r2, [r7, #22]
 800a74c:	4611      	mov	r1, r2
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fe ff13 	bl	800957a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a754:	8afb      	ldrh	r3, [r7, #22]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d102      	bne.n	800a760 <put_lfn+0x90>
 800a75a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a75e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	3301      	adds	r3, #1
 800a764:	61bb      	str	r3, [r7, #24]
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	2b0c      	cmp	r3, #12
 800a76a:	d9da      	bls.n	800a722 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a76c:	8afb      	ldrh	r3, [r7, #22]
 800a76e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a772:	4293      	cmp	r3, r2
 800a774:	d006      	beq.n	800a784 <put_lfn+0xb4>
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	4413      	add	r3, r2
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d103      	bne.n	800a78c <put_lfn+0xbc>
 800a784:	79fb      	ldrb	r3, [r7, #7]
 800a786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a78a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	79fa      	ldrb	r2, [r7, #7]
 800a790:	701a      	strb	r2, [r3, #0]
}
 800a792:	bf00      	nop
 800a794:	3720      	adds	r7, #32
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	08017f08 	.word	0x08017f08

0800a7a0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b08c      	sub	sp, #48	; 0x30
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
 800a7ac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a7ae:	220b      	movs	r2, #11
 800a7b0:	68b9      	ldr	r1, [r7, #8]
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f7fe ff28 	bl	8009608 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	2b05      	cmp	r3, #5
 800a7bc:	d92b      	bls.n	800a816 <gen_numname+0x76>
		sr = seq;
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a7c2:	e022      	b.n	800a80a <gen_numname+0x6a>
			wc = *lfn++;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	1c9a      	adds	r2, r3, #2
 800a7c8:	607a      	str	r2, [r7, #4]
 800a7ca:	881b      	ldrh	r3, [r3, #0]
 800a7cc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7d2:	e017      	b.n	800a804 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	005a      	lsls	r2, r3, #1
 800a7d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	4413      	add	r3, r2
 800a7e0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a7e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7e4:	085b      	lsrs	r3, r3, #1
 800a7e6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d005      	beq.n	800a7fe <gen_numname+0x5e>
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a7f8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a7fc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a800:	3301      	adds	r3, #1
 800a802:	62bb      	str	r3, [r7, #40]	; 0x28
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	2b0f      	cmp	r3, #15
 800a808:	d9e4      	bls.n	800a7d4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	881b      	ldrh	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1d8      	bne.n	800a7c4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a816:	2307      	movs	r3, #7
 800a818:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	f003 030f 	and.w	r3, r3, #15
 800a822:	b2db      	uxtb	r3, r3
 800a824:	3330      	adds	r3, #48	; 0x30
 800a826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a82a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a82e:	2b39      	cmp	r3, #57	; 0x39
 800a830:	d904      	bls.n	800a83c <gen_numname+0x9c>
 800a832:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a836:	3307      	adds	r3, #7
 800a838:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	1e5a      	subs	r2, r3, #1
 800a840:	62ba      	str	r2, [r7, #40]	; 0x28
 800a842:	3330      	adds	r3, #48	; 0x30
 800a844:	443b      	add	r3, r7
 800a846:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a84a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	091b      	lsrs	r3, r3, #4
 800a852:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1df      	bne.n	800a81a <gen_numname+0x7a>
	ns[i] = '~';
 800a85a:	f107 0214 	add.w	r2, r7, #20
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a860:	4413      	add	r3, r2
 800a862:	227e      	movs	r2, #126	; 0x7e
 800a864:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a866:	2300      	movs	r3, #0
 800a868:	627b      	str	r3, [r7, #36]	; 0x24
 800a86a:	e002      	b.n	800a872 <gen_numname+0xd2>
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	3301      	adds	r3, #1
 800a870:	627b      	str	r3, [r7, #36]	; 0x24
 800a872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a876:	429a      	cmp	r2, r3
 800a878:	d205      	bcs.n	800a886 <gen_numname+0xe6>
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	4413      	add	r3, r2
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	2b20      	cmp	r3, #32
 800a884:	d1f2      	bne.n	800a86c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	2b07      	cmp	r3, #7
 800a88a:	d807      	bhi.n	800a89c <gen_numname+0xfc>
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	1c5a      	adds	r2, r3, #1
 800a890:	62ba      	str	r2, [r7, #40]	; 0x28
 800a892:	3330      	adds	r3, #48	; 0x30
 800a894:	443b      	add	r3, r7
 800a896:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a89a:	e000      	b.n	800a89e <gen_numname+0xfe>
 800a89c:	2120      	movs	r1, #32
 800a89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a0:	1c5a      	adds	r2, r3, #1
 800a8a2:	627a      	str	r2, [r7, #36]	; 0x24
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	460a      	mov	r2, r1
 800a8aa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ae:	2b07      	cmp	r3, #7
 800a8b0:	d9e9      	bls.n	800a886 <gen_numname+0xe6>
}
 800a8b2:	bf00      	nop
 800a8b4:	bf00      	nop
 800a8b6:	3730      	adds	r7, #48	; 0x30
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a8c8:	230b      	movs	r3, #11
 800a8ca:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a8cc:	7bfb      	ldrb	r3, [r7, #15]
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	0852      	lsrs	r2, r2, #1
 800a8d2:	01db      	lsls	r3, r3, #7
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	b2da      	uxtb	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	1c59      	adds	r1, r3, #1
 800a8dc:	6079      	str	r1, [r7, #4]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	60bb      	str	r3, [r7, #8]
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1ed      	bne.n	800a8cc <sum_sfn+0x10>
	return sum;
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b086      	sub	sp, #24
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a90c:	2100      	movs	r1, #0
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f7ff fc88 	bl	800a224 <dir_sdi>
 800a914:	4603      	mov	r3, r0
 800a916:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a918:	7dfb      	ldrb	r3, [r7, #23]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <dir_find+0x24>
 800a91e:	7dfb      	ldrb	r3, [r7, #23]
 800a920:	e0a9      	b.n	800aa76 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a922:	23ff      	movs	r3, #255	; 0xff
 800a924:	753b      	strb	r3, [r7, #20]
 800a926:	7d3b      	ldrb	r3, [r7, #20]
 800a928:	757b      	strb	r3, [r7, #21]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f04f 32ff 	mov.w	r2, #4294967295
 800a930:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	4619      	mov	r1, r3
 800a938:	6938      	ldr	r0, [r7, #16]
 800a93a:	f7ff f893 	bl	8009a64 <move_window>
 800a93e:	4603      	mov	r3, r0
 800a940:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a942:	7dfb      	ldrb	r3, [r7, #23]
 800a944:	2b00      	cmp	r3, #0
 800a946:	f040 8090 	bne.w	800aa6a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a1b      	ldr	r3, [r3, #32]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a952:	7dbb      	ldrb	r3, [r7, #22]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d102      	bne.n	800a95e <dir_find+0x60>
 800a958:	2304      	movs	r3, #4
 800a95a:	75fb      	strb	r3, [r7, #23]
 800a95c:	e08a      	b.n	800aa74 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	330b      	adds	r3, #11
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a96a:	73fb      	strb	r3, [r7, #15]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	7bfa      	ldrb	r2, [r7, #15]
 800a970:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a972:	7dbb      	ldrb	r3, [r7, #22]
 800a974:	2be5      	cmp	r3, #229	; 0xe5
 800a976:	d007      	beq.n	800a988 <dir_find+0x8a>
 800a978:	7bfb      	ldrb	r3, [r7, #15]
 800a97a:	f003 0308 	and.w	r3, r3, #8
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d009      	beq.n	800a996 <dir_find+0x98>
 800a982:	7bfb      	ldrb	r3, [r7, #15]
 800a984:	2b0f      	cmp	r3, #15
 800a986:	d006      	beq.n	800a996 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a988:	23ff      	movs	r3, #255	; 0xff
 800a98a:	757b      	strb	r3, [r7, #21]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f04f 32ff 	mov.w	r2, #4294967295
 800a992:	631a      	str	r2, [r3, #48]	; 0x30
 800a994:	e05e      	b.n	800aa54 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	2b0f      	cmp	r3, #15
 800a99a:	d136      	bne.n	800aa0a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a9a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d154      	bne.n	800aa54 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a9aa:	7dbb      	ldrb	r3, [r7, #22]
 800a9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00d      	beq.n	800a9d0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	7b5b      	ldrb	r3, [r3, #13]
 800a9ba:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a9bc:	7dbb      	ldrb	r3, [r7, #22]
 800a9be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9c2:	75bb      	strb	r3, [r7, #22]
 800a9c4:	7dbb      	ldrb	r3, [r7, #22]
 800a9c6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	695a      	ldr	r2, [r3, #20]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a9d0:	7dba      	ldrb	r2, [r7, #22]
 800a9d2:	7d7b      	ldrb	r3, [r7, #21]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d115      	bne.n	800aa04 <dir_find+0x106>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6a1b      	ldr	r3, [r3, #32]
 800a9dc:	330d      	adds	r3, #13
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	7d3a      	ldrb	r2, [r7, #20]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d10e      	bne.n	800aa04 <dir_find+0x106>
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	691a      	ldr	r2, [r3, #16]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	f7ff fdfd 	bl	800a5f0 <cmp_lfn>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d003      	beq.n	800aa04 <dir_find+0x106>
 800a9fc:	7d7b      	ldrb	r3, [r7, #21]
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	e000      	b.n	800aa06 <dir_find+0x108>
 800aa04:	23ff      	movs	r3, #255	; 0xff
 800aa06:	757b      	strb	r3, [r7, #21]
 800aa08:	e024      	b.n	800aa54 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aa0a:	7d7b      	ldrb	r3, [r7, #21]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d109      	bne.n	800aa24 <dir_find+0x126>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a1b      	ldr	r3, [r3, #32]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7ff ff51 	bl	800a8bc <sum_sfn>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	7d3b      	ldrb	r3, [r7, #20]
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d024      	beq.n	800aa6e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aa2a:	f003 0301 	and.w	r3, r3, #1
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10a      	bne.n	800aa48 <dir_find+0x14a>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a18      	ldr	r0, [r3, #32]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	3324      	adds	r3, #36	; 0x24
 800aa3a:	220b      	movs	r2, #11
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	f7fe fe1f 	bl	8009680 <mem_cmp>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d014      	beq.n	800aa72 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aa48:	23ff      	movs	r3, #255	; 0xff
 800aa4a:	757b      	strb	r3, [r7, #21]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa52:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aa54:	2100      	movs	r1, #0
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7ff fc6d 	bl	800a336 <dir_next>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aa60:	7dfb      	ldrb	r3, [r7, #23]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f43f af65 	beq.w	800a932 <dir_find+0x34>
 800aa68:	e004      	b.n	800aa74 <dir_find+0x176>
		if (res != FR_OK) break;
 800aa6a:	bf00      	nop
 800aa6c:	e002      	b.n	800aa74 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aa6e:	bf00      	nop
 800aa70:	e000      	b.n	800aa74 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800aa72:	bf00      	nop

	return res;
 800aa74:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3718      	adds	r7, #24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b08c      	sub	sp, #48	; 0x30
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aa94:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d001      	beq.n	800aaa0 <dir_register+0x20>
 800aa9c:	2306      	movs	r3, #6
 800aa9e:	e0e0      	b.n	800ac62 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	627b      	str	r3, [r7, #36]	; 0x24
 800aaa4:	e002      	b.n	800aaac <dir_register+0x2c>
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	627b      	str	r3, [r7, #36]	; 0x24
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	691a      	ldr	r2, [r3, #16]
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	005b      	lsls	r3, r3, #1
 800aab4:	4413      	add	r3, r2
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1f4      	bne.n	800aaa6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800aac2:	f107 030c 	add.w	r3, r7, #12
 800aac6:	220c      	movs	r2, #12
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fe fd9d 	bl	8009608 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800aace:	7dfb      	ldrb	r3, [r7, #23]
 800aad0:	f003 0301 	and.w	r3, r3, #1
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d032      	beq.n	800ab3e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2240      	movs	r2, #64	; 0x40
 800aadc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800aae0:	2301      	movs	r3, #1
 800aae2:	62bb      	str	r3, [r7, #40]	; 0x28
 800aae4:	e016      	b.n	800ab14 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	691a      	ldr	r2, [r3, #16]
 800aaf0:	f107 010c 	add.w	r1, r7, #12
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	f7ff fe53 	bl	800a7a0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7ff feff 	bl	800a8fe <dir_find>
 800ab00:	4603      	mov	r3, r0
 800ab02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ab06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d106      	bne.n	800ab1c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ab0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab10:	3301      	adds	r3, #1
 800ab12:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab16:	2b63      	cmp	r3, #99	; 0x63
 800ab18:	d9e5      	bls.n	800aae6 <dir_register+0x66>
 800ab1a:	e000      	b.n	800ab1e <dir_register+0x9e>
			if (res != FR_OK) break;
 800ab1c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ab1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab20:	2b64      	cmp	r3, #100	; 0x64
 800ab22:	d101      	bne.n	800ab28 <dir_register+0xa8>
 800ab24:	2307      	movs	r3, #7
 800ab26:	e09c      	b.n	800ac62 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ab28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	d002      	beq.n	800ab36 <dir_register+0xb6>
 800ab30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab34:	e095      	b.n	800ac62 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ab36:	7dfa      	ldrb	r2, [r7, #23]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ab3e:	7dfb      	ldrb	r3, [r7, #23]
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d007      	beq.n	800ab58 <dir_register+0xd8>
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4a:	330c      	adds	r3, #12
 800ab4c:	4a47      	ldr	r2, [pc, #284]	; (800ac6c <dir_register+0x1ec>)
 800ab4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab52:	089b      	lsrs	r3, r3, #2
 800ab54:	3301      	adds	r3, #1
 800ab56:	e000      	b.n	800ab5a <dir_register+0xda>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ab5c:	6a39      	ldr	r1, [r7, #32]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff fcbf 	bl	800a4e2 <dir_alloc>
 800ab64:	4603      	mov	r3, r0
 800ab66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ab6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d148      	bne.n	800ac04 <dir_register+0x184>
 800ab72:	6a3b      	ldr	r3, [r7, #32]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	623b      	str	r3, [r7, #32]
 800ab78:	6a3b      	ldr	r3, [r7, #32]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d042      	beq.n	800ac04 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	695a      	ldr	r2, [r3, #20]
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	015b      	lsls	r3, r3, #5
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7ff fb4a 	bl	800a224 <dir_sdi>
 800ab90:	4603      	mov	r3, r0
 800ab92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ab96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d132      	bne.n	800ac04 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	3324      	adds	r3, #36	; 0x24
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7ff fe8a 	bl	800a8bc <sum_sfn>
 800aba8:	4603      	mov	r3, r0
 800abaa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	4619      	mov	r1, r3
 800abb2:	69f8      	ldr	r0, [r7, #28]
 800abb4:	f7fe ff56 	bl	8009a64 <move_window>
 800abb8:	4603      	mov	r3, r0
 800abba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800abbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d11d      	bne.n	800ac02 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	6918      	ldr	r0, [r3, #16]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a19      	ldr	r1, [r3, #32]
 800abce:	6a3b      	ldr	r3, [r7, #32]
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	7efb      	ldrb	r3, [r7, #27]
 800abd4:	f7ff fd7c 	bl	800a6d0 <put_lfn>
				fs->wflag = 1;
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	2201      	movs	r2, #1
 800abdc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800abde:	2100      	movs	r1, #0
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f7ff fba8 	bl	800a336 <dir_next>
 800abe6:	4603      	mov	r3, r0
 800abe8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800abec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d107      	bne.n	800ac04 <dir_register+0x184>
 800abf4:	6a3b      	ldr	r3, [r7, #32]
 800abf6:	3b01      	subs	r3, #1
 800abf8:	623b      	str	r3, [r7, #32]
 800abfa:	6a3b      	ldr	r3, [r7, #32]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1d5      	bne.n	800abac <dir_register+0x12c>
 800ac00:	e000      	b.n	800ac04 <dir_register+0x184>
				if (res != FR_OK) break;
 800ac02:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ac04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d128      	bne.n	800ac5e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	69db      	ldr	r3, [r3, #28]
 800ac10:	4619      	mov	r1, r3
 800ac12:	69f8      	ldr	r0, [r7, #28]
 800ac14:	f7fe ff26 	bl	8009a64 <move_window>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ac1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d11b      	bne.n	800ac5e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	2220      	movs	r2, #32
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fe fd0b 	bl	800964a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a18      	ldr	r0, [r3, #32]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3324      	adds	r3, #36	; 0x24
 800ac3c:	220b      	movs	r2, #11
 800ac3e:	4619      	mov	r1, r3
 800ac40:	f7fe fce2 	bl	8009608 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	330c      	adds	r3, #12
 800ac50:	f002 0218 	and.w	r2, r2, #24
 800ac54:	b2d2      	uxtb	r2, r2
 800ac56:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ac5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3730      	adds	r7, #48	; 0x30
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	4ec4ec4f 	.word	0x4ec4ec4f

0800ac70 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	2200      	movs	r2, #0
 800ac84:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	69db      	ldr	r3, [r3, #28]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f000 80c9 	beq.w	800ae22 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac98:	d032      	beq.n	800ad00 <get_fileinfo+0x90>
			i = j = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	61bb      	str	r3, [r7, #24]
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800aca2:	e01b      	b.n	800acdc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800aca4:	89fb      	ldrh	r3, [r7, #14]
 800aca6:	2100      	movs	r1, #0
 800aca8:	4618      	mov	r0, r3
 800acaa:	f002 f81b 	bl	800cce4 <ff_convert>
 800acae:	4603      	mov	r3, r0
 800acb0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800acb2:	89fb      	ldrh	r3, [r7, #14]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d102      	bne.n	800acbe <get_fileinfo+0x4e>
 800acb8:	2300      	movs	r3, #0
 800acba:	61fb      	str	r3, [r7, #28]
 800acbc:	e01a      	b.n	800acf4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	2bfe      	cmp	r3, #254	; 0xfe
 800acc2:	d902      	bls.n	800acca <get_fileinfo+0x5a>
 800acc4:	2300      	movs	r3, #0
 800acc6:	61fb      	str	r3, [r7, #28]
 800acc8:	e014      	b.n	800acf4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	1c5a      	adds	r2, r3, #1
 800acce:	61fa      	str	r2, [r7, #28]
 800acd0:	89fa      	ldrh	r2, [r7, #14]
 800acd2:	b2d1      	uxtb	r1, r2
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	4413      	add	r3, r2
 800acd8:	460a      	mov	r2, r1
 800acda:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	691a      	ldr	r2, [r3, #16]
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	1c59      	adds	r1, r3, #1
 800ace4:	61b9      	str	r1, [r7, #24]
 800ace6:	005b      	lsls	r3, r3, #1
 800ace8:	4413      	add	r3, r2
 800acea:	881b      	ldrh	r3, [r3, #0]
 800acec:	81fb      	strh	r3, [r7, #14]
 800acee:	89fb      	ldrh	r3, [r7, #14]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1d7      	bne.n	800aca4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	4413      	add	r3, r2
 800acfa:	3316      	adds	r3, #22
 800acfc:	2200      	movs	r2, #0
 800acfe:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800ad00:	2300      	movs	r3, #0
 800ad02:	61bb      	str	r3, [r7, #24]
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ad08:	683a      	ldr	r2, [r7, #0]
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	3316      	adds	r3, #22
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800ad14:	e04c      	b.n	800adb0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a1a      	ldr	r2, [r3, #32]
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	1c59      	adds	r1, r3, #1
 800ad1e:	61f9      	str	r1, [r7, #28]
 800ad20:	4413      	add	r3, r2
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ad26:	7dfb      	ldrb	r3, [r7, #23]
 800ad28:	2b20      	cmp	r3, #32
 800ad2a:	d100      	bne.n	800ad2e <get_fileinfo+0xbe>
 800ad2c:	e040      	b.n	800adb0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ad2e:	7dfb      	ldrb	r3, [r7, #23]
 800ad30:	2b05      	cmp	r3, #5
 800ad32:	d101      	bne.n	800ad38 <get_fileinfo+0xc8>
 800ad34:	23e5      	movs	r3, #229	; 0xe5
 800ad36:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	2b09      	cmp	r3, #9
 800ad3c:	d10f      	bne.n	800ad5e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800ad3e:	89bb      	ldrh	r3, [r7, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d105      	bne.n	800ad50 <get_fileinfo+0xe0>
 800ad44:	683a      	ldr	r2, [r7, #0]
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	4413      	add	r3, r2
 800ad4a:	3316      	adds	r3, #22
 800ad4c:	222e      	movs	r2, #46	; 0x2e
 800ad4e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	1c5a      	adds	r2, r3, #1
 800ad54:	61ba      	str	r2, [r7, #24]
 800ad56:	683a      	ldr	r2, [r7, #0]
 800ad58:	4413      	add	r3, r2
 800ad5a:	222e      	movs	r2, #46	; 0x2e
 800ad5c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	4413      	add	r3, r2
 800ad64:	3309      	adds	r3, #9
 800ad66:	7dfa      	ldrb	r2, [r7, #23]
 800ad68:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800ad6a:	89bb      	ldrh	r3, [r7, #12]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d11c      	bne.n	800adaa <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ad70:	7dfb      	ldrb	r3, [r7, #23]
 800ad72:	2b40      	cmp	r3, #64	; 0x40
 800ad74:	d913      	bls.n	800ad9e <get_fileinfo+0x12e>
 800ad76:	7dfb      	ldrb	r3, [r7, #23]
 800ad78:	2b5a      	cmp	r3, #90	; 0x5a
 800ad7a:	d810      	bhi.n	800ad9e <get_fileinfo+0x12e>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a1b      	ldr	r3, [r3, #32]
 800ad80:	330c      	adds	r3, #12
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	461a      	mov	r2, r3
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	2b08      	cmp	r3, #8
 800ad8a:	d901      	bls.n	800ad90 <get_fileinfo+0x120>
 800ad8c:	2310      	movs	r3, #16
 800ad8e:	e000      	b.n	800ad92 <get_fileinfo+0x122>
 800ad90:	2308      	movs	r3, #8
 800ad92:	4013      	ands	r3, r2
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800ad98:	7dfb      	ldrb	r3, [r7, #23]
 800ad9a:	3320      	adds	r3, #32
 800ad9c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	4413      	add	r3, r2
 800ada4:	3316      	adds	r3, #22
 800ada6:	7dfa      	ldrb	r2, [r7, #23]
 800ada8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	3301      	adds	r3, #1
 800adae:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	2b0a      	cmp	r3, #10
 800adb4:	d9af      	bls.n	800ad16 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800adb6:	89bb      	ldrh	r3, [r7, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10d      	bne.n	800add8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	4413      	add	r3, r2
 800adc2:	3316      	adds	r3, #22
 800adc4:	2200      	movs	r2, #0
 800adc6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a1b      	ldr	r3, [r3, #32]
 800adcc:	330c      	adds	r3, #12
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d101      	bne.n	800add8 <get_fileinfo+0x168>
 800add4:	2300      	movs	r3, #0
 800add6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800add8:	683a      	ldr	r2, [r7, #0]
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	4413      	add	r3, r2
 800adde:	3309      	adds	r3, #9
 800ade0:	2200      	movs	r2, #0
 800ade2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	7ada      	ldrb	r2, [r3, #11]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a1b      	ldr	r3, [r3, #32]
 800adf2:	331c      	adds	r3, #28
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fe fb9d 	bl	8009534 <ld_dword>
 800adfa:	4602      	mov	r2, r0
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a1b      	ldr	r3, [r3, #32]
 800ae04:	3316      	adds	r3, #22
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7fe fb94 	bl	8009534 <ld_dword>
 800ae0c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	80da      	strh	r2, [r3, #6]
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	0c1b      	lsrs	r3, r3, #16
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	809a      	strh	r2, [r3, #4]
 800ae20:	e000      	b.n	800ae24 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ae22:	bf00      	nop
}
 800ae24:	3720      	adds	r7, #32
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
	...

0800ae2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08a      	sub	sp, #40	; 0x28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	613b      	str	r3, [r7, #16]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	60fb      	str	r3, [r7, #12]
 800ae44:	2300      	movs	r3, #0
 800ae46:	617b      	str	r3, [r7, #20]
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	1c5a      	adds	r2, r3, #1
 800ae50:	61ba      	str	r2, [r7, #24]
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	4413      	add	r3, r2
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ae5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae5c:	2b1f      	cmp	r3, #31
 800ae5e:	d940      	bls.n	800aee2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ae60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae62:	2b2f      	cmp	r3, #47	; 0x2f
 800ae64:	d006      	beq.n	800ae74 <create_name+0x48>
 800ae66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae68:	2b5c      	cmp	r3, #92	; 0x5c
 800ae6a:	d110      	bne.n	800ae8e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ae6c:	e002      	b.n	800ae74 <create_name+0x48>
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	3301      	adds	r3, #1
 800ae72:	61bb      	str	r3, [r7, #24]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	4413      	add	r3, r2
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	2b2f      	cmp	r3, #47	; 0x2f
 800ae7e:	d0f6      	beq.n	800ae6e <create_name+0x42>
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	4413      	add	r3, r2
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	2b5c      	cmp	r3, #92	; 0x5c
 800ae8a:	d0f0      	beq.n	800ae6e <create_name+0x42>
			break;
 800ae8c:	e02a      	b.n	800aee4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2bfe      	cmp	r3, #254	; 0xfe
 800ae92:	d901      	bls.n	800ae98 <create_name+0x6c>
 800ae94:	2306      	movs	r3, #6
 800ae96:	e17d      	b.n	800b194 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ae98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ae9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aea0:	2101      	movs	r1, #1
 800aea2:	4618      	mov	r0, r3
 800aea4:	f001 ff1e 	bl	800cce4 <ff_convert>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800aeac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d101      	bne.n	800aeb6 <create_name+0x8a>
 800aeb2:	2306      	movs	r3, #6
 800aeb4:	e16e      	b.n	800b194 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800aeb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeb8:	2b7f      	cmp	r3, #127	; 0x7f
 800aeba:	d809      	bhi.n	800aed0 <create_name+0xa4>
 800aebc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aebe:	4619      	mov	r1, r3
 800aec0:	488d      	ldr	r0, [pc, #564]	; (800b0f8 <create_name+0x2cc>)
 800aec2:	f7fe fc04 	bl	80096ce <chk_chr>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d001      	beq.n	800aed0 <create_name+0xa4>
 800aecc:	2306      	movs	r3, #6
 800aece:	e161      	b.n	800b194 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	1c5a      	adds	r2, r3, #1
 800aed4:	617a      	str	r2, [r7, #20]
 800aed6:	005b      	lsls	r3, r3, #1
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	4413      	add	r3, r2
 800aedc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aede:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800aee0:	e7b4      	b.n	800ae4c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800aee2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800aee4:	693a      	ldr	r2, [r7, #16]
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	441a      	add	r2, r3
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aeee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aef0:	2b1f      	cmp	r3, #31
 800aef2:	d801      	bhi.n	800aef8 <create_name+0xcc>
 800aef4:	2304      	movs	r3, #4
 800aef6:	e000      	b.n	800aefa <create_name+0xce>
 800aef8:	2300      	movs	r3, #0
 800aefa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800aefe:	e011      	b.n	800af24 <create_name+0xf8>
		w = lfn[di - 1];
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af06:	3b01      	subs	r3, #1
 800af08:	005b      	lsls	r3, r3, #1
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	4413      	add	r3, r2
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800af12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af14:	2b20      	cmp	r3, #32
 800af16:	d002      	beq.n	800af1e <create_name+0xf2>
 800af18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af1a:	2b2e      	cmp	r3, #46	; 0x2e
 800af1c:	d106      	bne.n	800af2c <create_name+0x100>
		di--;
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	3b01      	subs	r3, #1
 800af22:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1ea      	bne.n	800af00 <create_name+0xd4>
 800af2a:	e000      	b.n	800af2e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800af2c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	005b      	lsls	r3, r3, #1
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	4413      	add	r3, r2
 800af36:	2200      	movs	r2, #0
 800af38:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <create_name+0x118>
 800af40:	2306      	movs	r3, #6
 800af42:	e127      	b.n	800b194 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3324      	adds	r3, #36	; 0x24
 800af48:	220b      	movs	r2, #11
 800af4a:	2120      	movs	r1, #32
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fe fb7c 	bl	800964a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800af52:	2300      	movs	r3, #0
 800af54:	61bb      	str	r3, [r7, #24]
 800af56:	e002      	b.n	800af5e <create_name+0x132>
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	3301      	adds	r3, #1
 800af5c:	61bb      	str	r3, [r7, #24]
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	005b      	lsls	r3, r3, #1
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	4413      	add	r3, r2
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	2b20      	cmp	r3, #32
 800af6a:	d0f5      	beq.n	800af58 <create_name+0x12c>
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	005b      	lsls	r3, r3, #1
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	4413      	add	r3, r2
 800af74:	881b      	ldrh	r3, [r3, #0]
 800af76:	2b2e      	cmp	r3, #46	; 0x2e
 800af78:	d0ee      	beq.n	800af58 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d009      	beq.n	800af94 <create_name+0x168>
 800af80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af84:	f043 0303 	orr.w	r3, r3, #3
 800af88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800af8c:	e002      	b.n	800af94 <create_name+0x168>
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	3b01      	subs	r3, #1
 800af92:	617b      	str	r3, [r7, #20]
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d009      	beq.n	800afae <create_name+0x182>
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800afa0:	3b01      	subs	r3, #1
 800afa2:	005b      	lsls	r3, r3, #1
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	4413      	add	r3, r2
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	2b2e      	cmp	r3, #46	; 0x2e
 800afac:	d1ef      	bne.n	800af8e <create_name+0x162>

	i = b = 0; ni = 8;
 800afae:	2300      	movs	r3, #0
 800afb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800afb4:	2300      	movs	r3, #0
 800afb6:	623b      	str	r3, [r7, #32]
 800afb8:	2308      	movs	r3, #8
 800afba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	1c5a      	adds	r2, r3, #1
 800afc0:	61ba      	str	r2, [r7, #24]
 800afc2:	005b      	lsls	r3, r3, #1
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	4413      	add	r3, r2
 800afc8:	881b      	ldrh	r3, [r3, #0]
 800afca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800afcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 8090 	beq.w	800b0f4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800afd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afd6:	2b20      	cmp	r3, #32
 800afd8:	d006      	beq.n	800afe8 <create_name+0x1bc>
 800afda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afdc:	2b2e      	cmp	r3, #46	; 0x2e
 800afde:	d10a      	bne.n	800aff6 <create_name+0x1ca>
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d006      	beq.n	800aff6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800afe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afec:	f043 0303 	orr.w	r3, r3, #3
 800aff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aff4:	e07d      	b.n	800b0f2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800aff6:	6a3a      	ldr	r2, [r7, #32]
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	429a      	cmp	r2, r3
 800affc:	d203      	bcs.n	800b006 <create_name+0x1da>
 800affe:	69ba      	ldr	r2, [r7, #24]
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	429a      	cmp	r2, r3
 800b004:	d123      	bne.n	800b04e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	2b0b      	cmp	r3, #11
 800b00a:	d106      	bne.n	800b01a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b010:	f043 0303 	orr.w	r3, r3, #3
 800b014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b018:	e075      	b.n	800b106 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b01a:	69ba      	ldr	r2, [r7, #24]
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d005      	beq.n	800b02e <create_name+0x202>
 800b022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b026:	f043 0303 	orr.w	r3, r3, #3
 800b02a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b02e:	69ba      	ldr	r2, [r7, #24]
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	429a      	cmp	r2, r3
 800b034:	d866      	bhi.n	800b104 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	61bb      	str	r3, [r7, #24]
 800b03a:	2308      	movs	r3, #8
 800b03c:	623b      	str	r3, [r7, #32]
 800b03e:	230b      	movs	r3, #11
 800b040:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b042:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b04c:	e051      	b.n	800b0f2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b04e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b050:	2b7f      	cmp	r3, #127	; 0x7f
 800b052:	d914      	bls.n	800b07e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b056:	2100      	movs	r1, #0
 800b058:	4618      	mov	r0, r3
 800b05a:	f001 fe43 	bl	800cce4 <ff_convert>
 800b05e:	4603      	mov	r3, r0
 800b060:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b064:	2b00      	cmp	r3, #0
 800b066:	d004      	beq.n	800b072 <create_name+0x246>
 800b068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b06a:	3b80      	subs	r3, #128	; 0x80
 800b06c:	4a23      	ldr	r2, [pc, #140]	; (800b0fc <create_name+0x2d0>)
 800b06e:	5cd3      	ldrb	r3, [r2, r3]
 800b070:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b076:	f043 0302 	orr.w	r3, r3, #2
 800b07a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b07e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b080:	2b00      	cmp	r3, #0
 800b082:	d007      	beq.n	800b094 <create_name+0x268>
 800b084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b086:	4619      	mov	r1, r3
 800b088:	481d      	ldr	r0, [pc, #116]	; (800b100 <create_name+0x2d4>)
 800b08a:	f7fe fb20 	bl	80096ce <chk_chr>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d008      	beq.n	800b0a6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b094:	235f      	movs	r3, #95	; 0x5f
 800b096:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b09c:	f043 0303 	orr.w	r3, r3, #3
 800b0a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b0a4:	e01b      	b.n	800b0de <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b0a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0a8:	2b40      	cmp	r3, #64	; 0x40
 800b0aa:	d909      	bls.n	800b0c0 <create_name+0x294>
 800b0ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0ae:	2b5a      	cmp	r3, #90	; 0x5a
 800b0b0:	d806      	bhi.n	800b0c0 <create_name+0x294>
					b |= 2;
 800b0b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b0b6:	f043 0302 	orr.w	r3, r3, #2
 800b0ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b0be:	e00e      	b.n	800b0de <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b0c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0c2:	2b60      	cmp	r3, #96	; 0x60
 800b0c4:	d90b      	bls.n	800b0de <create_name+0x2b2>
 800b0c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0c8:	2b7a      	cmp	r3, #122	; 0x7a
 800b0ca:	d808      	bhi.n	800b0de <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b0cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b0d0:	f043 0301 	orr.w	r3, r3, #1
 800b0d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b0d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0da:	3b20      	subs	r3, #32
 800b0dc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b0de:	6a3b      	ldr	r3, [r7, #32]
 800b0e0:	1c5a      	adds	r2, r3, #1
 800b0e2:	623a      	str	r2, [r7, #32]
 800b0e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b0e6:	b2d1      	uxtb	r1, r2
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	460a      	mov	r2, r1
 800b0ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b0f2:	e763      	b.n	800afbc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b0f4:	bf00      	nop
 800b0f6:	e006      	b.n	800b106 <create_name+0x2da>
 800b0f8:	08010d70 	.word	0x08010d70
 800b0fc:	08017e88 	.word	0x08017e88
 800b100:	08010d7c 	.word	0x08010d7c
			if (si > di) break;			/* No extension */
 800b104:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b10c:	2be5      	cmp	r3, #229	; 0xe5
 800b10e:	d103      	bne.n	800b118 <create_name+0x2ec>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2205      	movs	r2, #5
 800b114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	2b08      	cmp	r3, #8
 800b11c:	d104      	bne.n	800b128 <create_name+0x2fc>
 800b11e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b128:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b12c:	f003 030c 	and.w	r3, r3, #12
 800b130:	2b0c      	cmp	r3, #12
 800b132:	d005      	beq.n	800b140 <create_name+0x314>
 800b134:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b138:	f003 0303 	and.w	r3, r3, #3
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	d105      	bne.n	800b14c <create_name+0x320>
 800b140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b144:	f043 0302 	orr.w	r3, r3, #2
 800b148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b150:	f003 0302 	and.w	r3, r3, #2
 800b154:	2b00      	cmp	r3, #0
 800b156:	d117      	bne.n	800b188 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b158:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b15c:	f003 0303 	and.w	r3, r3, #3
 800b160:	2b01      	cmp	r3, #1
 800b162:	d105      	bne.n	800b170 <create_name+0x344>
 800b164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b168:	f043 0310 	orr.w	r3, r3, #16
 800b16c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b170:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b174:	f003 030c 	and.w	r3, r3, #12
 800b178:	2b04      	cmp	r3, #4
 800b17a:	d105      	bne.n	800b188 <create_name+0x35c>
 800b17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b180:	f043 0308 	orr.w	r3, r3, #8
 800b184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b18e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b192:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b194:	4618      	mov	r0, r3
 800b196:	3728      	adds	r7, #40	; 0x28
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b1b0:	e002      	b.n	800b1b8 <follow_path+0x1c>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	603b      	str	r3, [r7, #0]
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	2b2f      	cmp	r3, #47	; 0x2f
 800b1be:	d0f8      	beq.n	800b1b2 <follow_path+0x16>
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	2b5c      	cmp	r3, #92	; 0x5c
 800b1c6:	d0f4      	beq.n	800b1b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	2b1f      	cmp	r3, #31
 800b1d4:	d80a      	bhi.n	800b1ec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2280      	movs	r2, #128	; 0x80
 800b1da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b1de:	2100      	movs	r1, #0
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7ff f81f 	bl	800a224 <dir_sdi>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	75fb      	strb	r3, [r7, #23]
 800b1ea:	e048      	b.n	800b27e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b1ec:	463b      	mov	r3, r7
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f7ff fe1b 	bl	800ae2c <create_name>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d139      	bne.n	800b274 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7ff fb7c 	bl	800a8fe <dir_find>
 800b206:	4603      	mov	r3, r0
 800b208:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b210:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00a      	beq.n	800b22e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b218:	7dfb      	ldrb	r3, [r7, #23]
 800b21a:	2b04      	cmp	r3, #4
 800b21c:	d12c      	bne.n	800b278 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b21e:	7afb      	ldrb	r3, [r7, #11]
 800b220:	f003 0304 	and.w	r3, r3, #4
 800b224:	2b00      	cmp	r3, #0
 800b226:	d127      	bne.n	800b278 <follow_path+0xdc>
 800b228:	2305      	movs	r3, #5
 800b22a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b22c:	e024      	b.n	800b278 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b22e:	7afb      	ldrb	r3, [r7, #11]
 800b230:	f003 0304 	and.w	r3, r3, #4
 800b234:	2b00      	cmp	r3, #0
 800b236:	d121      	bne.n	800b27c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	799b      	ldrb	r3, [r3, #6]
 800b23c:	f003 0310 	and.w	r3, r3, #16
 800b240:	2b00      	cmp	r3, #0
 800b242:	d102      	bne.n	800b24a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b244:	2305      	movs	r3, #5
 800b246:	75fb      	strb	r3, [r7, #23]
 800b248:	e019      	b.n	800b27e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	695b      	ldr	r3, [r3, #20]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	8992      	ldrh	r2, [r2, #12]
 800b258:	fbb3 f0f2 	udiv	r0, r3, r2
 800b25c:	fb00 f202 	mul.w	r2, r0, r2
 800b260:	1a9b      	subs	r3, r3, r2
 800b262:	440b      	add	r3, r1
 800b264:	4619      	mov	r1, r3
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f7ff f982 	bl	800a570 <ld_clust>
 800b26c:	4602      	mov	r2, r0
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b272:	e7bb      	b.n	800b1ec <follow_path+0x50>
			if (res != FR_OK) break;
 800b274:	bf00      	nop
 800b276:	e002      	b.n	800b27e <follow_path+0xe2>
				break;
 800b278:	bf00      	nop
 800b27a:	e000      	b.n	800b27e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b27c:	bf00      	nop
			}
		}
	}

	return res;
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3718      	adds	r7, #24
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b288:	b480      	push	{r7}
 800b28a:	b087      	sub	sp, #28
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b290:	f04f 33ff 	mov.w	r3, #4294967295
 800b294:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d031      	beq.n	800b302 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	617b      	str	r3, [r7, #20]
 800b2a4:	e002      	b.n	800b2ac <get_ldnumber+0x24>
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	617b      	str	r3, [r7, #20]
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	2b1f      	cmp	r3, #31
 800b2b2:	d903      	bls.n	800b2bc <get_ldnumber+0x34>
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	2b3a      	cmp	r3, #58	; 0x3a
 800b2ba:	d1f4      	bne.n	800b2a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	2b3a      	cmp	r3, #58	; 0x3a
 800b2c2:	d11c      	bne.n	800b2fe <get_ldnumber+0x76>
			tp = *path;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	1c5a      	adds	r2, r3, #1
 800b2ce:	60fa      	str	r2, [r7, #12]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	3b30      	subs	r3, #48	; 0x30
 800b2d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	2b09      	cmp	r3, #9
 800b2da:	d80e      	bhi.n	800b2fa <get_ldnumber+0x72>
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d10a      	bne.n	800b2fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d107      	bne.n	800b2fa <get_ldnumber+0x72>
					vol = (int)i;
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	617b      	str	r3, [r7, #20]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	e002      	b.n	800b304 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b2fe:	2300      	movs	r3, #0
 800b300:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b302:	693b      	ldr	r3, [r7, #16]
}
 800b304:	4618      	mov	r0, r3
 800b306:	371c      	adds	r7, #28
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	70da      	strb	r2, [r3, #3]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f04f 32ff 	mov.w	r2, #4294967295
 800b326:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7fe fb9a 	bl	8009a64 <move_window>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d001      	beq.n	800b33a <check_fs+0x2a>
 800b336:	2304      	movs	r3, #4
 800b338:	e038      	b.n	800b3ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	3338      	adds	r3, #56	; 0x38
 800b33e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b342:	4618      	mov	r0, r3
 800b344:	f7fe f8de 	bl	8009504 <ld_word>
 800b348:	4603      	mov	r3, r0
 800b34a:	461a      	mov	r2, r3
 800b34c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b350:	429a      	cmp	r2, r3
 800b352:	d001      	beq.n	800b358 <check_fs+0x48>
 800b354:	2303      	movs	r3, #3
 800b356:	e029      	b.n	800b3ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b35e:	2be9      	cmp	r3, #233	; 0xe9
 800b360:	d009      	beq.n	800b376 <check_fs+0x66>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b368:	2beb      	cmp	r3, #235	; 0xeb
 800b36a:	d11e      	bne.n	800b3aa <check_fs+0x9a>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b372:	2b90      	cmp	r3, #144	; 0x90
 800b374:	d119      	bne.n	800b3aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	3338      	adds	r3, #56	; 0x38
 800b37a:	3336      	adds	r3, #54	; 0x36
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7fe f8d9 	bl	8009534 <ld_dword>
 800b382:	4603      	mov	r3, r0
 800b384:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b388:	4a0a      	ldr	r2, [pc, #40]	; (800b3b4 <check_fs+0xa4>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d101      	bne.n	800b392 <check_fs+0x82>
 800b38e:	2300      	movs	r3, #0
 800b390:	e00c      	b.n	800b3ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3338      	adds	r3, #56	; 0x38
 800b396:	3352      	adds	r3, #82	; 0x52
 800b398:	4618      	mov	r0, r3
 800b39a:	f7fe f8cb 	bl	8009534 <ld_dword>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	4a05      	ldr	r2, [pc, #20]	; (800b3b8 <check_fs+0xa8>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d101      	bne.n	800b3aa <check_fs+0x9a>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	e000      	b.n	800b3ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b3aa:	2302      	movs	r3, #2
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	00544146 	.word	0x00544146
 800b3b8:	33544146 	.word	0x33544146

0800b3bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b096      	sub	sp, #88	; 0x58
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7ff ff59 	bl	800b288 <get_ldnumber>
 800b3d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	da01      	bge.n	800b3e2 <find_volume+0x26>
 800b3de:	230b      	movs	r3, #11
 800b3e0:	e265      	b.n	800b8ae <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b3e2:	4a9f      	ldr	r2, [pc, #636]	; (800b660 <find_volume+0x2a4>)
 800b3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d101      	bne.n	800b3f6 <find_volume+0x3a>
 800b3f2:	230c      	movs	r3, #12
 800b3f4:	e25b      	b.n	800b8ae <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b3fc:	79fb      	ldrb	r3, [r7, #7]
 800b3fe:	f023 0301 	bic.w	r3, r3, #1
 800b402:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d01a      	beq.n	800b442 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	785b      	ldrb	r3, [r3, #1]
 800b410:	4618      	mov	r0, r3
 800b412:	f7fd ffd7 	bl	80093c4 <disk_status>
 800b416:	4603      	mov	r3, r0
 800b418:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b41c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b420:	f003 0301 	and.w	r3, r3, #1
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10c      	bne.n	800b442 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b428:	79fb      	ldrb	r3, [r7, #7]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d007      	beq.n	800b43e <find_volume+0x82>
 800b42e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b432:	f003 0304 	and.w	r3, r3, #4
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b43a:	230a      	movs	r3, #10
 800b43c:	e237      	b.n	800b8ae <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b43e:	2300      	movs	r3, #0
 800b440:	e235      	b.n	800b8ae <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b444:	2200      	movs	r2, #0
 800b446:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b44a:	b2da      	uxtb	r2, r3
 800b44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b452:	785b      	ldrb	r3, [r3, #1]
 800b454:	4618      	mov	r0, r3
 800b456:	f7fd ffcf 	bl	80093f8 <disk_initialize>
 800b45a:	4603      	mov	r3, r0
 800b45c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b460:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b464:	f003 0301 	and.w	r3, r3, #1
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d001      	beq.n	800b470 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b46c:	2303      	movs	r3, #3
 800b46e:	e21e      	b.n	800b8ae <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b470:	79fb      	ldrb	r3, [r7, #7]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d007      	beq.n	800b486 <find_volume+0xca>
 800b476:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b47a:	f003 0304 	and.w	r3, r3, #4
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b482:	230a      	movs	r3, #10
 800b484:	e213      	b.n	800b8ae <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b488:	7858      	ldrb	r0, [r3, #1]
 800b48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48c:	330c      	adds	r3, #12
 800b48e:	461a      	mov	r2, r3
 800b490:	2102      	movs	r1, #2
 800b492:	f7fe f819 	bl	80094c8 <disk_ioctl>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d001      	beq.n	800b4a0 <find_volume+0xe4>
 800b49c:	2301      	movs	r3, #1
 800b49e:	e206      	b.n	800b8ae <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a2:	899b      	ldrh	r3, [r3, #12]
 800b4a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4a8:	d80d      	bhi.n	800b4c6 <find_volume+0x10a>
 800b4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ac:	899b      	ldrh	r3, [r3, #12]
 800b4ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4b2:	d308      	bcc.n	800b4c6 <find_volume+0x10a>
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b6:	899b      	ldrh	r3, [r3, #12]
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4bc:	899b      	ldrh	r3, [r3, #12]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d001      	beq.n	800b4ca <find_volume+0x10e>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e1f1      	b.n	800b8ae <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b4ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4d2:	f7ff ff1d 	bl	800b310 <check_fs>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b4dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d149      	bne.n	800b578 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	643b      	str	r3, [r7, #64]	; 0x40
 800b4e8:	e01e      	b.n	800b528 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b4f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4f2:	011b      	lsls	r3, r3, #4
 800b4f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b4f8:	4413      	add	r3, r2
 800b4fa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fe:	3304      	adds	r3, #4
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d006      	beq.n	800b514 <find_volume+0x158>
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	3308      	adds	r3, #8
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7fe f812 	bl	8009534 <ld_dword>
 800b510:	4602      	mov	r2, r0
 800b512:	e000      	b.n	800b516 <find_volume+0x15a>
 800b514:	2200      	movs	r2, #0
 800b516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	3358      	adds	r3, #88	; 0x58
 800b51c:	443b      	add	r3, r7
 800b51e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b524:	3301      	adds	r3, #1
 800b526:	643b      	str	r3, [r7, #64]	; 0x40
 800b528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	d9dd      	bls.n	800b4ea <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b52e:	2300      	movs	r3, #0
 800b530:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b534:	2b00      	cmp	r3, #0
 800b536:	d002      	beq.n	800b53e <find_volume+0x182>
 800b538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b53a:	3b01      	subs	r3, #1
 800b53c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b53e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	3358      	adds	r3, #88	; 0x58
 800b544:	443b      	add	r3, r7
 800b546:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b54a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b54c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d005      	beq.n	800b55e <find_volume+0x1a2>
 800b552:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b554:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b556:	f7ff fedb 	bl	800b310 <check_fs>
 800b55a:	4603      	mov	r3, r0
 800b55c:	e000      	b.n	800b560 <find_volume+0x1a4>
 800b55e:	2303      	movs	r3, #3
 800b560:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b564:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d905      	bls.n	800b578 <find_volume+0x1bc>
 800b56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b56e:	3301      	adds	r3, #1
 800b570:	643b      	str	r3, [r7, #64]	; 0x40
 800b572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b574:	2b03      	cmp	r3, #3
 800b576:	d9e2      	bls.n	800b53e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b578:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b57c:	2b04      	cmp	r3, #4
 800b57e:	d101      	bne.n	800b584 <find_volume+0x1c8>
 800b580:	2301      	movs	r3, #1
 800b582:	e194      	b.n	800b8ae <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d901      	bls.n	800b590 <find_volume+0x1d4>
 800b58c:	230d      	movs	r3, #13
 800b58e:	e18e      	b.n	800b8ae <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b592:	3338      	adds	r3, #56	; 0x38
 800b594:	330b      	adds	r3, #11
 800b596:	4618      	mov	r0, r3
 800b598:	f7fd ffb4 	bl	8009504 <ld_word>
 800b59c:	4603      	mov	r3, r0
 800b59e:	461a      	mov	r2, r3
 800b5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a2:	899b      	ldrh	r3, [r3, #12]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d001      	beq.n	800b5ac <find_volume+0x1f0>
 800b5a8:	230d      	movs	r3, #13
 800b5aa:	e180      	b.n	800b8ae <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	3338      	adds	r3, #56	; 0x38
 800b5b0:	3316      	adds	r3, #22
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fd ffa6 	bl	8009504 <ld_word>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b5bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d106      	bne.n	800b5d0 <find_volume+0x214>
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c4:	3338      	adds	r3, #56	; 0x38
 800b5c6:	3324      	adds	r3, #36	; 0x24
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fd ffb3 	bl	8009534 <ld_dword>
 800b5ce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5d4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e2:	789b      	ldrb	r3, [r3, #2]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d005      	beq.n	800b5f4 <find_volume+0x238>
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ea:	789b      	ldrb	r3, [r3, #2]
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d001      	beq.n	800b5f4 <find_volume+0x238>
 800b5f0:	230d      	movs	r3, #13
 800b5f2:	e15c      	b.n	800b8ae <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f6:	789b      	ldrb	r3, [r3, #2]
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5fc:	fb02 f303 	mul.w	r3, r2, r3
 800b600:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b608:	b29a      	uxth	r2, r3
 800b60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b610:	895b      	ldrh	r3, [r3, #10]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d008      	beq.n	800b628 <find_volume+0x26c>
 800b616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b618:	895b      	ldrh	r3, [r3, #10]
 800b61a:	461a      	mov	r2, r3
 800b61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61e:	895b      	ldrh	r3, [r3, #10]
 800b620:	3b01      	subs	r3, #1
 800b622:	4013      	ands	r3, r2
 800b624:	2b00      	cmp	r3, #0
 800b626:	d001      	beq.n	800b62c <find_volume+0x270>
 800b628:	230d      	movs	r3, #13
 800b62a:	e140      	b.n	800b8ae <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62e:	3338      	adds	r3, #56	; 0x38
 800b630:	3311      	adds	r3, #17
 800b632:	4618      	mov	r0, r3
 800b634:	f7fd ff66 	bl	8009504 <ld_word>
 800b638:	4603      	mov	r3, r0
 800b63a:	461a      	mov	r2, r3
 800b63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b642:	891b      	ldrh	r3, [r3, #8]
 800b644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b646:	8992      	ldrh	r2, [r2, #12]
 800b648:	0952      	lsrs	r2, r2, #5
 800b64a:	b292      	uxth	r2, r2
 800b64c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b650:	fb01 f202 	mul.w	r2, r1, r2
 800b654:	1a9b      	subs	r3, r3, r2
 800b656:	b29b      	uxth	r3, r3
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d003      	beq.n	800b664 <find_volume+0x2a8>
 800b65c:	230d      	movs	r3, #13
 800b65e:	e126      	b.n	800b8ae <find_volume+0x4f2>
 800b660:	20002618 	.word	0x20002618

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b666:	3338      	adds	r3, #56	; 0x38
 800b668:	3313      	adds	r3, #19
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fd ff4a 	bl	8009504 <ld_word>
 800b670:	4603      	mov	r3, r0
 800b672:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b676:	2b00      	cmp	r3, #0
 800b678:	d106      	bne.n	800b688 <find_volume+0x2cc>
 800b67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67c:	3338      	adds	r3, #56	; 0x38
 800b67e:	3320      	adds	r3, #32
 800b680:	4618      	mov	r0, r3
 800b682:	f7fd ff57 	bl	8009534 <ld_dword>
 800b686:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68a:	3338      	adds	r3, #56	; 0x38
 800b68c:	330e      	adds	r3, #14
 800b68e:	4618      	mov	r0, r3
 800b690:	f7fd ff38 	bl	8009504 <ld_word>
 800b694:	4603      	mov	r3, r0
 800b696:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b698:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <find_volume+0x2e6>
 800b69e:	230d      	movs	r3, #13
 800b6a0:	e105      	b.n	800b8ae <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b6a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b6a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6a6:	4413      	add	r3, r2
 800b6a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6aa:	8911      	ldrh	r1, [r2, #8]
 800b6ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6ae:	8992      	ldrh	r2, [r2, #12]
 800b6b0:	0952      	lsrs	r2, r2, #5
 800b6b2:	b292      	uxth	r2, r2
 800b6b4:	fbb1 f2f2 	udiv	r2, r1, r2
 800b6b8:	b292      	uxth	r2, r2
 800b6ba:	4413      	add	r3, r2
 800b6bc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b6be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d201      	bcs.n	800b6ca <find_volume+0x30e>
 800b6c6:	230d      	movs	r3, #13
 800b6c8:	e0f1      	b.n	800b8ae <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b6ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6d2:	8952      	ldrh	r2, [r2, #10]
 800b6d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d101      	bne.n	800b6e4 <find_volume+0x328>
 800b6e0:	230d      	movs	r3, #13
 800b6e2:	e0e4      	b.n	800b8ae <find_volume+0x4f2>
		fmt = FS_FAT32;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d802      	bhi.n	800b6fa <find_volume+0x33e>
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b700:	4293      	cmp	r3, r2
 800b702:	d802      	bhi.n	800b70a <find_volume+0x34e>
 800b704:	2301      	movs	r3, #1
 800b706:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	1c9a      	adds	r2, r3, #2
 800b70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b710:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b714:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b716:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b718:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b71a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b71c:	441a      	add	r2, r3
 800b71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b720:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b722:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b726:	441a      	add	r2, r3
 800b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b72c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b730:	2b03      	cmp	r3, #3
 800b732:	d11e      	bne.n	800b772 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b736:	3338      	adds	r3, #56	; 0x38
 800b738:	332a      	adds	r3, #42	; 0x2a
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fd fee2 	bl	8009504 <ld_word>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <find_volume+0x38e>
 800b746:	230d      	movs	r3, #13
 800b748:	e0b1      	b.n	800b8ae <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74c:	891b      	ldrh	r3, [r3, #8]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <find_volume+0x39a>
 800b752:	230d      	movs	r3, #13
 800b754:	e0ab      	b.n	800b8ae <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b758:	3338      	adds	r3, #56	; 0x38
 800b75a:	332c      	adds	r3, #44	; 0x2c
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7fd fee9 	bl	8009534 <ld_dword>
 800b762:	4602      	mov	r2, r0
 800b764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b766:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76a:	69db      	ldr	r3, [r3, #28]
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	647b      	str	r3, [r7, #68]	; 0x44
 800b770:	e01f      	b.n	800b7b2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b774:	891b      	ldrh	r3, [r3, #8]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d101      	bne.n	800b77e <find_volume+0x3c2>
 800b77a:	230d      	movs	r3, #13
 800b77c:	e097      	b.n	800b8ae <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b784:	441a      	add	r2, r3
 800b786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b788:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b78a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d103      	bne.n	800b79a <find_volume+0x3de>
 800b792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b794:	69db      	ldr	r3, [r3, #28]
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	e00a      	b.n	800b7b0 <find_volume+0x3f4>
 800b79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79c:	69da      	ldr	r2, [r3, #28]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	005b      	lsls	r3, r3, #1
 800b7a2:	4413      	add	r3, r2
 800b7a4:	085a      	lsrs	r2, r3, #1
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a8:	69db      	ldr	r3, [r3, #28]
 800b7aa:	f003 0301 	and.w	r3, r3, #1
 800b7ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b7b0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b4:	6a1a      	ldr	r2, [r3, #32]
 800b7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b8:	899b      	ldrh	r3, [r3, #12]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7be:	440b      	add	r3, r1
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b7c4:	8989      	ldrh	r1, [r1, #12]
 800b7c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d201      	bcs.n	800b7d2 <find_volume+0x416>
 800b7ce:	230d      	movs	r3, #13
 800b7d0:	e06d      	b.n	800b8ae <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d8:	619a      	str	r2, [r3, #24]
 800b7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7dc:	699a      	ldr	r2, [r3, #24]
 800b7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e4:	2280      	movs	r2, #128	; 0x80
 800b7e6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b7e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	d149      	bne.n	800b884 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f2:	3338      	adds	r3, #56	; 0x38
 800b7f4:	3330      	adds	r3, #48	; 0x30
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7fd fe84 	bl	8009504 <ld_word>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d140      	bne.n	800b884 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b804:	3301      	adds	r3, #1
 800b806:	4619      	mov	r1, r3
 800b808:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b80a:	f7fe f92b 	bl	8009a64 <move_window>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d137      	bne.n	800b884 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	2200      	movs	r2, #0
 800b818:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81c:	3338      	adds	r3, #56	; 0x38
 800b81e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b822:	4618      	mov	r0, r3
 800b824:	f7fd fe6e 	bl	8009504 <ld_word>
 800b828:	4603      	mov	r3, r0
 800b82a:	461a      	mov	r2, r3
 800b82c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b830:	429a      	cmp	r2, r3
 800b832:	d127      	bne.n	800b884 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b836:	3338      	adds	r3, #56	; 0x38
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fd fe7b 	bl	8009534 <ld_dword>
 800b83e:	4603      	mov	r3, r0
 800b840:	4a1d      	ldr	r2, [pc, #116]	; (800b8b8 <find_volume+0x4fc>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d11e      	bne.n	800b884 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b848:	3338      	adds	r3, #56	; 0x38
 800b84a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fd fe70 	bl	8009534 <ld_dword>
 800b854:	4603      	mov	r3, r0
 800b856:	4a19      	ldr	r2, [pc, #100]	; (800b8bc <find_volume+0x500>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d113      	bne.n	800b884 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85e:	3338      	adds	r3, #56	; 0x38
 800b860:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b864:	4618      	mov	r0, r3
 800b866:	f7fd fe65 	bl	8009534 <ld_dword>
 800b86a:	4602      	mov	r2, r0
 800b86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b872:	3338      	adds	r3, #56	; 0x38
 800b874:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b878:	4618      	mov	r0, r3
 800b87a:	f7fd fe5b 	bl	8009534 <ld_dword>
 800b87e:	4602      	mov	r2, r0
 800b880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b882:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b886:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b88a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b88c:	4b0c      	ldr	r3, [pc, #48]	; (800b8c0 <find_volume+0x504>)
 800b88e:	881b      	ldrh	r3, [r3, #0]
 800b890:	3301      	adds	r3, #1
 800b892:	b29a      	uxth	r2, r3
 800b894:	4b0a      	ldr	r3, [pc, #40]	; (800b8c0 <find_volume+0x504>)
 800b896:	801a      	strh	r2, [r3, #0]
 800b898:	4b09      	ldr	r3, [pc, #36]	; (800b8c0 <find_volume+0x504>)
 800b89a:	881a      	ldrh	r2, [r3, #0]
 800b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a2:	4a08      	ldr	r2, [pc, #32]	; (800b8c4 <find_volume+0x508>)
 800b8a4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b8a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8a8:	f7fe f874 	bl	8009994 <clear_lock>
#endif
	return FR_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3758      	adds	r7, #88	; 0x58
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	41615252 	.word	0x41615252
 800b8bc:	61417272 	.word	0x61417272
 800b8c0:	2000261c 	.word	0x2000261c
 800b8c4:	20002640 	.word	0x20002640

0800b8c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b8d2:	2309      	movs	r3, #9
 800b8d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d01c      	beq.n	800b916 <validate+0x4e>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d018      	beq.n	800b916 <validate+0x4e>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d013      	beq.n	800b916 <validate+0x4e>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	889a      	ldrh	r2, [r3, #4]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	88db      	ldrh	r3, [r3, #6]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d10c      	bne.n	800b916 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	785b      	ldrb	r3, [r3, #1]
 800b902:	4618      	mov	r0, r3
 800b904:	f7fd fd5e 	bl	80093c4 <disk_status>
 800b908:	4603      	mov	r3, r0
 800b90a:	f003 0301 	and.w	r3, r3, #1
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <validate+0x4e>
			res = FR_OK;
 800b912:	2300      	movs	r3, #0
 800b914:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b916:	7bfb      	ldrb	r3, [r7, #15]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d102      	bne.n	800b922 <validate+0x5a>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	e000      	b.n	800b924 <validate+0x5c>
 800b922:	2300      	movs	r3, #0
 800b924:	683a      	ldr	r2, [r7, #0]
 800b926:	6013      	str	r3, [r2, #0]
	return res;
 800b928:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
	...

0800b934 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b088      	sub	sp, #32
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	4613      	mov	r3, r2
 800b940:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b946:	f107 0310 	add.w	r3, r7, #16
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7ff fc9c 	bl	800b288 <get_ldnumber>
 800b950:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	2b00      	cmp	r3, #0
 800b956:	da01      	bge.n	800b95c <f_mount+0x28>
 800b958:	230b      	movs	r3, #11
 800b95a:	e02b      	b.n	800b9b4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b95c:	4a17      	ldr	r2, [pc, #92]	; (800b9bc <f_mount+0x88>)
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b964:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d005      	beq.n	800b978 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b96c:	69b8      	ldr	r0, [r7, #24]
 800b96e:	f7fe f811 	bl	8009994 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	2200      	movs	r2, #0
 800b976:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d002      	beq.n	800b984 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	490d      	ldr	r1, [pc, #52]	; (800b9bc <f_mount+0x88>)
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d002      	beq.n	800b99a <f_mount+0x66>
 800b994:	79fb      	ldrb	r3, [r7, #7]
 800b996:	2b01      	cmp	r3, #1
 800b998:	d001      	beq.n	800b99e <f_mount+0x6a>
 800b99a:	2300      	movs	r3, #0
 800b99c:	e00a      	b.n	800b9b4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b99e:	f107 010c 	add.w	r1, r7, #12
 800b9a2:	f107 0308 	add.w	r3, r7, #8
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7ff fd07 	bl	800b3bc <find_volume>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3720      	adds	r7, #32
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20002618 	.word	0x20002618

0800b9c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b09a      	sub	sp, #104	; 0x68
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d101      	bne.n	800b9d8 <f_open+0x18>
 800b9d4:	2309      	movs	r3, #9
 800b9d6:	e1bb      	b.n	800bd50 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b9d8:	79fb      	ldrb	r3, [r7, #7]
 800b9da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b9e0:	79fa      	ldrb	r2, [r7, #7]
 800b9e2:	f107 0114 	add.w	r1, r7, #20
 800b9e6:	f107 0308 	add.w	r3, r7, #8
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7ff fce6 	bl	800b3bc <find_volume>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b9f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f040 819f 	bne.w	800bd3e <f_open+0x37e>
		dj.obj.fs = fs;
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ba04:	68ba      	ldr	r2, [r7, #8]
 800ba06:	f107 0318 	add.w	r3, r7, #24
 800ba0a:	4611      	mov	r1, r2
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7ff fbc5 	bl	800b19c <follow_path>
 800ba12:	4603      	mov	r3, r0
 800ba14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ba18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d11a      	bne.n	800ba56 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ba20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ba24:	b25b      	sxtb	r3, r3
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	da03      	bge.n	800ba32 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ba2a:	2306      	movs	r3, #6
 800ba2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ba30:	e011      	b.n	800ba56 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ba32:	79fb      	ldrb	r3, [r7, #7]
 800ba34:	f023 0301 	bic.w	r3, r3, #1
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	bf14      	ite	ne
 800ba3c:	2301      	movne	r3, #1
 800ba3e:	2300      	moveq	r3, #0
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	461a      	mov	r2, r3
 800ba44:	f107 0318 	add.w	r3, r7, #24
 800ba48:	4611      	mov	r1, r2
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fd fe5a 	bl	8009704 <chk_lock>
 800ba50:	4603      	mov	r3, r0
 800ba52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ba56:	79fb      	ldrb	r3, [r7, #7]
 800ba58:	f003 031c 	and.w	r3, r3, #28
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d07f      	beq.n	800bb60 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ba60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d017      	beq.n	800ba98 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ba68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba6c:	2b04      	cmp	r3, #4
 800ba6e:	d10e      	bne.n	800ba8e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ba70:	f7fd fea4 	bl	80097bc <enq_lock>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d006      	beq.n	800ba88 <f_open+0xc8>
 800ba7a:	f107 0318 	add.w	r3, r7, #24
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7fe fffe 	bl	800aa80 <dir_register>
 800ba84:	4603      	mov	r3, r0
 800ba86:	e000      	b.n	800ba8a <f_open+0xca>
 800ba88:	2312      	movs	r3, #18
 800ba8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ba8e:	79fb      	ldrb	r3, [r7, #7]
 800ba90:	f043 0308 	orr.w	r3, r3, #8
 800ba94:	71fb      	strb	r3, [r7, #7]
 800ba96:	e010      	b.n	800baba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ba98:	7fbb      	ldrb	r3, [r7, #30]
 800ba9a:	f003 0311 	and.w	r3, r3, #17
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d003      	beq.n	800baaa <f_open+0xea>
					res = FR_DENIED;
 800baa2:	2307      	movs	r3, #7
 800baa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800baa8:	e007      	b.n	800baba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800baaa:	79fb      	ldrb	r3, [r7, #7]
 800baac:	f003 0304 	and.w	r3, r3, #4
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <f_open+0xfa>
 800bab4:	2308      	movs	r3, #8
 800bab6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800baba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d168      	bne.n	800bb94 <f_open+0x1d4>
 800bac2:	79fb      	ldrb	r3, [r7, #7]
 800bac4:	f003 0308 	and.w	r3, r3, #8
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d063      	beq.n	800bb94 <f_open+0x1d4>
				dw = GET_FATTIME();
 800bacc:	f7fd fae6 	bl	800909c <get_fattime>
 800bad0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad4:	330e      	adds	r3, #14
 800bad6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bad8:	4618      	mov	r0, r3
 800bada:	f7fd fd69 	bl	80095b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae0:	3316      	adds	r3, #22
 800bae2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7fd fd63 	bl	80095b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800baea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baec:	330b      	adds	r3, #11
 800baee:	2220      	movs	r2, #32
 800baf0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baf6:	4611      	mov	r1, r2
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7fe fd39 	bl	800a570 <ld_clust>
 800bafe:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb04:	2200      	movs	r2, #0
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7fe fd51 	bl	800a5ae <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0e:	331c      	adds	r3, #28
 800bb10:	2100      	movs	r1, #0
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fd fd4c 	bl	80095b0 <st_dword>
					fs->wflag = 1;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bb1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d037      	beq.n	800bb94 <f_open+0x1d4>
						dw = fs->winsect;
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb28:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800bb2a:	f107 0318 	add.w	r3, r7, #24
 800bb2e:	2200      	movs	r2, #0
 800bb30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fe fa41 	bl	8009fba <remove_chain>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800bb3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d126      	bne.n	800bb94 <f_open+0x1d4>
							res = move_window(fs, dw);
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fd ff8a 	bl	8009a64 <move_window>
 800bb50:	4603      	mov	r3, r0
 800bb52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb5a:	3a01      	subs	r2, #1
 800bb5c:	615a      	str	r2, [r3, #20]
 800bb5e:	e019      	b.n	800bb94 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bb60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d115      	bne.n	800bb94 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bb68:	7fbb      	ldrb	r3, [r7, #30]
 800bb6a:	f003 0310 	and.w	r3, r3, #16
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d003      	beq.n	800bb7a <f_open+0x1ba>
					res = FR_NO_FILE;
 800bb72:	2304      	movs	r3, #4
 800bb74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bb78:	e00c      	b.n	800bb94 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bb7a:	79fb      	ldrb	r3, [r7, #7]
 800bb7c:	f003 0302 	and.w	r3, r3, #2
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d007      	beq.n	800bb94 <f_open+0x1d4>
 800bb84:	7fbb      	ldrb	r3, [r7, #30]
 800bb86:	f003 0301 	and.w	r3, r3, #1
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d002      	beq.n	800bb94 <f_open+0x1d4>
						res = FR_DENIED;
 800bb8e:	2307      	movs	r3, #7
 800bb90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800bb94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d128      	bne.n	800bbee <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bb9c:	79fb      	ldrb	r3, [r7, #7]
 800bb9e:	f003 0308 	and.w	r3, r3, #8
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d003      	beq.n	800bbae <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bba6:	79fb      	ldrb	r3, [r7, #7]
 800bba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bbb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bbbc:	79fb      	ldrb	r3, [r7, #7]
 800bbbe:	f023 0301 	bic.w	r3, r3, #1
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	bf14      	ite	ne
 800bbc6:	2301      	movne	r3, #1
 800bbc8:	2300      	moveq	r3, #0
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	461a      	mov	r2, r3
 800bbce:	f107 0318 	add.w	r3, r7, #24
 800bbd2:	4611      	mov	r1, r2
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7fd fe13 	bl	8009800 <inc_lock>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d102      	bne.n	800bbee <f_open+0x22e>
 800bbe8:	2302      	movs	r3, #2
 800bbea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bbee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f040 80a3 	bne.w	800bd3e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbfc:	4611      	mov	r1, r2
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fe fcb6 	bl	800a570 <ld_clust>
 800bc04:	4602      	mov	r2, r0
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0c:	331c      	adds	r3, #28
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fd fc90 	bl	8009534 <ld_dword>
 800bc14:	4602      	mov	r2, r0
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	88da      	ldrh	r2, [r3, #6]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	79fa      	ldrb	r2, [r7, #7]
 800bc32:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2200      	movs	r2, #0
 800bc44:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	3330      	adds	r3, #48	; 0x30
 800bc4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bc4e:	2100      	movs	r1, #0
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fd fcfa 	bl	800964a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bc56:	79fb      	ldrb	r3, [r7, #7]
 800bc58:	f003 0320 	and.w	r3, r3, #32
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d06e      	beq.n	800bd3e <f_open+0x37e>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d06a      	beq.n	800bd3e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	68da      	ldr	r2, [r3, #12]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	895b      	ldrh	r3, [r3, #10]
 800bc74:	461a      	mov	r2, r3
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	899b      	ldrh	r3, [r3, #12]
 800bc7a:	fb02 f303 	mul.w	r3, r2, r3
 800bc7e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc8c:	e016      	b.n	800bcbc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fd ffa3 	bl	8009bde <get_fat>
 800bc98:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800bc9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d802      	bhi.n	800bca6 <f_open+0x2e6>
 800bca0:	2302      	movs	r3, #2
 800bca2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcac:	d102      	bne.n	800bcb4 <f_open+0x2f4>
 800bcae:	2301      	movs	r3, #1
 800bcb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bcb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bcb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d103      	bne.n	800bccc <f_open+0x30c>
 800bcc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bcc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d8e0      	bhi.n	800bc8e <f_open+0x2ce>
				}
				fp->clust = clst;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcd0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bcd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d131      	bne.n	800bd3e <f_open+0x37e>
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	899b      	ldrh	r3, [r3, #12]
 800bcde:	461a      	mov	r2, r3
 800bce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bce2:	fbb3 f1f2 	udiv	r1, r3, r2
 800bce6:	fb01 f202 	mul.w	r2, r1, r2
 800bcea:	1a9b      	subs	r3, r3, r2
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d026      	beq.n	800bd3e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7fd ff53 	bl	8009ba0 <clust2sect>
 800bcfa:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bcfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d103      	bne.n	800bd0a <f_open+0x34a>
						res = FR_INT_ERR;
 800bd02:	2302      	movs	r3, #2
 800bd04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bd08:	e019      	b.n	800bd3e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	899b      	ldrh	r3, [r3, #12]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd12:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd18:	441a      	add	r2, r3
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	7858      	ldrb	r0, [r3, #1]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6a1a      	ldr	r2, [r3, #32]
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	f7fd fb8b 	bl	8009448 <disk_read>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <f_open+0x37e>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bd3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d002      	beq.n	800bd4c <f_open+0x38c>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bd4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3768      	adds	r7, #104	; 0x68
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b08e      	sub	sp, #56	; 0x38
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f107 0214 	add.w	r2, r7, #20
 800bd76:	4611      	mov	r1, r2
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7ff fda5 	bl	800b8c8 <validate>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bd84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d107      	bne.n	800bd9c <f_read+0x44>
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	7d5b      	ldrb	r3, [r3, #21]
 800bd90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <f_read+0x4a>
 800bd9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bda0:	e135      	b.n	800c00e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	7d1b      	ldrb	r3, [r3, #20]
 800bda6:	f003 0301 	and.w	r3, r3, #1
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d101      	bne.n	800bdb2 <f_read+0x5a>
 800bdae:	2307      	movs	r3, #7
 800bdb0:	e12d      	b.n	800c00e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	68da      	ldr	r2, [r3, #12]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	699b      	ldr	r3, [r3, #24]
 800bdba:	1ad3      	subs	r3, r2, r3
 800bdbc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	6a3b      	ldr	r3, [r7, #32]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	f240 811e 	bls.w	800c004 <f_read+0x2ac>
 800bdc8:	6a3b      	ldr	r3, [r7, #32]
 800bdca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bdcc:	e11a      	b.n	800c004 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	699b      	ldr	r3, [r3, #24]
 800bdd2:	697a      	ldr	r2, [r7, #20]
 800bdd4:	8992      	ldrh	r2, [r2, #12]
 800bdd6:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdda:	fb01 f202 	mul.w	r2, r1, r2
 800bdde:	1a9b      	subs	r3, r3, r2
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f040 80d5 	bne.w	800bf90 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	697a      	ldr	r2, [r7, #20]
 800bdec:	8992      	ldrh	r2, [r2, #12]
 800bdee:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	8952      	ldrh	r2, [r2, #10]
 800bdf6:	3a01      	subs	r2, #1
 800bdf8:	4013      	ands	r3, r2
 800bdfa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d12f      	bne.n	800be62 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d103      	bne.n	800be12 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	689b      	ldr	r3, [r3, #8]
 800be0e:	633b      	str	r3, [r7, #48]	; 0x30
 800be10:	e013      	b.n	800be3a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be16:	2b00      	cmp	r3, #0
 800be18:	d007      	beq.n	800be2a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	699b      	ldr	r3, [r3, #24]
 800be1e:	4619      	mov	r1, r3
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f7fe f9c7 	bl	800a1b4 <clmt_clust>
 800be26:	6338      	str	r0, [r7, #48]	; 0x30
 800be28:	e007      	b.n	800be3a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800be2a:	68fa      	ldr	r2, [r7, #12]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	69db      	ldr	r3, [r3, #28]
 800be30:	4619      	mov	r1, r3
 800be32:	4610      	mov	r0, r2
 800be34:	f7fd fed3 	bl	8009bde <get_fat>
 800be38:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d804      	bhi.n	800be4a <f_read+0xf2>
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2202      	movs	r2, #2
 800be44:	755a      	strb	r2, [r3, #21]
 800be46:	2302      	movs	r3, #2
 800be48:	e0e1      	b.n	800c00e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800be4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be50:	d104      	bne.n	800be5c <f_read+0x104>
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2201      	movs	r2, #1
 800be56:	755a      	strb	r2, [r3, #21]
 800be58:	2301      	movs	r3, #1
 800be5a:	e0d8      	b.n	800c00e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be60:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800be62:	697a      	ldr	r2, [r7, #20]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	69db      	ldr	r3, [r3, #28]
 800be68:	4619      	mov	r1, r3
 800be6a:	4610      	mov	r0, r2
 800be6c:	f7fd fe98 	bl	8009ba0 <clust2sect>
 800be70:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d104      	bne.n	800be82 <f_read+0x12a>
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2202      	movs	r2, #2
 800be7c:	755a      	strb	r2, [r3, #21]
 800be7e:	2302      	movs	r3, #2
 800be80:	e0c5      	b.n	800c00e <f_read+0x2b6>
			sect += csect;
 800be82:	69ba      	ldr	r2, [r7, #24]
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	4413      	add	r3, r2
 800be88:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	899b      	ldrh	r3, [r3, #12]
 800be8e:	461a      	mov	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	fbb3 f3f2 	udiv	r3, r3, r2
 800be96:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800be98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d041      	beq.n	800bf22 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800be9e:	69fa      	ldr	r2, [r7, #28]
 800bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea2:	4413      	add	r3, r2
 800bea4:	697a      	ldr	r2, [r7, #20]
 800bea6:	8952      	ldrh	r2, [r2, #10]
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d905      	bls.n	800beb8 <f_read+0x160>
					cc = fs->csize - csect;
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	895b      	ldrh	r3, [r3, #10]
 800beb0:	461a      	mov	r2, r3
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	1ad3      	subs	r3, r2, r3
 800beb6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	7858      	ldrb	r0, [r3, #1]
 800bebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bebe:	69ba      	ldr	r2, [r7, #24]
 800bec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bec2:	f7fd fac1 	bl	8009448 <disk_read>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d004      	beq.n	800bed6 <f_read+0x17e>
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2201      	movs	r2, #1
 800bed0:	755a      	strb	r2, [r3, #21]
 800bed2:	2301      	movs	r3, #1
 800bed4:	e09b      	b.n	800c00e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	7d1b      	ldrb	r3, [r3, #20]
 800beda:	b25b      	sxtb	r3, r3
 800bedc:	2b00      	cmp	r3, #0
 800bede:	da18      	bge.n	800bf12 <f_read+0x1ba>
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6a1a      	ldr	r2, [r3, #32]
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beea:	429a      	cmp	r2, r3
 800beec:	d911      	bls.n	800bf12 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	6a1a      	ldr	r2, [r3, #32]
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	697a      	ldr	r2, [r7, #20]
 800bef8:	8992      	ldrh	r2, [r2, #12]
 800befa:	fb02 f303 	mul.w	r3, r2, r3
 800befe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf00:	18d0      	adds	r0, r2, r3
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	899b      	ldrh	r3, [r3, #12]
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	f7fd fb7b 	bl	8009608 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	899b      	ldrh	r3, [r3, #12]
 800bf16:	461a      	mov	r2, r3
 800bf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1a:	fb02 f303 	mul.w	r3, r2, r3
 800bf1e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800bf20:	e05c      	b.n	800bfdc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6a1b      	ldr	r3, [r3, #32]
 800bf26:	69ba      	ldr	r2, [r7, #24]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d02e      	beq.n	800bf8a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	7d1b      	ldrb	r3, [r3, #20]
 800bf30:	b25b      	sxtb	r3, r3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	da18      	bge.n	800bf68 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	7858      	ldrb	r0, [r3, #1]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6a1a      	ldr	r2, [r3, #32]
 800bf44:	2301      	movs	r3, #1
 800bf46:	f7fd fa9f 	bl	8009488 <disk_write>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d004      	beq.n	800bf5a <f_read+0x202>
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2201      	movs	r2, #1
 800bf54:	755a      	strb	r2, [r3, #21]
 800bf56:	2301      	movs	r3, #1
 800bf58:	e059      	b.n	800c00e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	7d1b      	ldrb	r3, [r3, #20]
 800bf5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf62:	b2da      	uxtb	r2, r3
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	7858      	ldrb	r0, [r3, #1]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf72:	2301      	movs	r3, #1
 800bf74:	69ba      	ldr	r2, [r7, #24]
 800bf76:	f7fd fa67 	bl	8009448 <disk_read>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d004      	beq.n	800bf8a <f_read+0x232>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2201      	movs	r2, #1
 800bf84:	755a      	strb	r2, [r3, #21]
 800bf86:	2301      	movs	r3, #1
 800bf88:	e041      	b.n	800c00e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	69ba      	ldr	r2, [r7, #24]
 800bf8e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	899b      	ldrh	r3, [r3, #12]
 800bf94:	4618      	mov	r0, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	697a      	ldr	r2, [r7, #20]
 800bf9c:	8992      	ldrh	r2, [r2, #12]
 800bf9e:	fbb3 f1f2 	udiv	r1, r3, r2
 800bfa2:	fb01 f202 	mul.w	r2, r1, r2
 800bfa6:	1a9b      	subs	r3, r3, r2
 800bfa8:	1ac3      	subs	r3, r0, r3
 800bfaa:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bfac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d901      	bls.n	800bfb8 <f_read+0x260>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	699b      	ldr	r3, [r3, #24]
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	8992      	ldrh	r2, [r2, #12]
 800bfc6:	fbb3 f0f2 	udiv	r0, r3, r2
 800bfca:	fb00 f202 	mul.w	r2, r0, r2
 800bfce:	1a9b      	subs	r3, r3, r2
 800bfd0:	440b      	add	r3, r1
 800bfd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfd8:	f7fd fb16 	bl	8009608 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bfdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe0:	4413      	add	r3, r2
 800bfe2:	627b      	str	r3, [r7, #36]	; 0x24
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	699a      	ldr	r2, [r3, #24]
 800bfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfea:	441a      	add	r2, r3
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	619a      	str	r2, [r3, #24]
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff6:	441a      	add	r2, r3
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	601a      	str	r2, [r3, #0]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c000:	1ad3      	subs	r3, r2, r3
 800c002:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	f47f aee1 	bne.w	800bdce <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3738      	adds	r7, #56	; 0x38
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b08c      	sub	sp, #48	; 0x30
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	60f8      	str	r0, [r7, #12]
 800c01e:	60b9      	str	r1, [r7, #8]
 800c020:	607a      	str	r2, [r7, #4]
 800c022:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	2200      	movs	r2, #0
 800c02c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f107 0210 	add.w	r2, r7, #16
 800c034:	4611      	mov	r1, r2
 800c036:	4618      	mov	r0, r3
 800c038:	f7ff fc46 	bl	800b8c8 <validate>
 800c03c:	4603      	mov	r3, r0
 800c03e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c042:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c046:	2b00      	cmp	r3, #0
 800c048:	d107      	bne.n	800c05a <f_write+0x44>
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	7d5b      	ldrb	r3, [r3, #21]
 800c04e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c056:	2b00      	cmp	r3, #0
 800c058:	d002      	beq.n	800c060 <f_write+0x4a>
 800c05a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c05e:	e16a      	b.n	800c336 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	7d1b      	ldrb	r3, [r3, #20]
 800c064:	f003 0302 	and.w	r3, r3, #2
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d101      	bne.n	800c070 <f_write+0x5a>
 800c06c:	2307      	movs	r3, #7
 800c06e:	e162      	b.n	800c336 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	699a      	ldr	r2, [r3, #24]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	441a      	add	r2, r3
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	699b      	ldr	r3, [r3, #24]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	f080 814c 	bcs.w	800c31a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	699b      	ldr	r3, [r3, #24]
 800c086:	43db      	mvns	r3, r3
 800c088:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c08a:	e146      	b.n	800c31a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	693a      	ldr	r2, [r7, #16]
 800c092:	8992      	ldrh	r2, [r2, #12]
 800c094:	fbb3 f1f2 	udiv	r1, r3, r2
 800c098:	fb01 f202 	mul.w	r2, r1, r2
 800c09c:	1a9b      	subs	r3, r3, r2
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f040 80f1 	bne.w	800c286 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	699b      	ldr	r3, [r3, #24]
 800c0a8:	693a      	ldr	r2, [r7, #16]
 800c0aa:	8992      	ldrh	r2, [r2, #12]
 800c0ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	8952      	ldrh	r2, [r2, #10]
 800c0b4:	3a01      	subs	r2, #1
 800c0b6:	4013      	ands	r3, r2
 800c0b8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d143      	bne.n	800c148 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	699b      	ldr	r3, [r3, #24]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d10c      	bne.n	800c0e2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d11a      	bne.n	800c10a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fd ffd3 	bl	800a084 <create_chain>
 800c0de:	62b8      	str	r0, [r7, #40]	; 0x28
 800c0e0:	e013      	b.n	800c10a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d007      	beq.n	800c0fa <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f7fe f85f 	bl	800a1b4 <clmt_clust>
 800c0f6:	62b8      	str	r0, [r7, #40]	; 0x28
 800c0f8:	e007      	b.n	800c10a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	69db      	ldr	r3, [r3, #28]
 800c100:	4619      	mov	r1, r3
 800c102:	4610      	mov	r0, r2
 800c104:	f7fd ffbe 	bl	800a084 <create_chain>
 800c108:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f000 8109 	beq.w	800c324 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c114:	2b01      	cmp	r3, #1
 800c116:	d104      	bne.n	800c122 <f_write+0x10c>
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2202      	movs	r2, #2
 800c11c:	755a      	strb	r2, [r3, #21]
 800c11e:	2302      	movs	r3, #2
 800c120:	e109      	b.n	800c336 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c128:	d104      	bne.n	800c134 <f_write+0x11e>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2201      	movs	r2, #1
 800c12e:	755a      	strb	r2, [r3, #21]
 800c130:	2301      	movs	r3, #1
 800c132:	e100      	b.n	800c336 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c138:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d102      	bne.n	800c148 <f_write+0x132>
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c146:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	7d1b      	ldrb	r3, [r3, #20]
 800c14c:	b25b      	sxtb	r3, r3
 800c14e:	2b00      	cmp	r3, #0
 800c150:	da18      	bge.n	800c184 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	7858      	ldrb	r0, [r3, #1]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6a1a      	ldr	r2, [r3, #32]
 800c160:	2301      	movs	r3, #1
 800c162:	f7fd f991 	bl	8009488 <disk_write>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d004      	beq.n	800c176 <f_write+0x160>
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2201      	movs	r2, #1
 800c170:	755a      	strb	r2, [r3, #21]
 800c172:	2301      	movs	r3, #1
 800c174:	e0df      	b.n	800c336 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	7d1b      	ldrb	r3, [r3, #20]
 800c17a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	69db      	ldr	r3, [r3, #28]
 800c18a:	4619      	mov	r1, r3
 800c18c:	4610      	mov	r0, r2
 800c18e:	f7fd fd07 	bl	8009ba0 <clust2sect>
 800c192:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d104      	bne.n	800c1a4 <f_write+0x18e>
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2202      	movs	r2, #2
 800c19e:	755a      	strb	r2, [r3, #21]
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	e0c8      	b.n	800c336 <f_write+0x320>
			sect += csect;
 800c1a4:	697a      	ldr	r2, [r7, #20]
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	899b      	ldrh	r3, [r3, #12]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1b8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c1ba:	6a3b      	ldr	r3, [r7, #32]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d043      	beq.n	800c248 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c1c0:	69ba      	ldr	r2, [r7, #24]
 800c1c2:	6a3b      	ldr	r3, [r7, #32]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	693a      	ldr	r2, [r7, #16]
 800c1c8:	8952      	ldrh	r2, [r2, #10]
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d905      	bls.n	800c1da <f_write+0x1c4>
					cc = fs->csize - csect;
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	895b      	ldrh	r3, [r3, #10]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	7858      	ldrb	r0, [r3, #1]
 800c1de:	6a3b      	ldr	r3, [r7, #32]
 800c1e0:	697a      	ldr	r2, [r7, #20]
 800c1e2:	69f9      	ldr	r1, [r7, #28]
 800c1e4:	f7fd f950 	bl	8009488 <disk_write>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d004      	beq.n	800c1f8 <f_write+0x1e2>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	755a      	strb	r2, [r3, #21]
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e09e      	b.n	800c336 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6a1a      	ldr	r2, [r3, #32]
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	6a3a      	ldr	r2, [r7, #32]
 800c202:	429a      	cmp	r2, r3
 800c204:	d918      	bls.n	800c238 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6a1a      	ldr	r2, [r3, #32]
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	693a      	ldr	r2, [r7, #16]
 800c216:	8992      	ldrh	r2, [r2, #12]
 800c218:	fb02 f303 	mul.w	r3, r2, r3
 800c21c:	69fa      	ldr	r2, [r7, #28]
 800c21e:	18d1      	adds	r1, r2, r3
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	899b      	ldrh	r3, [r3, #12]
 800c224:	461a      	mov	r2, r3
 800c226:	f7fd f9ef 	bl	8009608 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	7d1b      	ldrb	r3, [r3, #20]
 800c22e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c232:	b2da      	uxtb	r2, r3
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	899b      	ldrh	r3, [r3, #12]
 800c23c:	461a      	mov	r2, r3
 800c23e:	6a3b      	ldr	r3, [r7, #32]
 800c240:	fb02 f303 	mul.w	r3, r2, r3
 800c244:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c246:	e04b      	b.n	800c2e0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6a1b      	ldr	r3, [r3, #32]
 800c24c:	697a      	ldr	r2, [r7, #20]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d016      	beq.n	800c280 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	699a      	ldr	r2, [r3, #24]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d210      	bcs.n	800c280 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	7858      	ldrb	r0, [r3, #1]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c268:	2301      	movs	r3, #1
 800c26a:	697a      	ldr	r2, [r7, #20]
 800c26c:	f7fd f8ec 	bl	8009448 <disk_read>
 800c270:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c272:	2b00      	cmp	r3, #0
 800c274:	d004      	beq.n	800c280 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2201      	movs	r2, #1
 800c27a:	755a      	strb	r2, [r3, #21]
 800c27c:	2301      	movs	r3, #1
 800c27e:	e05a      	b.n	800c336 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	697a      	ldr	r2, [r7, #20]
 800c284:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	899b      	ldrh	r3, [r3, #12]
 800c28a:	4618      	mov	r0, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	699b      	ldr	r3, [r3, #24]
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	8992      	ldrh	r2, [r2, #12]
 800c294:	fbb3 f1f2 	udiv	r1, r3, r2
 800c298:	fb01 f202 	mul.w	r2, r1, r2
 800c29c:	1a9b      	subs	r3, r3, r2
 800c29e:	1ac3      	subs	r3, r0, r3
 800c2a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c2a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d901      	bls.n	800c2ae <f_write+0x298>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	699b      	ldr	r3, [r3, #24]
 800c2b8:	693a      	ldr	r2, [r7, #16]
 800c2ba:	8992      	ldrh	r2, [r2, #12]
 800c2bc:	fbb3 f0f2 	udiv	r0, r3, r2
 800c2c0:	fb00 f202 	mul.w	r2, r0, r2
 800c2c4:	1a9b      	subs	r3, r3, r2
 800c2c6:	440b      	add	r3, r1
 800c2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ca:	69f9      	ldr	r1, [r7, #28]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7fd f99b 	bl	8009608 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	7d1b      	ldrb	r3, [r3, #20]
 800c2d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c2e0:	69fa      	ldr	r2, [r7, #28]
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e4:	4413      	add	r3, r2
 800c2e6:	61fb      	str	r3, [r7, #28]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	699a      	ldr	r2, [r3, #24]
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ee:	441a      	add	r2, r3
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	619a      	str	r2, [r3, #24]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	68da      	ldr	r2, [r3, #12]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	699b      	ldr	r3, [r3, #24]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	bf38      	it	cc
 800c300:	461a      	movcc	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	60da      	str	r2, [r3, #12]
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	441a      	add	r2, r3
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	601a      	str	r2, [r3, #0]
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f47f aeb5 	bne.w	800c08c <f_write+0x76>
 800c322:	e000      	b.n	800c326 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c324:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	7d1b      	ldrb	r3, [r3, #20]
 800c32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c32e:	b2da      	uxtb	r2, r3
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3730      	adds	r7, #48	; 0x30
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b086      	sub	sp, #24
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f107 0208 	add.w	r2, r7, #8
 800c34c:	4611      	mov	r1, r2
 800c34e:	4618      	mov	r0, r3
 800c350:	f7ff faba 	bl	800b8c8 <validate>
 800c354:	4603      	mov	r3, r0
 800c356:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c358:	7dfb      	ldrb	r3, [r7, #23]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d168      	bne.n	800c430 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	7d1b      	ldrb	r3, [r3, #20]
 800c362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c366:	2b00      	cmp	r3, #0
 800c368:	d062      	beq.n	800c430 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	7d1b      	ldrb	r3, [r3, #20]
 800c36e:	b25b      	sxtb	r3, r3
 800c370:	2b00      	cmp	r3, #0
 800c372:	da15      	bge.n	800c3a0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	7858      	ldrb	r0, [r3, #1]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a1a      	ldr	r2, [r3, #32]
 800c382:	2301      	movs	r3, #1
 800c384:	f7fd f880 	bl	8009488 <disk_write>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d001      	beq.n	800c392 <f_sync+0x54>
 800c38e:	2301      	movs	r3, #1
 800c390:	e04f      	b.n	800c432 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	7d1b      	ldrb	r3, [r3, #20]
 800c396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c39a:	b2da      	uxtb	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c3a0:	f7fc fe7c 	bl	800909c <get_fattime>
 800c3a4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	4610      	mov	r0, r2
 800c3b0:	f7fd fb58 	bl	8009a64 <move_window>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c3b8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d138      	bne.n	800c430 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3c2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	330b      	adds	r3, #11
 800c3c8:	781a      	ldrb	r2, [r3, #0]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	330b      	adds	r3, #11
 800c3ce:	f042 0220 	orr.w	r2, r2, #32
 800c3d2:	b2d2      	uxtb	r2, r2
 800c3d4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6818      	ldr	r0, [r3, #0]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	68f9      	ldr	r1, [r7, #12]
 800c3e2:	f7fe f8e4 	bl	800a5ae <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f103 021c 	add.w	r2, r3, #28
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	4610      	mov	r0, r2
 800c3f4:	f7fd f8dc 	bl	80095b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3316      	adds	r3, #22
 800c3fc:	6939      	ldr	r1, [r7, #16]
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fd f8d6 	bl	80095b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	3312      	adds	r3, #18
 800c408:	2100      	movs	r1, #0
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fd f8b5 	bl	800957a <st_word>
					fs->wflag = 1;
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2201      	movs	r2, #1
 800c414:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fd fb51 	bl	8009ac0 <sync_fs>
 800c41e:	4603      	mov	r3, r0
 800c420:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	7d1b      	ldrb	r3, [r3, #20]
 800c426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c430:	7dfb      	ldrb	r3, [r7, #23]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3718      	adds	r7, #24
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b084      	sub	sp, #16
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f7ff ff7b 	bl	800c33e <f_sync>
 800c448:	4603      	mov	r3, r0
 800c44a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c44c:	7bfb      	ldrb	r3, [r7, #15]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d118      	bne.n	800c484 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f107 0208 	add.w	r2, r7, #8
 800c458:	4611      	mov	r1, r2
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7ff fa34 	bl	800b8c8 <validate>
 800c460:	4603      	mov	r3, r0
 800c462:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c464:	7bfb      	ldrb	r3, [r7, #15]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d10c      	bne.n	800c484 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	4618      	mov	r0, r3
 800c470:	f7fd fa54 	bl	800991c <dec_lock>
 800c474:	4603      	mov	r3, r0
 800c476:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c478:	7bfb      	ldrb	r3, [r7, #15]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d102      	bne.n	800c484 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c484:	7bfb      	ldrb	r3, [r7, #15]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b090      	sub	sp, #64	; 0x40
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
 800c496:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f107 0208 	add.w	r2, r7, #8
 800c49e:	4611      	mov	r1, r2
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7ff fa11 	bl	800b8c8 <validate>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c4ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d103      	bne.n	800c4bc <f_lseek+0x2e>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	7d5b      	ldrb	r3, [r3, #21]
 800c4b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c4bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d002      	beq.n	800c4ca <f_lseek+0x3c>
 800c4c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4c8:	e201      	b.n	800c8ce <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f000 80d9 	beq.w	800c686 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4da:	d15a      	bne.n	800c592 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e4:	1d1a      	adds	r2, r3, #4
 800c4e6:	627a      	str	r2, [r7, #36]	; 0x24
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	617b      	str	r3, [r7, #20]
 800c4ec:	2302      	movs	r3, #2
 800c4ee:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d03a      	beq.n	800c572 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fe:	613b      	str	r3, [r7, #16]
 800c500:	2300      	movs	r3, #0
 800c502:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c506:	3302      	adds	r3, #2
 800c508:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50c:	60fb      	str	r3, [r7, #12]
 800c50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c510:	3301      	adds	r3, #1
 800c512:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fd fb60 	bl	8009bde <get_fat>
 800c51e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c522:	2b01      	cmp	r3, #1
 800c524:	d804      	bhi.n	800c530 <f_lseek+0xa2>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2202      	movs	r2, #2
 800c52a:	755a      	strb	r2, [r3, #21]
 800c52c:	2302      	movs	r3, #2
 800c52e:	e1ce      	b.n	800c8ce <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c536:	d104      	bne.n	800c542 <f_lseek+0xb4>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2201      	movs	r2, #1
 800c53c:	755a      	strb	r2, [r3, #21]
 800c53e:	2301      	movs	r3, #1
 800c540:	e1c5      	b.n	800c8ce <f_lseek+0x440>
					} while (cl == pcl + 1);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	3301      	adds	r3, #1
 800c546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c548:	429a      	cmp	r2, r3
 800c54a:	d0de      	beq.n	800c50a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c54c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	429a      	cmp	r2, r3
 800c552:	d809      	bhi.n	800c568 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c556:	1d1a      	adds	r2, r3, #4
 800c558:	627a      	str	r2, [r7, #36]	; 0x24
 800c55a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c55c:	601a      	str	r2, [r3, #0]
 800c55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c560:	1d1a      	adds	r2, r3, #4
 800c562:	627a      	str	r2, [r7, #36]	; 0x24
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	69db      	ldr	r3, [r3, #28]
 800c56c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c56e:	429a      	cmp	r2, r3
 800c570:	d3c4      	bcc.n	800c4fc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c578:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c57a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d803      	bhi.n	800c58a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c584:	2200      	movs	r2, #0
 800c586:	601a      	str	r2, [r3, #0]
 800c588:	e19f      	b.n	800c8ca <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c58a:	2311      	movs	r3, #17
 800c58c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c590:	e19b      	b.n	800c8ca <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	683a      	ldr	r2, [r7, #0]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d902      	bls.n	800c5a2 <f_lseek+0x114>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	683a      	ldr	r2, [r7, #0]
 800c5a6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f000 818d 	beq.w	800c8ca <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f7fd fdfc 	bl	800a1b4 <clmt_clust>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c5c2:	68ba      	ldr	r2, [r7, #8]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	69db      	ldr	r3, [r3, #28]
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	f7fd fae8 	bl	8009ba0 <clust2sect>
 800c5d0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d104      	bne.n	800c5e2 <f_lseek+0x154>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2202      	movs	r2, #2
 800c5dc:	755a      	strb	r2, [r3, #21]
 800c5de:	2302      	movs	r3, #2
 800c5e0:	e175      	b.n	800c8ce <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	3b01      	subs	r3, #1
 800c5e6:	68ba      	ldr	r2, [r7, #8]
 800c5e8:	8992      	ldrh	r2, [r2, #12]
 800c5ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	8952      	ldrh	r2, [r2, #10]
 800c5f2:	3a01      	subs	r2, #1
 800c5f4:	4013      	ands	r3, r2
 800c5f6:	69ba      	ldr	r2, [r7, #24]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	699b      	ldr	r3, [r3, #24]
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	8992      	ldrh	r2, [r2, #12]
 800c604:	fbb3 f1f2 	udiv	r1, r3, r2
 800c608:	fb01 f202 	mul.w	r2, r1, r2
 800c60c:	1a9b      	subs	r3, r3, r2
 800c60e:	2b00      	cmp	r3, #0
 800c610:	f000 815b 	beq.w	800c8ca <f_lseek+0x43c>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6a1b      	ldr	r3, [r3, #32]
 800c618:	69ba      	ldr	r2, [r7, #24]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	f000 8155 	beq.w	800c8ca <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	7d1b      	ldrb	r3, [r3, #20]
 800c624:	b25b      	sxtb	r3, r3
 800c626:	2b00      	cmp	r3, #0
 800c628:	da18      	bge.n	800c65c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	7858      	ldrb	r0, [r3, #1]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6a1a      	ldr	r2, [r3, #32]
 800c638:	2301      	movs	r3, #1
 800c63a:	f7fc ff25 	bl	8009488 <disk_write>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d004      	beq.n	800c64e <f_lseek+0x1c0>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	755a      	strb	r2, [r3, #21]
 800c64a:	2301      	movs	r3, #1
 800c64c:	e13f      	b.n	800c8ce <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	7d1b      	ldrb	r3, [r3, #20]
 800c652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c656:	b2da      	uxtb	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	7858      	ldrb	r0, [r3, #1]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c666:	2301      	movs	r3, #1
 800c668:	69ba      	ldr	r2, [r7, #24]
 800c66a:	f7fc feed 	bl	8009448 <disk_read>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d004      	beq.n	800c67e <f_lseek+0x1f0>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	755a      	strb	r2, [r3, #21]
 800c67a:	2301      	movs	r3, #1
 800c67c:	e127      	b.n	800c8ce <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	69ba      	ldr	r2, [r7, #24]
 800c682:	621a      	str	r2, [r3, #32]
 800c684:	e121      	b.n	800c8ca <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	683a      	ldr	r2, [r7, #0]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d908      	bls.n	800c6a2 <f_lseek+0x214>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	7d1b      	ldrb	r3, [r3, #20]
 800c694:	f003 0302 	and.w	r3, r3, #2
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d102      	bne.n	800c6a2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	699b      	ldr	r3, [r3, #24]
 800c6a6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6b0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f000 80b5 	beq.w	800c824 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	895b      	ldrh	r3, [r3, #10]
 800c6be:	461a      	mov	r2, r3
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	899b      	ldrh	r3, [r3, #12]
 800c6c4:	fb02 f303 	mul.w	r3, r2, r3
 800c6c8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d01b      	beq.n	800c708 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	1e5a      	subs	r2, r3, #1
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6da:	6a3b      	ldr	r3, [r7, #32]
 800c6dc:	1e59      	subs	r1, r3, #1
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d30f      	bcc.n	800c708 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c6e8:	6a3b      	ldr	r3, [r7, #32]
 800c6ea:	1e5a      	subs	r2, r3, #1
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	425b      	negs	r3, r3
 800c6f0:	401a      	ands	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	699b      	ldr	r3, [r3, #24]
 800c6fa:	683a      	ldr	r2, [r7, #0]
 800c6fc:	1ad3      	subs	r3, r2, r3
 800c6fe:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	69db      	ldr	r3, [r3, #28]
 800c704:	63bb      	str	r3, [r7, #56]	; 0x38
 800c706:	e022      	b.n	800c74e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c710:	2b00      	cmp	r3, #0
 800c712:	d119      	bne.n	800c748 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2100      	movs	r1, #0
 800c718:	4618      	mov	r0, r3
 800c71a:	f7fd fcb3 	bl	800a084 <create_chain>
 800c71e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c722:	2b01      	cmp	r3, #1
 800c724:	d104      	bne.n	800c730 <f_lseek+0x2a2>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2202      	movs	r2, #2
 800c72a:	755a      	strb	r2, [r3, #21]
 800c72c:	2302      	movs	r3, #2
 800c72e:	e0ce      	b.n	800c8ce <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c736:	d104      	bne.n	800c742 <f_lseek+0x2b4>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	755a      	strb	r2, [r3, #21]
 800c73e:	2301      	movs	r3, #1
 800c740:	e0c5      	b.n	800c8ce <f_lseek+0x440>
					fp->obj.sclust = clst;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c746:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c74c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c750:	2b00      	cmp	r3, #0
 800c752:	d067      	beq.n	800c824 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800c754:	e03a      	b.n	800c7cc <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	69fb      	ldr	r3, [r7, #28]
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	603b      	str	r3, [r7, #0]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	699a      	ldr	r2, [r3, #24]
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	441a      	add	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	7d1b      	ldrb	r3, [r3, #20]
 800c76e:	f003 0302 	and.w	r3, r3, #2
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00b      	beq.n	800c78e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7fd fc82 	bl	800a084 <create_chain>
 800c780:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c784:	2b00      	cmp	r3, #0
 800c786:	d108      	bne.n	800c79a <f_lseek+0x30c>
							ofs = 0; break;
 800c788:	2300      	movs	r3, #0
 800c78a:	603b      	str	r3, [r7, #0]
 800c78c:	e022      	b.n	800c7d4 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c792:	4618      	mov	r0, r3
 800c794:	f7fd fa23 	bl	8009bde <get_fat>
 800c798:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a0:	d104      	bne.n	800c7ac <f_lseek+0x31e>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	755a      	strb	r2, [r3, #21]
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e090      	b.n	800c8ce <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d904      	bls.n	800c7bc <f_lseek+0x32e>
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	69db      	ldr	r3, [r3, #28]
 800c7b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d304      	bcc.n	800c7c6 <f_lseek+0x338>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2202      	movs	r2, #2
 800c7c0:	755a      	strb	r2, [r3, #21]
 800c7c2:	2302      	movs	r3, #2
 800c7c4:	e083      	b.n	800c8ce <f_lseek+0x440>
					fp->clust = clst;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7ca:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c7cc:	683a      	ldr	r2, [r7, #0]
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d8c0      	bhi.n	800c756 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	699a      	ldr	r2, [r3, #24]
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	441a      	add	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	899b      	ldrh	r3, [r3, #12]
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7ec:	fb01 f202 	mul.w	r2, r1, r2
 800c7f0:	1a9b      	subs	r3, r3, r2
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d016      	beq.n	800c824 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fd f9d0 	bl	8009ba0 <clust2sect>
 800c800:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c804:	2b00      	cmp	r3, #0
 800c806:	d104      	bne.n	800c812 <f_lseek+0x384>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2202      	movs	r2, #2
 800c80c:	755a      	strb	r2, [r3, #21]
 800c80e:	2302      	movs	r3, #2
 800c810:	e05d      	b.n	800c8ce <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	899b      	ldrh	r3, [r3, #12]
 800c816:	461a      	mov	r2, r3
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c81e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c820:	4413      	add	r3, r2
 800c822:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	699a      	ldr	r2, [r3, #24]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d90a      	bls.n	800c846 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	699a      	ldr	r2, [r3, #24]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	7d1b      	ldrb	r3, [r3, #20]
 800c83c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c840:	b2da      	uxtb	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	699b      	ldr	r3, [r3, #24]
 800c84a:	68ba      	ldr	r2, [r7, #8]
 800c84c:	8992      	ldrh	r2, [r2, #12]
 800c84e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c852:	fb01 f202 	mul.w	r2, r1, r2
 800c856:	1a9b      	subs	r3, r3, r2
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d036      	beq.n	800c8ca <f_lseek+0x43c>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a1b      	ldr	r3, [r3, #32]
 800c860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c862:	429a      	cmp	r2, r3
 800c864:	d031      	beq.n	800c8ca <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	7d1b      	ldrb	r3, [r3, #20]
 800c86a:	b25b      	sxtb	r3, r3
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	da18      	bge.n	800c8a2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	7858      	ldrb	r0, [r3, #1]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a1a      	ldr	r2, [r3, #32]
 800c87e:	2301      	movs	r3, #1
 800c880:	f7fc fe02 	bl	8009488 <disk_write>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d004      	beq.n	800c894 <f_lseek+0x406>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	755a      	strb	r2, [r3, #21]
 800c890:	2301      	movs	r3, #1
 800c892:	e01c      	b.n	800c8ce <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	7d1b      	ldrb	r3, [r3, #20]
 800c898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	7858      	ldrb	r0, [r3, #1]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8b0:	f7fc fdca 	bl	8009448 <disk_read>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d004      	beq.n	800c8c4 <f_lseek+0x436>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	755a      	strb	r2, [r3, #21]
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e004      	b.n	800c8ce <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8c8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c8ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3740      	adds	r7, #64	; 0x40
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b086      	sub	sp, #24
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
 800c8de:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d101      	bne.n	800c8ea <f_opendir+0x14>
 800c8e6:	2309      	movs	r3, #9
 800c8e8:	e064      	b.n	800c9b4 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c8ee:	f107 010c 	add.w	r1, r7, #12
 800c8f2:	463b      	mov	r3, r7
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fe fd60 	bl	800b3bc <find_volume>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c900:	7dfb      	ldrb	r3, [r7, #23]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d14f      	bne.n	800c9a6 <f_opendir+0xd0>
		obj->fs = fs;
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	4619      	mov	r1, r3
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f7fe fc43 	bl	800b19c <follow_path>
 800c916:	4603      	mov	r3, r0
 800c918:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d13d      	bne.n	800c99c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c926:	b25b      	sxtb	r3, r3
 800c928:	2b00      	cmp	r3, #0
 800c92a:	db12      	blt.n	800c952 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	799b      	ldrb	r3, [r3, #6]
 800c930:	f003 0310 	and.w	r3, r3, #16
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00a      	beq.n	800c94e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	4619      	mov	r1, r3
 800c940:	4610      	mov	r0, r2
 800c942:	f7fd fe15 	bl	800a570 <ld_clust>
 800c946:	4602      	mov	r2, r0
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	609a      	str	r2, [r3, #8]
 800c94c:	e001      	b.n	800c952 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c94e:	2305      	movs	r3, #5
 800c950:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c952:	7dfb      	ldrb	r3, [r7, #23]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d121      	bne.n	800c99c <f_opendir+0xc6>
				obj->id = fs->id;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	88da      	ldrh	r2, [r3, #6]
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c960:	2100      	movs	r1, #0
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f7fd fc5e 	bl	800a224 <dir_sdi>
 800c968:	4603      	mov	r3, r0
 800c96a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c96c:	7dfb      	ldrb	r3, [r7, #23]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d114      	bne.n	800c99c <f_opendir+0xc6>
					if (obj->sclust) {
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d00d      	beq.n	800c996 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c97a:	2100      	movs	r1, #0
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f7fc ff3f 	bl	8009800 <inc_lock>
 800c982:	4602      	mov	r2, r0
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	691b      	ldr	r3, [r3, #16]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d105      	bne.n	800c99c <f_opendir+0xc6>
 800c990:	2312      	movs	r3, #18
 800c992:	75fb      	strb	r3, [r7, #23]
 800c994:	e002      	b.n	800c99c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	2200      	movs	r2, #0
 800c99a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c99c:	7dfb      	ldrb	r3, [r7, #23]
 800c99e:	2b04      	cmp	r3, #4
 800c9a0:	d101      	bne.n	800c9a6 <f_opendir+0xd0>
 800c9a2:	2305      	movs	r3, #5
 800c9a4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c9a6:	7dfb      	ldrb	r3, [r7, #23]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d002      	beq.n	800c9b2 <f_opendir+0xdc>
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3718      	adds	r7, #24
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f107 0208 	add.w	r2, r7, #8
 800c9ca:	4611      	mov	r1, r2
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7fe ff7b 	bl	800b8c8 <validate>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c9d6:	7bfb      	ldrb	r3, [r7, #15]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d110      	bne.n	800c9fe <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	691b      	ldr	r3, [r3, #16]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d006      	beq.n	800c9f2 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fc ff97 	bl	800991c <dec_lock>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800c9f2:	7bfb      	ldrb	r3, [r7, #15]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d102      	bne.n	800c9fe <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800c9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b090      	sub	sp, #64	; 0x40
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ca12:	f107 0108 	add.w	r1, r7, #8
 800ca16:	1d3b      	adds	r3, r7, #4
 800ca18:	2200      	movs	r2, #0
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fe fcce 	bl	800b3bc <find_volume>
 800ca20:	4603      	mov	r3, r0
 800ca22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800ca26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d11f      	bne.n	800ca6e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	f107 0308 	add.w	r3, r7, #8
 800ca34:	4611      	mov	r1, r2
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7fe fbb0 	bl	800b19c <follow_path>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800ca42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d111      	bne.n	800ca6e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800ca4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca4e:	b25b      	sxtb	r3, r3
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	da03      	bge.n	800ca5c <f_stat+0x54>
				res = FR_INVALID_NAME;
 800ca54:	2306      	movs	r3, #6
 800ca56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ca5a:	e008      	b.n	800ca6e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d005      	beq.n	800ca6e <f_stat+0x66>
 800ca62:	f107 0308 	add.w	r3, r7, #8
 800ca66:	6839      	ldr	r1, [r7, #0]
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7fe f901 	bl	800ac70 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800ca6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3740      	adds	r7, #64	; 0x40
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b088      	sub	sp, #32
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	60f8      	str	r0, [r7, #12]
 800ca82:	60b9      	str	r1, [r7, #8]
 800ca84:	607a      	str	r2, [r7, #4]
	int n = 0;
 800ca86:	2300      	movs	r3, #0
 800ca88:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ca8e:	e01b      	b.n	800cac8 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800ca90:	f107 0310 	add.w	r3, r7, #16
 800ca94:	f107 0114 	add.w	r1, r7, #20
 800ca98:	2201      	movs	r2, #1
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f7ff f95c 	bl	800bd58 <f_read>
		if (rc != 1) break;
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d116      	bne.n	800cad4 <f_gets+0x5a>
		c = s[0];
 800caa6:	7d3b      	ldrb	r3, [r7, #20]
 800caa8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800caaa:	7dfb      	ldrb	r3, [r7, #23]
 800caac:	2b0d      	cmp	r3, #13
 800caae:	d100      	bne.n	800cab2 <f_gets+0x38>
 800cab0:	e00a      	b.n	800cac8 <f_gets+0x4e>
		*p++ = c;
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	1c5a      	adds	r2, r3, #1
 800cab6:	61ba      	str	r2, [r7, #24]
 800cab8:	7dfa      	ldrb	r2, [r7, #23]
 800caba:	701a      	strb	r2, [r3, #0]
		n++;
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	3301      	adds	r3, #1
 800cac0:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
 800cac4:	2b0a      	cmp	r3, #10
 800cac6:	d007      	beq.n	800cad8 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	3b01      	subs	r3, #1
 800cacc:	69fa      	ldr	r2, [r7, #28]
 800cace:	429a      	cmp	r2, r3
 800cad0:	dbde      	blt.n	800ca90 <f_gets+0x16>
 800cad2:	e002      	b.n	800cada <f_gets+0x60>
		if (rc != 1) break;
 800cad4:	bf00      	nop
 800cad6:	e000      	b.n	800cada <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800cad8:	bf00      	nop
	}
	*p = 0;
 800cada:	69bb      	ldr	r3, [r7, #24]
 800cadc:	2200      	movs	r2, #0
 800cade:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d001      	beq.n	800caea <f_gets+0x70>
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	e000      	b.n	800caec <f_gets+0x72>
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	3720      	adds	r7, #32
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	460b      	mov	r3, r1
 800cafe:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800cb00:	78fb      	ldrb	r3, [r7, #3]
 800cb02:	2b0a      	cmp	r3, #10
 800cb04:	d103      	bne.n	800cb0e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800cb06:	210d      	movs	r1, #13
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f7ff fff3 	bl	800caf4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	db25      	blt.n	800cb66 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	1c5a      	adds	r2, r3, #1
 800cb1e:	60fa      	str	r2, [r7, #12]
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	4413      	add	r3, r2
 800cb24:	78fa      	ldrb	r2, [r7, #3]
 800cb26:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2b3c      	cmp	r3, #60	; 0x3c
 800cb2c:	dd12      	ble.n	800cb54 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6818      	ldr	r0, [r3, #0]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f103 010c 	add.w	r1, r3, #12
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	f107 0308 	add.w	r3, r7, #8
 800cb3e:	f7ff fa6a 	bl	800c016 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d101      	bne.n	800cb4e <putc_bfd+0x5a>
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	e001      	b.n	800cb52 <putc_bfd+0x5e>
 800cb4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb52:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	68fa      	ldr	r2, [r7, #12]
 800cb58:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	1c5a      	adds	r2, r3, #1
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	609a      	str	r2, [r3, #8]
 800cb64:	e000      	b.n	800cb68 <putc_bfd+0x74>
	if (i < 0) return;
 800cb66:	bf00      	nop
}
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b084      	sub	sp, #16
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	db16      	blt.n	800cbac <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6818      	ldr	r0, [r3, #0]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f103 010c 	add.w	r1, r3, #12
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	f107 030c 	add.w	r3, r7, #12
 800cb92:	f7ff fa40 	bl	800c016 <f_write>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d107      	bne.n	800cbac <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d102      	bne.n	800cbac <putc_flush+0x3e>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	e001      	b.n	800cbb0 <putc_flush+0x42>
	return EOF;
 800cbac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	683a      	ldr	r2, [r7, #0]
 800cbc6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	605a      	str	r2, [r3, #4]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	685a      	ldr	r2, [r3, #4]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	609a      	str	r2, [r3, #8]
}
 800cbd6:	bf00      	nop
 800cbd8:	370c      	adds	r7, #12
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr

0800cbe2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b096      	sub	sp, #88	; 0x58
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
 800cbea:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800cbec:	f107 030c 	add.w	r3, r7, #12
 800cbf0:	6839      	ldr	r1, [r7, #0]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7ff ffe0 	bl	800cbb8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800cbf8:	e009      	b.n	800cc0e <f_puts+0x2c>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	1c5a      	adds	r2, r3, #1
 800cbfe:	607a      	str	r2, [r7, #4]
 800cc00:	781a      	ldrb	r2, [r3, #0]
 800cc02:	f107 030c 	add.w	r3, r7, #12
 800cc06:	4611      	mov	r1, r2
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7ff ff73 	bl	800caf4 <putc_bfd>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d1f1      	bne.n	800cbfa <f_puts+0x18>
	return putc_flush(&pb);
 800cc16:	f107 030c 	add.w	r3, r7, #12
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7ff ffa7 	bl	800cb6e <putc_flush>
 800cc20:	4603      	mov	r3, r0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3758      	adds	r7, #88	; 0x58
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
	...

0800cc2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b087      	sub	sp, #28
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	4613      	mov	r3, r2
 800cc38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cc42:	4b1f      	ldr	r3, [pc, #124]	; (800ccc0 <FATFS_LinkDriverEx+0x94>)
 800cc44:	7a5b      	ldrb	r3, [r3, #9]
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d131      	bne.n	800ccb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc4c:	4b1c      	ldr	r3, [pc, #112]	; (800ccc0 <FATFS_LinkDriverEx+0x94>)
 800cc4e:	7a5b      	ldrb	r3, [r3, #9]
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	461a      	mov	r2, r3
 800cc54:	4b1a      	ldr	r3, [pc, #104]	; (800ccc0 <FATFS_LinkDriverEx+0x94>)
 800cc56:	2100      	movs	r1, #0
 800cc58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc5a:	4b19      	ldr	r3, [pc, #100]	; (800ccc0 <FATFS_LinkDriverEx+0x94>)
 800cc5c:	7a5b      	ldrb	r3, [r3, #9]
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	4a17      	ldr	r2, [pc, #92]	; (800ccc0 <FATFS_LinkDriverEx+0x94>)
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	4413      	add	r3, r2
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc6a:	4b15      	ldr	r3, [pc, #84]	; (800ccc0 <FATFS_LinkDriverEx+0x94>)
 800cc6c:	7a5b      	ldrb	r3, [r3, #9]
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	461a      	mov	r2, r3
 800cc72:	4b13      	ldr	r3, [pc, #76]	; (800ccc0 <FATFS_LinkDriverEx+0x94>)
 800cc74:	4413      	add	r3, r2
 800cc76:	79fa      	ldrb	r2, [r7, #7]
 800cc78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc7a:	4b11      	ldr	r3, [pc, #68]	; (800ccc0 <FATFS_LinkDriverEx+0x94>)
 800cc7c:	7a5b      	ldrb	r3, [r3, #9]
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	1c5a      	adds	r2, r3, #1
 800cc82:	b2d1      	uxtb	r1, r2
 800cc84:	4a0e      	ldr	r2, [pc, #56]	; (800ccc0 <FATFS_LinkDriverEx+0x94>)
 800cc86:	7251      	strb	r1, [r2, #9]
 800cc88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cc8a:	7dbb      	ldrb	r3, [r7, #22]
 800cc8c:	3330      	adds	r3, #48	; 0x30
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	3301      	adds	r3, #1
 800cc98:	223a      	movs	r2, #58	; 0x3a
 800cc9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	3302      	adds	r3, #2
 800cca0:	222f      	movs	r2, #47	; 0x2f
 800cca2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	3303      	adds	r3, #3
 800cca8:	2200      	movs	r2, #0
 800ccaa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ccac:	2300      	movs	r3, #0
 800ccae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ccb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	371c      	adds	r7, #28
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop
 800ccc0:	20002840 	.word	0x20002840

0800ccc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ccce:	2200      	movs	r2, #0
 800ccd0:	6839      	ldr	r1, [r7, #0]
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7ff ffaa 	bl	800cc2c <FATFS_LinkDriverEx>
 800ccd8:	4603      	mov	r3, r0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
	...

0800cce4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	4603      	mov	r3, r0
 800ccec:	6039      	str	r1, [r7, #0]
 800ccee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ccf0:	88fb      	ldrh	r3, [r7, #6]
 800ccf2:	2b7f      	cmp	r3, #127	; 0x7f
 800ccf4:	d802      	bhi.n	800ccfc <ff_convert+0x18>
		c = chr;
 800ccf6:	88fb      	ldrh	r3, [r7, #6]
 800ccf8:	81fb      	strh	r3, [r7, #14]
 800ccfa:	e025      	b.n	800cd48 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00b      	beq.n	800cd1a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cd02:	88fb      	ldrh	r3, [r7, #6]
 800cd04:	2bff      	cmp	r3, #255	; 0xff
 800cd06:	d805      	bhi.n	800cd14 <ff_convert+0x30>
 800cd08:	88fb      	ldrh	r3, [r7, #6]
 800cd0a:	3b80      	subs	r3, #128	; 0x80
 800cd0c:	4a12      	ldr	r2, [pc, #72]	; (800cd58 <ff_convert+0x74>)
 800cd0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd12:	e000      	b.n	800cd16 <ff_convert+0x32>
 800cd14:	2300      	movs	r3, #0
 800cd16:	81fb      	strh	r3, [r7, #14]
 800cd18:	e016      	b.n	800cd48 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	81fb      	strh	r3, [r7, #14]
 800cd1e:	e009      	b.n	800cd34 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cd20:	89fb      	ldrh	r3, [r7, #14]
 800cd22:	4a0d      	ldr	r2, [pc, #52]	; (800cd58 <ff_convert+0x74>)
 800cd24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd28:	88fa      	ldrh	r2, [r7, #6]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d006      	beq.n	800cd3c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cd2e:	89fb      	ldrh	r3, [r7, #14]
 800cd30:	3301      	adds	r3, #1
 800cd32:	81fb      	strh	r3, [r7, #14]
 800cd34:	89fb      	ldrh	r3, [r7, #14]
 800cd36:	2b7f      	cmp	r3, #127	; 0x7f
 800cd38:	d9f2      	bls.n	800cd20 <ff_convert+0x3c>
 800cd3a:	e000      	b.n	800cd3e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cd3c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cd3e:	89fb      	ldrh	r3, [r7, #14]
 800cd40:	3380      	adds	r3, #128	; 0x80
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cd48:	89fb      	ldrh	r3, [r7, #14]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3714      	adds	r7, #20
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	08017f18 	.word	0x08017f18

0800cd5c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b087      	sub	sp, #28
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	4603      	mov	r3, r0
 800cd64:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cd66:	88fb      	ldrh	r3, [r7, #6]
 800cd68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd6c:	d201      	bcs.n	800cd72 <ff_wtoupper+0x16>
 800cd6e:	4b3e      	ldr	r3, [pc, #248]	; (800ce68 <ff_wtoupper+0x10c>)
 800cd70:	e000      	b.n	800cd74 <ff_wtoupper+0x18>
 800cd72:	4b3e      	ldr	r3, [pc, #248]	; (800ce6c <ff_wtoupper+0x110>)
 800cd74:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	1c9a      	adds	r2, r3, #2
 800cd7a:	617a      	str	r2, [r7, #20]
 800cd7c:	881b      	ldrh	r3, [r3, #0]
 800cd7e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cd80:	8a7b      	ldrh	r3, [r7, #18]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d068      	beq.n	800ce58 <ff_wtoupper+0xfc>
 800cd86:	88fa      	ldrh	r2, [r7, #6]
 800cd88:	8a7b      	ldrh	r3, [r7, #18]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d364      	bcc.n	800ce58 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	1c9a      	adds	r2, r3, #2
 800cd92:	617a      	str	r2, [r7, #20]
 800cd94:	881b      	ldrh	r3, [r3, #0]
 800cd96:	823b      	strh	r3, [r7, #16]
 800cd98:	8a3b      	ldrh	r3, [r7, #16]
 800cd9a:	0a1b      	lsrs	r3, r3, #8
 800cd9c:	81fb      	strh	r3, [r7, #14]
 800cd9e:	8a3b      	ldrh	r3, [r7, #16]
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cda4:	88fa      	ldrh	r2, [r7, #6]
 800cda6:	8a79      	ldrh	r1, [r7, #18]
 800cda8:	8a3b      	ldrh	r3, [r7, #16]
 800cdaa:	440b      	add	r3, r1
 800cdac:	429a      	cmp	r2, r3
 800cdae:	da49      	bge.n	800ce44 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cdb0:	89fb      	ldrh	r3, [r7, #14]
 800cdb2:	2b08      	cmp	r3, #8
 800cdb4:	d84f      	bhi.n	800ce56 <ff_wtoupper+0xfa>
 800cdb6:	a201      	add	r2, pc, #4	; (adr r2, 800cdbc <ff_wtoupper+0x60>)
 800cdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdbc:	0800cde1 	.word	0x0800cde1
 800cdc0:	0800cdf3 	.word	0x0800cdf3
 800cdc4:	0800ce09 	.word	0x0800ce09
 800cdc8:	0800ce11 	.word	0x0800ce11
 800cdcc:	0800ce19 	.word	0x0800ce19
 800cdd0:	0800ce21 	.word	0x0800ce21
 800cdd4:	0800ce29 	.word	0x0800ce29
 800cdd8:	0800ce31 	.word	0x0800ce31
 800cddc:	0800ce39 	.word	0x0800ce39
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cde0:	88fa      	ldrh	r2, [r7, #6]
 800cde2:	8a7b      	ldrh	r3, [r7, #18]
 800cde4:	1ad3      	subs	r3, r2, r3
 800cde6:	005b      	lsls	r3, r3, #1
 800cde8:	697a      	ldr	r2, [r7, #20]
 800cdea:	4413      	add	r3, r2
 800cdec:	881b      	ldrh	r3, [r3, #0]
 800cdee:	80fb      	strh	r3, [r7, #6]
 800cdf0:	e027      	b.n	800ce42 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cdf2:	88fa      	ldrh	r2, [r7, #6]
 800cdf4:	8a7b      	ldrh	r3, [r7, #18]
 800cdf6:	1ad3      	subs	r3, r2, r3
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	88fa      	ldrh	r2, [r7, #6]
 800ce02:	1ad3      	subs	r3, r2, r3
 800ce04:	80fb      	strh	r3, [r7, #6]
 800ce06:	e01c      	b.n	800ce42 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ce08:	88fb      	ldrh	r3, [r7, #6]
 800ce0a:	3b10      	subs	r3, #16
 800ce0c:	80fb      	strh	r3, [r7, #6]
 800ce0e:	e018      	b.n	800ce42 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ce10:	88fb      	ldrh	r3, [r7, #6]
 800ce12:	3b20      	subs	r3, #32
 800ce14:	80fb      	strh	r3, [r7, #6]
 800ce16:	e014      	b.n	800ce42 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ce18:	88fb      	ldrh	r3, [r7, #6]
 800ce1a:	3b30      	subs	r3, #48	; 0x30
 800ce1c:	80fb      	strh	r3, [r7, #6]
 800ce1e:	e010      	b.n	800ce42 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ce20:	88fb      	ldrh	r3, [r7, #6]
 800ce22:	3b1a      	subs	r3, #26
 800ce24:	80fb      	strh	r3, [r7, #6]
 800ce26:	e00c      	b.n	800ce42 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ce28:	88fb      	ldrh	r3, [r7, #6]
 800ce2a:	3308      	adds	r3, #8
 800ce2c:	80fb      	strh	r3, [r7, #6]
 800ce2e:	e008      	b.n	800ce42 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ce30:	88fb      	ldrh	r3, [r7, #6]
 800ce32:	3b50      	subs	r3, #80	; 0x50
 800ce34:	80fb      	strh	r3, [r7, #6]
 800ce36:	e004      	b.n	800ce42 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ce38:	88fb      	ldrh	r3, [r7, #6]
 800ce3a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ce3e:	80fb      	strh	r3, [r7, #6]
 800ce40:	bf00      	nop
			}
			break;
 800ce42:	e008      	b.n	800ce56 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ce44:	89fb      	ldrh	r3, [r7, #14]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d195      	bne.n	800cd76 <ff_wtoupper+0x1a>
 800ce4a:	8a3b      	ldrh	r3, [r7, #16]
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	697a      	ldr	r2, [r7, #20]
 800ce50:	4413      	add	r3, r2
 800ce52:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ce54:	e78f      	b.n	800cd76 <ff_wtoupper+0x1a>
			break;
 800ce56:	bf00      	nop
	}

	return chr;
 800ce58:	88fb      	ldrh	r3, [r7, #6]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	371c      	adds	r7, #28
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce64:	4770      	bx	lr
 800ce66:	bf00      	nop
 800ce68:	08018018 	.word	0x08018018
 800ce6c:	0801820c 	.word	0x0801820c

0800ce70 <exit>:
 800ce70:	b508      	push	{r3, lr}
 800ce72:	4b06      	ldr	r3, [pc, #24]	; (800ce8c <exit+0x1c>)
 800ce74:	4604      	mov	r4, r0
 800ce76:	b113      	cbz	r3, 800ce7e <exit+0xe>
 800ce78:	2100      	movs	r1, #0
 800ce7a:	f3af 8000 	nop.w
 800ce7e:	4b04      	ldr	r3, [pc, #16]	; (800ce90 <exit+0x20>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	b103      	cbz	r3, 800ce86 <exit+0x16>
 800ce84:	4798      	blx	r3
 800ce86:	4620      	mov	r0, r4
 800ce88:	f7f6 fc68 	bl	800375c <_exit>
 800ce8c:	00000000 	.word	0x00000000
 800ce90:	2000298c 	.word	0x2000298c

0800ce94 <malloc>:
 800ce94:	4b02      	ldr	r3, [pc, #8]	; (800cea0 <malloc+0xc>)
 800ce96:	4601      	mov	r1, r0
 800ce98:	6818      	ldr	r0, [r3, #0]
 800ce9a:	f000 b823 	b.w	800cee4 <_malloc_r>
 800ce9e:	bf00      	nop
 800cea0:	20000070 	.word	0x20000070

0800cea4 <sbrk_aligned>:
 800cea4:	b570      	push	{r4, r5, r6, lr}
 800cea6:	4e0e      	ldr	r6, [pc, #56]	; (800cee0 <sbrk_aligned+0x3c>)
 800cea8:	460c      	mov	r4, r1
 800ceaa:	6831      	ldr	r1, [r6, #0]
 800ceac:	4605      	mov	r5, r0
 800ceae:	b911      	cbnz	r1, 800ceb6 <sbrk_aligned+0x12>
 800ceb0:	f000 fea8 	bl	800dc04 <_sbrk_r>
 800ceb4:	6030      	str	r0, [r6, #0]
 800ceb6:	4621      	mov	r1, r4
 800ceb8:	4628      	mov	r0, r5
 800ceba:	f000 fea3 	bl	800dc04 <_sbrk_r>
 800cebe:	1c43      	adds	r3, r0, #1
 800cec0:	d00a      	beq.n	800ced8 <sbrk_aligned+0x34>
 800cec2:	1cc4      	adds	r4, r0, #3
 800cec4:	f024 0403 	bic.w	r4, r4, #3
 800cec8:	42a0      	cmp	r0, r4
 800ceca:	d007      	beq.n	800cedc <sbrk_aligned+0x38>
 800cecc:	1a21      	subs	r1, r4, r0
 800cece:	4628      	mov	r0, r5
 800ced0:	f000 fe98 	bl	800dc04 <_sbrk_r>
 800ced4:	3001      	adds	r0, #1
 800ced6:	d101      	bne.n	800cedc <sbrk_aligned+0x38>
 800ced8:	f04f 34ff 	mov.w	r4, #4294967295
 800cedc:	4620      	mov	r0, r4
 800cede:	bd70      	pop	{r4, r5, r6, pc}
 800cee0:	20002850 	.word	0x20002850

0800cee4 <_malloc_r>:
 800cee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cee8:	1ccd      	adds	r5, r1, #3
 800ceea:	f025 0503 	bic.w	r5, r5, #3
 800ceee:	3508      	adds	r5, #8
 800cef0:	2d0c      	cmp	r5, #12
 800cef2:	bf38      	it	cc
 800cef4:	250c      	movcc	r5, #12
 800cef6:	2d00      	cmp	r5, #0
 800cef8:	4607      	mov	r7, r0
 800cefa:	db01      	blt.n	800cf00 <_malloc_r+0x1c>
 800cefc:	42a9      	cmp	r1, r5
 800cefe:	d905      	bls.n	800cf0c <_malloc_r+0x28>
 800cf00:	230c      	movs	r3, #12
 800cf02:	603b      	str	r3, [r7, #0]
 800cf04:	2600      	movs	r6, #0
 800cf06:	4630      	mov	r0, r6
 800cf08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cfe0 <_malloc_r+0xfc>
 800cf10:	f000 f868 	bl	800cfe4 <__malloc_lock>
 800cf14:	f8d8 3000 	ldr.w	r3, [r8]
 800cf18:	461c      	mov	r4, r3
 800cf1a:	bb5c      	cbnz	r4, 800cf74 <_malloc_r+0x90>
 800cf1c:	4629      	mov	r1, r5
 800cf1e:	4638      	mov	r0, r7
 800cf20:	f7ff ffc0 	bl	800cea4 <sbrk_aligned>
 800cf24:	1c43      	adds	r3, r0, #1
 800cf26:	4604      	mov	r4, r0
 800cf28:	d155      	bne.n	800cfd6 <_malloc_r+0xf2>
 800cf2a:	f8d8 4000 	ldr.w	r4, [r8]
 800cf2e:	4626      	mov	r6, r4
 800cf30:	2e00      	cmp	r6, #0
 800cf32:	d145      	bne.n	800cfc0 <_malloc_r+0xdc>
 800cf34:	2c00      	cmp	r4, #0
 800cf36:	d048      	beq.n	800cfca <_malloc_r+0xe6>
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	eb04 0903 	add.w	r9, r4, r3
 800cf42:	f000 fe5f 	bl	800dc04 <_sbrk_r>
 800cf46:	4581      	cmp	r9, r0
 800cf48:	d13f      	bne.n	800cfca <_malloc_r+0xe6>
 800cf4a:	6821      	ldr	r1, [r4, #0]
 800cf4c:	1a6d      	subs	r5, r5, r1
 800cf4e:	4629      	mov	r1, r5
 800cf50:	4638      	mov	r0, r7
 800cf52:	f7ff ffa7 	bl	800cea4 <sbrk_aligned>
 800cf56:	3001      	adds	r0, #1
 800cf58:	d037      	beq.n	800cfca <_malloc_r+0xe6>
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	442b      	add	r3, r5
 800cf5e:	6023      	str	r3, [r4, #0]
 800cf60:	f8d8 3000 	ldr.w	r3, [r8]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d038      	beq.n	800cfda <_malloc_r+0xf6>
 800cf68:	685a      	ldr	r2, [r3, #4]
 800cf6a:	42a2      	cmp	r2, r4
 800cf6c:	d12b      	bne.n	800cfc6 <_malloc_r+0xe2>
 800cf6e:	2200      	movs	r2, #0
 800cf70:	605a      	str	r2, [r3, #4]
 800cf72:	e00f      	b.n	800cf94 <_malloc_r+0xb0>
 800cf74:	6822      	ldr	r2, [r4, #0]
 800cf76:	1b52      	subs	r2, r2, r5
 800cf78:	d41f      	bmi.n	800cfba <_malloc_r+0xd6>
 800cf7a:	2a0b      	cmp	r2, #11
 800cf7c:	d917      	bls.n	800cfae <_malloc_r+0xca>
 800cf7e:	1961      	adds	r1, r4, r5
 800cf80:	42a3      	cmp	r3, r4
 800cf82:	6025      	str	r5, [r4, #0]
 800cf84:	bf18      	it	ne
 800cf86:	6059      	strne	r1, [r3, #4]
 800cf88:	6863      	ldr	r3, [r4, #4]
 800cf8a:	bf08      	it	eq
 800cf8c:	f8c8 1000 	streq.w	r1, [r8]
 800cf90:	5162      	str	r2, [r4, r5]
 800cf92:	604b      	str	r3, [r1, #4]
 800cf94:	4638      	mov	r0, r7
 800cf96:	f104 060b 	add.w	r6, r4, #11
 800cf9a:	f000 f829 	bl	800cff0 <__malloc_unlock>
 800cf9e:	f026 0607 	bic.w	r6, r6, #7
 800cfa2:	1d23      	adds	r3, r4, #4
 800cfa4:	1af2      	subs	r2, r6, r3
 800cfa6:	d0ae      	beq.n	800cf06 <_malloc_r+0x22>
 800cfa8:	1b9b      	subs	r3, r3, r6
 800cfaa:	50a3      	str	r3, [r4, r2]
 800cfac:	e7ab      	b.n	800cf06 <_malloc_r+0x22>
 800cfae:	42a3      	cmp	r3, r4
 800cfb0:	6862      	ldr	r2, [r4, #4]
 800cfb2:	d1dd      	bne.n	800cf70 <_malloc_r+0x8c>
 800cfb4:	f8c8 2000 	str.w	r2, [r8]
 800cfb8:	e7ec      	b.n	800cf94 <_malloc_r+0xb0>
 800cfba:	4623      	mov	r3, r4
 800cfbc:	6864      	ldr	r4, [r4, #4]
 800cfbe:	e7ac      	b.n	800cf1a <_malloc_r+0x36>
 800cfc0:	4634      	mov	r4, r6
 800cfc2:	6876      	ldr	r6, [r6, #4]
 800cfc4:	e7b4      	b.n	800cf30 <_malloc_r+0x4c>
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	e7cc      	b.n	800cf64 <_malloc_r+0x80>
 800cfca:	230c      	movs	r3, #12
 800cfcc:	603b      	str	r3, [r7, #0]
 800cfce:	4638      	mov	r0, r7
 800cfd0:	f000 f80e 	bl	800cff0 <__malloc_unlock>
 800cfd4:	e797      	b.n	800cf06 <_malloc_r+0x22>
 800cfd6:	6025      	str	r5, [r4, #0]
 800cfd8:	e7dc      	b.n	800cf94 <_malloc_r+0xb0>
 800cfda:	605b      	str	r3, [r3, #4]
 800cfdc:	deff      	udf	#255	; 0xff
 800cfde:	bf00      	nop
 800cfe0:	2000284c 	.word	0x2000284c

0800cfe4 <__malloc_lock>:
 800cfe4:	4801      	ldr	r0, [pc, #4]	; (800cfec <__malloc_lock+0x8>)
 800cfe6:	f000 be5a 	b.w	800dc9e <__retarget_lock_acquire_recursive>
 800cfea:	bf00      	nop
 800cfec:	20002994 	.word	0x20002994

0800cff0 <__malloc_unlock>:
 800cff0:	4801      	ldr	r0, [pc, #4]	; (800cff8 <__malloc_unlock+0x8>)
 800cff2:	f000 be55 	b.w	800dca0 <__retarget_lock_release_recursive>
 800cff6:	bf00      	nop
 800cff8:	20002994 	.word	0x20002994

0800cffc <__cvt>:
 800cffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d000:	ec55 4b10 	vmov	r4, r5, d0
 800d004:	2d00      	cmp	r5, #0
 800d006:	460e      	mov	r6, r1
 800d008:	4619      	mov	r1, r3
 800d00a:	462b      	mov	r3, r5
 800d00c:	bfbb      	ittet	lt
 800d00e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d012:	461d      	movlt	r5, r3
 800d014:	2300      	movge	r3, #0
 800d016:	232d      	movlt	r3, #45	; 0x2d
 800d018:	700b      	strb	r3, [r1, #0]
 800d01a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d01c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d020:	4691      	mov	r9, r2
 800d022:	f023 0820 	bic.w	r8, r3, #32
 800d026:	bfbc      	itt	lt
 800d028:	4622      	movlt	r2, r4
 800d02a:	4614      	movlt	r4, r2
 800d02c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d030:	d005      	beq.n	800d03e <__cvt+0x42>
 800d032:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d036:	d100      	bne.n	800d03a <__cvt+0x3e>
 800d038:	3601      	adds	r6, #1
 800d03a:	2102      	movs	r1, #2
 800d03c:	e000      	b.n	800d040 <__cvt+0x44>
 800d03e:	2103      	movs	r1, #3
 800d040:	ab03      	add	r3, sp, #12
 800d042:	9301      	str	r3, [sp, #4]
 800d044:	ab02      	add	r3, sp, #8
 800d046:	9300      	str	r3, [sp, #0]
 800d048:	ec45 4b10 	vmov	d0, r4, r5
 800d04c:	4653      	mov	r3, sl
 800d04e:	4632      	mov	r2, r6
 800d050:	f000 feb2 	bl	800ddb8 <_dtoa_r>
 800d054:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d058:	4607      	mov	r7, r0
 800d05a:	d102      	bne.n	800d062 <__cvt+0x66>
 800d05c:	f019 0f01 	tst.w	r9, #1
 800d060:	d022      	beq.n	800d0a8 <__cvt+0xac>
 800d062:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d066:	eb07 0906 	add.w	r9, r7, r6
 800d06a:	d110      	bne.n	800d08e <__cvt+0x92>
 800d06c:	783b      	ldrb	r3, [r7, #0]
 800d06e:	2b30      	cmp	r3, #48	; 0x30
 800d070:	d10a      	bne.n	800d088 <__cvt+0x8c>
 800d072:	2200      	movs	r2, #0
 800d074:	2300      	movs	r3, #0
 800d076:	4620      	mov	r0, r4
 800d078:	4629      	mov	r1, r5
 800d07a:	f7f3 fd3d 	bl	8000af8 <__aeabi_dcmpeq>
 800d07e:	b918      	cbnz	r0, 800d088 <__cvt+0x8c>
 800d080:	f1c6 0601 	rsb	r6, r6, #1
 800d084:	f8ca 6000 	str.w	r6, [sl]
 800d088:	f8da 3000 	ldr.w	r3, [sl]
 800d08c:	4499      	add	r9, r3
 800d08e:	2200      	movs	r2, #0
 800d090:	2300      	movs	r3, #0
 800d092:	4620      	mov	r0, r4
 800d094:	4629      	mov	r1, r5
 800d096:	f7f3 fd2f 	bl	8000af8 <__aeabi_dcmpeq>
 800d09a:	b108      	cbz	r0, 800d0a0 <__cvt+0xa4>
 800d09c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d0a0:	2230      	movs	r2, #48	; 0x30
 800d0a2:	9b03      	ldr	r3, [sp, #12]
 800d0a4:	454b      	cmp	r3, r9
 800d0a6:	d307      	bcc.n	800d0b8 <__cvt+0xbc>
 800d0a8:	9b03      	ldr	r3, [sp, #12]
 800d0aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0ac:	1bdb      	subs	r3, r3, r7
 800d0ae:	4638      	mov	r0, r7
 800d0b0:	6013      	str	r3, [r2, #0]
 800d0b2:	b004      	add	sp, #16
 800d0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b8:	1c59      	adds	r1, r3, #1
 800d0ba:	9103      	str	r1, [sp, #12]
 800d0bc:	701a      	strb	r2, [r3, #0]
 800d0be:	e7f0      	b.n	800d0a2 <__cvt+0xa6>

0800d0c0 <__exponent>:
 800d0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2900      	cmp	r1, #0
 800d0c6:	bfb8      	it	lt
 800d0c8:	4249      	neglt	r1, r1
 800d0ca:	f803 2b02 	strb.w	r2, [r3], #2
 800d0ce:	bfb4      	ite	lt
 800d0d0:	222d      	movlt	r2, #45	; 0x2d
 800d0d2:	222b      	movge	r2, #43	; 0x2b
 800d0d4:	2909      	cmp	r1, #9
 800d0d6:	7042      	strb	r2, [r0, #1]
 800d0d8:	dd2a      	ble.n	800d130 <__exponent+0x70>
 800d0da:	f10d 0207 	add.w	r2, sp, #7
 800d0de:	4617      	mov	r7, r2
 800d0e0:	260a      	movs	r6, #10
 800d0e2:	4694      	mov	ip, r2
 800d0e4:	fb91 f5f6 	sdiv	r5, r1, r6
 800d0e8:	fb06 1415 	mls	r4, r6, r5, r1
 800d0ec:	3430      	adds	r4, #48	; 0x30
 800d0ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d0f2:	460c      	mov	r4, r1
 800d0f4:	2c63      	cmp	r4, #99	; 0x63
 800d0f6:	f102 32ff 	add.w	r2, r2, #4294967295
 800d0fa:	4629      	mov	r1, r5
 800d0fc:	dcf1      	bgt.n	800d0e2 <__exponent+0x22>
 800d0fe:	3130      	adds	r1, #48	; 0x30
 800d100:	f1ac 0402 	sub.w	r4, ip, #2
 800d104:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d108:	1c41      	adds	r1, r0, #1
 800d10a:	4622      	mov	r2, r4
 800d10c:	42ba      	cmp	r2, r7
 800d10e:	d30a      	bcc.n	800d126 <__exponent+0x66>
 800d110:	f10d 0209 	add.w	r2, sp, #9
 800d114:	eba2 020c 	sub.w	r2, r2, ip
 800d118:	42bc      	cmp	r4, r7
 800d11a:	bf88      	it	hi
 800d11c:	2200      	movhi	r2, #0
 800d11e:	4413      	add	r3, r2
 800d120:	1a18      	subs	r0, r3, r0
 800d122:	b003      	add	sp, #12
 800d124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d126:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d12a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d12e:	e7ed      	b.n	800d10c <__exponent+0x4c>
 800d130:	2330      	movs	r3, #48	; 0x30
 800d132:	3130      	adds	r1, #48	; 0x30
 800d134:	7083      	strb	r3, [r0, #2]
 800d136:	70c1      	strb	r1, [r0, #3]
 800d138:	1d03      	adds	r3, r0, #4
 800d13a:	e7f1      	b.n	800d120 <__exponent+0x60>

0800d13c <_printf_float>:
 800d13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d140:	ed2d 8b02 	vpush	{d8}
 800d144:	b08d      	sub	sp, #52	; 0x34
 800d146:	460c      	mov	r4, r1
 800d148:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d14c:	4616      	mov	r6, r2
 800d14e:	461f      	mov	r7, r3
 800d150:	4605      	mov	r5, r0
 800d152:	f000 fd1f 	bl	800db94 <_localeconv_r>
 800d156:	f8d0 a000 	ldr.w	sl, [r0]
 800d15a:	4650      	mov	r0, sl
 800d15c:	f7f3 f8a0 	bl	80002a0 <strlen>
 800d160:	2300      	movs	r3, #0
 800d162:	930a      	str	r3, [sp, #40]	; 0x28
 800d164:	6823      	ldr	r3, [r4, #0]
 800d166:	9305      	str	r3, [sp, #20]
 800d168:	f8d8 3000 	ldr.w	r3, [r8]
 800d16c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d170:	3307      	adds	r3, #7
 800d172:	f023 0307 	bic.w	r3, r3, #7
 800d176:	f103 0208 	add.w	r2, r3, #8
 800d17a:	f8c8 2000 	str.w	r2, [r8]
 800d17e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d182:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d186:	9307      	str	r3, [sp, #28]
 800d188:	f8cd 8018 	str.w	r8, [sp, #24]
 800d18c:	ee08 0a10 	vmov	s16, r0
 800d190:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d194:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d198:	4b9e      	ldr	r3, [pc, #632]	; (800d414 <_printf_float+0x2d8>)
 800d19a:	f04f 32ff 	mov.w	r2, #4294967295
 800d19e:	f7f3 fcdd 	bl	8000b5c <__aeabi_dcmpun>
 800d1a2:	bb88      	cbnz	r0, 800d208 <_printf_float+0xcc>
 800d1a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1a8:	4b9a      	ldr	r3, [pc, #616]	; (800d414 <_printf_float+0x2d8>)
 800d1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ae:	f7f3 fcb7 	bl	8000b20 <__aeabi_dcmple>
 800d1b2:	bb48      	cbnz	r0, 800d208 <_printf_float+0xcc>
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	4640      	mov	r0, r8
 800d1ba:	4649      	mov	r1, r9
 800d1bc:	f7f3 fca6 	bl	8000b0c <__aeabi_dcmplt>
 800d1c0:	b110      	cbz	r0, 800d1c8 <_printf_float+0x8c>
 800d1c2:	232d      	movs	r3, #45	; 0x2d
 800d1c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1c8:	4a93      	ldr	r2, [pc, #588]	; (800d418 <_printf_float+0x2dc>)
 800d1ca:	4b94      	ldr	r3, [pc, #592]	; (800d41c <_printf_float+0x2e0>)
 800d1cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d1d0:	bf94      	ite	ls
 800d1d2:	4690      	movls	r8, r2
 800d1d4:	4698      	movhi	r8, r3
 800d1d6:	2303      	movs	r3, #3
 800d1d8:	6123      	str	r3, [r4, #16]
 800d1da:	9b05      	ldr	r3, [sp, #20]
 800d1dc:	f023 0304 	bic.w	r3, r3, #4
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	f04f 0900 	mov.w	r9, #0
 800d1e6:	9700      	str	r7, [sp, #0]
 800d1e8:	4633      	mov	r3, r6
 800d1ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800d1ec:	4621      	mov	r1, r4
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	f000 f9da 	bl	800d5a8 <_printf_common>
 800d1f4:	3001      	adds	r0, #1
 800d1f6:	f040 8090 	bne.w	800d31a <_printf_float+0x1de>
 800d1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d1fe:	b00d      	add	sp, #52	; 0x34
 800d200:	ecbd 8b02 	vpop	{d8}
 800d204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d208:	4642      	mov	r2, r8
 800d20a:	464b      	mov	r3, r9
 800d20c:	4640      	mov	r0, r8
 800d20e:	4649      	mov	r1, r9
 800d210:	f7f3 fca4 	bl	8000b5c <__aeabi_dcmpun>
 800d214:	b140      	cbz	r0, 800d228 <_printf_float+0xec>
 800d216:	464b      	mov	r3, r9
 800d218:	2b00      	cmp	r3, #0
 800d21a:	bfbc      	itt	lt
 800d21c:	232d      	movlt	r3, #45	; 0x2d
 800d21e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d222:	4a7f      	ldr	r2, [pc, #508]	; (800d420 <_printf_float+0x2e4>)
 800d224:	4b7f      	ldr	r3, [pc, #508]	; (800d424 <_printf_float+0x2e8>)
 800d226:	e7d1      	b.n	800d1cc <_printf_float+0x90>
 800d228:	6863      	ldr	r3, [r4, #4]
 800d22a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d22e:	9206      	str	r2, [sp, #24]
 800d230:	1c5a      	adds	r2, r3, #1
 800d232:	d13f      	bne.n	800d2b4 <_printf_float+0x178>
 800d234:	2306      	movs	r3, #6
 800d236:	6063      	str	r3, [r4, #4]
 800d238:	9b05      	ldr	r3, [sp, #20]
 800d23a:	6861      	ldr	r1, [r4, #4]
 800d23c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d240:	2300      	movs	r3, #0
 800d242:	9303      	str	r3, [sp, #12]
 800d244:	ab0a      	add	r3, sp, #40	; 0x28
 800d246:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d24a:	ab09      	add	r3, sp, #36	; 0x24
 800d24c:	ec49 8b10 	vmov	d0, r8, r9
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	6022      	str	r2, [r4, #0]
 800d254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d258:	4628      	mov	r0, r5
 800d25a:	f7ff fecf 	bl	800cffc <__cvt>
 800d25e:	9b06      	ldr	r3, [sp, #24]
 800d260:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d262:	2b47      	cmp	r3, #71	; 0x47
 800d264:	4680      	mov	r8, r0
 800d266:	d108      	bne.n	800d27a <_printf_float+0x13e>
 800d268:	1cc8      	adds	r0, r1, #3
 800d26a:	db02      	blt.n	800d272 <_printf_float+0x136>
 800d26c:	6863      	ldr	r3, [r4, #4]
 800d26e:	4299      	cmp	r1, r3
 800d270:	dd41      	ble.n	800d2f6 <_printf_float+0x1ba>
 800d272:	f1ab 0302 	sub.w	r3, fp, #2
 800d276:	fa5f fb83 	uxtb.w	fp, r3
 800d27a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d27e:	d820      	bhi.n	800d2c2 <_printf_float+0x186>
 800d280:	3901      	subs	r1, #1
 800d282:	465a      	mov	r2, fp
 800d284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d288:	9109      	str	r1, [sp, #36]	; 0x24
 800d28a:	f7ff ff19 	bl	800d0c0 <__exponent>
 800d28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d290:	1813      	adds	r3, r2, r0
 800d292:	2a01      	cmp	r2, #1
 800d294:	4681      	mov	r9, r0
 800d296:	6123      	str	r3, [r4, #16]
 800d298:	dc02      	bgt.n	800d2a0 <_printf_float+0x164>
 800d29a:	6822      	ldr	r2, [r4, #0]
 800d29c:	07d2      	lsls	r2, r2, #31
 800d29e:	d501      	bpl.n	800d2a4 <_printf_float+0x168>
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	6123      	str	r3, [r4, #16]
 800d2a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d09c      	beq.n	800d1e6 <_printf_float+0xaa>
 800d2ac:	232d      	movs	r3, #45	; 0x2d
 800d2ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2b2:	e798      	b.n	800d1e6 <_printf_float+0xaa>
 800d2b4:	9a06      	ldr	r2, [sp, #24]
 800d2b6:	2a47      	cmp	r2, #71	; 0x47
 800d2b8:	d1be      	bne.n	800d238 <_printf_float+0xfc>
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1bc      	bne.n	800d238 <_printf_float+0xfc>
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e7b9      	b.n	800d236 <_printf_float+0xfa>
 800d2c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d2c6:	d118      	bne.n	800d2fa <_printf_float+0x1be>
 800d2c8:	2900      	cmp	r1, #0
 800d2ca:	6863      	ldr	r3, [r4, #4]
 800d2cc:	dd0b      	ble.n	800d2e6 <_printf_float+0x1aa>
 800d2ce:	6121      	str	r1, [r4, #16]
 800d2d0:	b913      	cbnz	r3, 800d2d8 <_printf_float+0x19c>
 800d2d2:	6822      	ldr	r2, [r4, #0]
 800d2d4:	07d0      	lsls	r0, r2, #31
 800d2d6:	d502      	bpl.n	800d2de <_printf_float+0x1a2>
 800d2d8:	3301      	adds	r3, #1
 800d2da:	440b      	add	r3, r1
 800d2dc:	6123      	str	r3, [r4, #16]
 800d2de:	65a1      	str	r1, [r4, #88]	; 0x58
 800d2e0:	f04f 0900 	mov.w	r9, #0
 800d2e4:	e7de      	b.n	800d2a4 <_printf_float+0x168>
 800d2e6:	b913      	cbnz	r3, 800d2ee <_printf_float+0x1b2>
 800d2e8:	6822      	ldr	r2, [r4, #0]
 800d2ea:	07d2      	lsls	r2, r2, #31
 800d2ec:	d501      	bpl.n	800d2f2 <_printf_float+0x1b6>
 800d2ee:	3302      	adds	r3, #2
 800d2f0:	e7f4      	b.n	800d2dc <_printf_float+0x1a0>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e7f2      	b.n	800d2dc <_printf_float+0x1a0>
 800d2f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2fc:	4299      	cmp	r1, r3
 800d2fe:	db05      	blt.n	800d30c <_printf_float+0x1d0>
 800d300:	6823      	ldr	r3, [r4, #0]
 800d302:	6121      	str	r1, [r4, #16]
 800d304:	07d8      	lsls	r0, r3, #31
 800d306:	d5ea      	bpl.n	800d2de <_printf_float+0x1a2>
 800d308:	1c4b      	adds	r3, r1, #1
 800d30a:	e7e7      	b.n	800d2dc <_printf_float+0x1a0>
 800d30c:	2900      	cmp	r1, #0
 800d30e:	bfd4      	ite	le
 800d310:	f1c1 0202 	rsble	r2, r1, #2
 800d314:	2201      	movgt	r2, #1
 800d316:	4413      	add	r3, r2
 800d318:	e7e0      	b.n	800d2dc <_printf_float+0x1a0>
 800d31a:	6823      	ldr	r3, [r4, #0]
 800d31c:	055a      	lsls	r2, r3, #21
 800d31e:	d407      	bmi.n	800d330 <_printf_float+0x1f4>
 800d320:	6923      	ldr	r3, [r4, #16]
 800d322:	4642      	mov	r2, r8
 800d324:	4631      	mov	r1, r6
 800d326:	4628      	mov	r0, r5
 800d328:	47b8      	blx	r7
 800d32a:	3001      	adds	r0, #1
 800d32c:	d12c      	bne.n	800d388 <_printf_float+0x24c>
 800d32e:	e764      	b.n	800d1fa <_printf_float+0xbe>
 800d330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d334:	f240 80e0 	bls.w	800d4f8 <_printf_float+0x3bc>
 800d338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d33c:	2200      	movs	r2, #0
 800d33e:	2300      	movs	r3, #0
 800d340:	f7f3 fbda 	bl	8000af8 <__aeabi_dcmpeq>
 800d344:	2800      	cmp	r0, #0
 800d346:	d034      	beq.n	800d3b2 <_printf_float+0x276>
 800d348:	4a37      	ldr	r2, [pc, #220]	; (800d428 <_printf_float+0x2ec>)
 800d34a:	2301      	movs	r3, #1
 800d34c:	4631      	mov	r1, r6
 800d34e:	4628      	mov	r0, r5
 800d350:	47b8      	blx	r7
 800d352:	3001      	adds	r0, #1
 800d354:	f43f af51 	beq.w	800d1fa <_printf_float+0xbe>
 800d358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d35c:	429a      	cmp	r2, r3
 800d35e:	db02      	blt.n	800d366 <_printf_float+0x22a>
 800d360:	6823      	ldr	r3, [r4, #0]
 800d362:	07d8      	lsls	r0, r3, #31
 800d364:	d510      	bpl.n	800d388 <_printf_float+0x24c>
 800d366:	ee18 3a10 	vmov	r3, s16
 800d36a:	4652      	mov	r2, sl
 800d36c:	4631      	mov	r1, r6
 800d36e:	4628      	mov	r0, r5
 800d370:	47b8      	blx	r7
 800d372:	3001      	adds	r0, #1
 800d374:	f43f af41 	beq.w	800d1fa <_printf_float+0xbe>
 800d378:	f04f 0800 	mov.w	r8, #0
 800d37c:	f104 091a 	add.w	r9, r4, #26
 800d380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d382:	3b01      	subs	r3, #1
 800d384:	4543      	cmp	r3, r8
 800d386:	dc09      	bgt.n	800d39c <_printf_float+0x260>
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	079b      	lsls	r3, r3, #30
 800d38c:	f100 8107 	bmi.w	800d59e <_printf_float+0x462>
 800d390:	68e0      	ldr	r0, [r4, #12]
 800d392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d394:	4298      	cmp	r0, r3
 800d396:	bfb8      	it	lt
 800d398:	4618      	movlt	r0, r3
 800d39a:	e730      	b.n	800d1fe <_printf_float+0xc2>
 800d39c:	2301      	movs	r3, #1
 800d39e:	464a      	mov	r2, r9
 800d3a0:	4631      	mov	r1, r6
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	47b8      	blx	r7
 800d3a6:	3001      	adds	r0, #1
 800d3a8:	f43f af27 	beq.w	800d1fa <_printf_float+0xbe>
 800d3ac:	f108 0801 	add.w	r8, r8, #1
 800d3b0:	e7e6      	b.n	800d380 <_printf_float+0x244>
 800d3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	dc39      	bgt.n	800d42c <_printf_float+0x2f0>
 800d3b8:	4a1b      	ldr	r2, [pc, #108]	; (800d428 <_printf_float+0x2ec>)
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	4631      	mov	r1, r6
 800d3be:	4628      	mov	r0, r5
 800d3c0:	47b8      	blx	r7
 800d3c2:	3001      	adds	r0, #1
 800d3c4:	f43f af19 	beq.w	800d1fa <_printf_float+0xbe>
 800d3c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	d102      	bne.n	800d3d6 <_printf_float+0x29a>
 800d3d0:	6823      	ldr	r3, [r4, #0]
 800d3d2:	07d9      	lsls	r1, r3, #31
 800d3d4:	d5d8      	bpl.n	800d388 <_printf_float+0x24c>
 800d3d6:	ee18 3a10 	vmov	r3, s16
 800d3da:	4652      	mov	r2, sl
 800d3dc:	4631      	mov	r1, r6
 800d3de:	4628      	mov	r0, r5
 800d3e0:	47b8      	blx	r7
 800d3e2:	3001      	adds	r0, #1
 800d3e4:	f43f af09 	beq.w	800d1fa <_printf_float+0xbe>
 800d3e8:	f04f 0900 	mov.w	r9, #0
 800d3ec:	f104 0a1a 	add.w	sl, r4, #26
 800d3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3f2:	425b      	negs	r3, r3
 800d3f4:	454b      	cmp	r3, r9
 800d3f6:	dc01      	bgt.n	800d3fc <_printf_float+0x2c0>
 800d3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3fa:	e792      	b.n	800d322 <_printf_float+0x1e6>
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	4652      	mov	r2, sl
 800d400:	4631      	mov	r1, r6
 800d402:	4628      	mov	r0, r5
 800d404:	47b8      	blx	r7
 800d406:	3001      	adds	r0, #1
 800d408:	f43f aef7 	beq.w	800d1fa <_printf_float+0xbe>
 800d40c:	f109 0901 	add.w	r9, r9, #1
 800d410:	e7ee      	b.n	800d3f0 <_printf_float+0x2b4>
 800d412:	bf00      	nop
 800d414:	7fefffff 	.word	0x7fefffff
 800d418:	080182c8 	.word	0x080182c8
 800d41c:	080182cc 	.word	0x080182cc
 800d420:	080182d0 	.word	0x080182d0
 800d424:	080182d4 	.word	0x080182d4
 800d428:	080182d8 	.word	0x080182d8
 800d42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d42e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d430:	429a      	cmp	r2, r3
 800d432:	bfa8      	it	ge
 800d434:	461a      	movge	r2, r3
 800d436:	2a00      	cmp	r2, #0
 800d438:	4691      	mov	r9, r2
 800d43a:	dc37      	bgt.n	800d4ac <_printf_float+0x370>
 800d43c:	f04f 0b00 	mov.w	fp, #0
 800d440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d444:	f104 021a 	add.w	r2, r4, #26
 800d448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d44a:	9305      	str	r3, [sp, #20]
 800d44c:	eba3 0309 	sub.w	r3, r3, r9
 800d450:	455b      	cmp	r3, fp
 800d452:	dc33      	bgt.n	800d4bc <_printf_float+0x380>
 800d454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d458:	429a      	cmp	r2, r3
 800d45a:	db3b      	blt.n	800d4d4 <_printf_float+0x398>
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	07da      	lsls	r2, r3, #31
 800d460:	d438      	bmi.n	800d4d4 <_printf_float+0x398>
 800d462:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d466:	eba2 0903 	sub.w	r9, r2, r3
 800d46a:	9b05      	ldr	r3, [sp, #20]
 800d46c:	1ad2      	subs	r2, r2, r3
 800d46e:	4591      	cmp	r9, r2
 800d470:	bfa8      	it	ge
 800d472:	4691      	movge	r9, r2
 800d474:	f1b9 0f00 	cmp.w	r9, #0
 800d478:	dc35      	bgt.n	800d4e6 <_printf_float+0x3aa>
 800d47a:	f04f 0800 	mov.w	r8, #0
 800d47e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d482:	f104 0a1a 	add.w	sl, r4, #26
 800d486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d48a:	1a9b      	subs	r3, r3, r2
 800d48c:	eba3 0309 	sub.w	r3, r3, r9
 800d490:	4543      	cmp	r3, r8
 800d492:	f77f af79 	ble.w	800d388 <_printf_float+0x24c>
 800d496:	2301      	movs	r3, #1
 800d498:	4652      	mov	r2, sl
 800d49a:	4631      	mov	r1, r6
 800d49c:	4628      	mov	r0, r5
 800d49e:	47b8      	blx	r7
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	f43f aeaa 	beq.w	800d1fa <_printf_float+0xbe>
 800d4a6:	f108 0801 	add.w	r8, r8, #1
 800d4aa:	e7ec      	b.n	800d486 <_printf_float+0x34a>
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	4631      	mov	r1, r6
 800d4b0:	4642      	mov	r2, r8
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	47b8      	blx	r7
 800d4b6:	3001      	adds	r0, #1
 800d4b8:	d1c0      	bne.n	800d43c <_printf_float+0x300>
 800d4ba:	e69e      	b.n	800d1fa <_printf_float+0xbe>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	4631      	mov	r1, r6
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	9205      	str	r2, [sp, #20]
 800d4c4:	47b8      	blx	r7
 800d4c6:	3001      	adds	r0, #1
 800d4c8:	f43f ae97 	beq.w	800d1fa <_printf_float+0xbe>
 800d4cc:	9a05      	ldr	r2, [sp, #20]
 800d4ce:	f10b 0b01 	add.w	fp, fp, #1
 800d4d2:	e7b9      	b.n	800d448 <_printf_float+0x30c>
 800d4d4:	ee18 3a10 	vmov	r3, s16
 800d4d8:	4652      	mov	r2, sl
 800d4da:	4631      	mov	r1, r6
 800d4dc:	4628      	mov	r0, r5
 800d4de:	47b8      	blx	r7
 800d4e0:	3001      	adds	r0, #1
 800d4e2:	d1be      	bne.n	800d462 <_printf_float+0x326>
 800d4e4:	e689      	b.n	800d1fa <_printf_float+0xbe>
 800d4e6:	9a05      	ldr	r2, [sp, #20]
 800d4e8:	464b      	mov	r3, r9
 800d4ea:	4442      	add	r2, r8
 800d4ec:	4631      	mov	r1, r6
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	47b8      	blx	r7
 800d4f2:	3001      	adds	r0, #1
 800d4f4:	d1c1      	bne.n	800d47a <_printf_float+0x33e>
 800d4f6:	e680      	b.n	800d1fa <_printf_float+0xbe>
 800d4f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4fa:	2a01      	cmp	r2, #1
 800d4fc:	dc01      	bgt.n	800d502 <_printf_float+0x3c6>
 800d4fe:	07db      	lsls	r3, r3, #31
 800d500:	d53a      	bpl.n	800d578 <_printf_float+0x43c>
 800d502:	2301      	movs	r3, #1
 800d504:	4642      	mov	r2, r8
 800d506:	4631      	mov	r1, r6
 800d508:	4628      	mov	r0, r5
 800d50a:	47b8      	blx	r7
 800d50c:	3001      	adds	r0, #1
 800d50e:	f43f ae74 	beq.w	800d1fa <_printf_float+0xbe>
 800d512:	ee18 3a10 	vmov	r3, s16
 800d516:	4652      	mov	r2, sl
 800d518:	4631      	mov	r1, r6
 800d51a:	4628      	mov	r0, r5
 800d51c:	47b8      	blx	r7
 800d51e:	3001      	adds	r0, #1
 800d520:	f43f ae6b 	beq.w	800d1fa <_printf_float+0xbe>
 800d524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d528:	2200      	movs	r2, #0
 800d52a:	2300      	movs	r3, #0
 800d52c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d530:	f7f3 fae2 	bl	8000af8 <__aeabi_dcmpeq>
 800d534:	b9d8      	cbnz	r0, 800d56e <_printf_float+0x432>
 800d536:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d53a:	f108 0201 	add.w	r2, r8, #1
 800d53e:	4631      	mov	r1, r6
 800d540:	4628      	mov	r0, r5
 800d542:	47b8      	blx	r7
 800d544:	3001      	adds	r0, #1
 800d546:	d10e      	bne.n	800d566 <_printf_float+0x42a>
 800d548:	e657      	b.n	800d1fa <_printf_float+0xbe>
 800d54a:	2301      	movs	r3, #1
 800d54c:	4652      	mov	r2, sl
 800d54e:	4631      	mov	r1, r6
 800d550:	4628      	mov	r0, r5
 800d552:	47b8      	blx	r7
 800d554:	3001      	adds	r0, #1
 800d556:	f43f ae50 	beq.w	800d1fa <_printf_float+0xbe>
 800d55a:	f108 0801 	add.w	r8, r8, #1
 800d55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d560:	3b01      	subs	r3, #1
 800d562:	4543      	cmp	r3, r8
 800d564:	dcf1      	bgt.n	800d54a <_printf_float+0x40e>
 800d566:	464b      	mov	r3, r9
 800d568:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d56c:	e6da      	b.n	800d324 <_printf_float+0x1e8>
 800d56e:	f04f 0800 	mov.w	r8, #0
 800d572:	f104 0a1a 	add.w	sl, r4, #26
 800d576:	e7f2      	b.n	800d55e <_printf_float+0x422>
 800d578:	2301      	movs	r3, #1
 800d57a:	4642      	mov	r2, r8
 800d57c:	e7df      	b.n	800d53e <_printf_float+0x402>
 800d57e:	2301      	movs	r3, #1
 800d580:	464a      	mov	r2, r9
 800d582:	4631      	mov	r1, r6
 800d584:	4628      	mov	r0, r5
 800d586:	47b8      	blx	r7
 800d588:	3001      	adds	r0, #1
 800d58a:	f43f ae36 	beq.w	800d1fa <_printf_float+0xbe>
 800d58e:	f108 0801 	add.w	r8, r8, #1
 800d592:	68e3      	ldr	r3, [r4, #12]
 800d594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d596:	1a5b      	subs	r3, r3, r1
 800d598:	4543      	cmp	r3, r8
 800d59a:	dcf0      	bgt.n	800d57e <_printf_float+0x442>
 800d59c:	e6f8      	b.n	800d390 <_printf_float+0x254>
 800d59e:	f04f 0800 	mov.w	r8, #0
 800d5a2:	f104 0919 	add.w	r9, r4, #25
 800d5a6:	e7f4      	b.n	800d592 <_printf_float+0x456>

0800d5a8 <_printf_common>:
 800d5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5ac:	4616      	mov	r6, r2
 800d5ae:	4699      	mov	r9, r3
 800d5b0:	688a      	ldr	r2, [r1, #8]
 800d5b2:	690b      	ldr	r3, [r1, #16]
 800d5b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	bfb8      	it	lt
 800d5bc:	4613      	movlt	r3, r2
 800d5be:	6033      	str	r3, [r6, #0]
 800d5c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d5c4:	4607      	mov	r7, r0
 800d5c6:	460c      	mov	r4, r1
 800d5c8:	b10a      	cbz	r2, 800d5ce <_printf_common+0x26>
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	6033      	str	r3, [r6, #0]
 800d5ce:	6823      	ldr	r3, [r4, #0]
 800d5d0:	0699      	lsls	r1, r3, #26
 800d5d2:	bf42      	ittt	mi
 800d5d4:	6833      	ldrmi	r3, [r6, #0]
 800d5d6:	3302      	addmi	r3, #2
 800d5d8:	6033      	strmi	r3, [r6, #0]
 800d5da:	6825      	ldr	r5, [r4, #0]
 800d5dc:	f015 0506 	ands.w	r5, r5, #6
 800d5e0:	d106      	bne.n	800d5f0 <_printf_common+0x48>
 800d5e2:	f104 0a19 	add.w	sl, r4, #25
 800d5e6:	68e3      	ldr	r3, [r4, #12]
 800d5e8:	6832      	ldr	r2, [r6, #0]
 800d5ea:	1a9b      	subs	r3, r3, r2
 800d5ec:	42ab      	cmp	r3, r5
 800d5ee:	dc26      	bgt.n	800d63e <_printf_common+0x96>
 800d5f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5f4:	1e13      	subs	r3, r2, #0
 800d5f6:	6822      	ldr	r2, [r4, #0]
 800d5f8:	bf18      	it	ne
 800d5fa:	2301      	movne	r3, #1
 800d5fc:	0692      	lsls	r2, r2, #26
 800d5fe:	d42b      	bmi.n	800d658 <_printf_common+0xb0>
 800d600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d604:	4649      	mov	r1, r9
 800d606:	4638      	mov	r0, r7
 800d608:	47c0      	blx	r8
 800d60a:	3001      	adds	r0, #1
 800d60c:	d01e      	beq.n	800d64c <_printf_common+0xa4>
 800d60e:	6823      	ldr	r3, [r4, #0]
 800d610:	6922      	ldr	r2, [r4, #16]
 800d612:	f003 0306 	and.w	r3, r3, #6
 800d616:	2b04      	cmp	r3, #4
 800d618:	bf02      	ittt	eq
 800d61a:	68e5      	ldreq	r5, [r4, #12]
 800d61c:	6833      	ldreq	r3, [r6, #0]
 800d61e:	1aed      	subeq	r5, r5, r3
 800d620:	68a3      	ldr	r3, [r4, #8]
 800d622:	bf0c      	ite	eq
 800d624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d628:	2500      	movne	r5, #0
 800d62a:	4293      	cmp	r3, r2
 800d62c:	bfc4      	itt	gt
 800d62e:	1a9b      	subgt	r3, r3, r2
 800d630:	18ed      	addgt	r5, r5, r3
 800d632:	2600      	movs	r6, #0
 800d634:	341a      	adds	r4, #26
 800d636:	42b5      	cmp	r5, r6
 800d638:	d11a      	bne.n	800d670 <_printf_common+0xc8>
 800d63a:	2000      	movs	r0, #0
 800d63c:	e008      	b.n	800d650 <_printf_common+0xa8>
 800d63e:	2301      	movs	r3, #1
 800d640:	4652      	mov	r2, sl
 800d642:	4649      	mov	r1, r9
 800d644:	4638      	mov	r0, r7
 800d646:	47c0      	blx	r8
 800d648:	3001      	adds	r0, #1
 800d64a:	d103      	bne.n	800d654 <_printf_common+0xac>
 800d64c:	f04f 30ff 	mov.w	r0, #4294967295
 800d650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d654:	3501      	adds	r5, #1
 800d656:	e7c6      	b.n	800d5e6 <_printf_common+0x3e>
 800d658:	18e1      	adds	r1, r4, r3
 800d65a:	1c5a      	adds	r2, r3, #1
 800d65c:	2030      	movs	r0, #48	; 0x30
 800d65e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d662:	4422      	add	r2, r4
 800d664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d66c:	3302      	adds	r3, #2
 800d66e:	e7c7      	b.n	800d600 <_printf_common+0x58>
 800d670:	2301      	movs	r3, #1
 800d672:	4622      	mov	r2, r4
 800d674:	4649      	mov	r1, r9
 800d676:	4638      	mov	r0, r7
 800d678:	47c0      	blx	r8
 800d67a:	3001      	adds	r0, #1
 800d67c:	d0e6      	beq.n	800d64c <_printf_common+0xa4>
 800d67e:	3601      	adds	r6, #1
 800d680:	e7d9      	b.n	800d636 <_printf_common+0x8e>
	...

0800d684 <_printf_i>:
 800d684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d688:	7e0f      	ldrb	r7, [r1, #24]
 800d68a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d68c:	2f78      	cmp	r7, #120	; 0x78
 800d68e:	4691      	mov	r9, r2
 800d690:	4680      	mov	r8, r0
 800d692:	460c      	mov	r4, r1
 800d694:	469a      	mov	sl, r3
 800d696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d69a:	d807      	bhi.n	800d6ac <_printf_i+0x28>
 800d69c:	2f62      	cmp	r7, #98	; 0x62
 800d69e:	d80a      	bhi.n	800d6b6 <_printf_i+0x32>
 800d6a0:	2f00      	cmp	r7, #0
 800d6a2:	f000 80d4 	beq.w	800d84e <_printf_i+0x1ca>
 800d6a6:	2f58      	cmp	r7, #88	; 0x58
 800d6a8:	f000 80c0 	beq.w	800d82c <_printf_i+0x1a8>
 800d6ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d6b4:	e03a      	b.n	800d72c <_printf_i+0xa8>
 800d6b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d6ba:	2b15      	cmp	r3, #21
 800d6bc:	d8f6      	bhi.n	800d6ac <_printf_i+0x28>
 800d6be:	a101      	add	r1, pc, #4	; (adr r1, 800d6c4 <_printf_i+0x40>)
 800d6c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6c4:	0800d71d 	.word	0x0800d71d
 800d6c8:	0800d731 	.word	0x0800d731
 800d6cc:	0800d6ad 	.word	0x0800d6ad
 800d6d0:	0800d6ad 	.word	0x0800d6ad
 800d6d4:	0800d6ad 	.word	0x0800d6ad
 800d6d8:	0800d6ad 	.word	0x0800d6ad
 800d6dc:	0800d731 	.word	0x0800d731
 800d6e0:	0800d6ad 	.word	0x0800d6ad
 800d6e4:	0800d6ad 	.word	0x0800d6ad
 800d6e8:	0800d6ad 	.word	0x0800d6ad
 800d6ec:	0800d6ad 	.word	0x0800d6ad
 800d6f0:	0800d835 	.word	0x0800d835
 800d6f4:	0800d75d 	.word	0x0800d75d
 800d6f8:	0800d7ef 	.word	0x0800d7ef
 800d6fc:	0800d6ad 	.word	0x0800d6ad
 800d700:	0800d6ad 	.word	0x0800d6ad
 800d704:	0800d857 	.word	0x0800d857
 800d708:	0800d6ad 	.word	0x0800d6ad
 800d70c:	0800d75d 	.word	0x0800d75d
 800d710:	0800d6ad 	.word	0x0800d6ad
 800d714:	0800d6ad 	.word	0x0800d6ad
 800d718:	0800d7f7 	.word	0x0800d7f7
 800d71c:	682b      	ldr	r3, [r5, #0]
 800d71e:	1d1a      	adds	r2, r3, #4
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	602a      	str	r2, [r5, #0]
 800d724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d72c:	2301      	movs	r3, #1
 800d72e:	e09f      	b.n	800d870 <_printf_i+0x1ec>
 800d730:	6820      	ldr	r0, [r4, #0]
 800d732:	682b      	ldr	r3, [r5, #0]
 800d734:	0607      	lsls	r7, r0, #24
 800d736:	f103 0104 	add.w	r1, r3, #4
 800d73a:	6029      	str	r1, [r5, #0]
 800d73c:	d501      	bpl.n	800d742 <_printf_i+0xbe>
 800d73e:	681e      	ldr	r6, [r3, #0]
 800d740:	e003      	b.n	800d74a <_printf_i+0xc6>
 800d742:	0646      	lsls	r6, r0, #25
 800d744:	d5fb      	bpl.n	800d73e <_printf_i+0xba>
 800d746:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d74a:	2e00      	cmp	r6, #0
 800d74c:	da03      	bge.n	800d756 <_printf_i+0xd2>
 800d74e:	232d      	movs	r3, #45	; 0x2d
 800d750:	4276      	negs	r6, r6
 800d752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d756:	485a      	ldr	r0, [pc, #360]	; (800d8c0 <_printf_i+0x23c>)
 800d758:	230a      	movs	r3, #10
 800d75a:	e012      	b.n	800d782 <_printf_i+0xfe>
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	6820      	ldr	r0, [r4, #0]
 800d760:	1d19      	adds	r1, r3, #4
 800d762:	6029      	str	r1, [r5, #0]
 800d764:	0605      	lsls	r5, r0, #24
 800d766:	d501      	bpl.n	800d76c <_printf_i+0xe8>
 800d768:	681e      	ldr	r6, [r3, #0]
 800d76a:	e002      	b.n	800d772 <_printf_i+0xee>
 800d76c:	0641      	lsls	r1, r0, #25
 800d76e:	d5fb      	bpl.n	800d768 <_printf_i+0xe4>
 800d770:	881e      	ldrh	r6, [r3, #0]
 800d772:	4853      	ldr	r0, [pc, #332]	; (800d8c0 <_printf_i+0x23c>)
 800d774:	2f6f      	cmp	r7, #111	; 0x6f
 800d776:	bf0c      	ite	eq
 800d778:	2308      	moveq	r3, #8
 800d77a:	230a      	movne	r3, #10
 800d77c:	2100      	movs	r1, #0
 800d77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d782:	6865      	ldr	r5, [r4, #4]
 800d784:	60a5      	str	r5, [r4, #8]
 800d786:	2d00      	cmp	r5, #0
 800d788:	bfa2      	ittt	ge
 800d78a:	6821      	ldrge	r1, [r4, #0]
 800d78c:	f021 0104 	bicge.w	r1, r1, #4
 800d790:	6021      	strge	r1, [r4, #0]
 800d792:	b90e      	cbnz	r6, 800d798 <_printf_i+0x114>
 800d794:	2d00      	cmp	r5, #0
 800d796:	d04b      	beq.n	800d830 <_printf_i+0x1ac>
 800d798:	4615      	mov	r5, r2
 800d79a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d79e:	fb03 6711 	mls	r7, r3, r1, r6
 800d7a2:	5dc7      	ldrb	r7, [r0, r7]
 800d7a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d7a8:	4637      	mov	r7, r6
 800d7aa:	42bb      	cmp	r3, r7
 800d7ac:	460e      	mov	r6, r1
 800d7ae:	d9f4      	bls.n	800d79a <_printf_i+0x116>
 800d7b0:	2b08      	cmp	r3, #8
 800d7b2:	d10b      	bne.n	800d7cc <_printf_i+0x148>
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	07de      	lsls	r6, r3, #31
 800d7b8:	d508      	bpl.n	800d7cc <_printf_i+0x148>
 800d7ba:	6923      	ldr	r3, [r4, #16]
 800d7bc:	6861      	ldr	r1, [r4, #4]
 800d7be:	4299      	cmp	r1, r3
 800d7c0:	bfde      	ittt	le
 800d7c2:	2330      	movle	r3, #48	; 0x30
 800d7c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d7c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d7cc:	1b52      	subs	r2, r2, r5
 800d7ce:	6122      	str	r2, [r4, #16]
 800d7d0:	f8cd a000 	str.w	sl, [sp]
 800d7d4:	464b      	mov	r3, r9
 800d7d6:	aa03      	add	r2, sp, #12
 800d7d8:	4621      	mov	r1, r4
 800d7da:	4640      	mov	r0, r8
 800d7dc:	f7ff fee4 	bl	800d5a8 <_printf_common>
 800d7e0:	3001      	adds	r0, #1
 800d7e2:	d14a      	bne.n	800d87a <_printf_i+0x1f6>
 800d7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e8:	b004      	add	sp, #16
 800d7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ee:	6823      	ldr	r3, [r4, #0]
 800d7f0:	f043 0320 	orr.w	r3, r3, #32
 800d7f4:	6023      	str	r3, [r4, #0]
 800d7f6:	4833      	ldr	r0, [pc, #204]	; (800d8c4 <_printf_i+0x240>)
 800d7f8:	2778      	movs	r7, #120	; 0x78
 800d7fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d7fe:	6823      	ldr	r3, [r4, #0]
 800d800:	6829      	ldr	r1, [r5, #0]
 800d802:	061f      	lsls	r7, r3, #24
 800d804:	f851 6b04 	ldr.w	r6, [r1], #4
 800d808:	d402      	bmi.n	800d810 <_printf_i+0x18c>
 800d80a:	065f      	lsls	r7, r3, #25
 800d80c:	bf48      	it	mi
 800d80e:	b2b6      	uxthmi	r6, r6
 800d810:	07df      	lsls	r7, r3, #31
 800d812:	bf48      	it	mi
 800d814:	f043 0320 	orrmi.w	r3, r3, #32
 800d818:	6029      	str	r1, [r5, #0]
 800d81a:	bf48      	it	mi
 800d81c:	6023      	strmi	r3, [r4, #0]
 800d81e:	b91e      	cbnz	r6, 800d828 <_printf_i+0x1a4>
 800d820:	6823      	ldr	r3, [r4, #0]
 800d822:	f023 0320 	bic.w	r3, r3, #32
 800d826:	6023      	str	r3, [r4, #0]
 800d828:	2310      	movs	r3, #16
 800d82a:	e7a7      	b.n	800d77c <_printf_i+0xf8>
 800d82c:	4824      	ldr	r0, [pc, #144]	; (800d8c0 <_printf_i+0x23c>)
 800d82e:	e7e4      	b.n	800d7fa <_printf_i+0x176>
 800d830:	4615      	mov	r5, r2
 800d832:	e7bd      	b.n	800d7b0 <_printf_i+0x12c>
 800d834:	682b      	ldr	r3, [r5, #0]
 800d836:	6826      	ldr	r6, [r4, #0]
 800d838:	6961      	ldr	r1, [r4, #20]
 800d83a:	1d18      	adds	r0, r3, #4
 800d83c:	6028      	str	r0, [r5, #0]
 800d83e:	0635      	lsls	r5, r6, #24
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	d501      	bpl.n	800d848 <_printf_i+0x1c4>
 800d844:	6019      	str	r1, [r3, #0]
 800d846:	e002      	b.n	800d84e <_printf_i+0x1ca>
 800d848:	0670      	lsls	r0, r6, #25
 800d84a:	d5fb      	bpl.n	800d844 <_printf_i+0x1c0>
 800d84c:	8019      	strh	r1, [r3, #0]
 800d84e:	2300      	movs	r3, #0
 800d850:	6123      	str	r3, [r4, #16]
 800d852:	4615      	mov	r5, r2
 800d854:	e7bc      	b.n	800d7d0 <_printf_i+0x14c>
 800d856:	682b      	ldr	r3, [r5, #0]
 800d858:	1d1a      	adds	r2, r3, #4
 800d85a:	602a      	str	r2, [r5, #0]
 800d85c:	681d      	ldr	r5, [r3, #0]
 800d85e:	6862      	ldr	r2, [r4, #4]
 800d860:	2100      	movs	r1, #0
 800d862:	4628      	mov	r0, r5
 800d864:	f7f2 fccc 	bl	8000200 <memchr>
 800d868:	b108      	cbz	r0, 800d86e <_printf_i+0x1ea>
 800d86a:	1b40      	subs	r0, r0, r5
 800d86c:	6060      	str	r0, [r4, #4]
 800d86e:	6863      	ldr	r3, [r4, #4]
 800d870:	6123      	str	r3, [r4, #16]
 800d872:	2300      	movs	r3, #0
 800d874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d878:	e7aa      	b.n	800d7d0 <_printf_i+0x14c>
 800d87a:	6923      	ldr	r3, [r4, #16]
 800d87c:	462a      	mov	r2, r5
 800d87e:	4649      	mov	r1, r9
 800d880:	4640      	mov	r0, r8
 800d882:	47d0      	blx	sl
 800d884:	3001      	adds	r0, #1
 800d886:	d0ad      	beq.n	800d7e4 <_printf_i+0x160>
 800d888:	6823      	ldr	r3, [r4, #0]
 800d88a:	079b      	lsls	r3, r3, #30
 800d88c:	d413      	bmi.n	800d8b6 <_printf_i+0x232>
 800d88e:	68e0      	ldr	r0, [r4, #12]
 800d890:	9b03      	ldr	r3, [sp, #12]
 800d892:	4298      	cmp	r0, r3
 800d894:	bfb8      	it	lt
 800d896:	4618      	movlt	r0, r3
 800d898:	e7a6      	b.n	800d7e8 <_printf_i+0x164>
 800d89a:	2301      	movs	r3, #1
 800d89c:	4632      	mov	r2, r6
 800d89e:	4649      	mov	r1, r9
 800d8a0:	4640      	mov	r0, r8
 800d8a2:	47d0      	blx	sl
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	d09d      	beq.n	800d7e4 <_printf_i+0x160>
 800d8a8:	3501      	adds	r5, #1
 800d8aa:	68e3      	ldr	r3, [r4, #12]
 800d8ac:	9903      	ldr	r1, [sp, #12]
 800d8ae:	1a5b      	subs	r3, r3, r1
 800d8b0:	42ab      	cmp	r3, r5
 800d8b2:	dcf2      	bgt.n	800d89a <_printf_i+0x216>
 800d8b4:	e7eb      	b.n	800d88e <_printf_i+0x20a>
 800d8b6:	2500      	movs	r5, #0
 800d8b8:	f104 0619 	add.w	r6, r4, #25
 800d8bc:	e7f5      	b.n	800d8aa <_printf_i+0x226>
 800d8be:	bf00      	nop
 800d8c0:	080182da 	.word	0x080182da
 800d8c4:	080182eb 	.word	0x080182eb

0800d8c8 <std>:
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	b510      	push	{r4, lr}
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	e9c0 3300 	strd	r3, r3, [r0]
 800d8d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8d6:	6083      	str	r3, [r0, #8]
 800d8d8:	8181      	strh	r1, [r0, #12]
 800d8da:	6643      	str	r3, [r0, #100]	; 0x64
 800d8dc:	81c2      	strh	r2, [r0, #14]
 800d8de:	6183      	str	r3, [r0, #24]
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	2208      	movs	r2, #8
 800d8e4:	305c      	adds	r0, #92	; 0x5c
 800d8e6:	f000 f94d 	bl	800db84 <memset>
 800d8ea:	4b0d      	ldr	r3, [pc, #52]	; (800d920 <std+0x58>)
 800d8ec:	6263      	str	r3, [r4, #36]	; 0x24
 800d8ee:	4b0d      	ldr	r3, [pc, #52]	; (800d924 <std+0x5c>)
 800d8f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8f2:	4b0d      	ldr	r3, [pc, #52]	; (800d928 <std+0x60>)
 800d8f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8f6:	4b0d      	ldr	r3, [pc, #52]	; (800d92c <std+0x64>)
 800d8f8:	6323      	str	r3, [r4, #48]	; 0x30
 800d8fa:	4b0d      	ldr	r3, [pc, #52]	; (800d930 <std+0x68>)
 800d8fc:	6224      	str	r4, [r4, #32]
 800d8fe:	429c      	cmp	r4, r3
 800d900:	d006      	beq.n	800d910 <std+0x48>
 800d902:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d906:	4294      	cmp	r4, r2
 800d908:	d002      	beq.n	800d910 <std+0x48>
 800d90a:	33d0      	adds	r3, #208	; 0xd0
 800d90c:	429c      	cmp	r4, r3
 800d90e:	d105      	bne.n	800d91c <std+0x54>
 800d910:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d918:	f000 b9c0 	b.w	800dc9c <__retarget_lock_init_recursive>
 800d91c:	bd10      	pop	{r4, pc}
 800d91e:	bf00      	nop
 800d920:	0800da8d 	.word	0x0800da8d
 800d924:	0800daaf 	.word	0x0800daaf
 800d928:	0800dae7 	.word	0x0800dae7
 800d92c:	0800db0b 	.word	0x0800db0b
 800d930:	20002854 	.word	0x20002854

0800d934 <stdio_exit_handler>:
 800d934:	4a02      	ldr	r2, [pc, #8]	; (800d940 <stdio_exit_handler+0xc>)
 800d936:	4903      	ldr	r1, [pc, #12]	; (800d944 <stdio_exit_handler+0x10>)
 800d938:	4803      	ldr	r0, [pc, #12]	; (800d948 <stdio_exit_handler+0x14>)
 800d93a:	f000 b869 	b.w	800da10 <_fwalk_sglue>
 800d93e:	bf00      	nop
 800d940:	20000018 	.word	0x20000018
 800d944:	0800f4e9 	.word	0x0800f4e9
 800d948:	20000024 	.word	0x20000024

0800d94c <cleanup_stdio>:
 800d94c:	6841      	ldr	r1, [r0, #4]
 800d94e:	4b0c      	ldr	r3, [pc, #48]	; (800d980 <cleanup_stdio+0x34>)
 800d950:	4299      	cmp	r1, r3
 800d952:	b510      	push	{r4, lr}
 800d954:	4604      	mov	r4, r0
 800d956:	d001      	beq.n	800d95c <cleanup_stdio+0x10>
 800d958:	f001 fdc6 	bl	800f4e8 <_fflush_r>
 800d95c:	68a1      	ldr	r1, [r4, #8]
 800d95e:	4b09      	ldr	r3, [pc, #36]	; (800d984 <cleanup_stdio+0x38>)
 800d960:	4299      	cmp	r1, r3
 800d962:	d002      	beq.n	800d96a <cleanup_stdio+0x1e>
 800d964:	4620      	mov	r0, r4
 800d966:	f001 fdbf 	bl	800f4e8 <_fflush_r>
 800d96a:	68e1      	ldr	r1, [r4, #12]
 800d96c:	4b06      	ldr	r3, [pc, #24]	; (800d988 <cleanup_stdio+0x3c>)
 800d96e:	4299      	cmp	r1, r3
 800d970:	d004      	beq.n	800d97c <cleanup_stdio+0x30>
 800d972:	4620      	mov	r0, r4
 800d974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d978:	f001 bdb6 	b.w	800f4e8 <_fflush_r>
 800d97c:	bd10      	pop	{r4, pc}
 800d97e:	bf00      	nop
 800d980:	20002854 	.word	0x20002854
 800d984:	200028bc 	.word	0x200028bc
 800d988:	20002924 	.word	0x20002924

0800d98c <global_stdio_init.part.0>:
 800d98c:	b510      	push	{r4, lr}
 800d98e:	4b0b      	ldr	r3, [pc, #44]	; (800d9bc <global_stdio_init.part.0+0x30>)
 800d990:	4c0b      	ldr	r4, [pc, #44]	; (800d9c0 <global_stdio_init.part.0+0x34>)
 800d992:	4a0c      	ldr	r2, [pc, #48]	; (800d9c4 <global_stdio_init.part.0+0x38>)
 800d994:	601a      	str	r2, [r3, #0]
 800d996:	4620      	mov	r0, r4
 800d998:	2200      	movs	r2, #0
 800d99a:	2104      	movs	r1, #4
 800d99c:	f7ff ff94 	bl	800d8c8 <std>
 800d9a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	2109      	movs	r1, #9
 800d9a8:	f7ff ff8e 	bl	800d8c8 <std>
 800d9ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d9b0:	2202      	movs	r2, #2
 800d9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9b6:	2112      	movs	r1, #18
 800d9b8:	f7ff bf86 	b.w	800d8c8 <std>
 800d9bc:	2000298c 	.word	0x2000298c
 800d9c0:	20002854 	.word	0x20002854
 800d9c4:	0800d935 	.word	0x0800d935

0800d9c8 <__sfp_lock_acquire>:
 800d9c8:	4801      	ldr	r0, [pc, #4]	; (800d9d0 <__sfp_lock_acquire+0x8>)
 800d9ca:	f000 b968 	b.w	800dc9e <__retarget_lock_acquire_recursive>
 800d9ce:	bf00      	nop
 800d9d0:	20002995 	.word	0x20002995

0800d9d4 <__sfp_lock_release>:
 800d9d4:	4801      	ldr	r0, [pc, #4]	; (800d9dc <__sfp_lock_release+0x8>)
 800d9d6:	f000 b963 	b.w	800dca0 <__retarget_lock_release_recursive>
 800d9da:	bf00      	nop
 800d9dc:	20002995 	.word	0x20002995

0800d9e0 <__sinit>:
 800d9e0:	b510      	push	{r4, lr}
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	f7ff fff0 	bl	800d9c8 <__sfp_lock_acquire>
 800d9e8:	6a23      	ldr	r3, [r4, #32]
 800d9ea:	b11b      	cbz	r3, 800d9f4 <__sinit+0x14>
 800d9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9f0:	f7ff bff0 	b.w	800d9d4 <__sfp_lock_release>
 800d9f4:	4b04      	ldr	r3, [pc, #16]	; (800da08 <__sinit+0x28>)
 800d9f6:	6223      	str	r3, [r4, #32]
 800d9f8:	4b04      	ldr	r3, [pc, #16]	; (800da0c <__sinit+0x2c>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1f5      	bne.n	800d9ec <__sinit+0xc>
 800da00:	f7ff ffc4 	bl	800d98c <global_stdio_init.part.0>
 800da04:	e7f2      	b.n	800d9ec <__sinit+0xc>
 800da06:	bf00      	nop
 800da08:	0800d94d 	.word	0x0800d94d
 800da0c:	2000298c 	.word	0x2000298c

0800da10 <_fwalk_sglue>:
 800da10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da14:	4607      	mov	r7, r0
 800da16:	4688      	mov	r8, r1
 800da18:	4614      	mov	r4, r2
 800da1a:	2600      	movs	r6, #0
 800da1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da20:	f1b9 0901 	subs.w	r9, r9, #1
 800da24:	d505      	bpl.n	800da32 <_fwalk_sglue+0x22>
 800da26:	6824      	ldr	r4, [r4, #0]
 800da28:	2c00      	cmp	r4, #0
 800da2a:	d1f7      	bne.n	800da1c <_fwalk_sglue+0xc>
 800da2c:	4630      	mov	r0, r6
 800da2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da32:	89ab      	ldrh	r3, [r5, #12]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d907      	bls.n	800da48 <_fwalk_sglue+0x38>
 800da38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da3c:	3301      	adds	r3, #1
 800da3e:	d003      	beq.n	800da48 <_fwalk_sglue+0x38>
 800da40:	4629      	mov	r1, r5
 800da42:	4638      	mov	r0, r7
 800da44:	47c0      	blx	r8
 800da46:	4306      	orrs	r6, r0
 800da48:	3568      	adds	r5, #104	; 0x68
 800da4a:	e7e9      	b.n	800da20 <_fwalk_sglue+0x10>

0800da4c <siprintf>:
 800da4c:	b40e      	push	{r1, r2, r3}
 800da4e:	b500      	push	{lr}
 800da50:	b09c      	sub	sp, #112	; 0x70
 800da52:	ab1d      	add	r3, sp, #116	; 0x74
 800da54:	9002      	str	r0, [sp, #8]
 800da56:	9006      	str	r0, [sp, #24]
 800da58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da5c:	4809      	ldr	r0, [pc, #36]	; (800da84 <siprintf+0x38>)
 800da5e:	9107      	str	r1, [sp, #28]
 800da60:	9104      	str	r1, [sp, #16]
 800da62:	4909      	ldr	r1, [pc, #36]	; (800da88 <siprintf+0x3c>)
 800da64:	f853 2b04 	ldr.w	r2, [r3], #4
 800da68:	9105      	str	r1, [sp, #20]
 800da6a:	6800      	ldr	r0, [r0, #0]
 800da6c:	9301      	str	r3, [sp, #4]
 800da6e:	a902      	add	r1, sp, #8
 800da70:	f001 fbb6 	bl	800f1e0 <_svfiprintf_r>
 800da74:	9b02      	ldr	r3, [sp, #8]
 800da76:	2200      	movs	r2, #0
 800da78:	701a      	strb	r2, [r3, #0]
 800da7a:	b01c      	add	sp, #112	; 0x70
 800da7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800da80:	b003      	add	sp, #12
 800da82:	4770      	bx	lr
 800da84:	20000070 	.word	0x20000070
 800da88:	ffff0208 	.word	0xffff0208

0800da8c <__sread>:
 800da8c:	b510      	push	{r4, lr}
 800da8e:	460c      	mov	r4, r1
 800da90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da94:	f000 f8a4 	bl	800dbe0 <_read_r>
 800da98:	2800      	cmp	r0, #0
 800da9a:	bfab      	itete	ge
 800da9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da9e:	89a3      	ldrhlt	r3, [r4, #12]
 800daa0:	181b      	addge	r3, r3, r0
 800daa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800daa6:	bfac      	ite	ge
 800daa8:	6563      	strge	r3, [r4, #84]	; 0x54
 800daaa:	81a3      	strhlt	r3, [r4, #12]
 800daac:	bd10      	pop	{r4, pc}

0800daae <__swrite>:
 800daae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dab2:	461f      	mov	r7, r3
 800dab4:	898b      	ldrh	r3, [r1, #12]
 800dab6:	05db      	lsls	r3, r3, #23
 800dab8:	4605      	mov	r5, r0
 800daba:	460c      	mov	r4, r1
 800dabc:	4616      	mov	r6, r2
 800dabe:	d505      	bpl.n	800dacc <__swrite+0x1e>
 800dac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dac4:	2302      	movs	r3, #2
 800dac6:	2200      	movs	r2, #0
 800dac8:	f000 f878 	bl	800dbbc <_lseek_r>
 800dacc:	89a3      	ldrh	r3, [r4, #12]
 800dace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dad6:	81a3      	strh	r3, [r4, #12]
 800dad8:	4632      	mov	r2, r6
 800dada:	463b      	mov	r3, r7
 800dadc:	4628      	mov	r0, r5
 800dade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dae2:	f000 b89f 	b.w	800dc24 <_write_r>

0800dae6 <__sseek>:
 800dae6:	b510      	push	{r4, lr}
 800dae8:	460c      	mov	r4, r1
 800daea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daee:	f000 f865 	bl	800dbbc <_lseek_r>
 800daf2:	1c43      	adds	r3, r0, #1
 800daf4:	89a3      	ldrh	r3, [r4, #12]
 800daf6:	bf15      	itete	ne
 800daf8:	6560      	strne	r0, [r4, #84]	; 0x54
 800dafa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dafe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db02:	81a3      	strheq	r3, [r4, #12]
 800db04:	bf18      	it	ne
 800db06:	81a3      	strhne	r3, [r4, #12]
 800db08:	bd10      	pop	{r4, pc}

0800db0a <__sclose>:
 800db0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db0e:	f000 b845 	b.w	800db9c <_close_r>

0800db12 <_vsniprintf_r>:
 800db12:	b530      	push	{r4, r5, lr}
 800db14:	4614      	mov	r4, r2
 800db16:	2c00      	cmp	r4, #0
 800db18:	b09b      	sub	sp, #108	; 0x6c
 800db1a:	4605      	mov	r5, r0
 800db1c:	461a      	mov	r2, r3
 800db1e:	da05      	bge.n	800db2c <_vsniprintf_r+0x1a>
 800db20:	238b      	movs	r3, #139	; 0x8b
 800db22:	6003      	str	r3, [r0, #0]
 800db24:	f04f 30ff 	mov.w	r0, #4294967295
 800db28:	b01b      	add	sp, #108	; 0x6c
 800db2a:	bd30      	pop	{r4, r5, pc}
 800db2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800db30:	f8ad 300c 	strh.w	r3, [sp, #12]
 800db34:	bf14      	ite	ne
 800db36:	f104 33ff 	addne.w	r3, r4, #4294967295
 800db3a:	4623      	moveq	r3, r4
 800db3c:	9302      	str	r3, [sp, #8]
 800db3e:	9305      	str	r3, [sp, #20]
 800db40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db44:	9100      	str	r1, [sp, #0]
 800db46:	9104      	str	r1, [sp, #16]
 800db48:	f8ad 300e 	strh.w	r3, [sp, #14]
 800db4c:	4669      	mov	r1, sp
 800db4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800db50:	f001 fb46 	bl	800f1e0 <_svfiprintf_r>
 800db54:	1c43      	adds	r3, r0, #1
 800db56:	bfbc      	itt	lt
 800db58:	238b      	movlt	r3, #139	; 0x8b
 800db5a:	602b      	strlt	r3, [r5, #0]
 800db5c:	2c00      	cmp	r4, #0
 800db5e:	d0e3      	beq.n	800db28 <_vsniprintf_r+0x16>
 800db60:	9b00      	ldr	r3, [sp, #0]
 800db62:	2200      	movs	r2, #0
 800db64:	701a      	strb	r2, [r3, #0]
 800db66:	e7df      	b.n	800db28 <_vsniprintf_r+0x16>

0800db68 <vsniprintf>:
 800db68:	b507      	push	{r0, r1, r2, lr}
 800db6a:	9300      	str	r3, [sp, #0]
 800db6c:	4613      	mov	r3, r2
 800db6e:	460a      	mov	r2, r1
 800db70:	4601      	mov	r1, r0
 800db72:	4803      	ldr	r0, [pc, #12]	; (800db80 <vsniprintf+0x18>)
 800db74:	6800      	ldr	r0, [r0, #0]
 800db76:	f7ff ffcc 	bl	800db12 <_vsniprintf_r>
 800db7a:	b003      	add	sp, #12
 800db7c:	f85d fb04 	ldr.w	pc, [sp], #4
 800db80:	20000070 	.word	0x20000070

0800db84 <memset>:
 800db84:	4402      	add	r2, r0
 800db86:	4603      	mov	r3, r0
 800db88:	4293      	cmp	r3, r2
 800db8a:	d100      	bne.n	800db8e <memset+0xa>
 800db8c:	4770      	bx	lr
 800db8e:	f803 1b01 	strb.w	r1, [r3], #1
 800db92:	e7f9      	b.n	800db88 <memset+0x4>

0800db94 <_localeconv_r>:
 800db94:	4800      	ldr	r0, [pc, #0]	; (800db98 <_localeconv_r+0x4>)
 800db96:	4770      	bx	lr
 800db98:	20000164 	.word	0x20000164

0800db9c <_close_r>:
 800db9c:	b538      	push	{r3, r4, r5, lr}
 800db9e:	4d06      	ldr	r5, [pc, #24]	; (800dbb8 <_close_r+0x1c>)
 800dba0:	2300      	movs	r3, #0
 800dba2:	4604      	mov	r4, r0
 800dba4:	4608      	mov	r0, r1
 800dba6:	602b      	str	r3, [r5, #0]
 800dba8:	f7f5 fe1b 	bl	80037e2 <_close>
 800dbac:	1c43      	adds	r3, r0, #1
 800dbae:	d102      	bne.n	800dbb6 <_close_r+0x1a>
 800dbb0:	682b      	ldr	r3, [r5, #0]
 800dbb2:	b103      	cbz	r3, 800dbb6 <_close_r+0x1a>
 800dbb4:	6023      	str	r3, [r4, #0]
 800dbb6:	bd38      	pop	{r3, r4, r5, pc}
 800dbb8:	20002990 	.word	0x20002990

0800dbbc <_lseek_r>:
 800dbbc:	b538      	push	{r3, r4, r5, lr}
 800dbbe:	4d07      	ldr	r5, [pc, #28]	; (800dbdc <_lseek_r+0x20>)
 800dbc0:	4604      	mov	r4, r0
 800dbc2:	4608      	mov	r0, r1
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	602a      	str	r2, [r5, #0]
 800dbca:	461a      	mov	r2, r3
 800dbcc:	f7f5 fe30 	bl	8003830 <_lseek>
 800dbd0:	1c43      	adds	r3, r0, #1
 800dbd2:	d102      	bne.n	800dbda <_lseek_r+0x1e>
 800dbd4:	682b      	ldr	r3, [r5, #0]
 800dbd6:	b103      	cbz	r3, 800dbda <_lseek_r+0x1e>
 800dbd8:	6023      	str	r3, [r4, #0]
 800dbda:	bd38      	pop	{r3, r4, r5, pc}
 800dbdc:	20002990 	.word	0x20002990

0800dbe0 <_read_r>:
 800dbe0:	b538      	push	{r3, r4, r5, lr}
 800dbe2:	4d07      	ldr	r5, [pc, #28]	; (800dc00 <_read_r+0x20>)
 800dbe4:	4604      	mov	r4, r0
 800dbe6:	4608      	mov	r0, r1
 800dbe8:	4611      	mov	r1, r2
 800dbea:	2200      	movs	r2, #0
 800dbec:	602a      	str	r2, [r5, #0]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	f7f5 fdbe 	bl	8003770 <_read>
 800dbf4:	1c43      	adds	r3, r0, #1
 800dbf6:	d102      	bne.n	800dbfe <_read_r+0x1e>
 800dbf8:	682b      	ldr	r3, [r5, #0]
 800dbfa:	b103      	cbz	r3, 800dbfe <_read_r+0x1e>
 800dbfc:	6023      	str	r3, [r4, #0]
 800dbfe:	bd38      	pop	{r3, r4, r5, pc}
 800dc00:	20002990 	.word	0x20002990

0800dc04 <_sbrk_r>:
 800dc04:	b538      	push	{r3, r4, r5, lr}
 800dc06:	4d06      	ldr	r5, [pc, #24]	; (800dc20 <_sbrk_r+0x1c>)
 800dc08:	2300      	movs	r3, #0
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	4608      	mov	r0, r1
 800dc0e:	602b      	str	r3, [r5, #0]
 800dc10:	f7f5 fe1c 	bl	800384c <_sbrk>
 800dc14:	1c43      	adds	r3, r0, #1
 800dc16:	d102      	bne.n	800dc1e <_sbrk_r+0x1a>
 800dc18:	682b      	ldr	r3, [r5, #0]
 800dc1a:	b103      	cbz	r3, 800dc1e <_sbrk_r+0x1a>
 800dc1c:	6023      	str	r3, [r4, #0]
 800dc1e:	bd38      	pop	{r3, r4, r5, pc}
 800dc20:	20002990 	.word	0x20002990

0800dc24 <_write_r>:
 800dc24:	b538      	push	{r3, r4, r5, lr}
 800dc26:	4d07      	ldr	r5, [pc, #28]	; (800dc44 <_write_r+0x20>)
 800dc28:	4604      	mov	r4, r0
 800dc2a:	4608      	mov	r0, r1
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	2200      	movs	r2, #0
 800dc30:	602a      	str	r2, [r5, #0]
 800dc32:	461a      	mov	r2, r3
 800dc34:	f7f5 fdb9 	bl	80037aa <_write>
 800dc38:	1c43      	adds	r3, r0, #1
 800dc3a:	d102      	bne.n	800dc42 <_write_r+0x1e>
 800dc3c:	682b      	ldr	r3, [r5, #0]
 800dc3e:	b103      	cbz	r3, 800dc42 <_write_r+0x1e>
 800dc40:	6023      	str	r3, [r4, #0]
 800dc42:	bd38      	pop	{r3, r4, r5, pc}
 800dc44:	20002990 	.word	0x20002990

0800dc48 <__errno>:
 800dc48:	4b01      	ldr	r3, [pc, #4]	; (800dc50 <__errno+0x8>)
 800dc4a:	6818      	ldr	r0, [r3, #0]
 800dc4c:	4770      	bx	lr
 800dc4e:	bf00      	nop
 800dc50:	20000070 	.word	0x20000070

0800dc54 <__libc_init_array>:
 800dc54:	b570      	push	{r4, r5, r6, lr}
 800dc56:	4d0d      	ldr	r5, [pc, #52]	; (800dc8c <__libc_init_array+0x38>)
 800dc58:	4c0d      	ldr	r4, [pc, #52]	; (800dc90 <__libc_init_array+0x3c>)
 800dc5a:	1b64      	subs	r4, r4, r5
 800dc5c:	10a4      	asrs	r4, r4, #2
 800dc5e:	2600      	movs	r6, #0
 800dc60:	42a6      	cmp	r6, r4
 800dc62:	d109      	bne.n	800dc78 <__libc_init_array+0x24>
 800dc64:	4d0b      	ldr	r5, [pc, #44]	; (800dc94 <__libc_init_array+0x40>)
 800dc66:	4c0c      	ldr	r4, [pc, #48]	; (800dc98 <__libc_init_array+0x44>)
 800dc68:	f002 fd54 	bl	8010714 <_init>
 800dc6c:	1b64      	subs	r4, r4, r5
 800dc6e:	10a4      	asrs	r4, r4, #2
 800dc70:	2600      	movs	r6, #0
 800dc72:	42a6      	cmp	r6, r4
 800dc74:	d105      	bne.n	800dc82 <__libc_init_array+0x2e>
 800dc76:	bd70      	pop	{r4, r5, r6, pc}
 800dc78:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc7c:	4798      	blx	r3
 800dc7e:	3601      	adds	r6, #1
 800dc80:	e7ee      	b.n	800dc60 <__libc_init_array+0xc>
 800dc82:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc86:	4798      	blx	r3
 800dc88:	3601      	adds	r6, #1
 800dc8a:	e7f2      	b.n	800dc72 <__libc_init_array+0x1e>
 800dc8c:	080186b8 	.word	0x080186b8
 800dc90:	080186b8 	.word	0x080186b8
 800dc94:	080186b8 	.word	0x080186b8
 800dc98:	080186bc 	.word	0x080186bc

0800dc9c <__retarget_lock_init_recursive>:
 800dc9c:	4770      	bx	lr

0800dc9e <__retarget_lock_acquire_recursive>:
 800dc9e:	4770      	bx	lr

0800dca0 <__retarget_lock_release_recursive>:
 800dca0:	4770      	bx	lr

0800dca2 <quorem>:
 800dca2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca6:	6903      	ldr	r3, [r0, #16]
 800dca8:	690c      	ldr	r4, [r1, #16]
 800dcaa:	42a3      	cmp	r3, r4
 800dcac:	4607      	mov	r7, r0
 800dcae:	db7e      	blt.n	800ddae <quorem+0x10c>
 800dcb0:	3c01      	subs	r4, #1
 800dcb2:	f101 0814 	add.w	r8, r1, #20
 800dcb6:	f100 0514 	add.w	r5, r0, #20
 800dcba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcbe:	9301      	str	r3, [sp, #4]
 800dcc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dcc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	429a      	cmp	r2, r3
 800dccc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dcd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dcd4:	fbb2 f6f3 	udiv	r6, r2, r3
 800dcd8:	d331      	bcc.n	800dd3e <quorem+0x9c>
 800dcda:	f04f 0e00 	mov.w	lr, #0
 800dcde:	4640      	mov	r0, r8
 800dce0:	46ac      	mov	ip, r5
 800dce2:	46f2      	mov	sl, lr
 800dce4:	f850 2b04 	ldr.w	r2, [r0], #4
 800dce8:	b293      	uxth	r3, r2
 800dcea:	fb06 e303 	mla	r3, r6, r3, lr
 800dcee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dcf2:	0c1a      	lsrs	r2, r3, #16
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	ebaa 0303 	sub.w	r3, sl, r3
 800dcfa:	f8dc a000 	ldr.w	sl, [ip]
 800dcfe:	fa13 f38a 	uxtah	r3, r3, sl
 800dd02:	fb06 220e 	mla	r2, r6, lr, r2
 800dd06:	9300      	str	r3, [sp, #0]
 800dd08:	9b00      	ldr	r3, [sp, #0]
 800dd0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd0e:	b292      	uxth	r2, r2
 800dd10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dd14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd18:	f8bd 3000 	ldrh.w	r3, [sp]
 800dd1c:	4581      	cmp	r9, r0
 800dd1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd22:	f84c 3b04 	str.w	r3, [ip], #4
 800dd26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dd2a:	d2db      	bcs.n	800dce4 <quorem+0x42>
 800dd2c:	f855 300b 	ldr.w	r3, [r5, fp]
 800dd30:	b92b      	cbnz	r3, 800dd3e <quorem+0x9c>
 800dd32:	9b01      	ldr	r3, [sp, #4]
 800dd34:	3b04      	subs	r3, #4
 800dd36:	429d      	cmp	r5, r3
 800dd38:	461a      	mov	r2, r3
 800dd3a:	d32c      	bcc.n	800dd96 <quorem+0xf4>
 800dd3c:	613c      	str	r4, [r7, #16]
 800dd3e:	4638      	mov	r0, r7
 800dd40:	f001 f8f4 	bl	800ef2c <__mcmp>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	db22      	blt.n	800dd8e <quorem+0xec>
 800dd48:	3601      	adds	r6, #1
 800dd4a:	4629      	mov	r1, r5
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd52:	f8d1 c000 	ldr.w	ip, [r1]
 800dd56:	b293      	uxth	r3, r2
 800dd58:	1ac3      	subs	r3, r0, r3
 800dd5a:	0c12      	lsrs	r2, r2, #16
 800dd5c:	fa13 f38c 	uxtah	r3, r3, ip
 800dd60:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800dd64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd6e:	45c1      	cmp	r9, r8
 800dd70:	f841 3b04 	str.w	r3, [r1], #4
 800dd74:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dd78:	d2e9      	bcs.n	800dd4e <quorem+0xac>
 800dd7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd82:	b922      	cbnz	r2, 800dd8e <quorem+0xec>
 800dd84:	3b04      	subs	r3, #4
 800dd86:	429d      	cmp	r5, r3
 800dd88:	461a      	mov	r2, r3
 800dd8a:	d30a      	bcc.n	800dda2 <quorem+0x100>
 800dd8c:	613c      	str	r4, [r7, #16]
 800dd8e:	4630      	mov	r0, r6
 800dd90:	b003      	add	sp, #12
 800dd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd96:	6812      	ldr	r2, [r2, #0]
 800dd98:	3b04      	subs	r3, #4
 800dd9a:	2a00      	cmp	r2, #0
 800dd9c:	d1ce      	bne.n	800dd3c <quorem+0x9a>
 800dd9e:	3c01      	subs	r4, #1
 800dda0:	e7c9      	b.n	800dd36 <quorem+0x94>
 800dda2:	6812      	ldr	r2, [r2, #0]
 800dda4:	3b04      	subs	r3, #4
 800dda6:	2a00      	cmp	r2, #0
 800dda8:	d1f0      	bne.n	800dd8c <quorem+0xea>
 800ddaa:	3c01      	subs	r4, #1
 800ddac:	e7eb      	b.n	800dd86 <quorem+0xe4>
 800ddae:	2000      	movs	r0, #0
 800ddb0:	e7ee      	b.n	800dd90 <quorem+0xee>
 800ddb2:	0000      	movs	r0, r0
 800ddb4:	0000      	movs	r0, r0
	...

0800ddb8 <_dtoa_r>:
 800ddb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddbc:	ed2d 8b04 	vpush	{d8-d9}
 800ddc0:	69c5      	ldr	r5, [r0, #28]
 800ddc2:	b093      	sub	sp, #76	; 0x4c
 800ddc4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ddc8:	ec57 6b10 	vmov	r6, r7, d0
 800ddcc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ddd0:	9107      	str	r1, [sp, #28]
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	920a      	str	r2, [sp, #40]	; 0x28
 800ddd6:	930d      	str	r3, [sp, #52]	; 0x34
 800ddd8:	b975      	cbnz	r5, 800ddf8 <_dtoa_r+0x40>
 800ddda:	2010      	movs	r0, #16
 800dddc:	f7ff f85a 	bl	800ce94 <malloc>
 800dde0:	4602      	mov	r2, r0
 800dde2:	61e0      	str	r0, [r4, #28]
 800dde4:	b920      	cbnz	r0, 800ddf0 <_dtoa_r+0x38>
 800dde6:	4bae      	ldr	r3, [pc, #696]	; (800e0a0 <_dtoa_r+0x2e8>)
 800dde8:	21ef      	movs	r1, #239	; 0xef
 800ddea:	48ae      	ldr	r0, [pc, #696]	; (800e0a4 <_dtoa_r+0x2ec>)
 800ddec:	f001 fbcc 	bl	800f588 <__assert_func>
 800ddf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ddf4:	6005      	str	r5, [r0, #0]
 800ddf6:	60c5      	str	r5, [r0, #12]
 800ddf8:	69e3      	ldr	r3, [r4, #28]
 800ddfa:	6819      	ldr	r1, [r3, #0]
 800ddfc:	b151      	cbz	r1, 800de14 <_dtoa_r+0x5c>
 800ddfe:	685a      	ldr	r2, [r3, #4]
 800de00:	604a      	str	r2, [r1, #4]
 800de02:	2301      	movs	r3, #1
 800de04:	4093      	lsls	r3, r2
 800de06:	608b      	str	r3, [r1, #8]
 800de08:	4620      	mov	r0, r4
 800de0a:	f000 fe53 	bl	800eab4 <_Bfree>
 800de0e:	69e3      	ldr	r3, [r4, #28]
 800de10:	2200      	movs	r2, #0
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	1e3b      	subs	r3, r7, #0
 800de16:	bfbb      	ittet	lt
 800de18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800de1c:	9303      	strlt	r3, [sp, #12]
 800de1e:	2300      	movge	r3, #0
 800de20:	2201      	movlt	r2, #1
 800de22:	bfac      	ite	ge
 800de24:	f8c8 3000 	strge.w	r3, [r8]
 800de28:	f8c8 2000 	strlt.w	r2, [r8]
 800de2c:	4b9e      	ldr	r3, [pc, #632]	; (800e0a8 <_dtoa_r+0x2f0>)
 800de2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800de32:	ea33 0308 	bics.w	r3, r3, r8
 800de36:	d11b      	bne.n	800de70 <_dtoa_r+0xb8>
 800de38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de3a:	f242 730f 	movw	r3, #9999	; 0x270f
 800de3e:	6013      	str	r3, [r2, #0]
 800de40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800de44:	4333      	orrs	r3, r6
 800de46:	f000 8593 	beq.w	800e970 <_dtoa_r+0xbb8>
 800de4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de4c:	b963      	cbnz	r3, 800de68 <_dtoa_r+0xb0>
 800de4e:	4b97      	ldr	r3, [pc, #604]	; (800e0ac <_dtoa_r+0x2f4>)
 800de50:	e027      	b.n	800dea2 <_dtoa_r+0xea>
 800de52:	4b97      	ldr	r3, [pc, #604]	; (800e0b0 <_dtoa_r+0x2f8>)
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	3308      	adds	r3, #8
 800de58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de5a:	6013      	str	r3, [r2, #0]
 800de5c:	9800      	ldr	r0, [sp, #0]
 800de5e:	b013      	add	sp, #76	; 0x4c
 800de60:	ecbd 8b04 	vpop	{d8-d9}
 800de64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de68:	4b90      	ldr	r3, [pc, #576]	; (800e0ac <_dtoa_r+0x2f4>)
 800de6a:	9300      	str	r3, [sp, #0]
 800de6c:	3303      	adds	r3, #3
 800de6e:	e7f3      	b.n	800de58 <_dtoa_r+0xa0>
 800de70:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de74:	2200      	movs	r2, #0
 800de76:	ec51 0b17 	vmov	r0, r1, d7
 800de7a:	eeb0 8a47 	vmov.f32	s16, s14
 800de7e:	eef0 8a67 	vmov.f32	s17, s15
 800de82:	2300      	movs	r3, #0
 800de84:	f7f2 fe38 	bl	8000af8 <__aeabi_dcmpeq>
 800de88:	4681      	mov	r9, r0
 800de8a:	b160      	cbz	r0, 800dea6 <_dtoa_r+0xee>
 800de8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de8e:	2301      	movs	r3, #1
 800de90:	6013      	str	r3, [r2, #0]
 800de92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de94:	2b00      	cmp	r3, #0
 800de96:	f000 8568 	beq.w	800e96a <_dtoa_r+0xbb2>
 800de9a:	4b86      	ldr	r3, [pc, #536]	; (800e0b4 <_dtoa_r+0x2fc>)
 800de9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de9e:	6013      	str	r3, [r2, #0]
 800dea0:	3b01      	subs	r3, #1
 800dea2:	9300      	str	r3, [sp, #0]
 800dea4:	e7da      	b.n	800de5c <_dtoa_r+0xa4>
 800dea6:	aa10      	add	r2, sp, #64	; 0x40
 800dea8:	a911      	add	r1, sp, #68	; 0x44
 800deaa:	4620      	mov	r0, r4
 800deac:	eeb0 0a48 	vmov.f32	s0, s16
 800deb0:	eef0 0a68 	vmov.f32	s1, s17
 800deb4:	f001 f8e0 	bl	800f078 <__d2b>
 800deb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800debc:	4682      	mov	sl, r0
 800debe:	2d00      	cmp	r5, #0
 800dec0:	d07f      	beq.n	800dfc2 <_dtoa_r+0x20a>
 800dec2:	ee18 3a90 	vmov	r3, s17
 800dec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800deca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dece:	ec51 0b18 	vmov	r0, r1, d8
 800ded2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ded6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800deda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800dede:	4619      	mov	r1, r3
 800dee0:	2200      	movs	r2, #0
 800dee2:	4b75      	ldr	r3, [pc, #468]	; (800e0b8 <_dtoa_r+0x300>)
 800dee4:	f7f2 f9e8 	bl	80002b8 <__aeabi_dsub>
 800dee8:	a367      	add	r3, pc, #412	; (adr r3, 800e088 <_dtoa_r+0x2d0>)
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	f7f2 fb9b 	bl	8000628 <__aeabi_dmul>
 800def2:	a367      	add	r3, pc, #412	; (adr r3, 800e090 <_dtoa_r+0x2d8>)
 800def4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def8:	f7f2 f9e0 	bl	80002bc <__adddf3>
 800defc:	4606      	mov	r6, r0
 800defe:	4628      	mov	r0, r5
 800df00:	460f      	mov	r7, r1
 800df02:	f7f2 fb27 	bl	8000554 <__aeabi_i2d>
 800df06:	a364      	add	r3, pc, #400	; (adr r3, 800e098 <_dtoa_r+0x2e0>)
 800df08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0c:	f7f2 fb8c 	bl	8000628 <__aeabi_dmul>
 800df10:	4602      	mov	r2, r0
 800df12:	460b      	mov	r3, r1
 800df14:	4630      	mov	r0, r6
 800df16:	4639      	mov	r1, r7
 800df18:	f7f2 f9d0 	bl	80002bc <__adddf3>
 800df1c:	4606      	mov	r6, r0
 800df1e:	460f      	mov	r7, r1
 800df20:	f7f2 fe32 	bl	8000b88 <__aeabi_d2iz>
 800df24:	2200      	movs	r2, #0
 800df26:	4683      	mov	fp, r0
 800df28:	2300      	movs	r3, #0
 800df2a:	4630      	mov	r0, r6
 800df2c:	4639      	mov	r1, r7
 800df2e:	f7f2 fded 	bl	8000b0c <__aeabi_dcmplt>
 800df32:	b148      	cbz	r0, 800df48 <_dtoa_r+0x190>
 800df34:	4658      	mov	r0, fp
 800df36:	f7f2 fb0d 	bl	8000554 <__aeabi_i2d>
 800df3a:	4632      	mov	r2, r6
 800df3c:	463b      	mov	r3, r7
 800df3e:	f7f2 fddb 	bl	8000af8 <__aeabi_dcmpeq>
 800df42:	b908      	cbnz	r0, 800df48 <_dtoa_r+0x190>
 800df44:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df48:	f1bb 0f16 	cmp.w	fp, #22
 800df4c:	d857      	bhi.n	800dffe <_dtoa_r+0x246>
 800df4e:	4b5b      	ldr	r3, [pc, #364]	; (800e0bc <_dtoa_r+0x304>)
 800df50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800df54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df58:	ec51 0b18 	vmov	r0, r1, d8
 800df5c:	f7f2 fdd6 	bl	8000b0c <__aeabi_dcmplt>
 800df60:	2800      	cmp	r0, #0
 800df62:	d04e      	beq.n	800e002 <_dtoa_r+0x24a>
 800df64:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df68:	2300      	movs	r3, #0
 800df6a:	930c      	str	r3, [sp, #48]	; 0x30
 800df6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df6e:	1b5b      	subs	r3, r3, r5
 800df70:	1e5a      	subs	r2, r3, #1
 800df72:	bf45      	ittet	mi
 800df74:	f1c3 0301 	rsbmi	r3, r3, #1
 800df78:	9305      	strmi	r3, [sp, #20]
 800df7a:	2300      	movpl	r3, #0
 800df7c:	2300      	movmi	r3, #0
 800df7e:	9206      	str	r2, [sp, #24]
 800df80:	bf54      	ite	pl
 800df82:	9305      	strpl	r3, [sp, #20]
 800df84:	9306      	strmi	r3, [sp, #24]
 800df86:	f1bb 0f00 	cmp.w	fp, #0
 800df8a:	db3c      	blt.n	800e006 <_dtoa_r+0x24e>
 800df8c:	9b06      	ldr	r3, [sp, #24]
 800df8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800df92:	445b      	add	r3, fp
 800df94:	9306      	str	r3, [sp, #24]
 800df96:	2300      	movs	r3, #0
 800df98:	9308      	str	r3, [sp, #32]
 800df9a:	9b07      	ldr	r3, [sp, #28]
 800df9c:	2b09      	cmp	r3, #9
 800df9e:	d868      	bhi.n	800e072 <_dtoa_r+0x2ba>
 800dfa0:	2b05      	cmp	r3, #5
 800dfa2:	bfc4      	itt	gt
 800dfa4:	3b04      	subgt	r3, #4
 800dfa6:	9307      	strgt	r3, [sp, #28]
 800dfa8:	9b07      	ldr	r3, [sp, #28]
 800dfaa:	f1a3 0302 	sub.w	r3, r3, #2
 800dfae:	bfcc      	ite	gt
 800dfb0:	2500      	movgt	r5, #0
 800dfb2:	2501      	movle	r5, #1
 800dfb4:	2b03      	cmp	r3, #3
 800dfb6:	f200 8085 	bhi.w	800e0c4 <_dtoa_r+0x30c>
 800dfba:	e8df f003 	tbb	[pc, r3]
 800dfbe:	3b2e      	.short	0x3b2e
 800dfc0:	5839      	.short	0x5839
 800dfc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dfc6:	441d      	add	r5, r3
 800dfc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dfcc:	2b20      	cmp	r3, #32
 800dfce:	bfc1      	itttt	gt
 800dfd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dfd4:	fa08 f803 	lslgt.w	r8, r8, r3
 800dfd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dfdc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dfe0:	bfd6      	itet	le
 800dfe2:	f1c3 0320 	rsble	r3, r3, #32
 800dfe6:	ea48 0003 	orrgt.w	r0, r8, r3
 800dfea:	fa06 f003 	lslle.w	r0, r6, r3
 800dfee:	f7f2 faa1 	bl	8000534 <__aeabi_ui2d>
 800dff2:	2201      	movs	r2, #1
 800dff4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800dff8:	3d01      	subs	r5, #1
 800dffa:	920e      	str	r2, [sp, #56]	; 0x38
 800dffc:	e76f      	b.n	800dede <_dtoa_r+0x126>
 800dffe:	2301      	movs	r3, #1
 800e000:	e7b3      	b.n	800df6a <_dtoa_r+0x1b2>
 800e002:	900c      	str	r0, [sp, #48]	; 0x30
 800e004:	e7b2      	b.n	800df6c <_dtoa_r+0x1b4>
 800e006:	9b05      	ldr	r3, [sp, #20]
 800e008:	eba3 030b 	sub.w	r3, r3, fp
 800e00c:	9305      	str	r3, [sp, #20]
 800e00e:	f1cb 0300 	rsb	r3, fp, #0
 800e012:	9308      	str	r3, [sp, #32]
 800e014:	2300      	movs	r3, #0
 800e016:	930b      	str	r3, [sp, #44]	; 0x2c
 800e018:	e7bf      	b.n	800df9a <_dtoa_r+0x1e2>
 800e01a:	2300      	movs	r3, #0
 800e01c:	9309      	str	r3, [sp, #36]	; 0x24
 800e01e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e020:	2b00      	cmp	r3, #0
 800e022:	dc52      	bgt.n	800e0ca <_dtoa_r+0x312>
 800e024:	2301      	movs	r3, #1
 800e026:	9301      	str	r3, [sp, #4]
 800e028:	9304      	str	r3, [sp, #16]
 800e02a:	461a      	mov	r2, r3
 800e02c:	920a      	str	r2, [sp, #40]	; 0x28
 800e02e:	e00b      	b.n	800e048 <_dtoa_r+0x290>
 800e030:	2301      	movs	r3, #1
 800e032:	e7f3      	b.n	800e01c <_dtoa_r+0x264>
 800e034:	2300      	movs	r3, #0
 800e036:	9309      	str	r3, [sp, #36]	; 0x24
 800e038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e03a:	445b      	add	r3, fp
 800e03c:	9301      	str	r3, [sp, #4]
 800e03e:	3301      	adds	r3, #1
 800e040:	2b01      	cmp	r3, #1
 800e042:	9304      	str	r3, [sp, #16]
 800e044:	bfb8      	it	lt
 800e046:	2301      	movlt	r3, #1
 800e048:	69e0      	ldr	r0, [r4, #28]
 800e04a:	2100      	movs	r1, #0
 800e04c:	2204      	movs	r2, #4
 800e04e:	f102 0614 	add.w	r6, r2, #20
 800e052:	429e      	cmp	r6, r3
 800e054:	d93d      	bls.n	800e0d2 <_dtoa_r+0x31a>
 800e056:	6041      	str	r1, [r0, #4]
 800e058:	4620      	mov	r0, r4
 800e05a:	f000 fceb 	bl	800ea34 <_Balloc>
 800e05e:	9000      	str	r0, [sp, #0]
 800e060:	2800      	cmp	r0, #0
 800e062:	d139      	bne.n	800e0d8 <_dtoa_r+0x320>
 800e064:	4b16      	ldr	r3, [pc, #88]	; (800e0c0 <_dtoa_r+0x308>)
 800e066:	4602      	mov	r2, r0
 800e068:	f240 11af 	movw	r1, #431	; 0x1af
 800e06c:	e6bd      	b.n	800ddea <_dtoa_r+0x32>
 800e06e:	2301      	movs	r3, #1
 800e070:	e7e1      	b.n	800e036 <_dtoa_r+0x27e>
 800e072:	2501      	movs	r5, #1
 800e074:	2300      	movs	r3, #0
 800e076:	9307      	str	r3, [sp, #28]
 800e078:	9509      	str	r5, [sp, #36]	; 0x24
 800e07a:	f04f 33ff 	mov.w	r3, #4294967295
 800e07e:	9301      	str	r3, [sp, #4]
 800e080:	9304      	str	r3, [sp, #16]
 800e082:	2200      	movs	r2, #0
 800e084:	2312      	movs	r3, #18
 800e086:	e7d1      	b.n	800e02c <_dtoa_r+0x274>
 800e088:	636f4361 	.word	0x636f4361
 800e08c:	3fd287a7 	.word	0x3fd287a7
 800e090:	8b60c8b3 	.word	0x8b60c8b3
 800e094:	3fc68a28 	.word	0x3fc68a28
 800e098:	509f79fb 	.word	0x509f79fb
 800e09c:	3fd34413 	.word	0x3fd34413
 800e0a0:	08018309 	.word	0x08018309
 800e0a4:	08018320 	.word	0x08018320
 800e0a8:	7ff00000 	.word	0x7ff00000
 800e0ac:	08018305 	.word	0x08018305
 800e0b0:	080182fc 	.word	0x080182fc
 800e0b4:	080182d9 	.word	0x080182d9
 800e0b8:	3ff80000 	.word	0x3ff80000
 800e0bc:	08018410 	.word	0x08018410
 800e0c0:	08018378 	.word	0x08018378
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0c8:	e7d7      	b.n	800e07a <_dtoa_r+0x2c2>
 800e0ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0cc:	9301      	str	r3, [sp, #4]
 800e0ce:	9304      	str	r3, [sp, #16]
 800e0d0:	e7ba      	b.n	800e048 <_dtoa_r+0x290>
 800e0d2:	3101      	adds	r1, #1
 800e0d4:	0052      	lsls	r2, r2, #1
 800e0d6:	e7ba      	b.n	800e04e <_dtoa_r+0x296>
 800e0d8:	69e3      	ldr	r3, [r4, #28]
 800e0da:	9a00      	ldr	r2, [sp, #0]
 800e0dc:	601a      	str	r2, [r3, #0]
 800e0de:	9b04      	ldr	r3, [sp, #16]
 800e0e0:	2b0e      	cmp	r3, #14
 800e0e2:	f200 80a8 	bhi.w	800e236 <_dtoa_r+0x47e>
 800e0e6:	2d00      	cmp	r5, #0
 800e0e8:	f000 80a5 	beq.w	800e236 <_dtoa_r+0x47e>
 800e0ec:	f1bb 0f00 	cmp.w	fp, #0
 800e0f0:	dd38      	ble.n	800e164 <_dtoa_r+0x3ac>
 800e0f2:	4bc0      	ldr	r3, [pc, #768]	; (800e3f4 <_dtoa_r+0x63c>)
 800e0f4:	f00b 020f 	and.w	r2, fp, #15
 800e0f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e100:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e104:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e108:	d019      	beq.n	800e13e <_dtoa_r+0x386>
 800e10a:	4bbb      	ldr	r3, [pc, #748]	; (800e3f8 <_dtoa_r+0x640>)
 800e10c:	ec51 0b18 	vmov	r0, r1, d8
 800e110:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e114:	f7f2 fbb2 	bl	800087c <__aeabi_ddiv>
 800e118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e11c:	f008 080f 	and.w	r8, r8, #15
 800e120:	2503      	movs	r5, #3
 800e122:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e3f8 <_dtoa_r+0x640>
 800e126:	f1b8 0f00 	cmp.w	r8, #0
 800e12a:	d10a      	bne.n	800e142 <_dtoa_r+0x38a>
 800e12c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e130:	4632      	mov	r2, r6
 800e132:	463b      	mov	r3, r7
 800e134:	f7f2 fba2 	bl	800087c <__aeabi_ddiv>
 800e138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e13c:	e02b      	b.n	800e196 <_dtoa_r+0x3de>
 800e13e:	2502      	movs	r5, #2
 800e140:	e7ef      	b.n	800e122 <_dtoa_r+0x36a>
 800e142:	f018 0f01 	tst.w	r8, #1
 800e146:	d008      	beq.n	800e15a <_dtoa_r+0x3a2>
 800e148:	4630      	mov	r0, r6
 800e14a:	4639      	mov	r1, r7
 800e14c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e150:	f7f2 fa6a 	bl	8000628 <__aeabi_dmul>
 800e154:	3501      	adds	r5, #1
 800e156:	4606      	mov	r6, r0
 800e158:	460f      	mov	r7, r1
 800e15a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e15e:	f109 0908 	add.w	r9, r9, #8
 800e162:	e7e0      	b.n	800e126 <_dtoa_r+0x36e>
 800e164:	f000 809f 	beq.w	800e2a6 <_dtoa_r+0x4ee>
 800e168:	f1cb 0600 	rsb	r6, fp, #0
 800e16c:	4ba1      	ldr	r3, [pc, #644]	; (800e3f4 <_dtoa_r+0x63c>)
 800e16e:	4fa2      	ldr	r7, [pc, #648]	; (800e3f8 <_dtoa_r+0x640>)
 800e170:	f006 020f 	and.w	r2, r6, #15
 800e174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17c:	ec51 0b18 	vmov	r0, r1, d8
 800e180:	f7f2 fa52 	bl	8000628 <__aeabi_dmul>
 800e184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e188:	1136      	asrs	r6, r6, #4
 800e18a:	2300      	movs	r3, #0
 800e18c:	2502      	movs	r5, #2
 800e18e:	2e00      	cmp	r6, #0
 800e190:	d17e      	bne.n	800e290 <_dtoa_r+0x4d8>
 800e192:	2b00      	cmp	r3, #0
 800e194:	d1d0      	bne.n	800e138 <_dtoa_r+0x380>
 800e196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e198:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	f000 8084 	beq.w	800e2aa <_dtoa_r+0x4f2>
 800e1a2:	4b96      	ldr	r3, [pc, #600]	; (800e3fc <_dtoa_r+0x644>)
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	4640      	mov	r0, r8
 800e1a8:	4649      	mov	r1, r9
 800e1aa:	f7f2 fcaf 	bl	8000b0c <__aeabi_dcmplt>
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	d07b      	beq.n	800e2aa <_dtoa_r+0x4f2>
 800e1b2:	9b04      	ldr	r3, [sp, #16]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d078      	beq.n	800e2aa <_dtoa_r+0x4f2>
 800e1b8:	9b01      	ldr	r3, [sp, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	dd39      	ble.n	800e232 <_dtoa_r+0x47a>
 800e1be:	4b90      	ldr	r3, [pc, #576]	; (800e400 <_dtoa_r+0x648>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	4640      	mov	r0, r8
 800e1c4:	4649      	mov	r1, r9
 800e1c6:	f7f2 fa2f 	bl	8000628 <__aeabi_dmul>
 800e1ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1ce:	9e01      	ldr	r6, [sp, #4]
 800e1d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e1d4:	3501      	adds	r5, #1
 800e1d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e1da:	4628      	mov	r0, r5
 800e1dc:	f7f2 f9ba 	bl	8000554 <__aeabi_i2d>
 800e1e0:	4642      	mov	r2, r8
 800e1e2:	464b      	mov	r3, r9
 800e1e4:	f7f2 fa20 	bl	8000628 <__aeabi_dmul>
 800e1e8:	4b86      	ldr	r3, [pc, #536]	; (800e404 <_dtoa_r+0x64c>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f7f2 f866 	bl	80002bc <__adddf3>
 800e1f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e1f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1f8:	9303      	str	r3, [sp, #12]
 800e1fa:	2e00      	cmp	r6, #0
 800e1fc:	d158      	bne.n	800e2b0 <_dtoa_r+0x4f8>
 800e1fe:	4b82      	ldr	r3, [pc, #520]	; (800e408 <_dtoa_r+0x650>)
 800e200:	2200      	movs	r2, #0
 800e202:	4640      	mov	r0, r8
 800e204:	4649      	mov	r1, r9
 800e206:	f7f2 f857 	bl	80002b8 <__aeabi_dsub>
 800e20a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e20e:	4680      	mov	r8, r0
 800e210:	4689      	mov	r9, r1
 800e212:	f7f2 fc99 	bl	8000b48 <__aeabi_dcmpgt>
 800e216:	2800      	cmp	r0, #0
 800e218:	f040 8296 	bne.w	800e748 <_dtoa_r+0x990>
 800e21c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e220:	4640      	mov	r0, r8
 800e222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e226:	4649      	mov	r1, r9
 800e228:	f7f2 fc70 	bl	8000b0c <__aeabi_dcmplt>
 800e22c:	2800      	cmp	r0, #0
 800e22e:	f040 8289 	bne.w	800e744 <_dtoa_r+0x98c>
 800e232:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e238:	2b00      	cmp	r3, #0
 800e23a:	f2c0 814e 	blt.w	800e4da <_dtoa_r+0x722>
 800e23e:	f1bb 0f0e 	cmp.w	fp, #14
 800e242:	f300 814a 	bgt.w	800e4da <_dtoa_r+0x722>
 800e246:	4b6b      	ldr	r3, [pc, #428]	; (800e3f4 <_dtoa_r+0x63c>)
 800e248:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e24c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e252:	2b00      	cmp	r3, #0
 800e254:	f280 80dc 	bge.w	800e410 <_dtoa_r+0x658>
 800e258:	9b04      	ldr	r3, [sp, #16]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	f300 80d8 	bgt.w	800e410 <_dtoa_r+0x658>
 800e260:	f040 826f 	bne.w	800e742 <_dtoa_r+0x98a>
 800e264:	4b68      	ldr	r3, [pc, #416]	; (800e408 <_dtoa_r+0x650>)
 800e266:	2200      	movs	r2, #0
 800e268:	4640      	mov	r0, r8
 800e26a:	4649      	mov	r1, r9
 800e26c:	f7f2 f9dc 	bl	8000628 <__aeabi_dmul>
 800e270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e274:	f7f2 fc5e 	bl	8000b34 <__aeabi_dcmpge>
 800e278:	9e04      	ldr	r6, [sp, #16]
 800e27a:	4637      	mov	r7, r6
 800e27c:	2800      	cmp	r0, #0
 800e27e:	f040 8245 	bne.w	800e70c <_dtoa_r+0x954>
 800e282:	9d00      	ldr	r5, [sp, #0]
 800e284:	2331      	movs	r3, #49	; 0x31
 800e286:	f805 3b01 	strb.w	r3, [r5], #1
 800e28a:	f10b 0b01 	add.w	fp, fp, #1
 800e28e:	e241      	b.n	800e714 <_dtoa_r+0x95c>
 800e290:	07f2      	lsls	r2, r6, #31
 800e292:	d505      	bpl.n	800e2a0 <_dtoa_r+0x4e8>
 800e294:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e298:	f7f2 f9c6 	bl	8000628 <__aeabi_dmul>
 800e29c:	3501      	adds	r5, #1
 800e29e:	2301      	movs	r3, #1
 800e2a0:	1076      	asrs	r6, r6, #1
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	e773      	b.n	800e18e <_dtoa_r+0x3d6>
 800e2a6:	2502      	movs	r5, #2
 800e2a8:	e775      	b.n	800e196 <_dtoa_r+0x3de>
 800e2aa:	9e04      	ldr	r6, [sp, #16]
 800e2ac:	465f      	mov	r7, fp
 800e2ae:	e792      	b.n	800e1d6 <_dtoa_r+0x41e>
 800e2b0:	9900      	ldr	r1, [sp, #0]
 800e2b2:	4b50      	ldr	r3, [pc, #320]	; (800e3f4 <_dtoa_r+0x63c>)
 800e2b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2b8:	4431      	add	r1, r6
 800e2ba:	9102      	str	r1, [sp, #8]
 800e2bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e2be:	eeb0 9a47 	vmov.f32	s18, s14
 800e2c2:	eef0 9a67 	vmov.f32	s19, s15
 800e2c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e2ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e2ce:	2900      	cmp	r1, #0
 800e2d0:	d044      	beq.n	800e35c <_dtoa_r+0x5a4>
 800e2d2:	494e      	ldr	r1, [pc, #312]	; (800e40c <_dtoa_r+0x654>)
 800e2d4:	2000      	movs	r0, #0
 800e2d6:	f7f2 fad1 	bl	800087c <__aeabi_ddiv>
 800e2da:	ec53 2b19 	vmov	r2, r3, d9
 800e2de:	f7f1 ffeb 	bl	80002b8 <__aeabi_dsub>
 800e2e2:	9d00      	ldr	r5, [sp, #0]
 800e2e4:	ec41 0b19 	vmov	d9, r0, r1
 800e2e8:	4649      	mov	r1, r9
 800e2ea:	4640      	mov	r0, r8
 800e2ec:	f7f2 fc4c 	bl	8000b88 <__aeabi_d2iz>
 800e2f0:	4606      	mov	r6, r0
 800e2f2:	f7f2 f92f 	bl	8000554 <__aeabi_i2d>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	4640      	mov	r0, r8
 800e2fc:	4649      	mov	r1, r9
 800e2fe:	f7f1 ffdb 	bl	80002b8 <__aeabi_dsub>
 800e302:	3630      	adds	r6, #48	; 0x30
 800e304:	f805 6b01 	strb.w	r6, [r5], #1
 800e308:	ec53 2b19 	vmov	r2, r3, d9
 800e30c:	4680      	mov	r8, r0
 800e30e:	4689      	mov	r9, r1
 800e310:	f7f2 fbfc 	bl	8000b0c <__aeabi_dcmplt>
 800e314:	2800      	cmp	r0, #0
 800e316:	d164      	bne.n	800e3e2 <_dtoa_r+0x62a>
 800e318:	4642      	mov	r2, r8
 800e31a:	464b      	mov	r3, r9
 800e31c:	4937      	ldr	r1, [pc, #220]	; (800e3fc <_dtoa_r+0x644>)
 800e31e:	2000      	movs	r0, #0
 800e320:	f7f1 ffca 	bl	80002b8 <__aeabi_dsub>
 800e324:	ec53 2b19 	vmov	r2, r3, d9
 800e328:	f7f2 fbf0 	bl	8000b0c <__aeabi_dcmplt>
 800e32c:	2800      	cmp	r0, #0
 800e32e:	f040 80b6 	bne.w	800e49e <_dtoa_r+0x6e6>
 800e332:	9b02      	ldr	r3, [sp, #8]
 800e334:	429d      	cmp	r5, r3
 800e336:	f43f af7c 	beq.w	800e232 <_dtoa_r+0x47a>
 800e33a:	4b31      	ldr	r3, [pc, #196]	; (800e400 <_dtoa_r+0x648>)
 800e33c:	ec51 0b19 	vmov	r0, r1, d9
 800e340:	2200      	movs	r2, #0
 800e342:	f7f2 f971 	bl	8000628 <__aeabi_dmul>
 800e346:	4b2e      	ldr	r3, [pc, #184]	; (800e400 <_dtoa_r+0x648>)
 800e348:	ec41 0b19 	vmov	d9, r0, r1
 800e34c:	2200      	movs	r2, #0
 800e34e:	4640      	mov	r0, r8
 800e350:	4649      	mov	r1, r9
 800e352:	f7f2 f969 	bl	8000628 <__aeabi_dmul>
 800e356:	4680      	mov	r8, r0
 800e358:	4689      	mov	r9, r1
 800e35a:	e7c5      	b.n	800e2e8 <_dtoa_r+0x530>
 800e35c:	ec51 0b17 	vmov	r0, r1, d7
 800e360:	f7f2 f962 	bl	8000628 <__aeabi_dmul>
 800e364:	9b02      	ldr	r3, [sp, #8]
 800e366:	9d00      	ldr	r5, [sp, #0]
 800e368:	930f      	str	r3, [sp, #60]	; 0x3c
 800e36a:	ec41 0b19 	vmov	d9, r0, r1
 800e36e:	4649      	mov	r1, r9
 800e370:	4640      	mov	r0, r8
 800e372:	f7f2 fc09 	bl	8000b88 <__aeabi_d2iz>
 800e376:	4606      	mov	r6, r0
 800e378:	f7f2 f8ec 	bl	8000554 <__aeabi_i2d>
 800e37c:	3630      	adds	r6, #48	; 0x30
 800e37e:	4602      	mov	r2, r0
 800e380:	460b      	mov	r3, r1
 800e382:	4640      	mov	r0, r8
 800e384:	4649      	mov	r1, r9
 800e386:	f7f1 ff97 	bl	80002b8 <__aeabi_dsub>
 800e38a:	f805 6b01 	strb.w	r6, [r5], #1
 800e38e:	9b02      	ldr	r3, [sp, #8]
 800e390:	429d      	cmp	r5, r3
 800e392:	4680      	mov	r8, r0
 800e394:	4689      	mov	r9, r1
 800e396:	f04f 0200 	mov.w	r2, #0
 800e39a:	d124      	bne.n	800e3e6 <_dtoa_r+0x62e>
 800e39c:	4b1b      	ldr	r3, [pc, #108]	; (800e40c <_dtoa_r+0x654>)
 800e39e:	ec51 0b19 	vmov	r0, r1, d9
 800e3a2:	f7f1 ff8b 	bl	80002bc <__adddf3>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	4640      	mov	r0, r8
 800e3ac:	4649      	mov	r1, r9
 800e3ae:	f7f2 fbcb 	bl	8000b48 <__aeabi_dcmpgt>
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	d173      	bne.n	800e49e <_dtoa_r+0x6e6>
 800e3b6:	ec53 2b19 	vmov	r2, r3, d9
 800e3ba:	4914      	ldr	r1, [pc, #80]	; (800e40c <_dtoa_r+0x654>)
 800e3bc:	2000      	movs	r0, #0
 800e3be:	f7f1 ff7b 	bl	80002b8 <__aeabi_dsub>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	4649      	mov	r1, r9
 800e3ca:	f7f2 fb9f 	bl	8000b0c <__aeabi_dcmplt>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	f43f af2f 	beq.w	800e232 <_dtoa_r+0x47a>
 800e3d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e3d6:	1e6b      	subs	r3, r5, #1
 800e3d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e3de:	2b30      	cmp	r3, #48	; 0x30
 800e3e0:	d0f8      	beq.n	800e3d4 <_dtoa_r+0x61c>
 800e3e2:	46bb      	mov	fp, r7
 800e3e4:	e04a      	b.n	800e47c <_dtoa_r+0x6c4>
 800e3e6:	4b06      	ldr	r3, [pc, #24]	; (800e400 <_dtoa_r+0x648>)
 800e3e8:	f7f2 f91e 	bl	8000628 <__aeabi_dmul>
 800e3ec:	4680      	mov	r8, r0
 800e3ee:	4689      	mov	r9, r1
 800e3f0:	e7bd      	b.n	800e36e <_dtoa_r+0x5b6>
 800e3f2:	bf00      	nop
 800e3f4:	08018410 	.word	0x08018410
 800e3f8:	080183e8 	.word	0x080183e8
 800e3fc:	3ff00000 	.word	0x3ff00000
 800e400:	40240000 	.word	0x40240000
 800e404:	401c0000 	.word	0x401c0000
 800e408:	40140000 	.word	0x40140000
 800e40c:	3fe00000 	.word	0x3fe00000
 800e410:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e414:	9d00      	ldr	r5, [sp, #0]
 800e416:	4642      	mov	r2, r8
 800e418:	464b      	mov	r3, r9
 800e41a:	4630      	mov	r0, r6
 800e41c:	4639      	mov	r1, r7
 800e41e:	f7f2 fa2d 	bl	800087c <__aeabi_ddiv>
 800e422:	f7f2 fbb1 	bl	8000b88 <__aeabi_d2iz>
 800e426:	9001      	str	r0, [sp, #4]
 800e428:	f7f2 f894 	bl	8000554 <__aeabi_i2d>
 800e42c:	4642      	mov	r2, r8
 800e42e:	464b      	mov	r3, r9
 800e430:	f7f2 f8fa 	bl	8000628 <__aeabi_dmul>
 800e434:	4602      	mov	r2, r0
 800e436:	460b      	mov	r3, r1
 800e438:	4630      	mov	r0, r6
 800e43a:	4639      	mov	r1, r7
 800e43c:	f7f1 ff3c 	bl	80002b8 <__aeabi_dsub>
 800e440:	9e01      	ldr	r6, [sp, #4]
 800e442:	9f04      	ldr	r7, [sp, #16]
 800e444:	3630      	adds	r6, #48	; 0x30
 800e446:	f805 6b01 	strb.w	r6, [r5], #1
 800e44a:	9e00      	ldr	r6, [sp, #0]
 800e44c:	1bae      	subs	r6, r5, r6
 800e44e:	42b7      	cmp	r7, r6
 800e450:	4602      	mov	r2, r0
 800e452:	460b      	mov	r3, r1
 800e454:	d134      	bne.n	800e4c0 <_dtoa_r+0x708>
 800e456:	f7f1 ff31 	bl	80002bc <__adddf3>
 800e45a:	4642      	mov	r2, r8
 800e45c:	464b      	mov	r3, r9
 800e45e:	4606      	mov	r6, r0
 800e460:	460f      	mov	r7, r1
 800e462:	f7f2 fb71 	bl	8000b48 <__aeabi_dcmpgt>
 800e466:	b9c8      	cbnz	r0, 800e49c <_dtoa_r+0x6e4>
 800e468:	4642      	mov	r2, r8
 800e46a:	464b      	mov	r3, r9
 800e46c:	4630      	mov	r0, r6
 800e46e:	4639      	mov	r1, r7
 800e470:	f7f2 fb42 	bl	8000af8 <__aeabi_dcmpeq>
 800e474:	b110      	cbz	r0, 800e47c <_dtoa_r+0x6c4>
 800e476:	9b01      	ldr	r3, [sp, #4]
 800e478:	07db      	lsls	r3, r3, #31
 800e47a:	d40f      	bmi.n	800e49c <_dtoa_r+0x6e4>
 800e47c:	4651      	mov	r1, sl
 800e47e:	4620      	mov	r0, r4
 800e480:	f000 fb18 	bl	800eab4 <_Bfree>
 800e484:	2300      	movs	r3, #0
 800e486:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e488:	702b      	strb	r3, [r5, #0]
 800e48a:	f10b 0301 	add.w	r3, fp, #1
 800e48e:	6013      	str	r3, [r2, #0]
 800e490:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e492:	2b00      	cmp	r3, #0
 800e494:	f43f ace2 	beq.w	800de5c <_dtoa_r+0xa4>
 800e498:	601d      	str	r5, [r3, #0]
 800e49a:	e4df      	b.n	800de5c <_dtoa_r+0xa4>
 800e49c:	465f      	mov	r7, fp
 800e49e:	462b      	mov	r3, r5
 800e4a0:	461d      	mov	r5, r3
 800e4a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e4a6:	2a39      	cmp	r2, #57	; 0x39
 800e4a8:	d106      	bne.n	800e4b8 <_dtoa_r+0x700>
 800e4aa:	9a00      	ldr	r2, [sp, #0]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d1f7      	bne.n	800e4a0 <_dtoa_r+0x6e8>
 800e4b0:	9900      	ldr	r1, [sp, #0]
 800e4b2:	2230      	movs	r2, #48	; 0x30
 800e4b4:	3701      	adds	r7, #1
 800e4b6:	700a      	strb	r2, [r1, #0]
 800e4b8:	781a      	ldrb	r2, [r3, #0]
 800e4ba:	3201      	adds	r2, #1
 800e4bc:	701a      	strb	r2, [r3, #0]
 800e4be:	e790      	b.n	800e3e2 <_dtoa_r+0x62a>
 800e4c0:	4ba3      	ldr	r3, [pc, #652]	; (800e750 <_dtoa_r+0x998>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f7f2 f8b0 	bl	8000628 <__aeabi_dmul>
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	4606      	mov	r6, r0
 800e4ce:	460f      	mov	r7, r1
 800e4d0:	f7f2 fb12 	bl	8000af8 <__aeabi_dcmpeq>
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	d09e      	beq.n	800e416 <_dtoa_r+0x65e>
 800e4d8:	e7d0      	b.n	800e47c <_dtoa_r+0x6c4>
 800e4da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4dc:	2a00      	cmp	r2, #0
 800e4de:	f000 80ca 	beq.w	800e676 <_dtoa_r+0x8be>
 800e4e2:	9a07      	ldr	r2, [sp, #28]
 800e4e4:	2a01      	cmp	r2, #1
 800e4e6:	f300 80ad 	bgt.w	800e644 <_dtoa_r+0x88c>
 800e4ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4ec:	2a00      	cmp	r2, #0
 800e4ee:	f000 80a5 	beq.w	800e63c <_dtoa_r+0x884>
 800e4f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e4f6:	9e08      	ldr	r6, [sp, #32]
 800e4f8:	9d05      	ldr	r5, [sp, #20]
 800e4fa:	9a05      	ldr	r2, [sp, #20]
 800e4fc:	441a      	add	r2, r3
 800e4fe:	9205      	str	r2, [sp, #20]
 800e500:	9a06      	ldr	r2, [sp, #24]
 800e502:	2101      	movs	r1, #1
 800e504:	441a      	add	r2, r3
 800e506:	4620      	mov	r0, r4
 800e508:	9206      	str	r2, [sp, #24]
 800e50a:	f000 fb89 	bl	800ec20 <__i2b>
 800e50e:	4607      	mov	r7, r0
 800e510:	b165      	cbz	r5, 800e52c <_dtoa_r+0x774>
 800e512:	9b06      	ldr	r3, [sp, #24]
 800e514:	2b00      	cmp	r3, #0
 800e516:	dd09      	ble.n	800e52c <_dtoa_r+0x774>
 800e518:	42ab      	cmp	r3, r5
 800e51a:	9a05      	ldr	r2, [sp, #20]
 800e51c:	bfa8      	it	ge
 800e51e:	462b      	movge	r3, r5
 800e520:	1ad2      	subs	r2, r2, r3
 800e522:	9205      	str	r2, [sp, #20]
 800e524:	9a06      	ldr	r2, [sp, #24]
 800e526:	1aed      	subs	r5, r5, r3
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	9306      	str	r3, [sp, #24]
 800e52c:	9b08      	ldr	r3, [sp, #32]
 800e52e:	b1f3      	cbz	r3, 800e56e <_dtoa_r+0x7b6>
 800e530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e532:	2b00      	cmp	r3, #0
 800e534:	f000 80a3 	beq.w	800e67e <_dtoa_r+0x8c6>
 800e538:	2e00      	cmp	r6, #0
 800e53a:	dd10      	ble.n	800e55e <_dtoa_r+0x7a6>
 800e53c:	4639      	mov	r1, r7
 800e53e:	4632      	mov	r2, r6
 800e540:	4620      	mov	r0, r4
 800e542:	f000 fc2d 	bl	800eda0 <__pow5mult>
 800e546:	4652      	mov	r2, sl
 800e548:	4601      	mov	r1, r0
 800e54a:	4607      	mov	r7, r0
 800e54c:	4620      	mov	r0, r4
 800e54e:	f000 fb7d 	bl	800ec4c <__multiply>
 800e552:	4651      	mov	r1, sl
 800e554:	4680      	mov	r8, r0
 800e556:	4620      	mov	r0, r4
 800e558:	f000 faac 	bl	800eab4 <_Bfree>
 800e55c:	46c2      	mov	sl, r8
 800e55e:	9b08      	ldr	r3, [sp, #32]
 800e560:	1b9a      	subs	r2, r3, r6
 800e562:	d004      	beq.n	800e56e <_dtoa_r+0x7b6>
 800e564:	4651      	mov	r1, sl
 800e566:	4620      	mov	r0, r4
 800e568:	f000 fc1a 	bl	800eda0 <__pow5mult>
 800e56c:	4682      	mov	sl, r0
 800e56e:	2101      	movs	r1, #1
 800e570:	4620      	mov	r0, r4
 800e572:	f000 fb55 	bl	800ec20 <__i2b>
 800e576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e578:	2b00      	cmp	r3, #0
 800e57a:	4606      	mov	r6, r0
 800e57c:	f340 8081 	ble.w	800e682 <_dtoa_r+0x8ca>
 800e580:	461a      	mov	r2, r3
 800e582:	4601      	mov	r1, r0
 800e584:	4620      	mov	r0, r4
 800e586:	f000 fc0b 	bl	800eda0 <__pow5mult>
 800e58a:	9b07      	ldr	r3, [sp, #28]
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	4606      	mov	r6, r0
 800e590:	dd7a      	ble.n	800e688 <_dtoa_r+0x8d0>
 800e592:	f04f 0800 	mov.w	r8, #0
 800e596:	6933      	ldr	r3, [r6, #16]
 800e598:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e59c:	6918      	ldr	r0, [r3, #16]
 800e59e:	f000 faf1 	bl	800eb84 <__hi0bits>
 800e5a2:	f1c0 0020 	rsb	r0, r0, #32
 800e5a6:	9b06      	ldr	r3, [sp, #24]
 800e5a8:	4418      	add	r0, r3
 800e5aa:	f010 001f 	ands.w	r0, r0, #31
 800e5ae:	f000 8094 	beq.w	800e6da <_dtoa_r+0x922>
 800e5b2:	f1c0 0320 	rsb	r3, r0, #32
 800e5b6:	2b04      	cmp	r3, #4
 800e5b8:	f340 8085 	ble.w	800e6c6 <_dtoa_r+0x90e>
 800e5bc:	9b05      	ldr	r3, [sp, #20]
 800e5be:	f1c0 001c 	rsb	r0, r0, #28
 800e5c2:	4403      	add	r3, r0
 800e5c4:	9305      	str	r3, [sp, #20]
 800e5c6:	9b06      	ldr	r3, [sp, #24]
 800e5c8:	4403      	add	r3, r0
 800e5ca:	4405      	add	r5, r0
 800e5cc:	9306      	str	r3, [sp, #24]
 800e5ce:	9b05      	ldr	r3, [sp, #20]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	dd05      	ble.n	800e5e0 <_dtoa_r+0x828>
 800e5d4:	4651      	mov	r1, sl
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	4620      	mov	r0, r4
 800e5da:	f000 fc3b 	bl	800ee54 <__lshift>
 800e5de:	4682      	mov	sl, r0
 800e5e0:	9b06      	ldr	r3, [sp, #24]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	dd05      	ble.n	800e5f2 <_dtoa_r+0x83a>
 800e5e6:	4631      	mov	r1, r6
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	f000 fc32 	bl	800ee54 <__lshift>
 800e5f0:	4606      	mov	r6, r0
 800e5f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d072      	beq.n	800e6de <_dtoa_r+0x926>
 800e5f8:	4631      	mov	r1, r6
 800e5fa:	4650      	mov	r0, sl
 800e5fc:	f000 fc96 	bl	800ef2c <__mcmp>
 800e600:	2800      	cmp	r0, #0
 800e602:	da6c      	bge.n	800e6de <_dtoa_r+0x926>
 800e604:	2300      	movs	r3, #0
 800e606:	4651      	mov	r1, sl
 800e608:	220a      	movs	r2, #10
 800e60a:	4620      	mov	r0, r4
 800e60c:	f000 fa74 	bl	800eaf8 <__multadd>
 800e610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e612:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e616:	4682      	mov	sl, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	f000 81b0 	beq.w	800e97e <_dtoa_r+0xbc6>
 800e61e:	2300      	movs	r3, #0
 800e620:	4639      	mov	r1, r7
 800e622:	220a      	movs	r2, #10
 800e624:	4620      	mov	r0, r4
 800e626:	f000 fa67 	bl	800eaf8 <__multadd>
 800e62a:	9b01      	ldr	r3, [sp, #4]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	4607      	mov	r7, r0
 800e630:	f300 8096 	bgt.w	800e760 <_dtoa_r+0x9a8>
 800e634:	9b07      	ldr	r3, [sp, #28]
 800e636:	2b02      	cmp	r3, #2
 800e638:	dc59      	bgt.n	800e6ee <_dtoa_r+0x936>
 800e63a:	e091      	b.n	800e760 <_dtoa_r+0x9a8>
 800e63c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e63e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e642:	e758      	b.n	800e4f6 <_dtoa_r+0x73e>
 800e644:	9b04      	ldr	r3, [sp, #16]
 800e646:	1e5e      	subs	r6, r3, #1
 800e648:	9b08      	ldr	r3, [sp, #32]
 800e64a:	42b3      	cmp	r3, r6
 800e64c:	bfbf      	itttt	lt
 800e64e:	9b08      	ldrlt	r3, [sp, #32]
 800e650:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e652:	9608      	strlt	r6, [sp, #32]
 800e654:	1af3      	sublt	r3, r6, r3
 800e656:	bfb4      	ite	lt
 800e658:	18d2      	addlt	r2, r2, r3
 800e65a:	1b9e      	subge	r6, r3, r6
 800e65c:	9b04      	ldr	r3, [sp, #16]
 800e65e:	bfbc      	itt	lt
 800e660:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e662:	2600      	movlt	r6, #0
 800e664:	2b00      	cmp	r3, #0
 800e666:	bfb7      	itett	lt
 800e668:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e66c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e670:	1a9d      	sublt	r5, r3, r2
 800e672:	2300      	movlt	r3, #0
 800e674:	e741      	b.n	800e4fa <_dtoa_r+0x742>
 800e676:	9e08      	ldr	r6, [sp, #32]
 800e678:	9d05      	ldr	r5, [sp, #20]
 800e67a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e67c:	e748      	b.n	800e510 <_dtoa_r+0x758>
 800e67e:	9a08      	ldr	r2, [sp, #32]
 800e680:	e770      	b.n	800e564 <_dtoa_r+0x7ac>
 800e682:	9b07      	ldr	r3, [sp, #28]
 800e684:	2b01      	cmp	r3, #1
 800e686:	dc19      	bgt.n	800e6bc <_dtoa_r+0x904>
 800e688:	9b02      	ldr	r3, [sp, #8]
 800e68a:	b9bb      	cbnz	r3, 800e6bc <_dtoa_r+0x904>
 800e68c:	9b03      	ldr	r3, [sp, #12]
 800e68e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e692:	b99b      	cbnz	r3, 800e6bc <_dtoa_r+0x904>
 800e694:	9b03      	ldr	r3, [sp, #12]
 800e696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e69a:	0d1b      	lsrs	r3, r3, #20
 800e69c:	051b      	lsls	r3, r3, #20
 800e69e:	b183      	cbz	r3, 800e6c2 <_dtoa_r+0x90a>
 800e6a0:	9b05      	ldr	r3, [sp, #20]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	9305      	str	r3, [sp, #20]
 800e6a6:	9b06      	ldr	r3, [sp, #24]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	9306      	str	r3, [sp, #24]
 800e6ac:	f04f 0801 	mov.w	r8, #1
 800e6b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	f47f af6f 	bne.w	800e596 <_dtoa_r+0x7de>
 800e6b8:	2001      	movs	r0, #1
 800e6ba:	e774      	b.n	800e5a6 <_dtoa_r+0x7ee>
 800e6bc:	f04f 0800 	mov.w	r8, #0
 800e6c0:	e7f6      	b.n	800e6b0 <_dtoa_r+0x8f8>
 800e6c2:	4698      	mov	r8, r3
 800e6c4:	e7f4      	b.n	800e6b0 <_dtoa_r+0x8f8>
 800e6c6:	d082      	beq.n	800e5ce <_dtoa_r+0x816>
 800e6c8:	9a05      	ldr	r2, [sp, #20]
 800e6ca:	331c      	adds	r3, #28
 800e6cc:	441a      	add	r2, r3
 800e6ce:	9205      	str	r2, [sp, #20]
 800e6d0:	9a06      	ldr	r2, [sp, #24]
 800e6d2:	441a      	add	r2, r3
 800e6d4:	441d      	add	r5, r3
 800e6d6:	9206      	str	r2, [sp, #24]
 800e6d8:	e779      	b.n	800e5ce <_dtoa_r+0x816>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	e7f4      	b.n	800e6c8 <_dtoa_r+0x910>
 800e6de:	9b04      	ldr	r3, [sp, #16]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	dc37      	bgt.n	800e754 <_dtoa_r+0x99c>
 800e6e4:	9b07      	ldr	r3, [sp, #28]
 800e6e6:	2b02      	cmp	r3, #2
 800e6e8:	dd34      	ble.n	800e754 <_dtoa_r+0x99c>
 800e6ea:	9b04      	ldr	r3, [sp, #16]
 800e6ec:	9301      	str	r3, [sp, #4]
 800e6ee:	9b01      	ldr	r3, [sp, #4]
 800e6f0:	b963      	cbnz	r3, 800e70c <_dtoa_r+0x954>
 800e6f2:	4631      	mov	r1, r6
 800e6f4:	2205      	movs	r2, #5
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	f000 f9fe 	bl	800eaf8 <__multadd>
 800e6fc:	4601      	mov	r1, r0
 800e6fe:	4606      	mov	r6, r0
 800e700:	4650      	mov	r0, sl
 800e702:	f000 fc13 	bl	800ef2c <__mcmp>
 800e706:	2800      	cmp	r0, #0
 800e708:	f73f adbb 	bgt.w	800e282 <_dtoa_r+0x4ca>
 800e70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e70e:	9d00      	ldr	r5, [sp, #0]
 800e710:	ea6f 0b03 	mvn.w	fp, r3
 800e714:	f04f 0800 	mov.w	r8, #0
 800e718:	4631      	mov	r1, r6
 800e71a:	4620      	mov	r0, r4
 800e71c:	f000 f9ca 	bl	800eab4 <_Bfree>
 800e720:	2f00      	cmp	r7, #0
 800e722:	f43f aeab 	beq.w	800e47c <_dtoa_r+0x6c4>
 800e726:	f1b8 0f00 	cmp.w	r8, #0
 800e72a:	d005      	beq.n	800e738 <_dtoa_r+0x980>
 800e72c:	45b8      	cmp	r8, r7
 800e72e:	d003      	beq.n	800e738 <_dtoa_r+0x980>
 800e730:	4641      	mov	r1, r8
 800e732:	4620      	mov	r0, r4
 800e734:	f000 f9be 	bl	800eab4 <_Bfree>
 800e738:	4639      	mov	r1, r7
 800e73a:	4620      	mov	r0, r4
 800e73c:	f000 f9ba 	bl	800eab4 <_Bfree>
 800e740:	e69c      	b.n	800e47c <_dtoa_r+0x6c4>
 800e742:	2600      	movs	r6, #0
 800e744:	4637      	mov	r7, r6
 800e746:	e7e1      	b.n	800e70c <_dtoa_r+0x954>
 800e748:	46bb      	mov	fp, r7
 800e74a:	4637      	mov	r7, r6
 800e74c:	e599      	b.n	800e282 <_dtoa_r+0x4ca>
 800e74e:	bf00      	nop
 800e750:	40240000 	.word	0x40240000
 800e754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e756:	2b00      	cmp	r3, #0
 800e758:	f000 80c8 	beq.w	800e8ec <_dtoa_r+0xb34>
 800e75c:	9b04      	ldr	r3, [sp, #16]
 800e75e:	9301      	str	r3, [sp, #4]
 800e760:	2d00      	cmp	r5, #0
 800e762:	dd05      	ble.n	800e770 <_dtoa_r+0x9b8>
 800e764:	4639      	mov	r1, r7
 800e766:	462a      	mov	r2, r5
 800e768:	4620      	mov	r0, r4
 800e76a:	f000 fb73 	bl	800ee54 <__lshift>
 800e76e:	4607      	mov	r7, r0
 800e770:	f1b8 0f00 	cmp.w	r8, #0
 800e774:	d05b      	beq.n	800e82e <_dtoa_r+0xa76>
 800e776:	6879      	ldr	r1, [r7, #4]
 800e778:	4620      	mov	r0, r4
 800e77a:	f000 f95b 	bl	800ea34 <_Balloc>
 800e77e:	4605      	mov	r5, r0
 800e780:	b928      	cbnz	r0, 800e78e <_dtoa_r+0x9d6>
 800e782:	4b83      	ldr	r3, [pc, #524]	; (800e990 <_dtoa_r+0xbd8>)
 800e784:	4602      	mov	r2, r0
 800e786:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e78a:	f7ff bb2e 	b.w	800ddea <_dtoa_r+0x32>
 800e78e:	693a      	ldr	r2, [r7, #16]
 800e790:	3202      	adds	r2, #2
 800e792:	0092      	lsls	r2, r2, #2
 800e794:	f107 010c 	add.w	r1, r7, #12
 800e798:	300c      	adds	r0, #12
 800e79a:	f000 fee7 	bl	800f56c <memcpy>
 800e79e:	2201      	movs	r2, #1
 800e7a0:	4629      	mov	r1, r5
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f000 fb56 	bl	800ee54 <__lshift>
 800e7a8:	9b00      	ldr	r3, [sp, #0]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	9304      	str	r3, [sp, #16]
 800e7ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	9308      	str	r3, [sp, #32]
 800e7b6:	9b02      	ldr	r3, [sp, #8]
 800e7b8:	f003 0301 	and.w	r3, r3, #1
 800e7bc:	46b8      	mov	r8, r7
 800e7be:	9306      	str	r3, [sp, #24]
 800e7c0:	4607      	mov	r7, r0
 800e7c2:	9b04      	ldr	r3, [sp, #16]
 800e7c4:	4631      	mov	r1, r6
 800e7c6:	3b01      	subs	r3, #1
 800e7c8:	4650      	mov	r0, sl
 800e7ca:	9301      	str	r3, [sp, #4]
 800e7cc:	f7ff fa69 	bl	800dca2 <quorem>
 800e7d0:	4641      	mov	r1, r8
 800e7d2:	9002      	str	r0, [sp, #8]
 800e7d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e7d8:	4650      	mov	r0, sl
 800e7da:	f000 fba7 	bl	800ef2c <__mcmp>
 800e7de:	463a      	mov	r2, r7
 800e7e0:	9005      	str	r0, [sp, #20]
 800e7e2:	4631      	mov	r1, r6
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f000 fbbd 	bl	800ef64 <__mdiff>
 800e7ea:	68c2      	ldr	r2, [r0, #12]
 800e7ec:	4605      	mov	r5, r0
 800e7ee:	bb02      	cbnz	r2, 800e832 <_dtoa_r+0xa7a>
 800e7f0:	4601      	mov	r1, r0
 800e7f2:	4650      	mov	r0, sl
 800e7f4:	f000 fb9a 	bl	800ef2c <__mcmp>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	4629      	mov	r1, r5
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	9209      	str	r2, [sp, #36]	; 0x24
 800e800:	f000 f958 	bl	800eab4 <_Bfree>
 800e804:	9b07      	ldr	r3, [sp, #28]
 800e806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e808:	9d04      	ldr	r5, [sp, #16]
 800e80a:	ea43 0102 	orr.w	r1, r3, r2
 800e80e:	9b06      	ldr	r3, [sp, #24]
 800e810:	4319      	orrs	r1, r3
 800e812:	d110      	bne.n	800e836 <_dtoa_r+0xa7e>
 800e814:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e818:	d029      	beq.n	800e86e <_dtoa_r+0xab6>
 800e81a:	9b05      	ldr	r3, [sp, #20]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	dd02      	ble.n	800e826 <_dtoa_r+0xa6e>
 800e820:	9b02      	ldr	r3, [sp, #8]
 800e822:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e826:	9b01      	ldr	r3, [sp, #4]
 800e828:	f883 9000 	strb.w	r9, [r3]
 800e82c:	e774      	b.n	800e718 <_dtoa_r+0x960>
 800e82e:	4638      	mov	r0, r7
 800e830:	e7ba      	b.n	800e7a8 <_dtoa_r+0x9f0>
 800e832:	2201      	movs	r2, #1
 800e834:	e7e1      	b.n	800e7fa <_dtoa_r+0xa42>
 800e836:	9b05      	ldr	r3, [sp, #20]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	db04      	blt.n	800e846 <_dtoa_r+0xa8e>
 800e83c:	9907      	ldr	r1, [sp, #28]
 800e83e:	430b      	orrs	r3, r1
 800e840:	9906      	ldr	r1, [sp, #24]
 800e842:	430b      	orrs	r3, r1
 800e844:	d120      	bne.n	800e888 <_dtoa_r+0xad0>
 800e846:	2a00      	cmp	r2, #0
 800e848:	dded      	ble.n	800e826 <_dtoa_r+0xa6e>
 800e84a:	4651      	mov	r1, sl
 800e84c:	2201      	movs	r2, #1
 800e84e:	4620      	mov	r0, r4
 800e850:	f000 fb00 	bl	800ee54 <__lshift>
 800e854:	4631      	mov	r1, r6
 800e856:	4682      	mov	sl, r0
 800e858:	f000 fb68 	bl	800ef2c <__mcmp>
 800e85c:	2800      	cmp	r0, #0
 800e85e:	dc03      	bgt.n	800e868 <_dtoa_r+0xab0>
 800e860:	d1e1      	bne.n	800e826 <_dtoa_r+0xa6e>
 800e862:	f019 0f01 	tst.w	r9, #1
 800e866:	d0de      	beq.n	800e826 <_dtoa_r+0xa6e>
 800e868:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e86c:	d1d8      	bne.n	800e820 <_dtoa_r+0xa68>
 800e86e:	9a01      	ldr	r2, [sp, #4]
 800e870:	2339      	movs	r3, #57	; 0x39
 800e872:	7013      	strb	r3, [r2, #0]
 800e874:	462b      	mov	r3, r5
 800e876:	461d      	mov	r5, r3
 800e878:	3b01      	subs	r3, #1
 800e87a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e87e:	2a39      	cmp	r2, #57	; 0x39
 800e880:	d06c      	beq.n	800e95c <_dtoa_r+0xba4>
 800e882:	3201      	adds	r2, #1
 800e884:	701a      	strb	r2, [r3, #0]
 800e886:	e747      	b.n	800e718 <_dtoa_r+0x960>
 800e888:	2a00      	cmp	r2, #0
 800e88a:	dd07      	ble.n	800e89c <_dtoa_r+0xae4>
 800e88c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e890:	d0ed      	beq.n	800e86e <_dtoa_r+0xab6>
 800e892:	9a01      	ldr	r2, [sp, #4]
 800e894:	f109 0301 	add.w	r3, r9, #1
 800e898:	7013      	strb	r3, [r2, #0]
 800e89a:	e73d      	b.n	800e718 <_dtoa_r+0x960>
 800e89c:	9b04      	ldr	r3, [sp, #16]
 800e89e:	9a08      	ldr	r2, [sp, #32]
 800e8a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d043      	beq.n	800e930 <_dtoa_r+0xb78>
 800e8a8:	4651      	mov	r1, sl
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	220a      	movs	r2, #10
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	f000 f922 	bl	800eaf8 <__multadd>
 800e8b4:	45b8      	cmp	r8, r7
 800e8b6:	4682      	mov	sl, r0
 800e8b8:	f04f 0300 	mov.w	r3, #0
 800e8bc:	f04f 020a 	mov.w	r2, #10
 800e8c0:	4641      	mov	r1, r8
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	d107      	bne.n	800e8d6 <_dtoa_r+0xb1e>
 800e8c6:	f000 f917 	bl	800eaf8 <__multadd>
 800e8ca:	4680      	mov	r8, r0
 800e8cc:	4607      	mov	r7, r0
 800e8ce:	9b04      	ldr	r3, [sp, #16]
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	9304      	str	r3, [sp, #16]
 800e8d4:	e775      	b.n	800e7c2 <_dtoa_r+0xa0a>
 800e8d6:	f000 f90f 	bl	800eaf8 <__multadd>
 800e8da:	4639      	mov	r1, r7
 800e8dc:	4680      	mov	r8, r0
 800e8de:	2300      	movs	r3, #0
 800e8e0:	220a      	movs	r2, #10
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	f000 f908 	bl	800eaf8 <__multadd>
 800e8e8:	4607      	mov	r7, r0
 800e8ea:	e7f0      	b.n	800e8ce <_dtoa_r+0xb16>
 800e8ec:	9b04      	ldr	r3, [sp, #16]
 800e8ee:	9301      	str	r3, [sp, #4]
 800e8f0:	9d00      	ldr	r5, [sp, #0]
 800e8f2:	4631      	mov	r1, r6
 800e8f4:	4650      	mov	r0, sl
 800e8f6:	f7ff f9d4 	bl	800dca2 <quorem>
 800e8fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e8fe:	9b00      	ldr	r3, [sp, #0]
 800e900:	f805 9b01 	strb.w	r9, [r5], #1
 800e904:	1aea      	subs	r2, r5, r3
 800e906:	9b01      	ldr	r3, [sp, #4]
 800e908:	4293      	cmp	r3, r2
 800e90a:	dd07      	ble.n	800e91c <_dtoa_r+0xb64>
 800e90c:	4651      	mov	r1, sl
 800e90e:	2300      	movs	r3, #0
 800e910:	220a      	movs	r2, #10
 800e912:	4620      	mov	r0, r4
 800e914:	f000 f8f0 	bl	800eaf8 <__multadd>
 800e918:	4682      	mov	sl, r0
 800e91a:	e7ea      	b.n	800e8f2 <_dtoa_r+0xb3a>
 800e91c:	9b01      	ldr	r3, [sp, #4]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	bfc8      	it	gt
 800e922:	461d      	movgt	r5, r3
 800e924:	9b00      	ldr	r3, [sp, #0]
 800e926:	bfd8      	it	le
 800e928:	2501      	movle	r5, #1
 800e92a:	441d      	add	r5, r3
 800e92c:	f04f 0800 	mov.w	r8, #0
 800e930:	4651      	mov	r1, sl
 800e932:	2201      	movs	r2, #1
 800e934:	4620      	mov	r0, r4
 800e936:	f000 fa8d 	bl	800ee54 <__lshift>
 800e93a:	4631      	mov	r1, r6
 800e93c:	4682      	mov	sl, r0
 800e93e:	f000 faf5 	bl	800ef2c <__mcmp>
 800e942:	2800      	cmp	r0, #0
 800e944:	dc96      	bgt.n	800e874 <_dtoa_r+0xabc>
 800e946:	d102      	bne.n	800e94e <_dtoa_r+0xb96>
 800e948:	f019 0f01 	tst.w	r9, #1
 800e94c:	d192      	bne.n	800e874 <_dtoa_r+0xabc>
 800e94e:	462b      	mov	r3, r5
 800e950:	461d      	mov	r5, r3
 800e952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e956:	2a30      	cmp	r2, #48	; 0x30
 800e958:	d0fa      	beq.n	800e950 <_dtoa_r+0xb98>
 800e95a:	e6dd      	b.n	800e718 <_dtoa_r+0x960>
 800e95c:	9a00      	ldr	r2, [sp, #0]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d189      	bne.n	800e876 <_dtoa_r+0xabe>
 800e962:	f10b 0b01 	add.w	fp, fp, #1
 800e966:	2331      	movs	r3, #49	; 0x31
 800e968:	e796      	b.n	800e898 <_dtoa_r+0xae0>
 800e96a:	4b0a      	ldr	r3, [pc, #40]	; (800e994 <_dtoa_r+0xbdc>)
 800e96c:	f7ff ba99 	b.w	800dea2 <_dtoa_r+0xea>
 800e970:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e972:	2b00      	cmp	r3, #0
 800e974:	f47f aa6d 	bne.w	800de52 <_dtoa_r+0x9a>
 800e978:	4b07      	ldr	r3, [pc, #28]	; (800e998 <_dtoa_r+0xbe0>)
 800e97a:	f7ff ba92 	b.w	800dea2 <_dtoa_r+0xea>
 800e97e:	9b01      	ldr	r3, [sp, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	dcb5      	bgt.n	800e8f0 <_dtoa_r+0xb38>
 800e984:	9b07      	ldr	r3, [sp, #28]
 800e986:	2b02      	cmp	r3, #2
 800e988:	f73f aeb1 	bgt.w	800e6ee <_dtoa_r+0x936>
 800e98c:	e7b0      	b.n	800e8f0 <_dtoa_r+0xb38>
 800e98e:	bf00      	nop
 800e990:	08018378 	.word	0x08018378
 800e994:	080182d8 	.word	0x080182d8
 800e998:	080182fc 	.word	0x080182fc

0800e99c <_free_r>:
 800e99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e99e:	2900      	cmp	r1, #0
 800e9a0:	d044      	beq.n	800ea2c <_free_r+0x90>
 800e9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9a6:	9001      	str	r0, [sp, #4]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f1a1 0404 	sub.w	r4, r1, #4
 800e9ae:	bfb8      	it	lt
 800e9b0:	18e4      	addlt	r4, r4, r3
 800e9b2:	f7fe fb17 	bl	800cfe4 <__malloc_lock>
 800e9b6:	4a1e      	ldr	r2, [pc, #120]	; (800ea30 <_free_r+0x94>)
 800e9b8:	9801      	ldr	r0, [sp, #4]
 800e9ba:	6813      	ldr	r3, [r2, #0]
 800e9bc:	b933      	cbnz	r3, 800e9cc <_free_r+0x30>
 800e9be:	6063      	str	r3, [r4, #4]
 800e9c0:	6014      	str	r4, [r2, #0]
 800e9c2:	b003      	add	sp, #12
 800e9c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9c8:	f7fe bb12 	b.w	800cff0 <__malloc_unlock>
 800e9cc:	42a3      	cmp	r3, r4
 800e9ce:	d908      	bls.n	800e9e2 <_free_r+0x46>
 800e9d0:	6825      	ldr	r5, [r4, #0]
 800e9d2:	1961      	adds	r1, r4, r5
 800e9d4:	428b      	cmp	r3, r1
 800e9d6:	bf01      	itttt	eq
 800e9d8:	6819      	ldreq	r1, [r3, #0]
 800e9da:	685b      	ldreq	r3, [r3, #4]
 800e9dc:	1949      	addeq	r1, r1, r5
 800e9de:	6021      	streq	r1, [r4, #0]
 800e9e0:	e7ed      	b.n	800e9be <_free_r+0x22>
 800e9e2:	461a      	mov	r2, r3
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	b10b      	cbz	r3, 800e9ec <_free_r+0x50>
 800e9e8:	42a3      	cmp	r3, r4
 800e9ea:	d9fa      	bls.n	800e9e2 <_free_r+0x46>
 800e9ec:	6811      	ldr	r1, [r2, #0]
 800e9ee:	1855      	adds	r5, r2, r1
 800e9f0:	42a5      	cmp	r5, r4
 800e9f2:	d10b      	bne.n	800ea0c <_free_r+0x70>
 800e9f4:	6824      	ldr	r4, [r4, #0]
 800e9f6:	4421      	add	r1, r4
 800e9f8:	1854      	adds	r4, r2, r1
 800e9fa:	42a3      	cmp	r3, r4
 800e9fc:	6011      	str	r1, [r2, #0]
 800e9fe:	d1e0      	bne.n	800e9c2 <_free_r+0x26>
 800ea00:	681c      	ldr	r4, [r3, #0]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	6053      	str	r3, [r2, #4]
 800ea06:	440c      	add	r4, r1
 800ea08:	6014      	str	r4, [r2, #0]
 800ea0a:	e7da      	b.n	800e9c2 <_free_r+0x26>
 800ea0c:	d902      	bls.n	800ea14 <_free_r+0x78>
 800ea0e:	230c      	movs	r3, #12
 800ea10:	6003      	str	r3, [r0, #0]
 800ea12:	e7d6      	b.n	800e9c2 <_free_r+0x26>
 800ea14:	6825      	ldr	r5, [r4, #0]
 800ea16:	1961      	adds	r1, r4, r5
 800ea18:	428b      	cmp	r3, r1
 800ea1a:	bf04      	itt	eq
 800ea1c:	6819      	ldreq	r1, [r3, #0]
 800ea1e:	685b      	ldreq	r3, [r3, #4]
 800ea20:	6063      	str	r3, [r4, #4]
 800ea22:	bf04      	itt	eq
 800ea24:	1949      	addeq	r1, r1, r5
 800ea26:	6021      	streq	r1, [r4, #0]
 800ea28:	6054      	str	r4, [r2, #4]
 800ea2a:	e7ca      	b.n	800e9c2 <_free_r+0x26>
 800ea2c:	b003      	add	sp, #12
 800ea2e:	bd30      	pop	{r4, r5, pc}
 800ea30:	2000284c 	.word	0x2000284c

0800ea34 <_Balloc>:
 800ea34:	b570      	push	{r4, r5, r6, lr}
 800ea36:	69c6      	ldr	r6, [r0, #28]
 800ea38:	4604      	mov	r4, r0
 800ea3a:	460d      	mov	r5, r1
 800ea3c:	b976      	cbnz	r6, 800ea5c <_Balloc+0x28>
 800ea3e:	2010      	movs	r0, #16
 800ea40:	f7fe fa28 	bl	800ce94 <malloc>
 800ea44:	4602      	mov	r2, r0
 800ea46:	61e0      	str	r0, [r4, #28]
 800ea48:	b920      	cbnz	r0, 800ea54 <_Balloc+0x20>
 800ea4a:	4b18      	ldr	r3, [pc, #96]	; (800eaac <_Balloc+0x78>)
 800ea4c:	4818      	ldr	r0, [pc, #96]	; (800eab0 <_Balloc+0x7c>)
 800ea4e:	216b      	movs	r1, #107	; 0x6b
 800ea50:	f000 fd9a 	bl	800f588 <__assert_func>
 800ea54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea58:	6006      	str	r6, [r0, #0]
 800ea5a:	60c6      	str	r6, [r0, #12]
 800ea5c:	69e6      	ldr	r6, [r4, #28]
 800ea5e:	68f3      	ldr	r3, [r6, #12]
 800ea60:	b183      	cbz	r3, 800ea84 <_Balloc+0x50>
 800ea62:	69e3      	ldr	r3, [r4, #28]
 800ea64:	68db      	ldr	r3, [r3, #12]
 800ea66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea6a:	b9b8      	cbnz	r0, 800ea9c <_Balloc+0x68>
 800ea6c:	2101      	movs	r1, #1
 800ea6e:	fa01 f605 	lsl.w	r6, r1, r5
 800ea72:	1d72      	adds	r2, r6, #5
 800ea74:	0092      	lsls	r2, r2, #2
 800ea76:	4620      	mov	r0, r4
 800ea78:	f000 fda4 	bl	800f5c4 <_calloc_r>
 800ea7c:	b160      	cbz	r0, 800ea98 <_Balloc+0x64>
 800ea7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea82:	e00e      	b.n	800eaa2 <_Balloc+0x6e>
 800ea84:	2221      	movs	r2, #33	; 0x21
 800ea86:	2104      	movs	r1, #4
 800ea88:	4620      	mov	r0, r4
 800ea8a:	f000 fd9b 	bl	800f5c4 <_calloc_r>
 800ea8e:	69e3      	ldr	r3, [r4, #28]
 800ea90:	60f0      	str	r0, [r6, #12]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d1e4      	bne.n	800ea62 <_Balloc+0x2e>
 800ea98:	2000      	movs	r0, #0
 800ea9a:	bd70      	pop	{r4, r5, r6, pc}
 800ea9c:	6802      	ldr	r2, [r0, #0]
 800ea9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eaa8:	e7f7      	b.n	800ea9a <_Balloc+0x66>
 800eaaa:	bf00      	nop
 800eaac:	08018309 	.word	0x08018309
 800eab0:	08018389 	.word	0x08018389

0800eab4 <_Bfree>:
 800eab4:	b570      	push	{r4, r5, r6, lr}
 800eab6:	69c6      	ldr	r6, [r0, #28]
 800eab8:	4605      	mov	r5, r0
 800eaba:	460c      	mov	r4, r1
 800eabc:	b976      	cbnz	r6, 800eadc <_Bfree+0x28>
 800eabe:	2010      	movs	r0, #16
 800eac0:	f7fe f9e8 	bl	800ce94 <malloc>
 800eac4:	4602      	mov	r2, r0
 800eac6:	61e8      	str	r0, [r5, #28]
 800eac8:	b920      	cbnz	r0, 800ead4 <_Bfree+0x20>
 800eaca:	4b09      	ldr	r3, [pc, #36]	; (800eaf0 <_Bfree+0x3c>)
 800eacc:	4809      	ldr	r0, [pc, #36]	; (800eaf4 <_Bfree+0x40>)
 800eace:	218f      	movs	r1, #143	; 0x8f
 800ead0:	f000 fd5a 	bl	800f588 <__assert_func>
 800ead4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ead8:	6006      	str	r6, [r0, #0]
 800eada:	60c6      	str	r6, [r0, #12]
 800eadc:	b13c      	cbz	r4, 800eaee <_Bfree+0x3a>
 800eade:	69eb      	ldr	r3, [r5, #28]
 800eae0:	6862      	ldr	r2, [r4, #4]
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eae8:	6021      	str	r1, [r4, #0]
 800eaea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eaee:	bd70      	pop	{r4, r5, r6, pc}
 800eaf0:	08018309 	.word	0x08018309
 800eaf4:	08018389 	.word	0x08018389

0800eaf8 <__multadd>:
 800eaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eafc:	690d      	ldr	r5, [r1, #16]
 800eafe:	4607      	mov	r7, r0
 800eb00:	460c      	mov	r4, r1
 800eb02:	461e      	mov	r6, r3
 800eb04:	f101 0c14 	add.w	ip, r1, #20
 800eb08:	2000      	movs	r0, #0
 800eb0a:	f8dc 3000 	ldr.w	r3, [ip]
 800eb0e:	b299      	uxth	r1, r3
 800eb10:	fb02 6101 	mla	r1, r2, r1, r6
 800eb14:	0c1e      	lsrs	r6, r3, #16
 800eb16:	0c0b      	lsrs	r3, r1, #16
 800eb18:	fb02 3306 	mla	r3, r2, r6, r3
 800eb1c:	b289      	uxth	r1, r1
 800eb1e:	3001      	adds	r0, #1
 800eb20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eb24:	4285      	cmp	r5, r0
 800eb26:	f84c 1b04 	str.w	r1, [ip], #4
 800eb2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb2e:	dcec      	bgt.n	800eb0a <__multadd+0x12>
 800eb30:	b30e      	cbz	r6, 800eb76 <__multadd+0x7e>
 800eb32:	68a3      	ldr	r3, [r4, #8]
 800eb34:	42ab      	cmp	r3, r5
 800eb36:	dc19      	bgt.n	800eb6c <__multadd+0x74>
 800eb38:	6861      	ldr	r1, [r4, #4]
 800eb3a:	4638      	mov	r0, r7
 800eb3c:	3101      	adds	r1, #1
 800eb3e:	f7ff ff79 	bl	800ea34 <_Balloc>
 800eb42:	4680      	mov	r8, r0
 800eb44:	b928      	cbnz	r0, 800eb52 <__multadd+0x5a>
 800eb46:	4602      	mov	r2, r0
 800eb48:	4b0c      	ldr	r3, [pc, #48]	; (800eb7c <__multadd+0x84>)
 800eb4a:	480d      	ldr	r0, [pc, #52]	; (800eb80 <__multadd+0x88>)
 800eb4c:	21ba      	movs	r1, #186	; 0xba
 800eb4e:	f000 fd1b 	bl	800f588 <__assert_func>
 800eb52:	6922      	ldr	r2, [r4, #16]
 800eb54:	3202      	adds	r2, #2
 800eb56:	f104 010c 	add.w	r1, r4, #12
 800eb5a:	0092      	lsls	r2, r2, #2
 800eb5c:	300c      	adds	r0, #12
 800eb5e:	f000 fd05 	bl	800f56c <memcpy>
 800eb62:	4621      	mov	r1, r4
 800eb64:	4638      	mov	r0, r7
 800eb66:	f7ff ffa5 	bl	800eab4 <_Bfree>
 800eb6a:	4644      	mov	r4, r8
 800eb6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb70:	3501      	adds	r5, #1
 800eb72:	615e      	str	r6, [r3, #20]
 800eb74:	6125      	str	r5, [r4, #16]
 800eb76:	4620      	mov	r0, r4
 800eb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb7c:	08018378 	.word	0x08018378
 800eb80:	08018389 	.word	0x08018389

0800eb84 <__hi0bits>:
 800eb84:	0c03      	lsrs	r3, r0, #16
 800eb86:	041b      	lsls	r3, r3, #16
 800eb88:	b9d3      	cbnz	r3, 800ebc0 <__hi0bits+0x3c>
 800eb8a:	0400      	lsls	r0, r0, #16
 800eb8c:	2310      	movs	r3, #16
 800eb8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eb92:	bf04      	itt	eq
 800eb94:	0200      	lsleq	r0, r0, #8
 800eb96:	3308      	addeq	r3, #8
 800eb98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eb9c:	bf04      	itt	eq
 800eb9e:	0100      	lsleq	r0, r0, #4
 800eba0:	3304      	addeq	r3, #4
 800eba2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eba6:	bf04      	itt	eq
 800eba8:	0080      	lsleq	r0, r0, #2
 800ebaa:	3302      	addeq	r3, #2
 800ebac:	2800      	cmp	r0, #0
 800ebae:	db05      	blt.n	800ebbc <__hi0bits+0x38>
 800ebb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ebb4:	f103 0301 	add.w	r3, r3, #1
 800ebb8:	bf08      	it	eq
 800ebba:	2320      	moveq	r3, #32
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	4770      	bx	lr
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	e7e4      	b.n	800eb8e <__hi0bits+0xa>

0800ebc4 <__lo0bits>:
 800ebc4:	6803      	ldr	r3, [r0, #0]
 800ebc6:	f013 0207 	ands.w	r2, r3, #7
 800ebca:	d00c      	beq.n	800ebe6 <__lo0bits+0x22>
 800ebcc:	07d9      	lsls	r1, r3, #31
 800ebce:	d422      	bmi.n	800ec16 <__lo0bits+0x52>
 800ebd0:	079a      	lsls	r2, r3, #30
 800ebd2:	bf49      	itett	mi
 800ebd4:	085b      	lsrmi	r3, r3, #1
 800ebd6:	089b      	lsrpl	r3, r3, #2
 800ebd8:	6003      	strmi	r3, [r0, #0]
 800ebda:	2201      	movmi	r2, #1
 800ebdc:	bf5c      	itt	pl
 800ebde:	6003      	strpl	r3, [r0, #0]
 800ebe0:	2202      	movpl	r2, #2
 800ebe2:	4610      	mov	r0, r2
 800ebe4:	4770      	bx	lr
 800ebe6:	b299      	uxth	r1, r3
 800ebe8:	b909      	cbnz	r1, 800ebee <__lo0bits+0x2a>
 800ebea:	0c1b      	lsrs	r3, r3, #16
 800ebec:	2210      	movs	r2, #16
 800ebee:	b2d9      	uxtb	r1, r3
 800ebf0:	b909      	cbnz	r1, 800ebf6 <__lo0bits+0x32>
 800ebf2:	3208      	adds	r2, #8
 800ebf4:	0a1b      	lsrs	r3, r3, #8
 800ebf6:	0719      	lsls	r1, r3, #28
 800ebf8:	bf04      	itt	eq
 800ebfa:	091b      	lsreq	r3, r3, #4
 800ebfc:	3204      	addeq	r2, #4
 800ebfe:	0799      	lsls	r1, r3, #30
 800ec00:	bf04      	itt	eq
 800ec02:	089b      	lsreq	r3, r3, #2
 800ec04:	3202      	addeq	r2, #2
 800ec06:	07d9      	lsls	r1, r3, #31
 800ec08:	d403      	bmi.n	800ec12 <__lo0bits+0x4e>
 800ec0a:	085b      	lsrs	r3, r3, #1
 800ec0c:	f102 0201 	add.w	r2, r2, #1
 800ec10:	d003      	beq.n	800ec1a <__lo0bits+0x56>
 800ec12:	6003      	str	r3, [r0, #0]
 800ec14:	e7e5      	b.n	800ebe2 <__lo0bits+0x1e>
 800ec16:	2200      	movs	r2, #0
 800ec18:	e7e3      	b.n	800ebe2 <__lo0bits+0x1e>
 800ec1a:	2220      	movs	r2, #32
 800ec1c:	e7e1      	b.n	800ebe2 <__lo0bits+0x1e>
	...

0800ec20 <__i2b>:
 800ec20:	b510      	push	{r4, lr}
 800ec22:	460c      	mov	r4, r1
 800ec24:	2101      	movs	r1, #1
 800ec26:	f7ff ff05 	bl	800ea34 <_Balloc>
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	b928      	cbnz	r0, 800ec3a <__i2b+0x1a>
 800ec2e:	4b05      	ldr	r3, [pc, #20]	; (800ec44 <__i2b+0x24>)
 800ec30:	4805      	ldr	r0, [pc, #20]	; (800ec48 <__i2b+0x28>)
 800ec32:	f240 1145 	movw	r1, #325	; 0x145
 800ec36:	f000 fca7 	bl	800f588 <__assert_func>
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	6144      	str	r4, [r0, #20]
 800ec3e:	6103      	str	r3, [r0, #16]
 800ec40:	bd10      	pop	{r4, pc}
 800ec42:	bf00      	nop
 800ec44:	08018378 	.word	0x08018378
 800ec48:	08018389 	.word	0x08018389

0800ec4c <__multiply>:
 800ec4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec50:	4691      	mov	r9, r2
 800ec52:	690a      	ldr	r2, [r1, #16]
 800ec54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	bfb8      	it	lt
 800ec5c:	460b      	movlt	r3, r1
 800ec5e:	460c      	mov	r4, r1
 800ec60:	bfbc      	itt	lt
 800ec62:	464c      	movlt	r4, r9
 800ec64:	4699      	movlt	r9, r3
 800ec66:	6927      	ldr	r7, [r4, #16]
 800ec68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ec6c:	68a3      	ldr	r3, [r4, #8]
 800ec6e:	6861      	ldr	r1, [r4, #4]
 800ec70:	eb07 060a 	add.w	r6, r7, sl
 800ec74:	42b3      	cmp	r3, r6
 800ec76:	b085      	sub	sp, #20
 800ec78:	bfb8      	it	lt
 800ec7a:	3101      	addlt	r1, #1
 800ec7c:	f7ff feda 	bl	800ea34 <_Balloc>
 800ec80:	b930      	cbnz	r0, 800ec90 <__multiply+0x44>
 800ec82:	4602      	mov	r2, r0
 800ec84:	4b44      	ldr	r3, [pc, #272]	; (800ed98 <__multiply+0x14c>)
 800ec86:	4845      	ldr	r0, [pc, #276]	; (800ed9c <__multiply+0x150>)
 800ec88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ec8c:	f000 fc7c 	bl	800f588 <__assert_func>
 800ec90:	f100 0514 	add.w	r5, r0, #20
 800ec94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ec98:	462b      	mov	r3, r5
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	4543      	cmp	r3, r8
 800ec9e:	d321      	bcc.n	800ece4 <__multiply+0x98>
 800eca0:	f104 0314 	add.w	r3, r4, #20
 800eca4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eca8:	f109 0314 	add.w	r3, r9, #20
 800ecac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ecb0:	9202      	str	r2, [sp, #8]
 800ecb2:	1b3a      	subs	r2, r7, r4
 800ecb4:	3a15      	subs	r2, #21
 800ecb6:	f022 0203 	bic.w	r2, r2, #3
 800ecba:	3204      	adds	r2, #4
 800ecbc:	f104 0115 	add.w	r1, r4, #21
 800ecc0:	428f      	cmp	r7, r1
 800ecc2:	bf38      	it	cc
 800ecc4:	2204      	movcc	r2, #4
 800ecc6:	9201      	str	r2, [sp, #4]
 800ecc8:	9a02      	ldr	r2, [sp, #8]
 800ecca:	9303      	str	r3, [sp, #12]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d80c      	bhi.n	800ecea <__multiply+0x9e>
 800ecd0:	2e00      	cmp	r6, #0
 800ecd2:	dd03      	ble.n	800ecdc <__multiply+0x90>
 800ecd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d05b      	beq.n	800ed94 <__multiply+0x148>
 800ecdc:	6106      	str	r6, [r0, #16]
 800ecde:	b005      	add	sp, #20
 800ece0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ece4:	f843 2b04 	str.w	r2, [r3], #4
 800ece8:	e7d8      	b.n	800ec9c <__multiply+0x50>
 800ecea:	f8b3 a000 	ldrh.w	sl, [r3]
 800ecee:	f1ba 0f00 	cmp.w	sl, #0
 800ecf2:	d024      	beq.n	800ed3e <__multiply+0xf2>
 800ecf4:	f104 0e14 	add.w	lr, r4, #20
 800ecf8:	46a9      	mov	r9, r5
 800ecfa:	f04f 0c00 	mov.w	ip, #0
 800ecfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ed02:	f8d9 1000 	ldr.w	r1, [r9]
 800ed06:	fa1f fb82 	uxth.w	fp, r2
 800ed0a:	b289      	uxth	r1, r1
 800ed0c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ed10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ed14:	f8d9 2000 	ldr.w	r2, [r9]
 800ed18:	4461      	add	r1, ip
 800ed1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed1e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ed22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ed26:	b289      	uxth	r1, r1
 800ed28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed2c:	4577      	cmp	r7, lr
 800ed2e:	f849 1b04 	str.w	r1, [r9], #4
 800ed32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed36:	d8e2      	bhi.n	800ecfe <__multiply+0xb2>
 800ed38:	9a01      	ldr	r2, [sp, #4]
 800ed3a:	f845 c002 	str.w	ip, [r5, r2]
 800ed3e:	9a03      	ldr	r2, [sp, #12]
 800ed40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ed44:	3304      	adds	r3, #4
 800ed46:	f1b9 0f00 	cmp.w	r9, #0
 800ed4a:	d021      	beq.n	800ed90 <__multiply+0x144>
 800ed4c:	6829      	ldr	r1, [r5, #0]
 800ed4e:	f104 0c14 	add.w	ip, r4, #20
 800ed52:	46ae      	mov	lr, r5
 800ed54:	f04f 0a00 	mov.w	sl, #0
 800ed58:	f8bc b000 	ldrh.w	fp, [ip]
 800ed5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ed60:	fb09 220b 	mla	r2, r9, fp, r2
 800ed64:	4452      	add	r2, sl
 800ed66:	b289      	uxth	r1, r1
 800ed68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed6c:	f84e 1b04 	str.w	r1, [lr], #4
 800ed70:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ed74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ed78:	f8be 1000 	ldrh.w	r1, [lr]
 800ed7c:	fb09 110a 	mla	r1, r9, sl, r1
 800ed80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ed84:	4567      	cmp	r7, ip
 800ed86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ed8a:	d8e5      	bhi.n	800ed58 <__multiply+0x10c>
 800ed8c:	9a01      	ldr	r2, [sp, #4]
 800ed8e:	50a9      	str	r1, [r5, r2]
 800ed90:	3504      	adds	r5, #4
 800ed92:	e799      	b.n	800ecc8 <__multiply+0x7c>
 800ed94:	3e01      	subs	r6, #1
 800ed96:	e79b      	b.n	800ecd0 <__multiply+0x84>
 800ed98:	08018378 	.word	0x08018378
 800ed9c:	08018389 	.word	0x08018389

0800eda0 <__pow5mult>:
 800eda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eda4:	4615      	mov	r5, r2
 800eda6:	f012 0203 	ands.w	r2, r2, #3
 800edaa:	4606      	mov	r6, r0
 800edac:	460f      	mov	r7, r1
 800edae:	d007      	beq.n	800edc0 <__pow5mult+0x20>
 800edb0:	4c25      	ldr	r4, [pc, #148]	; (800ee48 <__pow5mult+0xa8>)
 800edb2:	3a01      	subs	r2, #1
 800edb4:	2300      	movs	r3, #0
 800edb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800edba:	f7ff fe9d 	bl	800eaf8 <__multadd>
 800edbe:	4607      	mov	r7, r0
 800edc0:	10ad      	asrs	r5, r5, #2
 800edc2:	d03d      	beq.n	800ee40 <__pow5mult+0xa0>
 800edc4:	69f4      	ldr	r4, [r6, #28]
 800edc6:	b97c      	cbnz	r4, 800ede8 <__pow5mult+0x48>
 800edc8:	2010      	movs	r0, #16
 800edca:	f7fe f863 	bl	800ce94 <malloc>
 800edce:	4602      	mov	r2, r0
 800edd0:	61f0      	str	r0, [r6, #28]
 800edd2:	b928      	cbnz	r0, 800ede0 <__pow5mult+0x40>
 800edd4:	4b1d      	ldr	r3, [pc, #116]	; (800ee4c <__pow5mult+0xac>)
 800edd6:	481e      	ldr	r0, [pc, #120]	; (800ee50 <__pow5mult+0xb0>)
 800edd8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800eddc:	f000 fbd4 	bl	800f588 <__assert_func>
 800ede0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ede4:	6004      	str	r4, [r0, #0]
 800ede6:	60c4      	str	r4, [r0, #12]
 800ede8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800edec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800edf0:	b94c      	cbnz	r4, 800ee06 <__pow5mult+0x66>
 800edf2:	f240 2171 	movw	r1, #625	; 0x271
 800edf6:	4630      	mov	r0, r6
 800edf8:	f7ff ff12 	bl	800ec20 <__i2b>
 800edfc:	2300      	movs	r3, #0
 800edfe:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee02:	4604      	mov	r4, r0
 800ee04:	6003      	str	r3, [r0, #0]
 800ee06:	f04f 0900 	mov.w	r9, #0
 800ee0a:	07eb      	lsls	r3, r5, #31
 800ee0c:	d50a      	bpl.n	800ee24 <__pow5mult+0x84>
 800ee0e:	4639      	mov	r1, r7
 800ee10:	4622      	mov	r2, r4
 800ee12:	4630      	mov	r0, r6
 800ee14:	f7ff ff1a 	bl	800ec4c <__multiply>
 800ee18:	4639      	mov	r1, r7
 800ee1a:	4680      	mov	r8, r0
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	f7ff fe49 	bl	800eab4 <_Bfree>
 800ee22:	4647      	mov	r7, r8
 800ee24:	106d      	asrs	r5, r5, #1
 800ee26:	d00b      	beq.n	800ee40 <__pow5mult+0xa0>
 800ee28:	6820      	ldr	r0, [r4, #0]
 800ee2a:	b938      	cbnz	r0, 800ee3c <__pow5mult+0x9c>
 800ee2c:	4622      	mov	r2, r4
 800ee2e:	4621      	mov	r1, r4
 800ee30:	4630      	mov	r0, r6
 800ee32:	f7ff ff0b 	bl	800ec4c <__multiply>
 800ee36:	6020      	str	r0, [r4, #0]
 800ee38:	f8c0 9000 	str.w	r9, [r0]
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	e7e4      	b.n	800ee0a <__pow5mult+0x6a>
 800ee40:	4638      	mov	r0, r7
 800ee42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee46:	bf00      	nop
 800ee48:	080184d8 	.word	0x080184d8
 800ee4c:	08018309 	.word	0x08018309
 800ee50:	08018389 	.word	0x08018389

0800ee54 <__lshift>:
 800ee54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee58:	460c      	mov	r4, r1
 800ee5a:	6849      	ldr	r1, [r1, #4]
 800ee5c:	6923      	ldr	r3, [r4, #16]
 800ee5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee62:	68a3      	ldr	r3, [r4, #8]
 800ee64:	4607      	mov	r7, r0
 800ee66:	4691      	mov	r9, r2
 800ee68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee6c:	f108 0601 	add.w	r6, r8, #1
 800ee70:	42b3      	cmp	r3, r6
 800ee72:	db0b      	blt.n	800ee8c <__lshift+0x38>
 800ee74:	4638      	mov	r0, r7
 800ee76:	f7ff fddd 	bl	800ea34 <_Balloc>
 800ee7a:	4605      	mov	r5, r0
 800ee7c:	b948      	cbnz	r0, 800ee92 <__lshift+0x3e>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	4b28      	ldr	r3, [pc, #160]	; (800ef24 <__lshift+0xd0>)
 800ee82:	4829      	ldr	r0, [pc, #164]	; (800ef28 <__lshift+0xd4>)
 800ee84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ee88:	f000 fb7e 	bl	800f588 <__assert_func>
 800ee8c:	3101      	adds	r1, #1
 800ee8e:	005b      	lsls	r3, r3, #1
 800ee90:	e7ee      	b.n	800ee70 <__lshift+0x1c>
 800ee92:	2300      	movs	r3, #0
 800ee94:	f100 0114 	add.w	r1, r0, #20
 800ee98:	f100 0210 	add.w	r2, r0, #16
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	4553      	cmp	r3, sl
 800eea0:	db33      	blt.n	800ef0a <__lshift+0xb6>
 800eea2:	6920      	ldr	r0, [r4, #16]
 800eea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eea8:	f104 0314 	add.w	r3, r4, #20
 800eeac:	f019 091f 	ands.w	r9, r9, #31
 800eeb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eeb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eeb8:	d02b      	beq.n	800ef12 <__lshift+0xbe>
 800eeba:	f1c9 0e20 	rsb	lr, r9, #32
 800eebe:	468a      	mov	sl, r1
 800eec0:	2200      	movs	r2, #0
 800eec2:	6818      	ldr	r0, [r3, #0]
 800eec4:	fa00 f009 	lsl.w	r0, r0, r9
 800eec8:	4310      	orrs	r0, r2
 800eeca:	f84a 0b04 	str.w	r0, [sl], #4
 800eece:	f853 2b04 	ldr.w	r2, [r3], #4
 800eed2:	459c      	cmp	ip, r3
 800eed4:	fa22 f20e 	lsr.w	r2, r2, lr
 800eed8:	d8f3      	bhi.n	800eec2 <__lshift+0x6e>
 800eeda:	ebac 0304 	sub.w	r3, ip, r4
 800eede:	3b15      	subs	r3, #21
 800eee0:	f023 0303 	bic.w	r3, r3, #3
 800eee4:	3304      	adds	r3, #4
 800eee6:	f104 0015 	add.w	r0, r4, #21
 800eeea:	4584      	cmp	ip, r0
 800eeec:	bf38      	it	cc
 800eeee:	2304      	movcc	r3, #4
 800eef0:	50ca      	str	r2, [r1, r3]
 800eef2:	b10a      	cbz	r2, 800eef8 <__lshift+0xa4>
 800eef4:	f108 0602 	add.w	r6, r8, #2
 800eef8:	3e01      	subs	r6, #1
 800eefa:	4638      	mov	r0, r7
 800eefc:	612e      	str	r6, [r5, #16]
 800eefe:	4621      	mov	r1, r4
 800ef00:	f7ff fdd8 	bl	800eab4 <_Bfree>
 800ef04:	4628      	mov	r0, r5
 800ef06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef0e:	3301      	adds	r3, #1
 800ef10:	e7c5      	b.n	800ee9e <__lshift+0x4a>
 800ef12:	3904      	subs	r1, #4
 800ef14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef18:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef1c:	459c      	cmp	ip, r3
 800ef1e:	d8f9      	bhi.n	800ef14 <__lshift+0xc0>
 800ef20:	e7ea      	b.n	800eef8 <__lshift+0xa4>
 800ef22:	bf00      	nop
 800ef24:	08018378 	.word	0x08018378
 800ef28:	08018389 	.word	0x08018389

0800ef2c <__mcmp>:
 800ef2c:	b530      	push	{r4, r5, lr}
 800ef2e:	6902      	ldr	r2, [r0, #16]
 800ef30:	690c      	ldr	r4, [r1, #16]
 800ef32:	1b12      	subs	r2, r2, r4
 800ef34:	d10e      	bne.n	800ef54 <__mcmp+0x28>
 800ef36:	f100 0314 	add.w	r3, r0, #20
 800ef3a:	3114      	adds	r1, #20
 800ef3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ef40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ef44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ef48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ef4c:	42a5      	cmp	r5, r4
 800ef4e:	d003      	beq.n	800ef58 <__mcmp+0x2c>
 800ef50:	d305      	bcc.n	800ef5e <__mcmp+0x32>
 800ef52:	2201      	movs	r2, #1
 800ef54:	4610      	mov	r0, r2
 800ef56:	bd30      	pop	{r4, r5, pc}
 800ef58:	4283      	cmp	r3, r0
 800ef5a:	d3f3      	bcc.n	800ef44 <__mcmp+0x18>
 800ef5c:	e7fa      	b.n	800ef54 <__mcmp+0x28>
 800ef5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef62:	e7f7      	b.n	800ef54 <__mcmp+0x28>

0800ef64 <__mdiff>:
 800ef64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef68:	460c      	mov	r4, r1
 800ef6a:	4606      	mov	r6, r0
 800ef6c:	4611      	mov	r1, r2
 800ef6e:	4620      	mov	r0, r4
 800ef70:	4690      	mov	r8, r2
 800ef72:	f7ff ffdb 	bl	800ef2c <__mcmp>
 800ef76:	1e05      	subs	r5, r0, #0
 800ef78:	d110      	bne.n	800ef9c <__mdiff+0x38>
 800ef7a:	4629      	mov	r1, r5
 800ef7c:	4630      	mov	r0, r6
 800ef7e:	f7ff fd59 	bl	800ea34 <_Balloc>
 800ef82:	b930      	cbnz	r0, 800ef92 <__mdiff+0x2e>
 800ef84:	4b3a      	ldr	r3, [pc, #232]	; (800f070 <__mdiff+0x10c>)
 800ef86:	4602      	mov	r2, r0
 800ef88:	f240 2137 	movw	r1, #567	; 0x237
 800ef8c:	4839      	ldr	r0, [pc, #228]	; (800f074 <__mdiff+0x110>)
 800ef8e:	f000 fafb 	bl	800f588 <__assert_func>
 800ef92:	2301      	movs	r3, #1
 800ef94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef9c:	bfa4      	itt	ge
 800ef9e:	4643      	movge	r3, r8
 800efa0:	46a0      	movge	r8, r4
 800efa2:	4630      	mov	r0, r6
 800efa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800efa8:	bfa6      	itte	ge
 800efaa:	461c      	movge	r4, r3
 800efac:	2500      	movge	r5, #0
 800efae:	2501      	movlt	r5, #1
 800efb0:	f7ff fd40 	bl	800ea34 <_Balloc>
 800efb4:	b920      	cbnz	r0, 800efc0 <__mdiff+0x5c>
 800efb6:	4b2e      	ldr	r3, [pc, #184]	; (800f070 <__mdiff+0x10c>)
 800efb8:	4602      	mov	r2, r0
 800efba:	f240 2145 	movw	r1, #581	; 0x245
 800efbe:	e7e5      	b.n	800ef8c <__mdiff+0x28>
 800efc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800efc4:	6926      	ldr	r6, [r4, #16]
 800efc6:	60c5      	str	r5, [r0, #12]
 800efc8:	f104 0914 	add.w	r9, r4, #20
 800efcc:	f108 0514 	add.w	r5, r8, #20
 800efd0:	f100 0e14 	add.w	lr, r0, #20
 800efd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800efd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800efdc:	f108 0210 	add.w	r2, r8, #16
 800efe0:	46f2      	mov	sl, lr
 800efe2:	2100      	movs	r1, #0
 800efe4:	f859 3b04 	ldr.w	r3, [r9], #4
 800efe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800efec:	fa11 f88b 	uxtah	r8, r1, fp
 800eff0:	b299      	uxth	r1, r3
 800eff2:	0c1b      	lsrs	r3, r3, #16
 800eff4:	eba8 0801 	sub.w	r8, r8, r1
 800eff8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800effc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f000:	fa1f f888 	uxth.w	r8, r8
 800f004:	1419      	asrs	r1, r3, #16
 800f006:	454e      	cmp	r6, r9
 800f008:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f00c:	f84a 3b04 	str.w	r3, [sl], #4
 800f010:	d8e8      	bhi.n	800efe4 <__mdiff+0x80>
 800f012:	1b33      	subs	r3, r6, r4
 800f014:	3b15      	subs	r3, #21
 800f016:	f023 0303 	bic.w	r3, r3, #3
 800f01a:	3304      	adds	r3, #4
 800f01c:	3415      	adds	r4, #21
 800f01e:	42a6      	cmp	r6, r4
 800f020:	bf38      	it	cc
 800f022:	2304      	movcc	r3, #4
 800f024:	441d      	add	r5, r3
 800f026:	4473      	add	r3, lr
 800f028:	469e      	mov	lr, r3
 800f02a:	462e      	mov	r6, r5
 800f02c:	4566      	cmp	r6, ip
 800f02e:	d30e      	bcc.n	800f04e <__mdiff+0xea>
 800f030:	f10c 0203 	add.w	r2, ip, #3
 800f034:	1b52      	subs	r2, r2, r5
 800f036:	f022 0203 	bic.w	r2, r2, #3
 800f03a:	3d03      	subs	r5, #3
 800f03c:	45ac      	cmp	ip, r5
 800f03e:	bf38      	it	cc
 800f040:	2200      	movcc	r2, #0
 800f042:	4413      	add	r3, r2
 800f044:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f048:	b17a      	cbz	r2, 800f06a <__mdiff+0x106>
 800f04a:	6107      	str	r7, [r0, #16]
 800f04c:	e7a4      	b.n	800ef98 <__mdiff+0x34>
 800f04e:	f856 8b04 	ldr.w	r8, [r6], #4
 800f052:	fa11 f288 	uxtah	r2, r1, r8
 800f056:	1414      	asrs	r4, r2, #16
 800f058:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f05c:	b292      	uxth	r2, r2
 800f05e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f062:	f84e 2b04 	str.w	r2, [lr], #4
 800f066:	1421      	asrs	r1, r4, #16
 800f068:	e7e0      	b.n	800f02c <__mdiff+0xc8>
 800f06a:	3f01      	subs	r7, #1
 800f06c:	e7ea      	b.n	800f044 <__mdiff+0xe0>
 800f06e:	bf00      	nop
 800f070:	08018378 	.word	0x08018378
 800f074:	08018389 	.word	0x08018389

0800f078 <__d2b>:
 800f078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f07c:	460f      	mov	r7, r1
 800f07e:	2101      	movs	r1, #1
 800f080:	ec59 8b10 	vmov	r8, r9, d0
 800f084:	4616      	mov	r6, r2
 800f086:	f7ff fcd5 	bl	800ea34 <_Balloc>
 800f08a:	4604      	mov	r4, r0
 800f08c:	b930      	cbnz	r0, 800f09c <__d2b+0x24>
 800f08e:	4602      	mov	r2, r0
 800f090:	4b24      	ldr	r3, [pc, #144]	; (800f124 <__d2b+0xac>)
 800f092:	4825      	ldr	r0, [pc, #148]	; (800f128 <__d2b+0xb0>)
 800f094:	f240 310f 	movw	r1, #783	; 0x30f
 800f098:	f000 fa76 	bl	800f588 <__assert_func>
 800f09c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f0a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f0a4:	bb2d      	cbnz	r5, 800f0f2 <__d2b+0x7a>
 800f0a6:	9301      	str	r3, [sp, #4]
 800f0a8:	f1b8 0300 	subs.w	r3, r8, #0
 800f0ac:	d026      	beq.n	800f0fc <__d2b+0x84>
 800f0ae:	4668      	mov	r0, sp
 800f0b0:	9300      	str	r3, [sp, #0]
 800f0b2:	f7ff fd87 	bl	800ebc4 <__lo0bits>
 800f0b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f0ba:	b1e8      	cbz	r0, 800f0f8 <__d2b+0x80>
 800f0bc:	f1c0 0320 	rsb	r3, r0, #32
 800f0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800f0c4:	430b      	orrs	r3, r1
 800f0c6:	40c2      	lsrs	r2, r0
 800f0c8:	6163      	str	r3, [r4, #20]
 800f0ca:	9201      	str	r2, [sp, #4]
 800f0cc:	9b01      	ldr	r3, [sp, #4]
 800f0ce:	61a3      	str	r3, [r4, #24]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	bf14      	ite	ne
 800f0d4:	2202      	movne	r2, #2
 800f0d6:	2201      	moveq	r2, #1
 800f0d8:	6122      	str	r2, [r4, #16]
 800f0da:	b1bd      	cbz	r5, 800f10c <__d2b+0x94>
 800f0dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f0e0:	4405      	add	r5, r0
 800f0e2:	603d      	str	r5, [r7, #0]
 800f0e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f0e8:	6030      	str	r0, [r6, #0]
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	b003      	add	sp, #12
 800f0ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f0f6:	e7d6      	b.n	800f0a6 <__d2b+0x2e>
 800f0f8:	6161      	str	r1, [r4, #20]
 800f0fa:	e7e7      	b.n	800f0cc <__d2b+0x54>
 800f0fc:	a801      	add	r0, sp, #4
 800f0fe:	f7ff fd61 	bl	800ebc4 <__lo0bits>
 800f102:	9b01      	ldr	r3, [sp, #4]
 800f104:	6163      	str	r3, [r4, #20]
 800f106:	3020      	adds	r0, #32
 800f108:	2201      	movs	r2, #1
 800f10a:	e7e5      	b.n	800f0d8 <__d2b+0x60>
 800f10c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f110:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f114:	6038      	str	r0, [r7, #0]
 800f116:	6918      	ldr	r0, [r3, #16]
 800f118:	f7ff fd34 	bl	800eb84 <__hi0bits>
 800f11c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f120:	e7e2      	b.n	800f0e8 <__d2b+0x70>
 800f122:	bf00      	nop
 800f124:	08018378 	.word	0x08018378
 800f128:	08018389 	.word	0x08018389

0800f12c <__ssputs_r>:
 800f12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f130:	688e      	ldr	r6, [r1, #8]
 800f132:	461f      	mov	r7, r3
 800f134:	42be      	cmp	r6, r7
 800f136:	680b      	ldr	r3, [r1, #0]
 800f138:	4682      	mov	sl, r0
 800f13a:	460c      	mov	r4, r1
 800f13c:	4690      	mov	r8, r2
 800f13e:	d82c      	bhi.n	800f19a <__ssputs_r+0x6e>
 800f140:	898a      	ldrh	r2, [r1, #12]
 800f142:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f146:	d026      	beq.n	800f196 <__ssputs_r+0x6a>
 800f148:	6965      	ldr	r5, [r4, #20]
 800f14a:	6909      	ldr	r1, [r1, #16]
 800f14c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f150:	eba3 0901 	sub.w	r9, r3, r1
 800f154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f158:	1c7b      	adds	r3, r7, #1
 800f15a:	444b      	add	r3, r9
 800f15c:	106d      	asrs	r5, r5, #1
 800f15e:	429d      	cmp	r5, r3
 800f160:	bf38      	it	cc
 800f162:	461d      	movcc	r5, r3
 800f164:	0553      	lsls	r3, r2, #21
 800f166:	d527      	bpl.n	800f1b8 <__ssputs_r+0x8c>
 800f168:	4629      	mov	r1, r5
 800f16a:	f7fd febb 	bl	800cee4 <_malloc_r>
 800f16e:	4606      	mov	r6, r0
 800f170:	b360      	cbz	r0, 800f1cc <__ssputs_r+0xa0>
 800f172:	6921      	ldr	r1, [r4, #16]
 800f174:	464a      	mov	r2, r9
 800f176:	f000 f9f9 	bl	800f56c <memcpy>
 800f17a:	89a3      	ldrh	r3, [r4, #12]
 800f17c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f184:	81a3      	strh	r3, [r4, #12]
 800f186:	6126      	str	r6, [r4, #16]
 800f188:	6165      	str	r5, [r4, #20]
 800f18a:	444e      	add	r6, r9
 800f18c:	eba5 0509 	sub.w	r5, r5, r9
 800f190:	6026      	str	r6, [r4, #0]
 800f192:	60a5      	str	r5, [r4, #8]
 800f194:	463e      	mov	r6, r7
 800f196:	42be      	cmp	r6, r7
 800f198:	d900      	bls.n	800f19c <__ssputs_r+0x70>
 800f19a:	463e      	mov	r6, r7
 800f19c:	6820      	ldr	r0, [r4, #0]
 800f19e:	4632      	mov	r2, r6
 800f1a0:	4641      	mov	r1, r8
 800f1a2:	f000 f9c9 	bl	800f538 <memmove>
 800f1a6:	68a3      	ldr	r3, [r4, #8]
 800f1a8:	1b9b      	subs	r3, r3, r6
 800f1aa:	60a3      	str	r3, [r4, #8]
 800f1ac:	6823      	ldr	r3, [r4, #0]
 800f1ae:	4433      	add	r3, r6
 800f1b0:	6023      	str	r3, [r4, #0]
 800f1b2:	2000      	movs	r0, #0
 800f1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1b8:	462a      	mov	r2, r5
 800f1ba:	f000 fa2b 	bl	800f614 <_realloc_r>
 800f1be:	4606      	mov	r6, r0
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	d1e0      	bne.n	800f186 <__ssputs_r+0x5a>
 800f1c4:	6921      	ldr	r1, [r4, #16]
 800f1c6:	4650      	mov	r0, sl
 800f1c8:	f7ff fbe8 	bl	800e99c <_free_r>
 800f1cc:	230c      	movs	r3, #12
 800f1ce:	f8ca 3000 	str.w	r3, [sl]
 800f1d2:	89a3      	ldrh	r3, [r4, #12]
 800f1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1d8:	81a3      	strh	r3, [r4, #12]
 800f1da:	f04f 30ff 	mov.w	r0, #4294967295
 800f1de:	e7e9      	b.n	800f1b4 <__ssputs_r+0x88>

0800f1e0 <_svfiprintf_r>:
 800f1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e4:	4698      	mov	r8, r3
 800f1e6:	898b      	ldrh	r3, [r1, #12]
 800f1e8:	061b      	lsls	r3, r3, #24
 800f1ea:	b09d      	sub	sp, #116	; 0x74
 800f1ec:	4607      	mov	r7, r0
 800f1ee:	460d      	mov	r5, r1
 800f1f0:	4614      	mov	r4, r2
 800f1f2:	d50e      	bpl.n	800f212 <_svfiprintf_r+0x32>
 800f1f4:	690b      	ldr	r3, [r1, #16]
 800f1f6:	b963      	cbnz	r3, 800f212 <_svfiprintf_r+0x32>
 800f1f8:	2140      	movs	r1, #64	; 0x40
 800f1fa:	f7fd fe73 	bl	800cee4 <_malloc_r>
 800f1fe:	6028      	str	r0, [r5, #0]
 800f200:	6128      	str	r0, [r5, #16]
 800f202:	b920      	cbnz	r0, 800f20e <_svfiprintf_r+0x2e>
 800f204:	230c      	movs	r3, #12
 800f206:	603b      	str	r3, [r7, #0]
 800f208:	f04f 30ff 	mov.w	r0, #4294967295
 800f20c:	e0d0      	b.n	800f3b0 <_svfiprintf_r+0x1d0>
 800f20e:	2340      	movs	r3, #64	; 0x40
 800f210:	616b      	str	r3, [r5, #20]
 800f212:	2300      	movs	r3, #0
 800f214:	9309      	str	r3, [sp, #36]	; 0x24
 800f216:	2320      	movs	r3, #32
 800f218:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f21c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f220:	2330      	movs	r3, #48	; 0x30
 800f222:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f3c8 <_svfiprintf_r+0x1e8>
 800f226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f22a:	f04f 0901 	mov.w	r9, #1
 800f22e:	4623      	mov	r3, r4
 800f230:	469a      	mov	sl, r3
 800f232:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f236:	b10a      	cbz	r2, 800f23c <_svfiprintf_r+0x5c>
 800f238:	2a25      	cmp	r2, #37	; 0x25
 800f23a:	d1f9      	bne.n	800f230 <_svfiprintf_r+0x50>
 800f23c:	ebba 0b04 	subs.w	fp, sl, r4
 800f240:	d00b      	beq.n	800f25a <_svfiprintf_r+0x7a>
 800f242:	465b      	mov	r3, fp
 800f244:	4622      	mov	r2, r4
 800f246:	4629      	mov	r1, r5
 800f248:	4638      	mov	r0, r7
 800f24a:	f7ff ff6f 	bl	800f12c <__ssputs_r>
 800f24e:	3001      	adds	r0, #1
 800f250:	f000 80a9 	beq.w	800f3a6 <_svfiprintf_r+0x1c6>
 800f254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f256:	445a      	add	r2, fp
 800f258:	9209      	str	r2, [sp, #36]	; 0x24
 800f25a:	f89a 3000 	ldrb.w	r3, [sl]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	f000 80a1 	beq.w	800f3a6 <_svfiprintf_r+0x1c6>
 800f264:	2300      	movs	r3, #0
 800f266:	f04f 32ff 	mov.w	r2, #4294967295
 800f26a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f26e:	f10a 0a01 	add.w	sl, sl, #1
 800f272:	9304      	str	r3, [sp, #16]
 800f274:	9307      	str	r3, [sp, #28]
 800f276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f27a:	931a      	str	r3, [sp, #104]	; 0x68
 800f27c:	4654      	mov	r4, sl
 800f27e:	2205      	movs	r2, #5
 800f280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f284:	4850      	ldr	r0, [pc, #320]	; (800f3c8 <_svfiprintf_r+0x1e8>)
 800f286:	f7f0 ffbb 	bl	8000200 <memchr>
 800f28a:	9a04      	ldr	r2, [sp, #16]
 800f28c:	b9d8      	cbnz	r0, 800f2c6 <_svfiprintf_r+0xe6>
 800f28e:	06d0      	lsls	r0, r2, #27
 800f290:	bf44      	itt	mi
 800f292:	2320      	movmi	r3, #32
 800f294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f298:	0711      	lsls	r1, r2, #28
 800f29a:	bf44      	itt	mi
 800f29c:	232b      	movmi	r3, #43	; 0x2b
 800f29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2a2:	f89a 3000 	ldrb.w	r3, [sl]
 800f2a6:	2b2a      	cmp	r3, #42	; 0x2a
 800f2a8:	d015      	beq.n	800f2d6 <_svfiprintf_r+0xf6>
 800f2aa:	9a07      	ldr	r2, [sp, #28]
 800f2ac:	4654      	mov	r4, sl
 800f2ae:	2000      	movs	r0, #0
 800f2b0:	f04f 0c0a 	mov.w	ip, #10
 800f2b4:	4621      	mov	r1, r4
 800f2b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2ba:	3b30      	subs	r3, #48	; 0x30
 800f2bc:	2b09      	cmp	r3, #9
 800f2be:	d94d      	bls.n	800f35c <_svfiprintf_r+0x17c>
 800f2c0:	b1b0      	cbz	r0, 800f2f0 <_svfiprintf_r+0x110>
 800f2c2:	9207      	str	r2, [sp, #28]
 800f2c4:	e014      	b.n	800f2f0 <_svfiprintf_r+0x110>
 800f2c6:	eba0 0308 	sub.w	r3, r0, r8
 800f2ca:	fa09 f303 	lsl.w	r3, r9, r3
 800f2ce:	4313      	orrs	r3, r2
 800f2d0:	9304      	str	r3, [sp, #16]
 800f2d2:	46a2      	mov	sl, r4
 800f2d4:	e7d2      	b.n	800f27c <_svfiprintf_r+0x9c>
 800f2d6:	9b03      	ldr	r3, [sp, #12]
 800f2d8:	1d19      	adds	r1, r3, #4
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	9103      	str	r1, [sp, #12]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	bfbb      	ittet	lt
 800f2e2:	425b      	neglt	r3, r3
 800f2e4:	f042 0202 	orrlt.w	r2, r2, #2
 800f2e8:	9307      	strge	r3, [sp, #28]
 800f2ea:	9307      	strlt	r3, [sp, #28]
 800f2ec:	bfb8      	it	lt
 800f2ee:	9204      	strlt	r2, [sp, #16]
 800f2f0:	7823      	ldrb	r3, [r4, #0]
 800f2f2:	2b2e      	cmp	r3, #46	; 0x2e
 800f2f4:	d10c      	bne.n	800f310 <_svfiprintf_r+0x130>
 800f2f6:	7863      	ldrb	r3, [r4, #1]
 800f2f8:	2b2a      	cmp	r3, #42	; 0x2a
 800f2fa:	d134      	bne.n	800f366 <_svfiprintf_r+0x186>
 800f2fc:	9b03      	ldr	r3, [sp, #12]
 800f2fe:	1d1a      	adds	r2, r3, #4
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	9203      	str	r2, [sp, #12]
 800f304:	2b00      	cmp	r3, #0
 800f306:	bfb8      	it	lt
 800f308:	f04f 33ff 	movlt.w	r3, #4294967295
 800f30c:	3402      	adds	r4, #2
 800f30e:	9305      	str	r3, [sp, #20]
 800f310:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f3d8 <_svfiprintf_r+0x1f8>
 800f314:	7821      	ldrb	r1, [r4, #0]
 800f316:	2203      	movs	r2, #3
 800f318:	4650      	mov	r0, sl
 800f31a:	f7f0 ff71 	bl	8000200 <memchr>
 800f31e:	b138      	cbz	r0, 800f330 <_svfiprintf_r+0x150>
 800f320:	9b04      	ldr	r3, [sp, #16]
 800f322:	eba0 000a 	sub.w	r0, r0, sl
 800f326:	2240      	movs	r2, #64	; 0x40
 800f328:	4082      	lsls	r2, r0
 800f32a:	4313      	orrs	r3, r2
 800f32c:	3401      	adds	r4, #1
 800f32e:	9304      	str	r3, [sp, #16]
 800f330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f334:	4825      	ldr	r0, [pc, #148]	; (800f3cc <_svfiprintf_r+0x1ec>)
 800f336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f33a:	2206      	movs	r2, #6
 800f33c:	f7f0 ff60 	bl	8000200 <memchr>
 800f340:	2800      	cmp	r0, #0
 800f342:	d038      	beq.n	800f3b6 <_svfiprintf_r+0x1d6>
 800f344:	4b22      	ldr	r3, [pc, #136]	; (800f3d0 <_svfiprintf_r+0x1f0>)
 800f346:	bb1b      	cbnz	r3, 800f390 <_svfiprintf_r+0x1b0>
 800f348:	9b03      	ldr	r3, [sp, #12]
 800f34a:	3307      	adds	r3, #7
 800f34c:	f023 0307 	bic.w	r3, r3, #7
 800f350:	3308      	adds	r3, #8
 800f352:	9303      	str	r3, [sp, #12]
 800f354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f356:	4433      	add	r3, r6
 800f358:	9309      	str	r3, [sp, #36]	; 0x24
 800f35a:	e768      	b.n	800f22e <_svfiprintf_r+0x4e>
 800f35c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f360:	460c      	mov	r4, r1
 800f362:	2001      	movs	r0, #1
 800f364:	e7a6      	b.n	800f2b4 <_svfiprintf_r+0xd4>
 800f366:	2300      	movs	r3, #0
 800f368:	3401      	adds	r4, #1
 800f36a:	9305      	str	r3, [sp, #20]
 800f36c:	4619      	mov	r1, r3
 800f36e:	f04f 0c0a 	mov.w	ip, #10
 800f372:	4620      	mov	r0, r4
 800f374:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f378:	3a30      	subs	r2, #48	; 0x30
 800f37a:	2a09      	cmp	r2, #9
 800f37c:	d903      	bls.n	800f386 <_svfiprintf_r+0x1a6>
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d0c6      	beq.n	800f310 <_svfiprintf_r+0x130>
 800f382:	9105      	str	r1, [sp, #20]
 800f384:	e7c4      	b.n	800f310 <_svfiprintf_r+0x130>
 800f386:	fb0c 2101 	mla	r1, ip, r1, r2
 800f38a:	4604      	mov	r4, r0
 800f38c:	2301      	movs	r3, #1
 800f38e:	e7f0      	b.n	800f372 <_svfiprintf_r+0x192>
 800f390:	ab03      	add	r3, sp, #12
 800f392:	9300      	str	r3, [sp, #0]
 800f394:	462a      	mov	r2, r5
 800f396:	4b0f      	ldr	r3, [pc, #60]	; (800f3d4 <_svfiprintf_r+0x1f4>)
 800f398:	a904      	add	r1, sp, #16
 800f39a:	4638      	mov	r0, r7
 800f39c:	f7fd fece 	bl	800d13c <_printf_float>
 800f3a0:	1c42      	adds	r2, r0, #1
 800f3a2:	4606      	mov	r6, r0
 800f3a4:	d1d6      	bne.n	800f354 <_svfiprintf_r+0x174>
 800f3a6:	89ab      	ldrh	r3, [r5, #12]
 800f3a8:	065b      	lsls	r3, r3, #25
 800f3aa:	f53f af2d 	bmi.w	800f208 <_svfiprintf_r+0x28>
 800f3ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3b0:	b01d      	add	sp, #116	; 0x74
 800f3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b6:	ab03      	add	r3, sp, #12
 800f3b8:	9300      	str	r3, [sp, #0]
 800f3ba:	462a      	mov	r2, r5
 800f3bc:	4b05      	ldr	r3, [pc, #20]	; (800f3d4 <_svfiprintf_r+0x1f4>)
 800f3be:	a904      	add	r1, sp, #16
 800f3c0:	4638      	mov	r0, r7
 800f3c2:	f7fe f95f 	bl	800d684 <_printf_i>
 800f3c6:	e7eb      	b.n	800f3a0 <_svfiprintf_r+0x1c0>
 800f3c8:	080184e4 	.word	0x080184e4
 800f3cc:	080184ee 	.word	0x080184ee
 800f3d0:	0800d13d 	.word	0x0800d13d
 800f3d4:	0800f12d 	.word	0x0800f12d
 800f3d8:	080184ea 	.word	0x080184ea

0800f3dc <__sflush_r>:
 800f3dc:	898a      	ldrh	r2, [r1, #12]
 800f3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e2:	4605      	mov	r5, r0
 800f3e4:	0710      	lsls	r0, r2, #28
 800f3e6:	460c      	mov	r4, r1
 800f3e8:	d458      	bmi.n	800f49c <__sflush_r+0xc0>
 800f3ea:	684b      	ldr	r3, [r1, #4]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	dc05      	bgt.n	800f3fc <__sflush_r+0x20>
 800f3f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	dc02      	bgt.n	800f3fc <__sflush_r+0x20>
 800f3f6:	2000      	movs	r0, #0
 800f3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f3fe:	2e00      	cmp	r6, #0
 800f400:	d0f9      	beq.n	800f3f6 <__sflush_r+0x1a>
 800f402:	2300      	movs	r3, #0
 800f404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f408:	682f      	ldr	r7, [r5, #0]
 800f40a:	6a21      	ldr	r1, [r4, #32]
 800f40c:	602b      	str	r3, [r5, #0]
 800f40e:	d032      	beq.n	800f476 <__sflush_r+0x9a>
 800f410:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f412:	89a3      	ldrh	r3, [r4, #12]
 800f414:	075a      	lsls	r2, r3, #29
 800f416:	d505      	bpl.n	800f424 <__sflush_r+0x48>
 800f418:	6863      	ldr	r3, [r4, #4]
 800f41a:	1ac0      	subs	r0, r0, r3
 800f41c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f41e:	b10b      	cbz	r3, 800f424 <__sflush_r+0x48>
 800f420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f422:	1ac0      	subs	r0, r0, r3
 800f424:	2300      	movs	r3, #0
 800f426:	4602      	mov	r2, r0
 800f428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f42a:	6a21      	ldr	r1, [r4, #32]
 800f42c:	4628      	mov	r0, r5
 800f42e:	47b0      	blx	r6
 800f430:	1c43      	adds	r3, r0, #1
 800f432:	89a3      	ldrh	r3, [r4, #12]
 800f434:	d106      	bne.n	800f444 <__sflush_r+0x68>
 800f436:	6829      	ldr	r1, [r5, #0]
 800f438:	291d      	cmp	r1, #29
 800f43a:	d82b      	bhi.n	800f494 <__sflush_r+0xb8>
 800f43c:	4a29      	ldr	r2, [pc, #164]	; (800f4e4 <__sflush_r+0x108>)
 800f43e:	410a      	asrs	r2, r1
 800f440:	07d6      	lsls	r6, r2, #31
 800f442:	d427      	bmi.n	800f494 <__sflush_r+0xb8>
 800f444:	2200      	movs	r2, #0
 800f446:	6062      	str	r2, [r4, #4]
 800f448:	04d9      	lsls	r1, r3, #19
 800f44a:	6922      	ldr	r2, [r4, #16]
 800f44c:	6022      	str	r2, [r4, #0]
 800f44e:	d504      	bpl.n	800f45a <__sflush_r+0x7e>
 800f450:	1c42      	adds	r2, r0, #1
 800f452:	d101      	bne.n	800f458 <__sflush_r+0x7c>
 800f454:	682b      	ldr	r3, [r5, #0]
 800f456:	b903      	cbnz	r3, 800f45a <__sflush_r+0x7e>
 800f458:	6560      	str	r0, [r4, #84]	; 0x54
 800f45a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f45c:	602f      	str	r7, [r5, #0]
 800f45e:	2900      	cmp	r1, #0
 800f460:	d0c9      	beq.n	800f3f6 <__sflush_r+0x1a>
 800f462:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f466:	4299      	cmp	r1, r3
 800f468:	d002      	beq.n	800f470 <__sflush_r+0x94>
 800f46a:	4628      	mov	r0, r5
 800f46c:	f7ff fa96 	bl	800e99c <_free_r>
 800f470:	2000      	movs	r0, #0
 800f472:	6360      	str	r0, [r4, #52]	; 0x34
 800f474:	e7c0      	b.n	800f3f8 <__sflush_r+0x1c>
 800f476:	2301      	movs	r3, #1
 800f478:	4628      	mov	r0, r5
 800f47a:	47b0      	blx	r6
 800f47c:	1c41      	adds	r1, r0, #1
 800f47e:	d1c8      	bne.n	800f412 <__sflush_r+0x36>
 800f480:	682b      	ldr	r3, [r5, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d0c5      	beq.n	800f412 <__sflush_r+0x36>
 800f486:	2b1d      	cmp	r3, #29
 800f488:	d001      	beq.n	800f48e <__sflush_r+0xb2>
 800f48a:	2b16      	cmp	r3, #22
 800f48c:	d101      	bne.n	800f492 <__sflush_r+0xb6>
 800f48e:	602f      	str	r7, [r5, #0]
 800f490:	e7b1      	b.n	800f3f6 <__sflush_r+0x1a>
 800f492:	89a3      	ldrh	r3, [r4, #12]
 800f494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f498:	81a3      	strh	r3, [r4, #12]
 800f49a:	e7ad      	b.n	800f3f8 <__sflush_r+0x1c>
 800f49c:	690f      	ldr	r7, [r1, #16]
 800f49e:	2f00      	cmp	r7, #0
 800f4a0:	d0a9      	beq.n	800f3f6 <__sflush_r+0x1a>
 800f4a2:	0793      	lsls	r3, r2, #30
 800f4a4:	680e      	ldr	r6, [r1, #0]
 800f4a6:	bf08      	it	eq
 800f4a8:	694b      	ldreq	r3, [r1, #20]
 800f4aa:	600f      	str	r7, [r1, #0]
 800f4ac:	bf18      	it	ne
 800f4ae:	2300      	movne	r3, #0
 800f4b0:	eba6 0807 	sub.w	r8, r6, r7
 800f4b4:	608b      	str	r3, [r1, #8]
 800f4b6:	f1b8 0f00 	cmp.w	r8, #0
 800f4ba:	dd9c      	ble.n	800f3f6 <__sflush_r+0x1a>
 800f4bc:	6a21      	ldr	r1, [r4, #32]
 800f4be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f4c0:	4643      	mov	r3, r8
 800f4c2:	463a      	mov	r2, r7
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	47b0      	blx	r6
 800f4c8:	2800      	cmp	r0, #0
 800f4ca:	dc06      	bgt.n	800f4da <__sflush_r+0xfe>
 800f4cc:	89a3      	ldrh	r3, [r4, #12]
 800f4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4d2:	81a3      	strh	r3, [r4, #12]
 800f4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d8:	e78e      	b.n	800f3f8 <__sflush_r+0x1c>
 800f4da:	4407      	add	r7, r0
 800f4dc:	eba8 0800 	sub.w	r8, r8, r0
 800f4e0:	e7e9      	b.n	800f4b6 <__sflush_r+0xda>
 800f4e2:	bf00      	nop
 800f4e4:	dfbffffe 	.word	0xdfbffffe

0800f4e8 <_fflush_r>:
 800f4e8:	b538      	push	{r3, r4, r5, lr}
 800f4ea:	690b      	ldr	r3, [r1, #16]
 800f4ec:	4605      	mov	r5, r0
 800f4ee:	460c      	mov	r4, r1
 800f4f0:	b913      	cbnz	r3, 800f4f8 <_fflush_r+0x10>
 800f4f2:	2500      	movs	r5, #0
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	bd38      	pop	{r3, r4, r5, pc}
 800f4f8:	b118      	cbz	r0, 800f502 <_fflush_r+0x1a>
 800f4fa:	6a03      	ldr	r3, [r0, #32]
 800f4fc:	b90b      	cbnz	r3, 800f502 <_fflush_r+0x1a>
 800f4fe:	f7fe fa6f 	bl	800d9e0 <__sinit>
 800f502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d0f3      	beq.n	800f4f2 <_fflush_r+0xa>
 800f50a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f50c:	07d0      	lsls	r0, r2, #31
 800f50e:	d404      	bmi.n	800f51a <_fflush_r+0x32>
 800f510:	0599      	lsls	r1, r3, #22
 800f512:	d402      	bmi.n	800f51a <_fflush_r+0x32>
 800f514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f516:	f7fe fbc2 	bl	800dc9e <__retarget_lock_acquire_recursive>
 800f51a:	4628      	mov	r0, r5
 800f51c:	4621      	mov	r1, r4
 800f51e:	f7ff ff5d 	bl	800f3dc <__sflush_r>
 800f522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f524:	07da      	lsls	r2, r3, #31
 800f526:	4605      	mov	r5, r0
 800f528:	d4e4      	bmi.n	800f4f4 <_fflush_r+0xc>
 800f52a:	89a3      	ldrh	r3, [r4, #12]
 800f52c:	059b      	lsls	r3, r3, #22
 800f52e:	d4e1      	bmi.n	800f4f4 <_fflush_r+0xc>
 800f530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f532:	f7fe fbb5 	bl	800dca0 <__retarget_lock_release_recursive>
 800f536:	e7dd      	b.n	800f4f4 <_fflush_r+0xc>

0800f538 <memmove>:
 800f538:	4288      	cmp	r0, r1
 800f53a:	b510      	push	{r4, lr}
 800f53c:	eb01 0402 	add.w	r4, r1, r2
 800f540:	d902      	bls.n	800f548 <memmove+0x10>
 800f542:	4284      	cmp	r4, r0
 800f544:	4623      	mov	r3, r4
 800f546:	d807      	bhi.n	800f558 <memmove+0x20>
 800f548:	1e43      	subs	r3, r0, #1
 800f54a:	42a1      	cmp	r1, r4
 800f54c:	d008      	beq.n	800f560 <memmove+0x28>
 800f54e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f552:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f556:	e7f8      	b.n	800f54a <memmove+0x12>
 800f558:	4402      	add	r2, r0
 800f55a:	4601      	mov	r1, r0
 800f55c:	428a      	cmp	r2, r1
 800f55e:	d100      	bne.n	800f562 <memmove+0x2a>
 800f560:	bd10      	pop	{r4, pc}
 800f562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f56a:	e7f7      	b.n	800f55c <memmove+0x24>

0800f56c <memcpy>:
 800f56c:	440a      	add	r2, r1
 800f56e:	4291      	cmp	r1, r2
 800f570:	f100 33ff 	add.w	r3, r0, #4294967295
 800f574:	d100      	bne.n	800f578 <memcpy+0xc>
 800f576:	4770      	bx	lr
 800f578:	b510      	push	{r4, lr}
 800f57a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f57e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f582:	4291      	cmp	r1, r2
 800f584:	d1f9      	bne.n	800f57a <memcpy+0xe>
 800f586:	bd10      	pop	{r4, pc}

0800f588 <__assert_func>:
 800f588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f58a:	4614      	mov	r4, r2
 800f58c:	461a      	mov	r2, r3
 800f58e:	4b09      	ldr	r3, [pc, #36]	; (800f5b4 <__assert_func+0x2c>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	4605      	mov	r5, r0
 800f594:	68d8      	ldr	r0, [r3, #12]
 800f596:	b14c      	cbz	r4, 800f5ac <__assert_func+0x24>
 800f598:	4b07      	ldr	r3, [pc, #28]	; (800f5b8 <__assert_func+0x30>)
 800f59a:	9100      	str	r1, [sp, #0]
 800f59c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f5a0:	4906      	ldr	r1, [pc, #24]	; (800f5bc <__assert_func+0x34>)
 800f5a2:	462b      	mov	r3, r5
 800f5a4:	f000 f872 	bl	800f68c <fiprintf>
 800f5a8:	f000 f882 	bl	800f6b0 <abort>
 800f5ac:	4b04      	ldr	r3, [pc, #16]	; (800f5c0 <__assert_func+0x38>)
 800f5ae:	461c      	mov	r4, r3
 800f5b0:	e7f3      	b.n	800f59a <__assert_func+0x12>
 800f5b2:	bf00      	nop
 800f5b4:	20000070 	.word	0x20000070
 800f5b8:	080184ff 	.word	0x080184ff
 800f5bc:	0801850c 	.word	0x0801850c
 800f5c0:	0801853a 	.word	0x0801853a

0800f5c4 <_calloc_r>:
 800f5c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5c6:	fba1 2402 	umull	r2, r4, r1, r2
 800f5ca:	b94c      	cbnz	r4, 800f5e0 <_calloc_r+0x1c>
 800f5cc:	4611      	mov	r1, r2
 800f5ce:	9201      	str	r2, [sp, #4]
 800f5d0:	f7fd fc88 	bl	800cee4 <_malloc_r>
 800f5d4:	9a01      	ldr	r2, [sp, #4]
 800f5d6:	4605      	mov	r5, r0
 800f5d8:	b930      	cbnz	r0, 800f5e8 <_calloc_r+0x24>
 800f5da:	4628      	mov	r0, r5
 800f5dc:	b003      	add	sp, #12
 800f5de:	bd30      	pop	{r4, r5, pc}
 800f5e0:	220c      	movs	r2, #12
 800f5e2:	6002      	str	r2, [r0, #0]
 800f5e4:	2500      	movs	r5, #0
 800f5e6:	e7f8      	b.n	800f5da <_calloc_r+0x16>
 800f5e8:	4621      	mov	r1, r4
 800f5ea:	f7fe facb 	bl	800db84 <memset>
 800f5ee:	e7f4      	b.n	800f5da <_calloc_r+0x16>

0800f5f0 <__ascii_mbtowc>:
 800f5f0:	b082      	sub	sp, #8
 800f5f2:	b901      	cbnz	r1, 800f5f6 <__ascii_mbtowc+0x6>
 800f5f4:	a901      	add	r1, sp, #4
 800f5f6:	b142      	cbz	r2, 800f60a <__ascii_mbtowc+0x1a>
 800f5f8:	b14b      	cbz	r3, 800f60e <__ascii_mbtowc+0x1e>
 800f5fa:	7813      	ldrb	r3, [r2, #0]
 800f5fc:	600b      	str	r3, [r1, #0]
 800f5fe:	7812      	ldrb	r2, [r2, #0]
 800f600:	1e10      	subs	r0, r2, #0
 800f602:	bf18      	it	ne
 800f604:	2001      	movne	r0, #1
 800f606:	b002      	add	sp, #8
 800f608:	4770      	bx	lr
 800f60a:	4610      	mov	r0, r2
 800f60c:	e7fb      	b.n	800f606 <__ascii_mbtowc+0x16>
 800f60e:	f06f 0001 	mvn.w	r0, #1
 800f612:	e7f8      	b.n	800f606 <__ascii_mbtowc+0x16>

0800f614 <_realloc_r>:
 800f614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f618:	4680      	mov	r8, r0
 800f61a:	4614      	mov	r4, r2
 800f61c:	460e      	mov	r6, r1
 800f61e:	b921      	cbnz	r1, 800f62a <_realloc_r+0x16>
 800f620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f624:	4611      	mov	r1, r2
 800f626:	f7fd bc5d 	b.w	800cee4 <_malloc_r>
 800f62a:	b92a      	cbnz	r2, 800f638 <_realloc_r+0x24>
 800f62c:	f7ff f9b6 	bl	800e99c <_free_r>
 800f630:	4625      	mov	r5, r4
 800f632:	4628      	mov	r0, r5
 800f634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f638:	f000 f841 	bl	800f6be <_malloc_usable_size_r>
 800f63c:	4284      	cmp	r4, r0
 800f63e:	4607      	mov	r7, r0
 800f640:	d802      	bhi.n	800f648 <_realloc_r+0x34>
 800f642:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f646:	d812      	bhi.n	800f66e <_realloc_r+0x5a>
 800f648:	4621      	mov	r1, r4
 800f64a:	4640      	mov	r0, r8
 800f64c:	f7fd fc4a 	bl	800cee4 <_malloc_r>
 800f650:	4605      	mov	r5, r0
 800f652:	2800      	cmp	r0, #0
 800f654:	d0ed      	beq.n	800f632 <_realloc_r+0x1e>
 800f656:	42bc      	cmp	r4, r7
 800f658:	4622      	mov	r2, r4
 800f65a:	4631      	mov	r1, r6
 800f65c:	bf28      	it	cs
 800f65e:	463a      	movcs	r2, r7
 800f660:	f7ff ff84 	bl	800f56c <memcpy>
 800f664:	4631      	mov	r1, r6
 800f666:	4640      	mov	r0, r8
 800f668:	f7ff f998 	bl	800e99c <_free_r>
 800f66c:	e7e1      	b.n	800f632 <_realloc_r+0x1e>
 800f66e:	4635      	mov	r5, r6
 800f670:	e7df      	b.n	800f632 <_realloc_r+0x1e>

0800f672 <__ascii_wctomb>:
 800f672:	b149      	cbz	r1, 800f688 <__ascii_wctomb+0x16>
 800f674:	2aff      	cmp	r2, #255	; 0xff
 800f676:	bf85      	ittet	hi
 800f678:	238a      	movhi	r3, #138	; 0x8a
 800f67a:	6003      	strhi	r3, [r0, #0]
 800f67c:	700a      	strbls	r2, [r1, #0]
 800f67e:	f04f 30ff 	movhi.w	r0, #4294967295
 800f682:	bf98      	it	ls
 800f684:	2001      	movls	r0, #1
 800f686:	4770      	bx	lr
 800f688:	4608      	mov	r0, r1
 800f68a:	4770      	bx	lr

0800f68c <fiprintf>:
 800f68c:	b40e      	push	{r1, r2, r3}
 800f68e:	b503      	push	{r0, r1, lr}
 800f690:	4601      	mov	r1, r0
 800f692:	ab03      	add	r3, sp, #12
 800f694:	4805      	ldr	r0, [pc, #20]	; (800f6ac <fiprintf+0x20>)
 800f696:	f853 2b04 	ldr.w	r2, [r3], #4
 800f69a:	6800      	ldr	r0, [r0, #0]
 800f69c:	9301      	str	r3, [sp, #4]
 800f69e:	f000 f83f 	bl	800f720 <_vfiprintf_r>
 800f6a2:	b002      	add	sp, #8
 800f6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6a8:	b003      	add	sp, #12
 800f6aa:	4770      	bx	lr
 800f6ac:	20000070 	.word	0x20000070

0800f6b0 <abort>:
 800f6b0:	b508      	push	{r3, lr}
 800f6b2:	2006      	movs	r0, #6
 800f6b4:	f000 fa0c 	bl	800fad0 <raise>
 800f6b8:	2001      	movs	r0, #1
 800f6ba:	f7f4 f84f 	bl	800375c <_exit>

0800f6be <_malloc_usable_size_r>:
 800f6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6c2:	1f18      	subs	r0, r3, #4
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	bfbc      	itt	lt
 800f6c8:	580b      	ldrlt	r3, [r1, r0]
 800f6ca:	18c0      	addlt	r0, r0, r3
 800f6cc:	4770      	bx	lr

0800f6ce <__sfputc_r>:
 800f6ce:	6893      	ldr	r3, [r2, #8]
 800f6d0:	3b01      	subs	r3, #1
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	b410      	push	{r4}
 800f6d6:	6093      	str	r3, [r2, #8]
 800f6d8:	da08      	bge.n	800f6ec <__sfputc_r+0x1e>
 800f6da:	6994      	ldr	r4, [r2, #24]
 800f6dc:	42a3      	cmp	r3, r4
 800f6de:	db01      	blt.n	800f6e4 <__sfputc_r+0x16>
 800f6e0:	290a      	cmp	r1, #10
 800f6e2:	d103      	bne.n	800f6ec <__sfputc_r+0x1e>
 800f6e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6e8:	f000 b934 	b.w	800f954 <__swbuf_r>
 800f6ec:	6813      	ldr	r3, [r2, #0]
 800f6ee:	1c58      	adds	r0, r3, #1
 800f6f0:	6010      	str	r0, [r2, #0]
 800f6f2:	7019      	strb	r1, [r3, #0]
 800f6f4:	4608      	mov	r0, r1
 800f6f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <__sfputs_r>:
 800f6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6fe:	4606      	mov	r6, r0
 800f700:	460f      	mov	r7, r1
 800f702:	4614      	mov	r4, r2
 800f704:	18d5      	adds	r5, r2, r3
 800f706:	42ac      	cmp	r4, r5
 800f708:	d101      	bne.n	800f70e <__sfputs_r+0x12>
 800f70a:	2000      	movs	r0, #0
 800f70c:	e007      	b.n	800f71e <__sfputs_r+0x22>
 800f70e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f712:	463a      	mov	r2, r7
 800f714:	4630      	mov	r0, r6
 800f716:	f7ff ffda 	bl	800f6ce <__sfputc_r>
 800f71a:	1c43      	adds	r3, r0, #1
 800f71c:	d1f3      	bne.n	800f706 <__sfputs_r+0xa>
 800f71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f720 <_vfiprintf_r>:
 800f720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f724:	460d      	mov	r5, r1
 800f726:	b09d      	sub	sp, #116	; 0x74
 800f728:	4614      	mov	r4, r2
 800f72a:	4698      	mov	r8, r3
 800f72c:	4606      	mov	r6, r0
 800f72e:	b118      	cbz	r0, 800f738 <_vfiprintf_r+0x18>
 800f730:	6a03      	ldr	r3, [r0, #32]
 800f732:	b90b      	cbnz	r3, 800f738 <_vfiprintf_r+0x18>
 800f734:	f7fe f954 	bl	800d9e0 <__sinit>
 800f738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f73a:	07d9      	lsls	r1, r3, #31
 800f73c:	d405      	bmi.n	800f74a <_vfiprintf_r+0x2a>
 800f73e:	89ab      	ldrh	r3, [r5, #12]
 800f740:	059a      	lsls	r2, r3, #22
 800f742:	d402      	bmi.n	800f74a <_vfiprintf_r+0x2a>
 800f744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f746:	f7fe faaa 	bl	800dc9e <__retarget_lock_acquire_recursive>
 800f74a:	89ab      	ldrh	r3, [r5, #12]
 800f74c:	071b      	lsls	r3, r3, #28
 800f74e:	d501      	bpl.n	800f754 <_vfiprintf_r+0x34>
 800f750:	692b      	ldr	r3, [r5, #16]
 800f752:	b99b      	cbnz	r3, 800f77c <_vfiprintf_r+0x5c>
 800f754:	4629      	mov	r1, r5
 800f756:	4630      	mov	r0, r6
 800f758:	f000 f93a 	bl	800f9d0 <__swsetup_r>
 800f75c:	b170      	cbz	r0, 800f77c <_vfiprintf_r+0x5c>
 800f75e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f760:	07dc      	lsls	r4, r3, #31
 800f762:	d504      	bpl.n	800f76e <_vfiprintf_r+0x4e>
 800f764:	f04f 30ff 	mov.w	r0, #4294967295
 800f768:	b01d      	add	sp, #116	; 0x74
 800f76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f76e:	89ab      	ldrh	r3, [r5, #12]
 800f770:	0598      	lsls	r0, r3, #22
 800f772:	d4f7      	bmi.n	800f764 <_vfiprintf_r+0x44>
 800f774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f776:	f7fe fa93 	bl	800dca0 <__retarget_lock_release_recursive>
 800f77a:	e7f3      	b.n	800f764 <_vfiprintf_r+0x44>
 800f77c:	2300      	movs	r3, #0
 800f77e:	9309      	str	r3, [sp, #36]	; 0x24
 800f780:	2320      	movs	r3, #32
 800f782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f786:	f8cd 800c 	str.w	r8, [sp, #12]
 800f78a:	2330      	movs	r3, #48	; 0x30
 800f78c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f940 <_vfiprintf_r+0x220>
 800f790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f794:	f04f 0901 	mov.w	r9, #1
 800f798:	4623      	mov	r3, r4
 800f79a:	469a      	mov	sl, r3
 800f79c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7a0:	b10a      	cbz	r2, 800f7a6 <_vfiprintf_r+0x86>
 800f7a2:	2a25      	cmp	r2, #37	; 0x25
 800f7a4:	d1f9      	bne.n	800f79a <_vfiprintf_r+0x7a>
 800f7a6:	ebba 0b04 	subs.w	fp, sl, r4
 800f7aa:	d00b      	beq.n	800f7c4 <_vfiprintf_r+0xa4>
 800f7ac:	465b      	mov	r3, fp
 800f7ae:	4622      	mov	r2, r4
 800f7b0:	4629      	mov	r1, r5
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	f7ff ffa2 	bl	800f6fc <__sfputs_r>
 800f7b8:	3001      	adds	r0, #1
 800f7ba:	f000 80a9 	beq.w	800f910 <_vfiprintf_r+0x1f0>
 800f7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7c0:	445a      	add	r2, fp
 800f7c2:	9209      	str	r2, [sp, #36]	; 0x24
 800f7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	f000 80a1 	beq.w	800f910 <_vfiprintf_r+0x1f0>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7d8:	f10a 0a01 	add.w	sl, sl, #1
 800f7dc:	9304      	str	r3, [sp, #16]
 800f7de:	9307      	str	r3, [sp, #28]
 800f7e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7e4:	931a      	str	r3, [sp, #104]	; 0x68
 800f7e6:	4654      	mov	r4, sl
 800f7e8:	2205      	movs	r2, #5
 800f7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7ee:	4854      	ldr	r0, [pc, #336]	; (800f940 <_vfiprintf_r+0x220>)
 800f7f0:	f7f0 fd06 	bl	8000200 <memchr>
 800f7f4:	9a04      	ldr	r2, [sp, #16]
 800f7f6:	b9d8      	cbnz	r0, 800f830 <_vfiprintf_r+0x110>
 800f7f8:	06d1      	lsls	r1, r2, #27
 800f7fa:	bf44      	itt	mi
 800f7fc:	2320      	movmi	r3, #32
 800f7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f802:	0713      	lsls	r3, r2, #28
 800f804:	bf44      	itt	mi
 800f806:	232b      	movmi	r3, #43	; 0x2b
 800f808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f80c:	f89a 3000 	ldrb.w	r3, [sl]
 800f810:	2b2a      	cmp	r3, #42	; 0x2a
 800f812:	d015      	beq.n	800f840 <_vfiprintf_r+0x120>
 800f814:	9a07      	ldr	r2, [sp, #28]
 800f816:	4654      	mov	r4, sl
 800f818:	2000      	movs	r0, #0
 800f81a:	f04f 0c0a 	mov.w	ip, #10
 800f81e:	4621      	mov	r1, r4
 800f820:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f824:	3b30      	subs	r3, #48	; 0x30
 800f826:	2b09      	cmp	r3, #9
 800f828:	d94d      	bls.n	800f8c6 <_vfiprintf_r+0x1a6>
 800f82a:	b1b0      	cbz	r0, 800f85a <_vfiprintf_r+0x13a>
 800f82c:	9207      	str	r2, [sp, #28]
 800f82e:	e014      	b.n	800f85a <_vfiprintf_r+0x13a>
 800f830:	eba0 0308 	sub.w	r3, r0, r8
 800f834:	fa09 f303 	lsl.w	r3, r9, r3
 800f838:	4313      	orrs	r3, r2
 800f83a:	9304      	str	r3, [sp, #16]
 800f83c:	46a2      	mov	sl, r4
 800f83e:	e7d2      	b.n	800f7e6 <_vfiprintf_r+0xc6>
 800f840:	9b03      	ldr	r3, [sp, #12]
 800f842:	1d19      	adds	r1, r3, #4
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	9103      	str	r1, [sp, #12]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	bfbb      	ittet	lt
 800f84c:	425b      	neglt	r3, r3
 800f84e:	f042 0202 	orrlt.w	r2, r2, #2
 800f852:	9307      	strge	r3, [sp, #28]
 800f854:	9307      	strlt	r3, [sp, #28]
 800f856:	bfb8      	it	lt
 800f858:	9204      	strlt	r2, [sp, #16]
 800f85a:	7823      	ldrb	r3, [r4, #0]
 800f85c:	2b2e      	cmp	r3, #46	; 0x2e
 800f85e:	d10c      	bne.n	800f87a <_vfiprintf_r+0x15a>
 800f860:	7863      	ldrb	r3, [r4, #1]
 800f862:	2b2a      	cmp	r3, #42	; 0x2a
 800f864:	d134      	bne.n	800f8d0 <_vfiprintf_r+0x1b0>
 800f866:	9b03      	ldr	r3, [sp, #12]
 800f868:	1d1a      	adds	r2, r3, #4
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	9203      	str	r2, [sp, #12]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	bfb8      	it	lt
 800f872:	f04f 33ff 	movlt.w	r3, #4294967295
 800f876:	3402      	adds	r4, #2
 800f878:	9305      	str	r3, [sp, #20]
 800f87a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f950 <_vfiprintf_r+0x230>
 800f87e:	7821      	ldrb	r1, [r4, #0]
 800f880:	2203      	movs	r2, #3
 800f882:	4650      	mov	r0, sl
 800f884:	f7f0 fcbc 	bl	8000200 <memchr>
 800f888:	b138      	cbz	r0, 800f89a <_vfiprintf_r+0x17a>
 800f88a:	9b04      	ldr	r3, [sp, #16]
 800f88c:	eba0 000a 	sub.w	r0, r0, sl
 800f890:	2240      	movs	r2, #64	; 0x40
 800f892:	4082      	lsls	r2, r0
 800f894:	4313      	orrs	r3, r2
 800f896:	3401      	adds	r4, #1
 800f898:	9304      	str	r3, [sp, #16]
 800f89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f89e:	4829      	ldr	r0, [pc, #164]	; (800f944 <_vfiprintf_r+0x224>)
 800f8a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8a4:	2206      	movs	r2, #6
 800f8a6:	f7f0 fcab 	bl	8000200 <memchr>
 800f8aa:	2800      	cmp	r0, #0
 800f8ac:	d03f      	beq.n	800f92e <_vfiprintf_r+0x20e>
 800f8ae:	4b26      	ldr	r3, [pc, #152]	; (800f948 <_vfiprintf_r+0x228>)
 800f8b0:	bb1b      	cbnz	r3, 800f8fa <_vfiprintf_r+0x1da>
 800f8b2:	9b03      	ldr	r3, [sp, #12]
 800f8b4:	3307      	adds	r3, #7
 800f8b6:	f023 0307 	bic.w	r3, r3, #7
 800f8ba:	3308      	adds	r3, #8
 800f8bc:	9303      	str	r3, [sp, #12]
 800f8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8c0:	443b      	add	r3, r7
 800f8c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f8c4:	e768      	b.n	800f798 <_vfiprintf_r+0x78>
 800f8c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8ca:	460c      	mov	r4, r1
 800f8cc:	2001      	movs	r0, #1
 800f8ce:	e7a6      	b.n	800f81e <_vfiprintf_r+0xfe>
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	3401      	adds	r4, #1
 800f8d4:	9305      	str	r3, [sp, #20]
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	f04f 0c0a 	mov.w	ip, #10
 800f8dc:	4620      	mov	r0, r4
 800f8de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8e2:	3a30      	subs	r2, #48	; 0x30
 800f8e4:	2a09      	cmp	r2, #9
 800f8e6:	d903      	bls.n	800f8f0 <_vfiprintf_r+0x1d0>
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d0c6      	beq.n	800f87a <_vfiprintf_r+0x15a>
 800f8ec:	9105      	str	r1, [sp, #20]
 800f8ee:	e7c4      	b.n	800f87a <_vfiprintf_r+0x15a>
 800f8f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8f4:	4604      	mov	r4, r0
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	e7f0      	b.n	800f8dc <_vfiprintf_r+0x1bc>
 800f8fa:	ab03      	add	r3, sp, #12
 800f8fc:	9300      	str	r3, [sp, #0]
 800f8fe:	462a      	mov	r2, r5
 800f900:	4b12      	ldr	r3, [pc, #72]	; (800f94c <_vfiprintf_r+0x22c>)
 800f902:	a904      	add	r1, sp, #16
 800f904:	4630      	mov	r0, r6
 800f906:	f7fd fc19 	bl	800d13c <_printf_float>
 800f90a:	4607      	mov	r7, r0
 800f90c:	1c78      	adds	r0, r7, #1
 800f90e:	d1d6      	bne.n	800f8be <_vfiprintf_r+0x19e>
 800f910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f912:	07d9      	lsls	r1, r3, #31
 800f914:	d405      	bmi.n	800f922 <_vfiprintf_r+0x202>
 800f916:	89ab      	ldrh	r3, [r5, #12]
 800f918:	059a      	lsls	r2, r3, #22
 800f91a:	d402      	bmi.n	800f922 <_vfiprintf_r+0x202>
 800f91c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f91e:	f7fe f9bf 	bl	800dca0 <__retarget_lock_release_recursive>
 800f922:	89ab      	ldrh	r3, [r5, #12]
 800f924:	065b      	lsls	r3, r3, #25
 800f926:	f53f af1d 	bmi.w	800f764 <_vfiprintf_r+0x44>
 800f92a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f92c:	e71c      	b.n	800f768 <_vfiprintf_r+0x48>
 800f92e:	ab03      	add	r3, sp, #12
 800f930:	9300      	str	r3, [sp, #0]
 800f932:	462a      	mov	r2, r5
 800f934:	4b05      	ldr	r3, [pc, #20]	; (800f94c <_vfiprintf_r+0x22c>)
 800f936:	a904      	add	r1, sp, #16
 800f938:	4630      	mov	r0, r6
 800f93a:	f7fd fea3 	bl	800d684 <_printf_i>
 800f93e:	e7e4      	b.n	800f90a <_vfiprintf_r+0x1ea>
 800f940:	080184e4 	.word	0x080184e4
 800f944:	080184ee 	.word	0x080184ee
 800f948:	0800d13d 	.word	0x0800d13d
 800f94c:	0800f6fd 	.word	0x0800f6fd
 800f950:	080184ea 	.word	0x080184ea

0800f954 <__swbuf_r>:
 800f954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f956:	460e      	mov	r6, r1
 800f958:	4614      	mov	r4, r2
 800f95a:	4605      	mov	r5, r0
 800f95c:	b118      	cbz	r0, 800f966 <__swbuf_r+0x12>
 800f95e:	6a03      	ldr	r3, [r0, #32]
 800f960:	b90b      	cbnz	r3, 800f966 <__swbuf_r+0x12>
 800f962:	f7fe f83d 	bl	800d9e0 <__sinit>
 800f966:	69a3      	ldr	r3, [r4, #24]
 800f968:	60a3      	str	r3, [r4, #8]
 800f96a:	89a3      	ldrh	r3, [r4, #12]
 800f96c:	071a      	lsls	r2, r3, #28
 800f96e:	d525      	bpl.n	800f9bc <__swbuf_r+0x68>
 800f970:	6923      	ldr	r3, [r4, #16]
 800f972:	b31b      	cbz	r3, 800f9bc <__swbuf_r+0x68>
 800f974:	6823      	ldr	r3, [r4, #0]
 800f976:	6922      	ldr	r2, [r4, #16]
 800f978:	1a98      	subs	r0, r3, r2
 800f97a:	6963      	ldr	r3, [r4, #20]
 800f97c:	b2f6      	uxtb	r6, r6
 800f97e:	4283      	cmp	r3, r0
 800f980:	4637      	mov	r7, r6
 800f982:	dc04      	bgt.n	800f98e <__swbuf_r+0x3a>
 800f984:	4621      	mov	r1, r4
 800f986:	4628      	mov	r0, r5
 800f988:	f7ff fdae 	bl	800f4e8 <_fflush_r>
 800f98c:	b9e0      	cbnz	r0, 800f9c8 <__swbuf_r+0x74>
 800f98e:	68a3      	ldr	r3, [r4, #8]
 800f990:	3b01      	subs	r3, #1
 800f992:	60a3      	str	r3, [r4, #8]
 800f994:	6823      	ldr	r3, [r4, #0]
 800f996:	1c5a      	adds	r2, r3, #1
 800f998:	6022      	str	r2, [r4, #0]
 800f99a:	701e      	strb	r6, [r3, #0]
 800f99c:	6962      	ldr	r2, [r4, #20]
 800f99e:	1c43      	adds	r3, r0, #1
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d004      	beq.n	800f9ae <__swbuf_r+0x5a>
 800f9a4:	89a3      	ldrh	r3, [r4, #12]
 800f9a6:	07db      	lsls	r3, r3, #31
 800f9a8:	d506      	bpl.n	800f9b8 <__swbuf_r+0x64>
 800f9aa:	2e0a      	cmp	r6, #10
 800f9ac:	d104      	bne.n	800f9b8 <__swbuf_r+0x64>
 800f9ae:	4621      	mov	r1, r4
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	f7ff fd99 	bl	800f4e8 <_fflush_r>
 800f9b6:	b938      	cbnz	r0, 800f9c8 <__swbuf_r+0x74>
 800f9b8:	4638      	mov	r0, r7
 800f9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9bc:	4621      	mov	r1, r4
 800f9be:	4628      	mov	r0, r5
 800f9c0:	f000 f806 	bl	800f9d0 <__swsetup_r>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	d0d5      	beq.n	800f974 <__swbuf_r+0x20>
 800f9c8:	f04f 37ff 	mov.w	r7, #4294967295
 800f9cc:	e7f4      	b.n	800f9b8 <__swbuf_r+0x64>
	...

0800f9d0 <__swsetup_r>:
 800f9d0:	b538      	push	{r3, r4, r5, lr}
 800f9d2:	4b2a      	ldr	r3, [pc, #168]	; (800fa7c <__swsetup_r+0xac>)
 800f9d4:	4605      	mov	r5, r0
 800f9d6:	6818      	ldr	r0, [r3, #0]
 800f9d8:	460c      	mov	r4, r1
 800f9da:	b118      	cbz	r0, 800f9e4 <__swsetup_r+0x14>
 800f9dc:	6a03      	ldr	r3, [r0, #32]
 800f9de:	b90b      	cbnz	r3, 800f9e4 <__swsetup_r+0x14>
 800f9e0:	f7fd fffe 	bl	800d9e0 <__sinit>
 800f9e4:	89a3      	ldrh	r3, [r4, #12]
 800f9e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9ea:	0718      	lsls	r0, r3, #28
 800f9ec:	d422      	bmi.n	800fa34 <__swsetup_r+0x64>
 800f9ee:	06d9      	lsls	r1, r3, #27
 800f9f0:	d407      	bmi.n	800fa02 <__swsetup_r+0x32>
 800f9f2:	2309      	movs	r3, #9
 800f9f4:	602b      	str	r3, [r5, #0]
 800f9f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f9fa:	81a3      	strh	r3, [r4, #12]
 800f9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800fa00:	e034      	b.n	800fa6c <__swsetup_r+0x9c>
 800fa02:	0758      	lsls	r0, r3, #29
 800fa04:	d512      	bpl.n	800fa2c <__swsetup_r+0x5c>
 800fa06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa08:	b141      	cbz	r1, 800fa1c <__swsetup_r+0x4c>
 800fa0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa0e:	4299      	cmp	r1, r3
 800fa10:	d002      	beq.n	800fa18 <__swsetup_r+0x48>
 800fa12:	4628      	mov	r0, r5
 800fa14:	f7fe ffc2 	bl	800e99c <_free_r>
 800fa18:	2300      	movs	r3, #0
 800fa1a:	6363      	str	r3, [r4, #52]	; 0x34
 800fa1c:	89a3      	ldrh	r3, [r4, #12]
 800fa1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa22:	81a3      	strh	r3, [r4, #12]
 800fa24:	2300      	movs	r3, #0
 800fa26:	6063      	str	r3, [r4, #4]
 800fa28:	6923      	ldr	r3, [r4, #16]
 800fa2a:	6023      	str	r3, [r4, #0]
 800fa2c:	89a3      	ldrh	r3, [r4, #12]
 800fa2e:	f043 0308 	orr.w	r3, r3, #8
 800fa32:	81a3      	strh	r3, [r4, #12]
 800fa34:	6923      	ldr	r3, [r4, #16]
 800fa36:	b94b      	cbnz	r3, 800fa4c <__swsetup_r+0x7c>
 800fa38:	89a3      	ldrh	r3, [r4, #12]
 800fa3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa42:	d003      	beq.n	800fa4c <__swsetup_r+0x7c>
 800fa44:	4621      	mov	r1, r4
 800fa46:	4628      	mov	r0, r5
 800fa48:	f000 f884 	bl	800fb54 <__smakebuf_r>
 800fa4c:	89a0      	ldrh	r0, [r4, #12]
 800fa4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa52:	f010 0301 	ands.w	r3, r0, #1
 800fa56:	d00a      	beq.n	800fa6e <__swsetup_r+0x9e>
 800fa58:	2300      	movs	r3, #0
 800fa5a:	60a3      	str	r3, [r4, #8]
 800fa5c:	6963      	ldr	r3, [r4, #20]
 800fa5e:	425b      	negs	r3, r3
 800fa60:	61a3      	str	r3, [r4, #24]
 800fa62:	6923      	ldr	r3, [r4, #16]
 800fa64:	b943      	cbnz	r3, 800fa78 <__swsetup_r+0xa8>
 800fa66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa6a:	d1c4      	bne.n	800f9f6 <__swsetup_r+0x26>
 800fa6c:	bd38      	pop	{r3, r4, r5, pc}
 800fa6e:	0781      	lsls	r1, r0, #30
 800fa70:	bf58      	it	pl
 800fa72:	6963      	ldrpl	r3, [r4, #20]
 800fa74:	60a3      	str	r3, [r4, #8]
 800fa76:	e7f4      	b.n	800fa62 <__swsetup_r+0x92>
 800fa78:	2000      	movs	r0, #0
 800fa7a:	e7f7      	b.n	800fa6c <__swsetup_r+0x9c>
 800fa7c:	20000070 	.word	0x20000070

0800fa80 <_raise_r>:
 800fa80:	291f      	cmp	r1, #31
 800fa82:	b538      	push	{r3, r4, r5, lr}
 800fa84:	4604      	mov	r4, r0
 800fa86:	460d      	mov	r5, r1
 800fa88:	d904      	bls.n	800fa94 <_raise_r+0x14>
 800fa8a:	2316      	movs	r3, #22
 800fa8c:	6003      	str	r3, [r0, #0]
 800fa8e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa92:	bd38      	pop	{r3, r4, r5, pc}
 800fa94:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fa96:	b112      	cbz	r2, 800fa9e <_raise_r+0x1e>
 800fa98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa9c:	b94b      	cbnz	r3, 800fab2 <_raise_r+0x32>
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f000 f830 	bl	800fb04 <_getpid_r>
 800faa4:	462a      	mov	r2, r5
 800faa6:	4601      	mov	r1, r0
 800faa8:	4620      	mov	r0, r4
 800faaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800faae:	f000 b817 	b.w	800fae0 <_kill_r>
 800fab2:	2b01      	cmp	r3, #1
 800fab4:	d00a      	beq.n	800facc <_raise_r+0x4c>
 800fab6:	1c59      	adds	r1, r3, #1
 800fab8:	d103      	bne.n	800fac2 <_raise_r+0x42>
 800faba:	2316      	movs	r3, #22
 800fabc:	6003      	str	r3, [r0, #0]
 800fabe:	2001      	movs	r0, #1
 800fac0:	e7e7      	b.n	800fa92 <_raise_r+0x12>
 800fac2:	2400      	movs	r4, #0
 800fac4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fac8:	4628      	mov	r0, r5
 800faca:	4798      	blx	r3
 800facc:	2000      	movs	r0, #0
 800face:	e7e0      	b.n	800fa92 <_raise_r+0x12>

0800fad0 <raise>:
 800fad0:	4b02      	ldr	r3, [pc, #8]	; (800fadc <raise+0xc>)
 800fad2:	4601      	mov	r1, r0
 800fad4:	6818      	ldr	r0, [r3, #0]
 800fad6:	f7ff bfd3 	b.w	800fa80 <_raise_r>
 800fada:	bf00      	nop
 800fadc:	20000070 	.word	0x20000070

0800fae0 <_kill_r>:
 800fae0:	b538      	push	{r3, r4, r5, lr}
 800fae2:	4d07      	ldr	r5, [pc, #28]	; (800fb00 <_kill_r+0x20>)
 800fae4:	2300      	movs	r3, #0
 800fae6:	4604      	mov	r4, r0
 800fae8:	4608      	mov	r0, r1
 800faea:	4611      	mov	r1, r2
 800faec:	602b      	str	r3, [r5, #0]
 800faee:	f7f3 fe25 	bl	800373c <_kill>
 800faf2:	1c43      	adds	r3, r0, #1
 800faf4:	d102      	bne.n	800fafc <_kill_r+0x1c>
 800faf6:	682b      	ldr	r3, [r5, #0]
 800faf8:	b103      	cbz	r3, 800fafc <_kill_r+0x1c>
 800fafa:	6023      	str	r3, [r4, #0]
 800fafc:	bd38      	pop	{r3, r4, r5, pc}
 800fafe:	bf00      	nop
 800fb00:	20002990 	.word	0x20002990

0800fb04 <_getpid_r>:
 800fb04:	f7f3 be12 	b.w	800372c <_getpid>

0800fb08 <__swhatbuf_r>:
 800fb08:	b570      	push	{r4, r5, r6, lr}
 800fb0a:	460c      	mov	r4, r1
 800fb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb10:	2900      	cmp	r1, #0
 800fb12:	b096      	sub	sp, #88	; 0x58
 800fb14:	4615      	mov	r5, r2
 800fb16:	461e      	mov	r6, r3
 800fb18:	da0d      	bge.n	800fb36 <__swhatbuf_r+0x2e>
 800fb1a:	89a3      	ldrh	r3, [r4, #12]
 800fb1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fb20:	f04f 0100 	mov.w	r1, #0
 800fb24:	bf0c      	ite	eq
 800fb26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fb2a:	2340      	movne	r3, #64	; 0x40
 800fb2c:	2000      	movs	r0, #0
 800fb2e:	6031      	str	r1, [r6, #0]
 800fb30:	602b      	str	r3, [r5, #0]
 800fb32:	b016      	add	sp, #88	; 0x58
 800fb34:	bd70      	pop	{r4, r5, r6, pc}
 800fb36:	466a      	mov	r2, sp
 800fb38:	f000 f848 	bl	800fbcc <_fstat_r>
 800fb3c:	2800      	cmp	r0, #0
 800fb3e:	dbec      	blt.n	800fb1a <__swhatbuf_r+0x12>
 800fb40:	9901      	ldr	r1, [sp, #4]
 800fb42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fb46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fb4a:	4259      	negs	r1, r3
 800fb4c:	4159      	adcs	r1, r3
 800fb4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb52:	e7eb      	b.n	800fb2c <__swhatbuf_r+0x24>

0800fb54 <__smakebuf_r>:
 800fb54:	898b      	ldrh	r3, [r1, #12]
 800fb56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb58:	079d      	lsls	r5, r3, #30
 800fb5a:	4606      	mov	r6, r0
 800fb5c:	460c      	mov	r4, r1
 800fb5e:	d507      	bpl.n	800fb70 <__smakebuf_r+0x1c>
 800fb60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb64:	6023      	str	r3, [r4, #0]
 800fb66:	6123      	str	r3, [r4, #16]
 800fb68:	2301      	movs	r3, #1
 800fb6a:	6163      	str	r3, [r4, #20]
 800fb6c:	b002      	add	sp, #8
 800fb6e:	bd70      	pop	{r4, r5, r6, pc}
 800fb70:	ab01      	add	r3, sp, #4
 800fb72:	466a      	mov	r2, sp
 800fb74:	f7ff ffc8 	bl	800fb08 <__swhatbuf_r>
 800fb78:	9900      	ldr	r1, [sp, #0]
 800fb7a:	4605      	mov	r5, r0
 800fb7c:	4630      	mov	r0, r6
 800fb7e:	f7fd f9b1 	bl	800cee4 <_malloc_r>
 800fb82:	b948      	cbnz	r0, 800fb98 <__smakebuf_r+0x44>
 800fb84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb88:	059a      	lsls	r2, r3, #22
 800fb8a:	d4ef      	bmi.n	800fb6c <__smakebuf_r+0x18>
 800fb8c:	f023 0303 	bic.w	r3, r3, #3
 800fb90:	f043 0302 	orr.w	r3, r3, #2
 800fb94:	81a3      	strh	r3, [r4, #12]
 800fb96:	e7e3      	b.n	800fb60 <__smakebuf_r+0xc>
 800fb98:	89a3      	ldrh	r3, [r4, #12]
 800fb9a:	6020      	str	r0, [r4, #0]
 800fb9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fba0:	81a3      	strh	r3, [r4, #12]
 800fba2:	9b00      	ldr	r3, [sp, #0]
 800fba4:	6163      	str	r3, [r4, #20]
 800fba6:	9b01      	ldr	r3, [sp, #4]
 800fba8:	6120      	str	r0, [r4, #16]
 800fbaa:	b15b      	cbz	r3, 800fbc4 <__smakebuf_r+0x70>
 800fbac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbb0:	4630      	mov	r0, r6
 800fbb2:	f000 f81d 	bl	800fbf0 <_isatty_r>
 800fbb6:	b128      	cbz	r0, 800fbc4 <__smakebuf_r+0x70>
 800fbb8:	89a3      	ldrh	r3, [r4, #12]
 800fbba:	f023 0303 	bic.w	r3, r3, #3
 800fbbe:	f043 0301 	orr.w	r3, r3, #1
 800fbc2:	81a3      	strh	r3, [r4, #12]
 800fbc4:	89a3      	ldrh	r3, [r4, #12]
 800fbc6:	431d      	orrs	r5, r3
 800fbc8:	81a5      	strh	r5, [r4, #12]
 800fbca:	e7cf      	b.n	800fb6c <__smakebuf_r+0x18>

0800fbcc <_fstat_r>:
 800fbcc:	b538      	push	{r3, r4, r5, lr}
 800fbce:	4d07      	ldr	r5, [pc, #28]	; (800fbec <_fstat_r+0x20>)
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	4608      	mov	r0, r1
 800fbd6:	4611      	mov	r1, r2
 800fbd8:	602b      	str	r3, [r5, #0]
 800fbda:	f7f3 fe0e 	bl	80037fa <_fstat>
 800fbde:	1c43      	adds	r3, r0, #1
 800fbe0:	d102      	bne.n	800fbe8 <_fstat_r+0x1c>
 800fbe2:	682b      	ldr	r3, [r5, #0]
 800fbe4:	b103      	cbz	r3, 800fbe8 <_fstat_r+0x1c>
 800fbe6:	6023      	str	r3, [r4, #0]
 800fbe8:	bd38      	pop	{r3, r4, r5, pc}
 800fbea:	bf00      	nop
 800fbec:	20002990 	.word	0x20002990

0800fbf0 <_isatty_r>:
 800fbf0:	b538      	push	{r3, r4, r5, lr}
 800fbf2:	4d06      	ldr	r5, [pc, #24]	; (800fc0c <_isatty_r+0x1c>)
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	4604      	mov	r4, r0
 800fbf8:	4608      	mov	r0, r1
 800fbfa:	602b      	str	r3, [r5, #0]
 800fbfc:	f7f3 fe0d 	bl	800381a <_isatty>
 800fc00:	1c43      	adds	r3, r0, #1
 800fc02:	d102      	bne.n	800fc0a <_isatty_r+0x1a>
 800fc04:	682b      	ldr	r3, [r5, #0]
 800fc06:	b103      	cbz	r3, 800fc0a <_isatty_r+0x1a>
 800fc08:	6023      	str	r3, [r4, #0]
 800fc0a:	bd38      	pop	{r3, r4, r5, pc}
 800fc0c:	20002990 	.word	0x20002990

0800fc10 <atan2>:
 800fc10:	f000 b952 	b.w	800feb8 <__ieee754_atan2>
 800fc14:	0000      	movs	r0, r0
	...

0800fc18 <log>:
 800fc18:	b538      	push	{r3, r4, r5, lr}
 800fc1a:	ed2d 8b02 	vpush	{d8}
 800fc1e:	ec55 4b10 	vmov	r4, r5, d0
 800fc22:	f000 fa11 	bl	8010048 <__ieee754_log>
 800fc26:	4622      	mov	r2, r4
 800fc28:	462b      	mov	r3, r5
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	4629      	mov	r1, r5
 800fc2e:	eeb0 8a40 	vmov.f32	s16, s0
 800fc32:	eef0 8a60 	vmov.f32	s17, s1
 800fc36:	f7f0 ff91 	bl	8000b5c <__aeabi_dcmpun>
 800fc3a:	b998      	cbnz	r0, 800fc64 <log+0x4c>
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	2300      	movs	r3, #0
 800fc40:	4620      	mov	r0, r4
 800fc42:	4629      	mov	r1, r5
 800fc44:	f7f0 ff80 	bl	8000b48 <__aeabi_dcmpgt>
 800fc48:	b960      	cbnz	r0, 800fc64 <log+0x4c>
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	4620      	mov	r0, r4
 800fc50:	4629      	mov	r1, r5
 800fc52:	f7f0 ff51 	bl	8000af8 <__aeabi_dcmpeq>
 800fc56:	b160      	cbz	r0, 800fc72 <log+0x5a>
 800fc58:	f7fd fff6 	bl	800dc48 <__errno>
 800fc5c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800fc88 <log+0x70>
 800fc60:	2322      	movs	r3, #34	; 0x22
 800fc62:	6003      	str	r3, [r0, #0]
 800fc64:	eeb0 0a48 	vmov.f32	s0, s16
 800fc68:	eef0 0a68 	vmov.f32	s1, s17
 800fc6c:	ecbd 8b02 	vpop	{d8}
 800fc70:	bd38      	pop	{r3, r4, r5, pc}
 800fc72:	f7fd ffe9 	bl	800dc48 <__errno>
 800fc76:	ecbd 8b02 	vpop	{d8}
 800fc7a:	2321      	movs	r3, #33	; 0x21
 800fc7c:	6003      	str	r3, [r0, #0]
 800fc7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc82:	4803      	ldr	r0, [pc, #12]	; (800fc90 <log+0x78>)
 800fc84:	f000 b834 	b.w	800fcf0 <nan>
 800fc88:	00000000 	.word	0x00000000
 800fc8c:	fff00000 	.word	0xfff00000
 800fc90:	0801853a 	.word	0x0801853a

0800fc94 <sqrt>:
 800fc94:	b538      	push	{r3, r4, r5, lr}
 800fc96:	ed2d 8b02 	vpush	{d8}
 800fc9a:	ec55 4b10 	vmov	r4, r5, d0
 800fc9e:	f000 f82f 	bl	800fd00 <__ieee754_sqrt>
 800fca2:	4622      	mov	r2, r4
 800fca4:	462b      	mov	r3, r5
 800fca6:	4620      	mov	r0, r4
 800fca8:	4629      	mov	r1, r5
 800fcaa:	eeb0 8a40 	vmov.f32	s16, s0
 800fcae:	eef0 8a60 	vmov.f32	s17, s1
 800fcb2:	f7f0 ff53 	bl	8000b5c <__aeabi_dcmpun>
 800fcb6:	b990      	cbnz	r0, 800fcde <sqrt+0x4a>
 800fcb8:	2200      	movs	r2, #0
 800fcba:	2300      	movs	r3, #0
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	4629      	mov	r1, r5
 800fcc0:	f7f0 ff24 	bl	8000b0c <__aeabi_dcmplt>
 800fcc4:	b158      	cbz	r0, 800fcde <sqrt+0x4a>
 800fcc6:	f7fd ffbf 	bl	800dc48 <__errno>
 800fcca:	2321      	movs	r3, #33	; 0x21
 800fccc:	6003      	str	r3, [r0, #0]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	4610      	mov	r0, r2
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	f7f0 fdd1 	bl	800087c <__aeabi_ddiv>
 800fcda:	ec41 0b18 	vmov	d8, r0, r1
 800fcde:	eeb0 0a48 	vmov.f32	s0, s16
 800fce2:	eef0 0a68 	vmov.f32	s1, s17
 800fce6:	ecbd 8b02 	vpop	{d8}
 800fcea:	bd38      	pop	{r3, r4, r5, pc}
 800fcec:	0000      	movs	r0, r0
	...

0800fcf0 <nan>:
 800fcf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fcf8 <nan+0x8>
 800fcf4:	4770      	bx	lr
 800fcf6:	bf00      	nop
 800fcf8:	00000000 	.word	0x00000000
 800fcfc:	7ff80000 	.word	0x7ff80000

0800fd00 <__ieee754_sqrt>:
 800fd00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd04:	ec55 4b10 	vmov	r4, r5, d0
 800fd08:	4e67      	ldr	r6, [pc, #412]	; (800fea8 <__ieee754_sqrt+0x1a8>)
 800fd0a:	43ae      	bics	r6, r5
 800fd0c:	ee10 0a10 	vmov	r0, s0
 800fd10:	ee10 2a10 	vmov	r2, s0
 800fd14:	4629      	mov	r1, r5
 800fd16:	462b      	mov	r3, r5
 800fd18:	d10d      	bne.n	800fd36 <__ieee754_sqrt+0x36>
 800fd1a:	f7f0 fc85 	bl	8000628 <__aeabi_dmul>
 800fd1e:	4602      	mov	r2, r0
 800fd20:	460b      	mov	r3, r1
 800fd22:	4620      	mov	r0, r4
 800fd24:	4629      	mov	r1, r5
 800fd26:	f7f0 fac9 	bl	80002bc <__adddf3>
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	460d      	mov	r5, r1
 800fd2e:	ec45 4b10 	vmov	d0, r4, r5
 800fd32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd36:	2d00      	cmp	r5, #0
 800fd38:	dc0b      	bgt.n	800fd52 <__ieee754_sqrt+0x52>
 800fd3a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fd3e:	4326      	orrs	r6, r4
 800fd40:	d0f5      	beq.n	800fd2e <__ieee754_sqrt+0x2e>
 800fd42:	b135      	cbz	r5, 800fd52 <__ieee754_sqrt+0x52>
 800fd44:	f7f0 fab8 	bl	80002b8 <__aeabi_dsub>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	f7f0 fd96 	bl	800087c <__aeabi_ddiv>
 800fd50:	e7eb      	b.n	800fd2a <__ieee754_sqrt+0x2a>
 800fd52:	1509      	asrs	r1, r1, #20
 800fd54:	f000 808d 	beq.w	800fe72 <__ieee754_sqrt+0x172>
 800fd58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd5c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800fd60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd64:	07c9      	lsls	r1, r1, #31
 800fd66:	bf5c      	itt	pl
 800fd68:	005b      	lslpl	r3, r3, #1
 800fd6a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800fd6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fd72:	bf58      	it	pl
 800fd74:	0052      	lslpl	r2, r2, #1
 800fd76:	2500      	movs	r5, #0
 800fd78:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fd7c:	1076      	asrs	r6, r6, #1
 800fd7e:	0052      	lsls	r2, r2, #1
 800fd80:	f04f 0e16 	mov.w	lr, #22
 800fd84:	46ac      	mov	ip, r5
 800fd86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fd8a:	eb0c 0001 	add.w	r0, ip, r1
 800fd8e:	4298      	cmp	r0, r3
 800fd90:	bfde      	ittt	le
 800fd92:	1a1b      	suble	r3, r3, r0
 800fd94:	eb00 0c01 	addle.w	ip, r0, r1
 800fd98:	186d      	addle	r5, r5, r1
 800fd9a:	005b      	lsls	r3, r3, #1
 800fd9c:	f1be 0e01 	subs.w	lr, lr, #1
 800fda0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fda4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fda8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fdac:	d1ed      	bne.n	800fd8a <__ieee754_sqrt+0x8a>
 800fdae:	4674      	mov	r4, lr
 800fdb0:	2720      	movs	r7, #32
 800fdb2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fdb6:	4563      	cmp	r3, ip
 800fdb8:	eb01 000e 	add.w	r0, r1, lr
 800fdbc:	dc02      	bgt.n	800fdc4 <__ieee754_sqrt+0xc4>
 800fdbe:	d113      	bne.n	800fde8 <__ieee754_sqrt+0xe8>
 800fdc0:	4290      	cmp	r0, r2
 800fdc2:	d811      	bhi.n	800fde8 <__ieee754_sqrt+0xe8>
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	eb00 0e01 	add.w	lr, r0, r1
 800fdca:	da57      	bge.n	800fe7c <__ieee754_sqrt+0x17c>
 800fdcc:	f1be 0f00 	cmp.w	lr, #0
 800fdd0:	db54      	blt.n	800fe7c <__ieee754_sqrt+0x17c>
 800fdd2:	f10c 0801 	add.w	r8, ip, #1
 800fdd6:	eba3 030c 	sub.w	r3, r3, ip
 800fdda:	4290      	cmp	r0, r2
 800fddc:	bf88      	it	hi
 800fdde:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fde2:	1a12      	subs	r2, r2, r0
 800fde4:	440c      	add	r4, r1
 800fde6:	46c4      	mov	ip, r8
 800fde8:	005b      	lsls	r3, r3, #1
 800fdea:	3f01      	subs	r7, #1
 800fdec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fdf0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fdf4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fdf8:	d1dd      	bne.n	800fdb6 <__ieee754_sqrt+0xb6>
 800fdfa:	4313      	orrs	r3, r2
 800fdfc:	d01b      	beq.n	800fe36 <__ieee754_sqrt+0x136>
 800fdfe:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800feac <__ieee754_sqrt+0x1ac>
 800fe02:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800feb0 <__ieee754_sqrt+0x1b0>
 800fe06:	e9da 0100 	ldrd	r0, r1, [sl]
 800fe0a:	e9db 2300 	ldrd	r2, r3, [fp]
 800fe0e:	f7f0 fa53 	bl	80002b8 <__aeabi_dsub>
 800fe12:	e9da 8900 	ldrd	r8, r9, [sl]
 800fe16:	4602      	mov	r2, r0
 800fe18:	460b      	mov	r3, r1
 800fe1a:	4640      	mov	r0, r8
 800fe1c:	4649      	mov	r1, r9
 800fe1e:	f7f0 fe7f 	bl	8000b20 <__aeabi_dcmple>
 800fe22:	b140      	cbz	r0, 800fe36 <__ieee754_sqrt+0x136>
 800fe24:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fe28:	e9da 0100 	ldrd	r0, r1, [sl]
 800fe2c:	e9db 2300 	ldrd	r2, r3, [fp]
 800fe30:	d126      	bne.n	800fe80 <__ieee754_sqrt+0x180>
 800fe32:	3501      	adds	r5, #1
 800fe34:	463c      	mov	r4, r7
 800fe36:	106a      	asrs	r2, r5, #1
 800fe38:	0863      	lsrs	r3, r4, #1
 800fe3a:	07e9      	lsls	r1, r5, #31
 800fe3c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800fe40:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800fe44:	bf48      	it	mi
 800fe46:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800fe4a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800fe4e:	461c      	mov	r4, r3
 800fe50:	e76d      	b.n	800fd2e <__ieee754_sqrt+0x2e>
 800fe52:	0ad3      	lsrs	r3, r2, #11
 800fe54:	3815      	subs	r0, #21
 800fe56:	0552      	lsls	r2, r2, #21
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d0fa      	beq.n	800fe52 <__ieee754_sqrt+0x152>
 800fe5c:	02dc      	lsls	r4, r3, #11
 800fe5e:	d50a      	bpl.n	800fe76 <__ieee754_sqrt+0x176>
 800fe60:	f1c1 0420 	rsb	r4, r1, #32
 800fe64:	fa22 f404 	lsr.w	r4, r2, r4
 800fe68:	1e4d      	subs	r5, r1, #1
 800fe6a:	408a      	lsls	r2, r1
 800fe6c:	4323      	orrs	r3, r4
 800fe6e:	1b41      	subs	r1, r0, r5
 800fe70:	e772      	b.n	800fd58 <__ieee754_sqrt+0x58>
 800fe72:	4608      	mov	r0, r1
 800fe74:	e7f0      	b.n	800fe58 <__ieee754_sqrt+0x158>
 800fe76:	005b      	lsls	r3, r3, #1
 800fe78:	3101      	adds	r1, #1
 800fe7a:	e7ef      	b.n	800fe5c <__ieee754_sqrt+0x15c>
 800fe7c:	46e0      	mov	r8, ip
 800fe7e:	e7aa      	b.n	800fdd6 <__ieee754_sqrt+0xd6>
 800fe80:	f7f0 fa1c 	bl	80002bc <__adddf3>
 800fe84:	e9da 8900 	ldrd	r8, r9, [sl]
 800fe88:	4602      	mov	r2, r0
 800fe8a:	460b      	mov	r3, r1
 800fe8c:	4640      	mov	r0, r8
 800fe8e:	4649      	mov	r1, r9
 800fe90:	f7f0 fe3c 	bl	8000b0c <__aeabi_dcmplt>
 800fe94:	b120      	cbz	r0, 800fea0 <__ieee754_sqrt+0x1a0>
 800fe96:	1ca0      	adds	r0, r4, #2
 800fe98:	bf08      	it	eq
 800fe9a:	3501      	addeq	r5, #1
 800fe9c:	3402      	adds	r4, #2
 800fe9e:	e7ca      	b.n	800fe36 <__ieee754_sqrt+0x136>
 800fea0:	3401      	adds	r4, #1
 800fea2:	f024 0401 	bic.w	r4, r4, #1
 800fea6:	e7c6      	b.n	800fe36 <__ieee754_sqrt+0x136>
 800fea8:	7ff00000 	.word	0x7ff00000
 800feac:	200001e0 	.word	0x200001e0
 800feb0:	200001e8 	.word	0x200001e8
 800feb4:	00000000 	.word	0x00000000

0800feb8 <__ieee754_atan2>:
 800feb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800febc:	ec57 6b11 	vmov	r6, r7, d1
 800fec0:	4273      	negs	r3, r6
 800fec2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8010040 <__ieee754_atan2+0x188>
 800fec6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800feca:	4333      	orrs	r3, r6
 800fecc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fed0:	4543      	cmp	r3, r8
 800fed2:	ec51 0b10 	vmov	r0, r1, d0
 800fed6:	ee11 5a10 	vmov	r5, s2
 800feda:	d80a      	bhi.n	800fef2 <__ieee754_atan2+0x3a>
 800fedc:	4244      	negs	r4, r0
 800fede:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fee2:	4304      	orrs	r4, r0
 800fee4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fee8:	4544      	cmp	r4, r8
 800feea:	ee10 9a10 	vmov	r9, s0
 800feee:	468e      	mov	lr, r1
 800fef0:	d907      	bls.n	800ff02 <__ieee754_atan2+0x4a>
 800fef2:	4632      	mov	r2, r6
 800fef4:	463b      	mov	r3, r7
 800fef6:	f7f0 f9e1 	bl	80002bc <__adddf3>
 800fefa:	ec41 0b10 	vmov	d0, r0, r1
 800fefe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ff06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ff0a:	4334      	orrs	r4, r6
 800ff0c:	d103      	bne.n	800ff16 <__ieee754_atan2+0x5e>
 800ff0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff12:	f000 ba55 	b.w	80103c0 <atan>
 800ff16:	17bc      	asrs	r4, r7, #30
 800ff18:	f004 0402 	and.w	r4, r4, #2
 800ff1c:	ea53 0909 	orrs.w	r9, r3, r9
 800ff20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ff24:	d107      	bne.n	800ff36 <__ieee754_atan2+0x7e>
 800ff26:	2c02      	cmp	r4, #2
 800ff28:	d05f      	beq.n	800ffea <__ieee754_atan2+0x132>
 800ff2a:	2c03      	cmp	r4, #3
 800ff2c:	d1e5      	bne.n	800fefa <__ieee754_atan2+0x42>
 800ff2e:	a140      	add	r1, pc, #256	; (adr r1, 8010030 <__ieee754_atan2+0x178>)
 800ff30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff34:	e7e1      	b.n	800fefa <__ieee754_atan2+0x42>
 800ff36:	4315      	orrs	r5, r2
 800ff38:	d106      	bne.n	800ff48 <__ieee754_atan2+0x90>
 800ff3a:	f1be 0f00 	cmp.w	lr, #0
 800ff3e:	da5f      	bge.n	8010000 <__ieee754_atan2+0x148>
 800ff40:	a13d      	add	r1, pc, #244	; (adr r1, 8010038 <__ieee754_atan2+0x180>)
 800ff42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff46:	e7d8      	b.n	800fefa <__ieee754_atan2+0x42>
 800ff48:	4542      	cmp	r2, r8
 800ff4a:	d10f      	bne.n	800ff6c <__ieee754_atan2+0xb4>
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ff52:	d107      	bne.n	800ff64 <__ieee754_atan2+0xac>
 800ff54:	2c02      	cmp	r4, #2
 800ff56:	d84c      	bhi.n	800fff2 <__ieee754_atan2+0x13a>
 800ff58:	4b33      	ldr	r3, [pc, #204]	; (8010028 <__ieee754_atan2+0x170>)
 800ff5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ff5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff62:	e7ca      	b.n	800fefa <__ieee754_atan2+0x42>
 800ff64:	2c02      	cmp	r4, #2
 800ff66:	d848      	bhi.n	800fffa <__ieee754_atan2+0x142>
 800ff68:	4b30      	ldr	r3, [pc, #192]	; (801002c <__ieee754_atan2+0x174>)
 800ff6a:	e7f6      	b.n	800ff5a <__ieee754_atan2+0xa2>
 800ff6c:	4543      	cmp	r3, r8
 800ff6e:	d0e4      	beq.n	800ff3a <__ieee754_atan2+0x82>
 800ff70:	1a9b      	subs	r3, r3, r2
 800ff72:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ff76:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ff7a:	da1e      	bge.n	800ffba <__ieee754_atan2+0x102>
 800ff7c:	2f00      	cmp	r7, #0
 800ff7e:	da01      	bge.n	800ff84 <__ieee754_atan2+0xcc>
 800ff80:	323c      	adds	r2, #60	; 0x3c
 800ff82:	db1e      	blt.n	800ffc2 <__ieee754_atan2+0x10a>
 800ff84:	4632      	mov	r2, r6
 800ff86:	463b      	mov	r3, r7
 800ff88:	f7f0 fc78 	bl	800087c <__aeabi_ddiv>
 800ff8c:	ec41 0b10 	vmov	d0, r0, r1
 800ff90:	f000 fbb6 	bl	8010700 <fabs>
 800ff94:	f000 fa14 	bl	80103c0 <atan>
 800ff98:	ec51 0b10 	vmov	r0, r1, d0
 800ff9c:	2c01      	cmp	r4, #1
 800ff9e:	d013      	beq.n	800ffc8 <__ieee754_atan2+0x110>
 800ffa0:	2c02      	cmp	r4, #2
 800ffa2:	d015      	beq.n	800ffd0 <__ieee754_atan2+0x118>
 800ffa4:	2c00      	cmp	r4, #0
 800ffa6:	d0a8      	beq.n	800fefa <__ieee754_atan2+0x42>
 800ffa8:	a317      	add	r3, pc, #92	; (adr r3, 8010008 <__ieee754_atan2+0x150>)
 800ffaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffae:	f7f0 f983 	bl	80002b8 <__aeabi_dsub>
 800ffb2:	a317      	add	r3, pc, #92	; (adr r3, 8010010 <__ieee754_atan2+0x158>)
 800ffb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb8:	e014      	b.n	800ffe4 <__ieee754_atan2+0x12c>
 800ffba:	a117      	add	r1, pc, #92	; (adr r1, 8010018 <__ieee754_atan2+0x160>)
 800ffbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffc0:	e7ec      	b.n	800ff9c <__ieee754_atan2+0xe4>
 800ffc2:	2000      	movs	r0, #0
 800ffc4:	2100      	movs	r1, #0
 800ffc6:	e7e9      	b.n	800ff9c <__ieee754_atan2+0xe4>
 800ffc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ffcc:	4619      	mov	r1, r3
 800ffce:	e794      	b.n	800fefa <__ieee754_atan2+0x42>
 800ffd0:	a30d      	add	r3, pc, #52	; (adr r3, 8010008 <__ieee754_atan2+0x150>)
 800ffd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd6:	f7f0 f96f 	bl	80002b8 <__aeabi_dsub>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	460b      	mov	r3, r1
 800ffde:	a10c      	add	r1, pc, #48	; (adr r1, 8010010 <__ieee754_atan2+0x158>)
 800ffe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffe4:	f7f0 f968 	bl	80002b8 <__aeabi_dsub>
 800ffe8:	e787      	b.n	800fefa <__ieee754_atan2+0x42>
 800ffea:	a109      	add	r1, pc, #36	; (adr r1, 8010010 <__ieee754_atan2+0x158>)
 800ffec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fff0:	e783      	b.n	800fefa <__ieee754_atan2+0x42>
 800fff2:	a10b      	add	r1, pc, #44	; (adr r1, 8010020 <__ieee754_atan2+0x168>)
 800fff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fff8:	e77f      	b.n	800fefa <__ieee754_atan2+0x42>
 800fffa:	2000      	movs	r0, #0
 800fffc:	2100      	movs	r1, #0
 800fffe:	e77c      	b.n	800fefa <__ieee754_atan2+0x42>
 8010000:	a105      	add	r1, pc, #20	; (adr r1, 8010018 <__ieee754_atan2+0x160>)
 8010002:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010006:	e778      	b.n	800fefa <__ieee754_atan2+0x42>
 8010008:	33145c07 	.word	0x33145c07
 801000c:	3ca1a626 	.word	0x3ca1a626
 8010010:	54442d18 	.word	0x54442d18
 8010014:	400921fb 	.word	0x400921fb
 8010018:	54442d18 	.word	0x54442d18
 801001c:	3ff921fb 	.word	0x3ff921fb
 8010020:	54442d18 	.word	0x54442d18
 8010024:	3fe921fb 	.word	0x3fe921fb
 8010028:	08018640 	.word	0x08018640
 801002c:	08018658 	.word	0x08018658
 8010030:	54442d18 	.word	0x54442d18
 8010034:	c00921fb 	.word	0xc00921fb
 8010038:	54442d18 	.word	0x54442d18
 801003c:	bff921fb 	.word	0xbff921fb
 8010040:	7ff00000 	.word	0x7ff00000
 8010044:	00000000 	.word	0x00000000

08010048 <__ieee754_log>:
 8010048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801004c:	ec51 0b10 	vmov	r0, r1, d0
 8010050:	ed2d 8b04 	vpush	{d8-d9}
 8010054:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010058:	b083      	sub	sp, #12
 801005a:	460d      	mov	r5, r1
 801005c:	da29      	bge.n	80100b2 <__ieee754_log+0x6a>
 801005e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010062:	4303      	orrs	r3, r0
 8010064:	ee10 2a10 	vmov	r2, s0
 8010068:	d10c      	bne.n	8010084 <__ieee754_log+0x3c>
 801006a:	49cf      	ldr	r1, [pc, #828]	; (80103a8 <__ieee754_log+0x360>)
 801006c:	2200      	movs	r2, #0
 801006e:	2300      	movs	r3, #0
 8010070:	2000      	movs	r0, #0
 8010072:	f7f0 fc03 	bl	800087c <__aeabi_ddiv>
 8010076:	ec41 0b10 	vmov	d0, r0, r1
 801007a:	b003      	add	sp, #12
 801007c:	ecbd 8b04 	vpop	{d8-d9}
 8010080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010084:	2900      	cmp	r1, #0
 8010086:	da05      	bge.n	8010094 <__ieee754_log+0x4c>
 8010088:	460b      	mov	r3, r1
 801008a:	f7f0 f915 	bl	80002b8 <__aeabi_dsub>
 801008e:	2200      	movs	r2, #0
 8010090:	2300      	movs	r3, #0
 8010092:	e7ee      	b.n	8010072 <__ieee754_log+0x2a>
 8010094:	4bc5      	ldr	r3, [pc, #788]	; (80103ac <__ieee754_log+0x364>)
 8010096:	2200      	movs	r2, #0
 8010098:	f7f0 fac6 	bl	8000628 <__aeabi_dmul>
 801009c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80100a0:	460d      	mov	r5, r1
 80100a2:	4ac3      	ldr	r2, [pc, #780]	; (80103b0 <__ieee754_log+0x368>)
 80100a4:	4295      	cmp	r5, r2
 80100a6:	dd06      	ble.n	80100b6 <__ieee754_log+0x6e>
 80100a8:	4602      	mov	r2, r0
 80100aa:	460b      	mov	r3, r1
 80100ac:	f7f0 f906 	bl	80002bc <__adddf3>
 80100b0:	e7e1      	b.n	8010076 <__ieee754_log+0x2e>
 80100b2:	2300      	movs	r3, #0
 80100b4:	e7f5      	b.n	80100a2 <__ieee754_log+0x5a>
 80100b6:	152c      	asrs	r4, r5, #20
 80100b8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80100bc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80100c0:	441c      	add	r4, r3
 80100c2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80100c6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80100ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80100ce:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80100d2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80100d6:	ea42 0105 	orr.w	r1, r2, r5
 80100da:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80100de:	2200      	movs	r2, #0
 80100e0:	4bb4      	ldr	r3, [pc, #720]	; (80103b4 <__ieee754_log+0x36c>)
 80100e2:	f7f0 f8e9 	bl	80002b8 <__aeabi_dsub>
 80100e6:	1cab      	adds	r3, r5, #2
 80100e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80100ec:	2b02      	cmp	r3, #2
 80100ee:	4682      	mov	sl, r0
 80100f0:	468b      	mov	fp, r1
 80100f2:	f04f 0200 	mov.w	r2, #0
 80100f6:	dc53      	bgt.n	80101a0 <__ieee754_log+0x158>
 80100f8:	2300      	movs	r3, #0
 80100fa:	f7f0 fcfd 	bl	8000af8 <__aeabi_dcmpeq>
 80100fe:	b1d0      	cbz	r0, 8010136 <__ieee754_log+0xee>
 8010100:	2c00      	cmp	r4, #0
 8010102:	f000 8122 	beq.w	801034a <__ieee754_log+0x302>
 8010106:	4620      	mov	r0, r4
 8010108:	f7f0 fa24 	bl	8000554 <__aeabi_i2d>
 801010c:	a390      	add	r3, pc, #576	; (adr r3, 8010350 <__ieee754_log+0x308>)
 801010e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010112:	4606      	mov	r6, r0
 8010114:	460f      	mov	r7, r1
 8010116:	f7f0 fa87 	bl	8000628 <__aeabi_dmul>
 801011a:	a38f      	add	r3, pc, #572	; (adr r3, 8010358 <__ieee754_log+0x310>)
 801011c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010120:	4604      	mov	r4, r0
 8010122:	460d      	mov	r5, r1
 8010124:	4630      	mov	r0, r6
 8010126:	4639      	mov	r1, r7
 8010128:	f7f0 fa7e 	bl	8000628 <__aeabi_dmul>
 801012c:	4602      	mov	r2, r0
 801012e:	460b      	mov	r3, r1
 8010130:	4620      	mov	r0, r4
 8010132:	4629      	mov	r1, r5
 8010134:	e7ba      	b.n	80100ac <__ieee754_log+0x64>
 8010136:	a38a      	add	r3, pc, #552	; (adr r3, 8010360 <__ieee754_log+0x318>)
 8010138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801013c:	4650      	mov	r0, sl
 801013e:	4659      	mov	r1, fp
 8010140:	f7f0 fa72 	bl	8000628 <__aeabi_dmul>
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	2000      	movs	r0, #0
 801014a:	499b      	ldr	r1, [pc, #620]	; (80103b8 <__ieee754_log+0x370>)
 801014c:	f7f0 f8b4 	bl	80002b8 <__aeabi_dsub>
 8010150:	4652      	mov	r2, sl
 8010152:	4606      	mov	r6, r0
 8010154:	460f      	mov	r7, r1
 8010156:	465b      	mov	r3, fp
 8010158:	4650      	mov	r0, sl
 801015a:	4659      	mov	r1, fp
 801015c:	f7f0 fa64 	bl	8000628 <__aeabi_dmul>
 8010160:	4602      	mov	r2, r0
 8010162:	460b      	mov	r3, r1
 8010164:	4630      	mov	r0, r6
 8010166:	4639      	mov	r1, r7
 8010168:	f7f0 fa5e 	bl	8000628 <__aeabi_dmul>
 801016c:	4606      	mov	r6, r0
 801016e:	460f      	mov	r7, r1
 8010170:	b914      	cbnz	r4, 8010178 <__ieee754_log+0x130>
 8010172:	4632      	mov	r2, r6
 8010174:	463b      	mov	r3, r7
 8010176:	e0a2      	b.n	80102be <__ieee754_log+0x276>
 8010178:	4620      	mov	r0, r4
 801017a:	f7f0 f9eb 	bl	8000554 <__aeabi_i2d>
 801017e:	a374      	add	r3, pc, #464	; (adr r3, 8010350 <__ieee754_log+0x308>)
 8010180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010184:	4680      	mov	r8, r0
 8010186:	4689      	mov	r9, r1
 8010188:	f7f0 fa4e 	bl	8000628 <__aeabi_dmul>
 801018c:	a372      	add	r3, pc, #456	; (adr r3, 8010358 <__ieee754_log+0x310>)
 801018e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010192:	4604      	mov	r4, r0
 8010194:	460d      	mov	r5, r1
 8010196:	4640      	mov	r0, r8
 8010198:	4649      	mov	r1, r9
 801019a:	f7f0 fa45 	bl	8000628 <__aeabi_dmul>
 801019e:	e0a7      	b.n	80102f0 <__ieee754_log+0x2a8>
 80101a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80101a4:	f7f0 f88a 	bl	80002bc <__adddf3>
 80101a8:	4602      	mov	r2, r0
 80101aa:	460b      	mov	r3, r1
 80101ac:	4650      	mov	r0, sl
 80101ae:	4659      	mov	r1, fp
 80101b0:	f7f0 fb64 	bl	800087c <__aeabi_ddiv>
 80101b4:	ec41 0b18 	vmov	d8, r0, r1
 80101b8:	4620      	mov	r0, r4
 80101ba:	f7f0 f9cb 	bl	8000554 <__aeabi_i2d>
 80101be:	ec53 2b18 	vmov	r2, r3, d8
 80101c2:	ec41 0b19 	vmov	d9, r0, r1
 80101c6:	ec51 0b18 	vmov	r0, r1, d8
 80101ca:	f7f0 fa2d 	bl	8000628 <__aeabi_dmul>
 80101ce:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80101d2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80101d6:	9301      	str	r3, [sp, #4]
 80101d8:	4602      	mov	r2, r0
 80101da:	460b      	mov	r3, r1
 80101dc:	4680      	mov	r8, r0
 80101de:	4689      	mov	r9, r1
 80101e0:	f7f0 fa22 	bl	8000628 <__aeabi_dmul>
 80101e4:	a360      	add	r3, pc, #384	; (adr r3, 8010368 <__ieee754_log+0x320>)
 80101e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ea:	4606      	mov	r6, r0
 80101ec:	460f      	mov	r7, r1
 80101ee:	f7f0 fa1b 	bl	8000628 <__aeabi_dmul>
 80101f2:	a35f      	add	r3, pc, #380	; (adr r3, 8010370 <__ieee754_log+0x328>)
 80101f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f8:	f7f0 f860 	bl	80002bc <__adddf3>
 80101fc:	4632      	mov	r2, r6
 80101fe:	463b      	mov	r3, r7
 8010200:	f7f0 fa12 	bl	8000628 <__aeabi_dmul>
 8010204:	a35c      	add	r3, pc, #368	; (adr r3, 8010378 <__ieee754_log+0x330>)
 8010206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020a:	f7f0 f857 	bl	80002bc <__adddf3>
 801020e:	4632      	mov	r2, r6
 8010210:	463b      	mov	r3, r7
 8010212:	f7f0 fa09 	bl	8000628 <__aeabi_dmul>
 8010216:	a35a      	add	r3, pc, #360	; (adr r3, 8010380 <__ieee754_log+0x338>)
 8010218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021c:	f7f0 f84e 	bl	80002bc <__adddf3>
 8010220:	4642      	mov	r2, r8
 8010222:	464b      	mov	r3, r9
 8010224:	f7f0 fa00 	bl	8000628 <__aeabi_dmul>
 8010228:	a357      	add	r3, pc, #348	; (adr r3, 8010388 <__ieee754_log+0x340>)
 801022a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022e:	4680      	mov	r8, r0
 8010230:	4689      	mov	r9, r1
 8010232:	4630      	mov	r0, r6
 8010234:	4639      	mov	r1, r7
 8010236:	f7f0 f9f7 	bl	8000628 <__aeabi_dmul>
 801023a:	a355      	add	r3, pc, #340	; (adr r3, 8010390 <__ieee754_log+0x348>)
 801023c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010240:	f7f0 f83c 	bl	80002bc <__adddf3>
 8010244:	4632      	mov	r2, r6
 8010246:	463b      	mov	r3, r7
 8010248:	f7f0 f9ee 	bl	8000628 <__aeabi_dmul>
 801024c:	a352      	add	r3, pc, #328	; (adr r3, 8010398 <__ieee754_log+0x350>)
 801024e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010252:	f7f0 f833 	bl	80002bc <__adddf3>
 8010256:	4632      	mov	r2, r6
 8010258:	463b      	mov	r3, r7
 801025a:	f7f0 f9e5 	bl	8000628 <__aeabi_dmul>
 801025e:	460b      	mov	r3, r1
 8010260:	4602      	mov	r2, r0
 8010262:	4649      	mov	r1, r9
 8010264:	4640      	mov	r0, r8
 8010266:	f7f0 f829 	bl	80002bc <__adddf3>
 801026a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801026e:	9b01      	ldr	r3, [sp, #4]
 8010270:	3551      	adds	r5, #81	; 0x51
 8010272:	431d      	orrs	r5, r3
 8010274:	2d00      	cmp	r5, #0
 8010276:	4680      	mov	r8, r0
 8010278:	4689      	mov	r9, r1
 801027a:	dd48      	ble.n	801030e <__ieee754_log+0x2c6>
 801027c:	4b4e      	ldr	r3, [pc, #312]	; (80103b8 <__ieee754_log+0x370>)
 801027e:	2200      	movs	r2, #0
 8010280:	4650      	mov	r0, sl
 8010282:	4659      	mov	r1, fp
 8010284:	f7f0 f9d0 	bl	8000628 <__aeabi_dmul>
 8010288:	4652      	mov	r2, sl
 801028a:	465b      	mov	r3, fp
 801028c:	f7f0 f9cc 	bl	8000628 <__aeabi_dmul>
 8010290:	4602      	mov	r2, r0
 8010292:	460b      	mov	r3, r1
 8010294:	4606      	mov	r6, r0
 8010296:	460f      	mov	r7, r1
 8010298:	4640      	mov	r0, r8
 801029a:	4649      	mov	r1, r9
 801029c:	f7f0 f80e 	bl	80002bc <__adddf3>
 80102a0:	ec53 2b18 	vmov	r2, r3, d8
 80102a4:	f7f0 f9c0 	bl	8000628 <__aeabi_dmul>
 80102a8:	4680      	mov	r8, r0
 80102aa:	4689      	mov	r9, r1
 80102ac:	b964      	cbnz	r4, 80102c8 <__ieee754_log+0x280>
 80102ae:	4602      	mov	r2, r0
 80102b0:	460b      	mov	r3, r1
 80102b2:	4630      	mov	r0, r6
 80102b4:	4639      	mov	r1, r7
 80102b6:	f7ef ffff 	bl	80002b8 <__aeabi_dsub>
 80102ba:	4602      	mov	r2, r0
 80102bc:	460b      	mov	r3, r1
 80102be:	4650      	mov	r0, sl
 80102c0:	4659      	mov	r1, fp
 80102c2:	f7ef fff9 	bl	80002b8 <__aeabi_dsub>
 80102c6:	e6d6      	b.n	8010076 <__ieee754_log+0x2e>
 80102c8:	a321      	add	r3, pc, #132	; (adr r3, 8010350 <__ieee754_log+0x308>)
 80102ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ce:	ec51 0b19 	vmov	r0, r1, d9
 80102d2:	f7f0 f9a9 	bl	8000628 <__aeabi_dmul>
 80102d6:	a320      	add	r3, pc, #128	; (adr r3, 8010358 <__ieee754_log+0x310>)
 80102d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102dc:	4604      	mov	r4, r0
 80102de:	460d      	mov	r5, r1
 80102e0:	ec51 0b19 	vmov	r0, r1, d9
 80102e4:	f7f0 f9a0 	bl	8000628 <__aeabi_dmul>
 80102e8:	4642      	mov	r2, r8
 80102ea:	464b      	mov	r3, r9
 80102ec:	f7ef ffe6 	bl	80002bc <__adddf3>
 80102f0:	4602      	mov	r2, r0
 80102f2:	460b      	mov	r3, r1
 80102f4:	4630      	mov	r0, r6
 80102f6:	4639      	mov	r1, r7
 80102f8:	f7ef ffde 	bl	80002b8 <__aeabi_dsub>
 80102fc:	4652      	mov	r2, sl
 80102fe:	465b      	mov	r3, fp
 8010300:	f7ef ffda 	bl	80002b8 <__aeabi_dsub>
 8010304:	4602      	mov	r2, r0
 8010306:	460b      	mov	r3, r1
 8010308:	4620      	mov	r0, r4
 801030a:	4629      	mov	r1, r5
 801030c:	e7d9      	b.n	80102c2 <__ieee754_log+0x27a>
 801030e:	4602      	mov	r2, r0
 8010310:	460b      	mov	r3, r1
 8010312:	4650      	mov	r0, sl
 8010314:	4659      	mov	r1, fp
 8010316:	f7ef ffcf 	bl	80002b8 <__aeabi_dsub>
 801031a:	ec53 2b18 	vmov	r2, r3, d8
 801031e:	f7f0 f983 	bl	8000628 <__aeabi_dmul>
 8010322:	4606      	mov	r6, r0
 8010324:	460f      	mov	r7, r1
 8010326:	2c00      	cmp	r4, #0
 8010328:	f43f af23 	beq.w	8010172 <__ieee754_log+0x12a>
 801032c:	a308      	add	r3, pc, #32	; (adr r3, 8010350 <__ieee754_log+0x308>)
 801032e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010332:	ec51 0b19 	vmov	r0, r1, d9
 8010336:	f7f0 f977 	bl	8000628 <__aeabi_dmul>
 801033a:	a307      	add	r3, pc, #28	; (adr r3, 8010358 <__ieee754_log+0x310>)
 801033c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010340:	4604      	mov	r4, r0
 8010342:	460d      	mov	r5, r1
 8010344:	ec51 0b19 	vmov	r0, r1, d9
 8010348:	e727      	b.n	801019a <__ieee754_log+0x152>
 801034a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80103a0 <__ieee754_log+0x358>
 801034e:	e694      	b.n	801007a <__ieee754_log+0x32>
 8010350:	fee00000 	.word	0xfee00000
 8010354:	3fe62e42 	.word	0x3fe62e42
 8010358:	35793c76 	.word	0x35793c76
 801035c:	3dea39ef 	.word	0x3dea39ef
 8010360:	55555555 	.word	0x55555555
 8010364:	3fd55555 	.word	0x3fd55555
 8010368:	df3e5244 	.word	0xdf3e5244
 801036c:	3fc2f112 	.word	0x3fc2f112
 8010370:	96cb03de 	.word	0x96cb03de
 8010374:	3fc74664 	.word	0x3fc74664
 8010378:	94229359 	.word	0x94229359
 801037c:	3fd24924 	.word	0x3fd24924
 8010380:	55555593 	.word	0x55555593
 8010384:	3fe55555 	.word	0x3fe55555
 8010388:	d078c69f 	.word	0xd078c69f
 801038c:	3fc39a09 	.word	0x3fc39a09
 8010390:	1d8e78af 	.word	0x1d8e78af
 8010394:	3fcc71c5 	.word	0x3fcc71c5
 8010398:	9997fa04 	.word	0x9997fa04
 801039c:	3fd99999 	.word	0x3fd99999
	...
 80103a8:	c3500000 	.word	0xc3500000
 80103ac:	43500000 	.word	0x43500000
 80103b0:	7fefffff 	.word	0x7fefffff
 80103b4:	3ff00000 	.word	0x3ff00000
 80103b8:	3fe00000 	.word	0x3fe00000
 80103bc:	00000000 	.word	0x00000000

080103c0 <atan>:
 80103c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c4:	ec55 4b10 	vmov	r4, r5, d0
 80103c8:	4bc3      	ldr	r3, [pc, #780]	; (80106d8 <atan+0x318>)
 80103ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80103ce:	429e      	cmp	r6, r3
 80103d0:	46ab      	mov	fp, r5
 80103d2:	dd18      	ble.n	8010406 <atan+0x46>
 80103d4:	4bc1      	ldr	r3, [pc, #772]	; (80106dc <atan+0x31c>)
 80103d6:	429e      	cmp	r6, r3
 80103d8:	dc01      	bgt.n	80103de <atan+0x1e>
 80103da:	d109      	bne.n	80103f0 <atan+0x30>
 80103dc:	b144      	cbz	r4, 80103f0 <atan+0x30>
 80103de:	4622      	mov	r2, r4
 80103e0:	462b      	mov	r3, r5
 80103e2:	4620      	mov	r0, r4
 80103e4:	4629      	mov	r1, r5
 80103e6:	f7ef ff69 	bl	80002bc <__adddf3>
 80103ea:	4604      	mov	r4, r0
 80103ec:	460d      	mov	r5, r1
 80103ee:	e006      	b.n	80103fe <atan+0x3e>
 80103f0:	f1bb 0f00 	cmp.w	fp, #0
 80103f4:	f300 8131 	bgt.w	801065a <atan+0x29a>
 80103f8:	a59b      	add	r5, pc, #620	; (adr r5, 8010668 <atan+0x2a8>)
 80103fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80103fe:	ec45 4b10 	vmov	d0, r4, r5
 8010402:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010406:	4bb6      	ldr	r3, [pc, #728]	; (80106e0 <atan+0x320>)
 8010408:	429e      	cmp	r6, r3
 801040a:	dc14      	bgt.n	8010436 <atan+0x76>
 801040c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010410:	429e      	cmp	r6, r3
 8010412:	dc0d      	bgt.n	8010430 <atan+0x70>
 8010414:	a396      	add	r3, pc, #600	; (adr r3, 8010670 <atan+0x2b0>)
 8010416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041a:	ee10 0a10 	vmov	r0, s0
 801041e:	4629      	mov	r1, r5
 8010420:	f7ef ff4c 	bl	80002bc <__adddf3>
 8010424:	4baf      	ldr	r3, [pc, #700]	; (80106e4 <atan+0x324>)
 8010426:	2200      	movs	r2, #0
 8010428:	f7f0 fb8e 	bl	8000b48 <__aeabi_dcmpgt>
 801042c:	2800      	cmp	r0, #0
 801042e:	d1e6      	bne.n	80103fe <atan+0x3e>
 8010430:	f04f 3aff 	mov.w	sl, #4294967295
 8010434:	e02b      	b.n	801048e <atan+0xce>
 8010436:	f000 f963 	bl	8010700 <fabs>
 801043a:	4bab      	ldr	r3, [pc, #684]	; (80106e8 <atan+0x328>)
 801043c:	429e      	cmp	r6, r3
 801043e:	ec55 4b10 	vmov	r4, r5, d0
 8010442:	f300 80bf 	bgt.w	80105c4 <atan+0x204>
 8010446:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801044a:	429e      	cmp	r6, r3
 801044c:	f300 80a0 	bgt.w	8010590 <atan+0x1d0>
 8010450:	ee10 2a10 	vmov	r2, s0
 8010454:	ee10 0a10 	vmov	r0, s0
 8010458:	462b      	mov	r3, r5
 801045a:	4629      	mov	r1, r5
 801045c:	f7ef ff2e 	bl	80002bc <__adddf3>
 8010460:	4ba0      	ldr	r3, [pc, #640]	; (80106e4 <atan+0x324>)
 8010462:	2200      	movs	r2, #0
 8010464:	f7ef ff28 	bl	80002b8 <__aeabi_dsub>
 8010468:	2200      	movs	r2, #0
 801046a:	4606      	mov	r6, r0
 801046c:	460f      	mov	r7, r1
 801046e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010472:	4620      	mov	r0, r4
 8010474:	4629      	mov	r1, r5
 8010476:	f7ef ff21 	bl	80002bc <__adddf3>
 801047a:	4602      	mov	r2, r0
 801047c:	460b      	mov	r3, r1
 801047e:	4630      	mov	r0, r6
 8010480:	4639      	mov	r1, r7
 8010482:	f7f0 f9fb 	bl	800087c <__aeabi_ddiv>
 8010486:	f04f 0a00 	mov.w	sl, #0
 801048a:	4604      	mov	r4, r0
 801048c:	460d      	mov	r5, r1
 801048e:	4622      	mov	r2, r4
 8010490:	462b      	mov	r3, r5
 8010492:	4620      	mov	r0, r4
 8010494:	4629      	mov	r1, r5
 8010496:	f7f0 f8c7 	bl	8000628 <__aeabi_dmul>
 801049a:	4602      	mov	r2, r0
 801049c:	460b      	mov	r3, r1
 801049e:	4680      	mov	r8, r0
 80104a0:	4689      	mov	r9, r1
 80104a2:	f7f0 f8c1 	bl	8000628 <__aeabi_dmul>
 80104a6:	a374      	add	r3, pc, #464	; (adr r3, 8010678 <atan+0x2b8>)
 80104a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ac:	4606      	mov	r6, r0
 80104ae:	460f      	mov	r7, r1
 80104b0:	f7f0 f8ba 	bl	8000628 <__aeabi_dmul>
 80104b4:	a372      	add	r3, pc, #456	; (adr r3, 8010680 <atan+0x2c0>)
 80104b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ba:	f7ef feff 	bl	80002bc <__adddf3>
 80104be:	4632      	mov	r2, r6
 80104c0:	463b      	mov	r3, r7
 80104c2:	f7f0 f8b1 	bl	8000628 <__aeabi_dmul>
 80104c6:	a370      	add	r3, pc, #448	; (adr r3, 8010688 <atan+0x2c8>)
 80104c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104cc:	f7ef fef6 	bl	80002bc <__adddf3>
 80104d0:	4632      	mov	r2, r6
 80104d2:	463b      	mov	r3, r7
 80104d4:	f7f0 f8a8 	bl	8000628 <__aeabi_dmul>
 80104d8:	a36d      	add	r3, pc, #436	; (adr r3, 8010690 <atan+0x2d0>)
 80104da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104de:	f7ef feed 	bl	80002bc <__adddf3>
 80104e2:	4632      	mov	r2, r6
 80104e4:	463b      	mov	r3, r7
 80104e6:	f7f0 f89f 	bl	8000628 <__aeabi_dmul>
 80104ea:	a36b      	add	r3, pc, #428	; (adr r3, 8010698 <atan+0x2d8>)
 80104ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f0:	f7ef fee4 	bl	80002bc <__adddf3>
 80104f4:	4632      	mov	r2, r6
 80104f6:	463b      	mov	r3, r7
 80104f8:	f7f0 f896 	bl	8000628 <__aeabi_dmul>
 80104fc:	a368      	add	r3, pc, #416	; (adr r3, 80106a0 <atan+0x2e0>)
 80104fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010502:	f7ef fedb 	bl	80002bc <__adddf3>
 8010506:	4642      	mov	r2, r8
 8010508:	464b      	mov	r3, r9
 801050a:	f7f0 f88d 	bl	8000628 <__aeabi_dmul>
 801050e:	a366      	add	r3, pc, #408	; (adr r3, 80106a8 <atan+0x2e8>)
 8010510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010514:	4680      	mov	r8, r0
 8010516:	4689      	mov	r9, r1
 8010518:	4630      	mov	r0, r6
 801051a:	4639      	mov	r1, r7
 801051c:	f7f0 f884 	bl	8000628 <__aeabi_dmul>
 8010520:	a363      	add	r3, pc, #396	; (adr r3, 80106b0 <atan+0x2f0>)
 8010522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010526:	f7ef fec7 	bl	80002b8 <__aeabi_dsub>
 801052a:	4632      	mov	r2, r6
 801052c:	463b      	mov	r3, r7
 801052e:	f7f0 f87b 	bl	8000628 <__aeabi_dmul>
 8010532:	a361      	add	r3, pc, #388	; (adr r3, 80106b8 <atan+0x2f8>)
 8010534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010538:	f7ef febe 	bl	80002b8 <__aeabi_dsub>
 801053c:	4632      	mov	r2, r6
 801053e:	463b      	mov	r3, r7
 8010540:	f7f0 f872 	bl	8000628 <__aeabi_dmul>
 8010544:	a35e      	add	r3, pc, #376	; (adr r3, 80106c0 <atan+0x300>)
 8010546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054a:	f7ef feb5 	bl	80002b8 <__aeabi_dsub>
 801054e:	4632      	mov	r2, r6
 8010550:	463b      	mov	r3, r7
 8010552:	f7f0 f869 	bl	8000628 <__aeabi_dmul>
 8010556:	a35c      	add	r3, pc, #368	; (adr r3, 80106c8 <atan+0x308>)
 8010558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055c:	f7ef feac 	bl	80002b8 <__aeabi_dsub>
 8010560:	4632      	mov	r2, r6
 8010562:	463b      	mov	r3, r7
 8010564:	f7f0 f860 	bl	8000628 <__aeabi_dmul>
 8010568:	4602      	mov	r2, r0
 801056a:	460b      	mov	r3, r1
 801056c:	4640      	mov	r0, r8
 801056e:	4649      	mov	r1, r9
 8010570:	f7ef fea4 	bl	80002bc <__adddf3>
 8010574:	4622      	mov	r2, r4
 8010576:	462b      	mov	r3, r5
 8010578:	f7f0 f856 	bl	8000628 <__aeabi_dmul>
 801057c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010580:	4602      	mov	r2, r0
 8010582:	460b      	mov	r3, r1
 8010584:	d14b      	bne.n	801061e <atan+0x25e>
 8010586:	4620      	mov	r0, r4
 8010588:	4629      	mov	r1, r5
 801058a:	f7ef fe95 	bl	80002b8 <__aeabi_dsub>
 801058e:	e72c      	b.n	80103ea <atan+0x2a>
 8010590:	ee10 0a10 	vmov	r0, s0
 8010594:	4b53      	ldr	r3, [pc, #332]	; (80106e4 <atan+0x324>)
 8010596:	2200      	movs	r2, #0
 8010598:	4629      	mov	r1, r5
 801059a:	f7ef fe8d 	bl	80002b8 <__aeabi_dsub>
 801059e:	4b51      	ldr	r3, [pc, #324]	; (80106e4 <atan+0x324>)
 80105a0:	4606      	mov	r6, r0
 80105a2:	460f      	mov	r7, r1
 80105a4:	2200      	movs	r2, #0
 80105a6:	4620      	mov	r0, r4
 80105a8:	4629      	mov	r1, r5
 80105aa:	f7ef fe87 	bl	80002bc <__adddf3>
 80105ae:	4602      	mov	r2, r0
 80105b0:	460b      	mov	r3, r1
 80105b2:	4630      	mov	r0, r6
 80105b4:	4639      	mov	r1, r7
 80105b6:	f7f0 f961 	bl	800087c <__aeabi_ddiv>
 80105ba:	f04f 0a01 	mov.w	sl, #1
 80105be:	4604      	mov	r4, r0
 80105c0:	460d      	mov	r5, r1
 80105c2:	e764      	b.n	801048e <atan+0xce>
 80105c4:	4b49      	ldr	r3, [pc, #292]	; (80106ec <atan+0x32c>)
 80105c6:	429e      	cmp	r6, r3
 80105c8:	da1d      	bge.n	8010606 <atan+0x246>
 80105ca:	ee10 0a10 	vmov	r0, s0
 80105ce:	4b48      	ldr	r3, [pc, #288]	; (80106f0 <atan+0x330>)
 80105d0:	2200      	movs	r2, #0
 80105d2:	4629      	mov	r1, r5
 80105d4:	f7ef fe70 	bl	80002b8 <__aeabi_dsub>
 80105d8:	4b45      	ldr	r3, [pc, #276]	; (80106f0 <atan+0x330>)
 80105da:	4606      	mov	r6, r0
 80105dc:	460f      	mov	r7, r1
 80105de:	2200      	movs	r2, #0
 80105e0:	4620      	mov	r0, r4
 80105e2:	4629      	mov	r1, r5
 80105e4:	f7f0 f820 	bl	8000628 <__aeabi_dmul>
 80105e8:	4b3e      	ldr	r3, [pc, #248]	; (80106e4 <atan+0x324>)
 80105ea:	2200      	movs	r2, #0
 80105ec:	f7ef fe66 	bl	80002bc <__adddf3>
 80105f0:	4602      	mov	r2, r0
 80105f2:	460b      	mov	r3, r1
 80105f4:	4630      	mov	r0, r6
 80105f6:	4639      	mov	r1, r7
 80105f8:	f7f0 f940 	bl	800087c <__aeabi_ddiv>
 80105fc:	f04f 0a02 	mov.w	sl, #2
 8010600:	4604      	mov	r4, r0
 8010602:	460d      	mov	r5, r1
 8010604:	e743      	b.n	801048e <atan+0xce>
 8010606:	462b      	mov	r3, r5
 8010608:	ee10 2a10 	vmov	r2, s0
 801060c:	4939      	ldr	r1, [pc, #228]	; (80106f4 <atan+0x334>)
 801060e:	2000      	movs	r0, #0
 8010610:	f7f0 f934 	bl	800087c <__aeabi_ddiv>
 8010614:	f04f 0a03 	mov.w	sl, #3
 8010618:	4604      	mov	r4, r0
 801061a:	460d      	mov	r5, r1
 801061c:	e737      	b.n	801048e <atan+0xce>
 801061e:	4b36      	ldr	r3, [pc, #216]	; (80106f8 <atan+0x338>)
 8010620:	4e36      	ldr	r6, [pc, #216]	; (80106fc <atan+0x33c>)
 8010622:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062a:	f7ef fe45 	bl	80002b8 <__aeabi_dsub>
 801062e:	4622      	mov	r2, r4
 8010630:	462b      	mov	r3, r5
 8010632:	f7ef fe41 	bl	80002b8 <__aeabi_dsub>
 8010636:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801063a:	4602      	mov	r2, r0
 801063c:	460b      	mov	r3, r1
 801063e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010642:	f7ef fe39 	bl	80002b8 <__aeabi_dsub>
 8010646:	f1bb 0f00 	cmp.w	fp, #0
 801064a:	4604      	mov	r4, r0
 801064c:	460d      	mov	r5, r1
 801064e:	f6bf aed6 	bge.w	80103fe <atan+0x3e>
 8010652:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010656:	461d      	mov	r5, r3
 8010658:	e6d1      	b.n	80103fe <atan+0x3e>
 801065a:	a51d      	add	r5, pc, #116	; (adr r5, 80106d0 <atan+0x310>)
 801065c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010660:	e6cd      	b.n	80103fe <atan+0x3e>
 8010662:	bf00      	nop
 8010664:	f3af 8000 	nop.w
 8010668:	54442d18 	.word	0x54442d18
 801066c:	bff921fb 	.word	0xbff921fb
 8010670:	8800759c 	.word	0x8800759c
 8010674:	7e37e43c 	.word	0x7e37e43c
 8010678:	e322da11 	.word	0xe322da11
 801067c:	3f90ad3a 	.word	0x3f90ad3a
 8010680:	24760deb 	.word	0x24760deb
 8010684:	3fa97b4b 	.word	0x3fa97b4b
 8010688:	a0d03d51 	.word	0xa0d03d51
 801068c:	3fb10d66 	.word	0x3fb10d66
 8010690:	c54c206e 	.word	0xc54c206e
 8010694:	3fb745cd 	.word	0x3fb745cd
 8010698:	920083ff 	.word	0x920083ff
 801069c:	3fc24924 	.word	0x3fc24924
 80106a0:	5555550d 	.word	0x5555550d
 80106a4:	3fd55555 	.word	0x3fd55555
 80106a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80106ac:	bfa2b444 	.word	0xbfa2b444
 80106b0:	52defd9a 	.word	0x52defd9a
 80106b4:	3fadde2d 	.word	0x3fadde2d
 80106b8:	af749a6d 	.word	0xaf749a6d
 80106bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80106c0:	fe231671 	.word	0xfe231671
 80106c4:	3fbc71c6 	.word	0x3fbc71c6
 80106c8:	9998ebc4 	.word	0x9998ebc4
 80106cc:	3fc99999 	.word	0x3fc99999
 80106d0:	54442d18 	.word	0x54442d18
 80106d4:	3ff921fb 	.word	0x3ff921fb
 80106d8:	440fffff 	.word	0x440fffff
 80106dc:	7ff00000 	.word	0x7ff00000
 80106e0:	3fdbffff 	.word	0x3fdbffff
 80106e4:	3ff00000 	.word	0x3ff00000
 80106e8:	3ff2ffff 	.word	0x3ff2ffff
 80106ec:	40038000 	.word	0x40038000
 80106f0:	3ff80000 	.word	0x3ff80000
 80106f4:	bff00000 	.word	0xbff00000
 80106f8:	08018690 	.word	0x08018690
 80106fc:	08018670 	.word	0x08018670

08010700 <fabs>:
 8010700:	ec51 0b10 	vmov	r0, r1, d0
 8010704:	ee10 2a10 	vmov	r2, s0
 8010708:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801070c:	ec43 2b10 	vmov	d0, r2, r3
 8010710:	4770      	bx	lr
	...

08010714 <_init>:
 8010714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010716:	bf00      	nop
 8010718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801071a:	bc08      	pop	{r3}
 801071c:	469e      	mov	lr, r3
 801071e:	4770      	bx	lr

08010720 <_fini>:
 8010720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010722:	bf00      	nop
 8010724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010726:	bc08      	pop	{r3}
 8010728:	469e      	mov	lr, r3
 801072a:	4770      	bx	lr
