
F411_Bolnno_Datalogger-V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007f70  08010748  08010748  00020748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080186b8  080186b8  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080186b8  080186b8  000286b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080186c0  080186c0  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080186c0  080186c0  000286c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080186c4  080186c4  000286c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080186c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027a8  200001f0  080188b8  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002998  080188b8  00032998  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e7fa  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c5b  00000000  00000000  0004ea5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f0  00000000  00000000  000536b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013e7  00000000  00000000  000550a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001edde  00000000  00000000  0005648f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027b83  00000000  00000000  0007526d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6899  00000000  00000000  0009cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d68  00000000  00000000  0014368c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b4  00000000  00000000  0014b3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801072c 	.word	0x0801072c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0801072c 	.word	0x0801072c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_ADC1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000f7a:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <MX_ADC1_Init+0x6c>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000f80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <MX_ADC1_Init+0x70>)
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_ADC1_Init+0x68>)
 8000fc8:	f002 fd74 	bl	8003ab4 <HAL_ADC_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8000fd2:	f002 f98b 	bl	80032ec <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000240c 	.word	0x2000240c
 8000fe0:	40012000 	.word	0x40012000
 8000fe4:	0f000001 	.word	0x0f000001

08000fe8 <Acc_Init>:
TiltState tilt = IDLE;




bool Acc_Init(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af04      	add	r7, sp, #16
    // Configure accelerometer with control register
			uint8_t whoAmI = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
			I2C_WriteByte(CTRL1_REG_ADDR, 0x57);
 8000ff2:	2157      	movs	r1, #87	; 0x57
 8000ff4:	2020      	movs	r0, #32
 8000ff6:	f000 fc19 	bl	800182c <I2C_WriteByte>
			HAL_Delay(100);
 8000ffa:	2064      	movs	r0, #100	; 0x64
 8000ffc:	f002 fd16 	bl	8003a2c <HAL_Delay>
			HAL_I2C_Mem_Read(&hi2c1, 0x33, 0x0F, 1, &whoAmI, 1, HAL_MAX_DELAY);
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	220f      	movs	r2, #15
 8001012:	2133      	movs	r1, #51	; 0x33
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <Acc_Init+0x54>)
 8001016:	f003 fe45 	bl	8004ca4 <HAL_I2C_Mem_Read>
			Accelerometer_Test_Flag = (whoAmI == 0x33) ?   true :   false;
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b33      	cmp	r3, #51	; 0x33
 800101e:	bf0c      	ite	eq
 8001020:	2301      	moveq	r3, #1
 8001022:	2300      	movne	r3, #0
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <Acc_Init+0x58>)
 8001028:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f002 fcfe 	bl	8003a2c <HAL_Delay>
//			if(!Accelerometer_Test_Flag)NVIC_SystemReset();
			return Accelerometer_Test_Flag;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <Acc_Init+0x58>)
 8001032:	781b      	ldrb	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20002454 	.word	0x20002454
 8001040:	2000020c 	.word	0x2000020c
 8001044:	00000000 	.word	0x00000000

08001048 <Get_Axis>:


Acclerometer_Data Get_Axis()
{
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	ed2d 8b02 	vpush	{d8}
 800104e:	b09c      	sub	sp, #112	; 0x70
 8001050:	af04      	add	r7, sp, #16



	// Angle variables

			int32_t x=0, y=0, z=0;
 8001052:	2300      	movs	r3, #0
 8001054:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001056:	2300      	movs	r3, #0
 8001058:	65bb      	str	r3, [r7, #88]	; 0x58
 800105a:	2300      	movs	r3, #0
 800105c:	657b      	str	r3, [r7, #84]	; 0x54
		    uint8_t num = 255;
 800105e:	23ff      	movs	r3, #255	; 0xff
 8001060:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		    uint8_t rawData[6];
		    int16_t accelX=0, accelY=0, accelZ=0;
 8001064:	2300      	movs	r3, #0
 8001066:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800106a:	2300      	movs	r3, #0
 800106c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001070:	2300      	movs	r3, #0
 8001072:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e




		    for (uint8_t i = 0; i < num; i++) {
 8001076:	2300      	movs	r3, #0
 8001078:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800107c:	e03f      	b.n	80010fe <Get_Axis+0xb6>
		    	HAL_I2C_Mem_Read(&hi2c1, Device_Address << 1, 0xA8 | 0x80, 1, rawData, 6, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2306      	movs	r3, #6
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2301      	movs	r3, #1
 8001090:	22a8      	movs	r2, #168	; 0xa8
 8001092:	2132      	movs	r1, #50	; 0x32
 8001094:	48cc      	ldr	r0, [pc, #816]	; (80013c8 <Get_Axis+0x380>)
 8001096:	f003 fe05 	bl	8004ca4 <HAL_I2C_Mem_Read>
		        accelX = (int16_t)((rawData[1] << 8) | rawData[0]);
 800109a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		        accelY = (int16_t)((rawData[3] << 8) | rawData[2]);
 80010ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		        accelZ = (int16_t)((rawData[5] << 8) | rawData[4]);
 80010c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		        x += accelX;
 80010d6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80010da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010dc:	4413      	add	r3, r2
 80010de:	65fb      	str	r3, [r7, #92]	; 0x5c
		        y += accelY;
 80010e0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80010e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010e6:	4413      	add	r3, r2
 80010e8:	65bb      	str	r3, [r7, #88]	; 0x58
		        z += accelZ;
 80010ea:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80010ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010f0:	4413      	add	r3, r2
 80010f2:	657b      	str	r3, [r7, #84]	; 0x54
		    for (uint8_t i = 0; i < num; i++) {
 80010f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010f8:	3301      	adds	r3, #1
 80010fa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80010fe:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001102:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001106:	429a      	cmp	r2, r3
 8001108:	d3b9      	bcc.n	800107e <Get_Axis+0x36>
		    }

		    accelX = accelX / num;
 800110a:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 800110e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001112:	fb92 f3f3 	sdiv	r3, r2, r3
 8001116:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		    accelY = accelY / num;
 800111a:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 800111e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001122:	fb92 f3f3 	sdiv	r3, r2, r3
 8001126:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		    accelZ = accelZ / num;
 800112a:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800112e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001132:	fb92 f3f3 	sdiv	r3, r2, r3
 8001136:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		    float acceleration_x = (float)accelX / 32768.0 * 2.0;
 800113a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001146:	ee17 0a90 	vmov	r0, s15
 800114a:	f7ff fa15 	bl	8000578 <__aeabi_f2d>
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4b9e      	ldr	r3, [pc, #632]	; (80013cc <Get_Axis+0x384>)
 8001154:	f7ff fb92 	bl	800087c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	f7ff f8aa 	bl	80002bc <__adddf3>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff fd32 	bl	8000bd8 <__aeabi_d2f>
 8001174:	4603      	mov	r3, r0
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
		    float acceleration_y = (float)accelY / 32768.0 * 2.0;
 8001178:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001184:	ee17 0a90 	vmov	r0, s15
 8001188:	f7ff f9f6 	bl	8000578 <__aeabi_f2d>
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	4b8e      	ldr	r3, [pc, #568]	; (80013cc <Get_Axis+0x384>)
 8001192:	f7ff fb73 	bl	800087c <__aeabi_ddiv>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	f7ff f88b 	bl	80002bc <__adddf3>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fd13 	bl	8000bd8 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	647b      	str	r3, [r7, #68]	; 0x44
		    float acceleration_z = (float)accelZ / 32768.0 * 2.0;
 80011b6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c2:	ee17 0a90 	vmov	r0, s15
 80011c6:	f7ff f9d7 	bl	8000578 <__aeabi_f2d>
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b7f      	ldr	r3, [pc, #508]	; (80013cc <Get_Axis+0x384>)
 80011d0:	f7ff fb54 	bl	800087c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	f7ff f86c 	bl	80002bc <__adddf3>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fcf4 	bl	8000bd8 <__aeabi_d2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	643b      	str	r3, [r7, #64]	; 0x40

		    // Calculate angle in radians
		    float pitch_angle = atan2(acceleration_y, sqrt(acceleration_x * acceleration_x + acceleration_z * acceleration_z));
 80011f4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80011f6:	f7ff f9bf 	bl	8000578 <__aeabi_f2d>
 80011fa:	4604      	mov	r4, r0
 80011fc:	460d      	mov	r5, r1
 80011fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001202:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001206:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800120a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800120e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001212:	ee17 0a90 	vmov	r0, s15
 8001216:	f7ff f9af 	bl	8000578 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	ec43 2b10 	vmov	d0, r2, r3
 8001222:	f00e fd43 	bl	800fcac <sqrt>
 8001226:	eeb0 7a40 	vmov.f32	s14, s0
 800122a:	eef0 7a60 	vmov.f32	s15, s1
 800122e:	eeb0 1a47 	vmov.f32	s2, s14
 8001232:	eef0 1a67 	vmov.f32	s3, s15
 8001236:	ec45 4b10 	vmov	d0, r4, r5
 800123a:	f00e fcf5 	bl	800fc28 <atan2>
 800123e:	ec53 2b10 	vmov	r2, r3, d0
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f7ff fcc7 	bl	8000bd8 <__aeabi_d2f>
 800124a:	4603      	mov	r3, r0
 800124c:	63fb      	str	r3, [r7, #60]	; 0x3c
		    float roll_angle = atan2(-acceleration_x, acceleration_z);
 800124e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001252:	eef1 7a67 	vneg.f32	s15, s15
 8001256:	ee17 3a90 	vmov	r3, s15
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f98c 	bl	8000578 <__aeabi_f2d>
 8001260:	4604      	mov	r4, r0
 8001262:	460d      	mov	r5, r1
 8001264:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001266:	f7ff f987 	bl	8000578 <__aeabi_f2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	ec43 2b11 	vmov	d1, r2, r3
 8001272:	ec45 4b10 	vmov	d0, r4, r5
 8001276:	f00e fcd7 	bl	800fc28 <atan2>
 800127a:	ec53 2b10 	vmov	r2, r3, d0
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f7ff fca9 	bl	8000bd8 <__aeabi_d2f>
 8001286:	4603      	mov	r3, r0
 8001288:	63bb      	str	r3, [r7, #56]	; 0x38
		    float yaw_angle = atan2(sqrt(acceleration_x * acceleration_x + acceleration_y * acceleration_y), acceleration_z);
 800128a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800128e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001292:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001296:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800129a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129e:	ee17 0a90 	vmov	r0, s15
 80012a2:	f7ff f969 	bl	8000578 <__aeabi_f2d>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	ec43 2b10 	vmov	d0, r2, r3
 80012ae:	f00e fcfd 	bl	800fcac <sqrt>
 80012b2:	eeb0 8a40 	vmov.f32	s16, s0
 80012b6:	eef0 8a60 	vmov.f32	s17, s1
 80012ba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80012bc:	f7ff f95c 	bl	8000578 <__aeabi_f2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	ec43 2b11 	vmov	d1, r2, r3
 80012c8:	eeb0 0a48 	vmov.f32	s0, s16
 80012cc:	eef0 0a68 	vmov.f32	s1, s17
 80012d0:	f00e fcaa 	bl	800fc28 <atan2>
 80012d4:	ec53 2b10 	vmov	r2, r3, d0
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fc7c 	bl	8000bd8 <__aeabi_d2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34

		    // radians to angle formula radian/(180/pi)
		    pitch_angle_deg = (pitch_angle * (180.0 / Pi));
 80012e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012e6:	f7ff f947 	bl	8000578 <__aeabi_f2d>
 80012ea:	a335      	add	r3, pc, #212	; (adr r3, 80013c0 <Get_Axis+0x378>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff f99a 	bl	8000628 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fc6c 	bl	8000bd8 <__aeabi_d2f>
 8001300:	4603      	mov	r3, r0
 8001302:	4a33      	ldr	r2, [pc, #204]	; (80013d0 <Get_Axis+0x388>)
 8001304:	6013      	str	r3, [r2, #0]
		    roll_angle_deg = (roll_angle * (180.0 / Pi)); // PI VALUE ALSO MACRO
 8001306:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001308:	f7ff f936 	bl	8000578 <__aeabi_f2d>
 800130c:	a32c      	add	r3, pc, #176	; (adr r3, 80013c0 <Get_Axis+0x378>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff f989 	bl	8000628 <__aeabi_dmul>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc5b 	bl	8000bd8 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	4a2b      	ldr	r2, [pc, #172]	; (80013d4 <Get_Axis+0x38c>)
 8001326:	6013      	str	r3, [r2, #0]
		    yaw_angle_deg = (yaw_angle * (180.0 / Pi));
 8001328:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800132a:	f7ff f925 	bl	8000578 <__aeabi_f2d>
 800132e:	a324      	add	r3, pc, #144	; (adr r3, 80013c0 <Get_Axis+0x378>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff f978 	bl	8000628 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fc4a 	bl	8000bd8 <__aeabi_d2f>
 8001344:	4603      	mov	r3, r0
 8001346:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <Get_Axis+0x390>)
 8001348:	6013      	str	r3, [r2, #0]
		    pitch_angle_deg= (float)((int)(pitch_angle_deg * 100)) / 100;
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Get_Axis+0x388>)
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80013dc <Get_Axis+0x394>
 8001354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001360:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80013dc <Get_Axis+0x394>
 8001364:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <Get_Axis+0x388>)
 800136a:	edc3 7a00 	vstr	s15, [r3]


		    Acclerometer_Data AXIS = {pitch_angle_deg , roll_angle_deg, yaw_angle_deg };
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <Get_Axis+0x388>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <Get_Axis+0x38c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <Get_Axis+0x390>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	61fb      	str	r3, [r7, #28]
		    if(!Sys_Start)UART_Printf("X-AXIS = %d , Y-AXIS = %d ,Z-AXIS = %d  \n",(int)pitch_angle_deg, (int)roll_angle_deg, (int)yaw_angle_deg);
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <Get_Axis+0x398>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f083 0301 	eor.w	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d02c      	beq.n	80013e8 <Get_Axis+0x3a0>
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <Get_Axis+0x388>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <Get_Axis+0x38c>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <Get_Axis+0x390>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ac:	ee17 3a90 	vmov	r3, s15
 80013b0:	ee16 2a90 	vmov	r2, s13
 80013b4:	ee17 1a10 	vmov	r1, s14
 80013b8:	480a      	ldr	r0, [pc, #40]	; (80013e4 <Get_Axis+0x39c>)
 80013ba:	f001 fd09 	bl	8002dd0 <UART_Printf>
 80013be:	e013      	b.n	80013e8 <Get_Axis+0x3a0>
 80013c0:	597d6ec3 	.word	0x597d6ec3
 80013c4:	404ca73e 	.word	0x404ca73e
 80013c8:	20002454 	.word	0x20002454
 80013cc:	40e00000 	.word	0x40e00000
 80013d0:	20000210 	.word	0x20000210
 80013d4:	20000214 	.word	0x20000214
 80013d8:	20000218 	.word	0x20000218
 80013dc:	42c80000 	.word	0x42c80000
 80013e0:	20002604 	.word	0x20002604
 80013e4:	08010748 	.word	0x08010748
		    return AXIS;
 80013e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ec:	f107 0214 	add.w	r2, r7, #20
 80013f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80013f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80013f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013fc:	ee06 1a90 	vmov	s13, r1
 8001400:	ee07 2a10 	vmov	s14, r2
 8001404:	ee07 3a90 	vmov	s15, r3
}
 8001408:	eeb0 0a66 	vmov.f32	s0, s13
 800140c:	eef0 0a47 	vmov.f32	s1, s14
 8001410:	eeb0 1a67 	vmov.f32	s2, s15
 8001414:	3760      	adds	r7, #96	; 0x60
 8001416:	46bd      	mov	sp, r7
 8001418:	ecbd 8b02 	vpop	{d8}
 800141c:	bdb0      	pop	{r4, r5, r7, pc}
 800141e:	bf00      	nop

08001420 <System_Start>:


uint8_t System_Start()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0

	Acclerometer_Data Angles = Get_Axis();
 8001426:	f7ff fe0f 	bl	8001048 <Get_Axis>
 800142a:	eef0 6a40 	vmov.f32	s13, s0
 800142e:	eeb0 7a60 	vmov.f32	s14, s1
 8001432:	eef0 7a41 	vmov.f32	s15, s2
 8001436:	edc7 6a01 	vstr	s13, [r7, #4]
 800143a:	ed87 7a02 	vstr	s14, [r7, #8]
 800143e:	edc7 7a03 	vstr	s15, [r7, #12]


	switch (tilt) {
 8001442:	4b5e      	ldr	r3, [pc, #376]	; (80015bc <System_Start+0x19c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b02      	cmp	r3, #2
 8001448:	f000 8086 	beq.w	8001558 <System_Start+0x138>
 800144c:	2b02      	cmp	r3, #2
 800144e:	f300 80ae 	bgt.w	80015ae <System_Start+0x18e>
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <System_Start+0x3c>
 8001456:	2b01      	cmp	r3, #1
 8001458:	d03f      	beq.n	80014da <System_Start+0xba>
 800145a:	e0a8      	b.n	80015ae <System_Start+0x18e>
		        case IDLE:
		            if ((Angles.x >= P_X_Min && Angles.x < P_X_Max)  ||  // NEED A MACRO FOR THE VALUES 70
 800145c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001460:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80015c0 <System_Start+0x1a0>
 8001464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	db08      	blt.n	8001480 <System_Start+0x60>
 800146e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001472:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80015c4 <System_Start+0x1a4>
 8001476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	d425      	bmi.n	80014cc <System_Start+0xac>
					   (Angles.y >= P_Y_Min && Angles.x < P_Y_Max)  ||
 8001480:	edd7 7a02 	vldr	s15, [r7, #8]
		            if ((Angles.x >= P_X_Min && Angles.x < P_X_Max)  ||  // NEED A MACRO FOR THE VALUES 70
 8001484:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80015c0 <System_Start+0x1a0>
 8001488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001490:	db08      	blt.n	80014a4 <System_Start+0x84>
					   (Angles.y >= P_Y_Min && Angles.x < P_Y_Max)  ||
 8001492:	edd7 7a01 	vldr	s15, [r7, #4]
 8001496:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80015c4 <System_Start+0x1a4>
 800149a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a2:	d413      	bmi.n	80014cc <System_Start+0xac>
					   (Angles.z >= P_Z_Min && Angles.x < P_Z_Max))
 80014a4:	edd7 7a03 	vldr	s15, [r7, #12]
					   (Angles.y >= P_Y_Min && Angles.x < P_Y_Max)  ||
 80014a8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80015c0 <System_Start+0x1a0>
 80014ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	da00      	bge.n	80014b8 <System_Start+0x98>
		            {
		                tilt = POSITIVE_THRESHOLD;
		                UART_Printf("Axis reach Positive Threshold \n");
		            }
		            break;
 80014b6:	e07a      	b.n	80015ae <System_Start+0x18e>
					   (Angles.z >= P_Z_Min && Angles.x < P_Z_Max))
 80014b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014bc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80015c4 <System_Start+0x1a4>
 80014c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	d400      	bmi.n	80014cc <System_Start+0xac>
		            break;
 80014ca:	e070      	b.n	80015ae <System_Start+0x18e>
		                tilt = POSITIVE_THRESHOLD;
 80014cc:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <System_Start+0x19c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
		                UART_Printf("Axis reach Positive Threshold \n");
 80014d2:	483d      	ldr	r0, [pc, #244]	; (80015c8 <System_Start+0x1a8>)
 80014d4:	f001 fc7c 	bl	8002dd0 <UART_Printf>
		            break;
 80014d8:	e069      	b.n	80015ae <System_Start+0x18e>

		        case POSITIVE_THRESHOLD:
		            if ((Angles.x >= N_X_Max && Angles.x < N_X_Min)||
 80014da:	edd7 7a01 	vldr	s15, [r7, #4]
 80014de:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80015cc <System_Start+0x1ac>
 80014e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ea:	db08      	blt.n	80014fe <System_Start+0xde>
 80014ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80015d0 <System_Start+0x1b0>
 80014f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	d425      	bmi.n	800154a <System_Start+0x12a>
		                (Angles.y >= N_Y_Max && Angles.x < N_Y_Min) ||
 80014fe:	edd7 7a02 	vldr	s15, [r7, #8]
		            if ((Angles.x >= N_X_Max && Angles.x < N_X_Min)||
 8001502:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80015cc <System_Start+0x1ac>
 8001506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150e:	db08      	blt.n	8001522 <System_Start+0x102>
		                (Angles.y >= N_Y_Max && Angles.x < N_Y_Min) ||
 8001510:	edd7 7a01 	vldr	s15, [r7, #4]
 8001514:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80015d0 <System_Start+0x1b0>
 8001518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001520:	d413      	bmi.n	800154a <System_Start+0x12a>
					    (Angles.z >= N_Z_Max && Angles.x < N_Z_Min))
 8001522:	edd7 7a03 	vldr	s15, [r7, #12]
		                (Angles.y >= N_Y_Max && Angles.x < N_Y_Min) ||
 8001526:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80015cc <System_Start+0x1ac>
 800152a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	da00      	bge.n	8001536 <System_Start+0x116>

					{
		                tilt = NEGATIVE_THRESHOLD;
		                UART_Printf("Axis reach Negative Threshold \n");
		            }
		            break;
 8001534:	e03b      	b.n	80015ae <System_Start+0x18e>
					    (Angles.z >= N_Z_Max && Angles.x < N_Z_Min))
 8001536:	edd7 7a01 	vldr	s15, [r7, #4]
 800153a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80015d0 <System_Start+0x1b0>
 800153e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	d400      	bmi.n	800154a <System_Start+0x12a>
		            break;
 8001548:	e031      	b.n	80015ae <System_Start+0x18e>
		                tilt = NEGATIVE_THRESHOLD;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <System_Start+0x19c>)
 800154c:	2202      	movs	r2, #2
 800154e:	701a      	strb	r2, [r3, #0]
		                UART_Printf("Axis reach Negative Threshold \n");
 8001550:	4820      	ldr	r0, [pc, #128]	; (80015d4 <System_Start+0x1b4>)
 8001552:	f001 fc3d 	bl	8002dd0 <UART_Printf>
		            break;
 8001556:	e02a      	b.n	80015ae <System_Start+0x18e>

		        case NEGATIVE_THRESHOLD:
//		            if (System_On_Flag == true) {
		        		UART_Printf("System Starts \n");
 8001558:	481f      	ldr	r0, [pc, #124]	; (80015d8 <System_Start+0x1b8>)
 800155a:	f001 fc39 	bl	8002dd0 <UART_Printf>
		                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001564:	481d      	ldr	r0, [pc, #116]	; (80015dc <System_Start+0x1bc>)
 8001566:	f003 f945 	bl	80047f4 <HAL_GPIO_WritePin>
		                HAL_Delay(500);
 800156a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800156e:	f002 fa5d 	bl	8003a2c <HAL_Delay>
		                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001578:	4818      	ldr	r0, [pc, #96]	; (80015dc <System_Start+0x1bc>)
 800157a:	f003 f93b 	bl	80047f4 <HAL_GPIO_WritePin>
		                HAL_Delay(500);
 800157e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001582:	f002 fa53 	bl	8003a2c <HAL_Delay>
		                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158c:	4813      	ldr	r0, [pc, #76]	; (80015dc <System_Start+0x1bc>)
 800158e:	f003 f931 	bl	80047f4 <HAL_GPIO_WritePin>
		                HAL_Delay(3000);
 8001592:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001596:	f002 fa49 	bl	8003a2c <HAL_Delay>
		                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a0:	480e      	ldr	r0, [pc, #56]	; (80015dc <System_Start+0x1bc>)
 80015a2:	f003 f927 	bl	80047f4 <HAL_GPIO_WritePin>
		                Sys_Start = true;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <System_Start+0x1c0>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
//		            }
		            break;
 80015ac:	bf00      	nop
		    }

return Sys_Start;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <System_Start+0x1c0>)
 80015b0:	781b      	ldrb	r3, [r3, #0]

}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000021c 	.word	0x2000021c
 80015c0:	42340000 	.word	0x42340000
 80015c4:	42a00000 	.word	0x42a00000
 80015c8:	08010774 	.word	0x08010774
 80015cc:	c2a00000 	.word	0xc2a00000
 80015d0:	c2340000 	.word	0xc2340000
 80015d4:	08010794 	.word	0x08010794
 80015d8:	080107b4 	.word	0x080107b4
 80015dc:	40020800 	.word	0x40020800
 80015e0:	20002604 	.word	0x20002604

080015e4 <Store_Data>:

//extern struct CollectData;
extern float Sleep_Thre;

DataSet Store_Data()
{
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b098      	sub	sp, #96	; 0x60
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]


	int Tot_Sensor = 4;
 80015ec:	2304      	movs	r3, #4
 80015ee:	65bb      	str	r3, [r7, #88]	; 0x58
	int* NTC_Temp = NTC_Array(Tot_Sensor);
 80015f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80015f2:	f000 f9a9 	bl	8001948 <NTC_Array>
 80015f6:	6578      	str	r0, [r7, #84]	; 0x54

	for (int i = 0; i < Tot_Sensor; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015fc:	e002      	b.n	8001604 <Store_Data+0x20>
 80015fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001600:	3301      	adds	r3, #1
 8001602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001604:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001608:	429a      	cmp	r2, r3
 800160a:	dbf8      	blt.n	80015fe <Store_Data+0x1a>
	}




    Acclerometer_Data Angles = Get_Axis();
 800160c:	f7ff fd1c 	bl	8001048 <Get_Axis>
 8001610:	eef0 6a40 	vmov.f32	s13, s0
 8001614:	eeb0 7a60 	vmov.f32	s14, s1
 8001618:	eef0 7a41 	vmov.f32	s15, s2
 800161c:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 8001620:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8001624:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	float U_amp =  0.0;
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	653b      	str	r3, [r7, #80]	; 0x50
	U_amp = Ultrasonic_Amplitude(U_amp);
 800162e:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8001632:	f001 fbfd 	bl	8002e30 <Ultrasonic_Amplitude>
 8001636:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	float W_res = 0.0;
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	64fb      	str	r3, [r7, #76]	; 0x4c
	W_res = Water_Res(W_res);
 8001640:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001644:	f001 fc74 	bl	8002f30 <Water_Res>
 8001648:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
	float Pres = 0.0;
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	64bb      	str	r3, [r7, #72]	; 0x48
	Pres = PresureSensorData(Pres);
 8001652:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001656:	f000 fc8f 	bl	8001f78 <PresureSensorData>
 800165a:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48



	DataSet data = { Timer_Count, Angles.x, Angles.y, Angles.z, NTC_Temp[0],NTC_Temp[1],NTC_Temp[2], NTC_Temp[3],U_amp,W_res,Pres,Sleep_Count};
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <Store_Data+0x104>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167c:	edc7 7a07 	vstr	s15, [r7, #28]
 8001680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001682:	3304      	adds	r3, #4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168e:	edc7 7a08 	vstr	s15, [r7, #32]
 8001692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001694:	3308      	adds	r3, #8
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	ee07 3a90 	vmov	s15, r3
 800169c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80016a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a6:	330c      	adds	r3, #12
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80016b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
 80016be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016c0:	637b      	str	r3, [r7, #52]	; 0x34
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <Store_Data+0x108>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	63bb      	str	r3, [r7, #56]	; 0x38

	return data;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	461d      	mov	r5, r3
 80016cc:	f107 040c 	add.w	r4, r7, #12
 80016d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

}
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	3760      	adds	r7, #96	; 0x60
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bdb0      	pop	{r4, r5, r7, pc}
 80016e8:	20000224 	.word	0x20000224
 80016ec:	20000220 	.word	0x20000220

080016f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <MX_GPIO_Init+0xd4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a2d      	ldr	r2, [pc, #180]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <MX_GPIO_Init+0xd4>)
 800172c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <MX_GPIO_Init+0xd4>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_GPIO_Init+0xd4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Vibrator_GPIO_Port, Vibrator_Pin, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177c:	4812      	ldr	r0, [pc, #72]	; (80017c8 <MX_GPIO_Init+0xd8>)
 800177e:	f003 f839 	bl	80047f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Vibrator_Pin */
  GPIO_InitStruct.Pin = Vibrator_Pin;
 8001782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Vibrator_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	480b      	ldr	r0, [pc, #44]	; (80017c8 <MX_GPIO_Init+0xd8>)
 800179c:	f002 fe8e 	bl	80044bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Det_Switch_Pin */
  GPIO_InitStruct.Pin = Det_Switch_Pin;
 80017a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Det_Switch_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_GPIO_Init+0xdc>)
 80017b6:	f002 fe81 	bl	80044bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020400 	.word	0x40020400

080017d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_I2C1_Init+0x50>)
 80017d6:	4a13      	ldr	r2, [pc, #76]	; (8001824 <MX_I2C1_Init+0x54>)
 80017d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_I2C1_Init+0x50>)
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <MX_I2C1_Init+0x58>)
 80017de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_I2C1_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_I2C1_Init+0x50>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_I2C1_Init+0x50>)
 80017ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <MX_I2C1_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_I2C1_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <MX_I2C1_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_I2C1_Init+0x50>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <MX_I2C1_Init+0x50>)
 800180e:	f003 f80b 	bl	8004828 <HAL_I2C_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001818:	f001 fd68 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20002454 	.word	0x20002454
 8001824:	40005400 	.word	0x40005400
 8001828:	000186a0 	.word	0x000186a0

0800182c <I2C_WriteByte>:


 void I2C_WriteByte(uint8_t reg, uint8_t data) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af04      	add	r7, sp, #16
 8001832:	4603      	mov	r3, r0
 8001834:	460a      	mov	r2, r1
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	4613      	mov	r3, r2
 800183a:	71bb      	strb	r3, [r7, #6]
     HAL_I2C_Mem_Write(&hi2c1, Device_Address << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	b29a      	uxth	r2, r3
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	2301      	movs	r3, #1
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	1dbb      	adds	r3, r7, #6
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2301      	movs	r3, #1
 8001850:	2132      	movs	r1, #50	; 0x32
 8001852:	4803      	ldr	r0, [pc, #12]	; (8001860 <I2C_WriteByte+0x34>)
 8001854:	f003 f92c 	bl	8004ab0 <HAL_I2C_Mem_Write>
 }
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20002454 	.word	0x20002454

08001864 <HAL_TIM_PeriodElapsedCallback>:
 *        This function handles reading ADC values, logging data, and managing system sleep mode.
 * @param htim Timer handler pointer
 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM3 && !Sleep_flag) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d115      	bne.n	80018a2 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	f083 0301 	eor.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00e      	beq.n	80018a2 <HAL_TIM_PeriodElapsedCallback+0x3e>

			DATA_LOG();
 8001884:	f000 ff92 	bl	80027ac <DATA_LOG>
			Timer_Count+=0.5;
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x68>)
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001892:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001898:	edc3 7a00 	vstr	s15, [r3]
			Sleep_mode();
 800189c:	f000 f81a 	bl	80018d4 <Sleep_mode>
		if (htim->Instance == TIM4) {
			Sleep_flag = false;
//            UART_Printf("Hello \n");
		}
	}
}
 80018a0:	e00b      	b.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x56>
	 else if (Sleep_flag) {
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x56>
		if (htim->Instance == TIM4) {
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d102      	bne.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x56>
			Sleep_flag = false;
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40000400 	.word	0x40000400
 80018c8:	2000021d 	.word	0x2000021d
 80018cc:	20000224 	.word	0x20000224
 80018d0:	40000800 	.word	0x40000800

080018d4 <Sleep_mode>:

//extern DataSet Store_Data();

void Sleep_mode() {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0

	int Tot_Sensor = 4;
 80018da:	2304      	movs	r3, #4
 80018dc:	60bb      	str	r3, [r7, #8]
	int* NTC_Temp = NTC_Array(Tot_Sensor);
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f000 f832 	bl	8001948 <NTC_Array>
 80018e4:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < Tot_Sensor; i++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	e002      	b.n	80018f2 <Sleep_mode+0x1e>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3301      	adds	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbf8      	blt.n	80018ec <Sleep_mode+0x18>
	{
			NTC_Temp[i];
	}

	if (NTC_Temp[0] >= Sleep_temp) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b27      	cmp	r3, #39	; 0x27
 8001900:	dd17      	ble.n	8001932 <Sleep_mode+0x5e>
		Sleep_Count += 1.0;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <Sleep_mode+0x68>)
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800190c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <Sleep_mode+0x68>)
 8001912:	edc3 7a00 	vstr	s15, [r3]
		Sleep_flag = true;
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <Sleep_mode+0x6c>)
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
//		HAL_TIM_Base_Start_IT(&htim4);
//		HAL_TIM_Base_Stop_IT(&htim3);
		UART_Printf("********* Over Temp Sys going to Sleep Mode************\n");
 800191c:	4809      	ldr	r0, [pc, #36]	; (8001944 <Sleep_mode+0x70>)
 800191e:	f001 fa57 	bl	8002dd0 <UART_Printf>


//		UART_Printf("********* Sleep Count %d************\n",Sleep_Count);

		HAL_SuspendTick();
 8001922:	f002 f8a7 	bl	8003a74 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001926:	2101      	movs	r1, #1
 8001928:	2000      	movs	r0, #0
 800192a:	f003 ffa1 	bl	8005870 <HAL_PWR_EnterSLEEPMode>
		HAL_ResumeTick();
 800192e:	f002 f8b1 	bl	8003a94 <HAL_ResumeTick>
//		HAL_TIM_Base_Start_IT(&htim4);
//		HAL_TIM_Base_Start_IT(&htim4);
	}

}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000220 	.word	0x20000220
 8001940:	2000021d 	.word	0x2000021d
 8001944:	080107c4 	.word	0x080107c4

08001948 <NTC_Array>:
#define C 0.0000000876741



int* NTC_Array(int Tot_Sensor)
{
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b098      	sub	sp, #96	; 0x60
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    // Allocate memory for the array
    int* NTC_Data = (int*)malloc(Tot_Sensor * sizeof(int));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4618      	mov	r0, r3
 8001956:	f00b faa9 	bl	800ceac <malloc>
 800195a:	4603      	mov	r3, r0
 800195c:	65bb      	str	r3, [r7, #88]	; 0x58

    // Check if memory allocation was successful
    if (NTC_Data == NULL) {
 800195e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <NTC_Array+0x28>
    	UART_Printf("Memory allocation failed!\n");
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <NTC_Array+0x30>)
 8001966:	f001 fa33 	bl	8002dd0 <UART_Printf>
        exit(1); // Exit the program if allocation fails
 800196a:	2001      	movs	r0, #1
 800196c:	f00b fa8c 	bl	800ce88 <exit>
    }

    // Initialize the NTC_Data with example values
    for (int i = 0; i < Tot_Sensor; i++) {
 8001970:	2300      	movs	r3, #0
 8001972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001974:	e2e1      	b.n	8001f3a <NTC_Array+0x5f2>
 8001976:	bf00      	nop
 8001978:	08010800 	.word	0x08010800


    	if(i==0)
 800197c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800197e:	2b00      	cmp	r3, #0
 8001980:	f040 80ad 	bne.w	8001ade <NTC_Array+0x196>
    	{
    		 ADC_ChannelConfTypeDef sConfig = {0};
 8001984:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
    		 sConfig.Channel = ADC_CHANNEL_1;
 8001992:	2301      	movs	r3, #1
 8001994:	63bb      	str	r3, [r7, #56]	; 0x38
    		 sConfig.Rank = 1;
 8001996:	2301      	movs	r3, #1
 8001998:	63fb      	str	r3, [r7, #60]	; 0x3c
    		 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800199a:	2300      	movs	r3, #0
 800199c:	643b      	str	r3, [r7, #64]	; 0x40
    			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800199e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019a2:	4619      	mov	r1, r3
 80019a4:	48cc      	ldr	r0, [pc, #816]	; (8001cd8 <NTC_Array+0x390>)
 80019a6:	f002 fa49 	bl	8003e3c <HAL_ADC_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <NTC_Array+0x6c>
    			  {
    			      Error_Handler();
 80019b0:	f001 fc9c 	bl	80032ec <Error_Handler>
    			  }
    			  HAL_ADC_Start(&hadc1);
 80019b4:	48c8      	ldr	r0, [pc, #800]	; (8001cd8 <NTC_Array+0x390>)
 80019b6:	f002 f8c1 	bl	8003b3c <HAL_ADC_Start>
    			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80019ba:	f04f 31ff 	mov.w	r1, #4294967295
 80019be:	48c6      	ldr	r0, [pc, #792]	; (8001cd8 <NTC_Array+0x390>)
 80019c0:	f002 f9a3 	bl	8003d0a <HAL_ADC_PollForConversion>
    			  NTC_ADC_Buffer [i]= HAL_ADC_GetValue(&hadc1);
 80019c4:	48c4      	ldr	r0, [pc, #784]	; (8001cd8 <NTC_Array+0x390>)
 80019c6:	f002 fa2b 	bl	8003e20 <HAL_ADC_GetValue>
 80019ca:	ee07 0a90 	vmov	s15, r0
 80019ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d2:	4ac2      	ldr	r2, [pc, #776]	; (8001cdc <NTC_Array+0x394>)
 80019d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	edc3 7a00 	vstr	s15, [r3]
    			  HAL_ADC_Stop(&hadc1);
 80019de:	48be      	ldr	r0, [pc, #760]	; (8001cd8 <NTC_Array+0x390>)
 80019e0:	f002 f960 	bl	8003ca4 <HAL_ADC_Stop>
//
//    			  float logR = log(Res / Divider_Resistor);
//
//    			  NTC_Data[i] = 1.0 / ((logR / T1_Bvalue) + (1.0 / T0)) - 275.15;

    			  float resistance = Divider_Resistor * (4095.0 / NTC_ADC_Buffer[i] - 1);
 80019e4:	4bbe      	ldr	r3, [pc, #760]	; (8001ce0 <NTC_Array+0x398>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdc5 	bl	8000578 <__aeabi_f2d>
 80019ee:	4604      	mov	r4, r0
 80019f0:	460d      	mov	r5, r1
 80019f2:	4aba      	ldr	r2, [pc, #744]	; (8001cdc <NTC_Array+0x394>)
 80019f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fdbb 	bl	8000578 <__aeabi_f2d>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	a1b0      	add	r1, pc, #704	; (adr r1, 8001cc8 <NTC_Array+0x380>)
 8001a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a0c:	f7fe ff36 	bl	800087c <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	4bb1      	ldr	r3, [pc, #708]	; (8001ce4 <NTC_Array+0x39c>)
 8001a1e:	f7fe fc4b 	bl	80002b8 <__aeabi_dsub>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4620      	mov	r0, r4
 8001a28:	4629      	mov	r1, r5
 8001a2a:	f7fe fdfd 	bl	8000628 <__aeabi_dmul>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4610      	mov	r0, r2
 8001a34:	4619      	mov	r1, r3
 8001a36:	f7ff f8cf 	bl	8000bd8 <__aeabi_d2f>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	657b      	str	r3, [r7, #84]	; 0x54

    			  NTC_Data[i] = 1.0 / ((log(resistance / Divider_Resistor)) / T1_Bvalue + 1.0 / T0) - 273.15;
 8001a3e:	4ba8      	ldr	r3, [pc, #672]	; (8001ce0 <NTC_Array+0x398>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001a48:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a4c:	ee16 0a90 	vmov	r0, s13
 8001a50:	f7fe fd92 	bl	8000578 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	ec43 2b10 	vmov	d0, r2, r3
 8001a5c:	f00e f8e8 	bl	800fc30 <log>
 8001a60:	ec55 4b10 	vmov	r4, r5, d0
 8001a64:	4ba0      	ldr	r3, [pc, #640]	; (8001ce8 <NTC_Array+0x3a0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd85 	bl	8000578 <__aeabi_f2d>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4620      	mov	r0, r4
 8001a74:	4629      	mov	r1, r5
 8001a76:	f7fe ff01 	bl	800087c <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4614      	mov	r4, r2
 8001a80:	461d      	mov	r5, r3
 8001a82:	4b9a      	ldr	r3, [pc, #616]	; (8001cec <NTC_Array+0x3a4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd76 	bl	8000578 <__aeabi_f2d>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	f04f 0000 	mov.w	r0, #0
 8001a94:	4993      	ldr	r1, [pc, #588]	; (8001ce4 <NTC_Array+0x39c>)
 8001a96:	f7fe fef1 	bl	800087c <__aeabi_ddiv>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	f7fe fc0b 	bl	80002bc <__adddf3>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	f04f 0000 	mov.w	r0, #0
 8001aae:	498d      	ldr	r1, [pc, #564]	; (8001ce4 <NTC_Array+0x39c>)
 8001ab0:	f7fe fee4 	bl	800087c <__aeabi_ddiv>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	a384      	add	r3, pc, #528	; (adr r3, 8001cd0 <NTC_Array+0x388>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fbf9 	bl	80002b8 <__aeabi_dsub>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ad4:	18d4      	adds	r4, r2, r3
 8001ad6:	f7ff f857 	bl	8000b88 <__aeabi_d2iz>
 8001ada:	4603      	mov	r3, r0
 8001adc:	6023      	str	r3, [r4, #0]

    			  /*************************NTC CALCULATION*********************************/

    	}

    	if(i==1)
 8001ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	f040 80ad 	bne.w	8001c40 <NTC_Array+0x2f8>
    	{
    		 ADC_ChannelConfTypeDef sConfig = {0};
 8001ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
    		    		 sConfig.Channel = ADC_CHANNEL_2;
 8001af4:	2302      	movs	r3, #2
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
    		    		 sConfig.Rank = 1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    		    		 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001afc:	2300      	movs	r3, #0
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
    		    			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b04:	4619      	mov	r1, r3
 8001b06:	4874      	ldr	r0, [pc, #464]	; (8001cd8 <NTC_Array+0x390>)
 8001b08:	f002 f998 	bl	8003e3c <HAL_ADC_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <NTC_Array+0x1ce>
    		    			  {
    		    			      Error_Handler();
 8001b12:	f001 fbeb 	bl	80032ec <Error_Handler>
    		    			  }
    		    			  HAL_ADC_Start(&hadc1);
 8001b16:	4870      	ldr	r0, [pc, #448]	; (8001cd8 <NTC_Array+0x390>)
 8001b18:	f002 f810 	bl	8003b3c <HAL_ADC_Start>
    		    			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	486d      	ldr	r0, [pc, #436]	; (8001cd8 <NTC_Array+0x390>)
 8001b22:	f002 f8f2 	bl	8003d0a <HAL_ADC_PollForConversion>
    		    			  NTC_ADC_Buffer[i] = HAL_ADC_GetValue(&hadc1);
 8001b26:	486c      	ldr	r0, [pc, #432]	; (8001cd8 <NTC_Array+0x390>)
 8001b28:	f002 f97a 	bl	8003e20 <HAL_ADC_GetValue>
 8001b2c:	ee07 0a90 	vmov	s15, r0
 8001b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b34:	4a69      	ldr	r2, [pc, #420]	; (8001cdc <NTC_Array+0x394>)
 8001b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	edc3 7a00 	vstr	s15, [r3]
    		    			  HAL_ADC_Stop(&hadc1);
 8001b40:	4865      	ldr	r0, [pc, #404]	; (8001cd8 <NTC_Array+0x390>)
 8001b42:	f002 f8af 	bl	8003ca4 <HAL_ADC_Stop>
//
//    		    			  NTC_Data[i] = Kelvin - 273.15;



    		    			  float resistance = Divider_Resistor * (4095.0 / NTC_ADC_Buffer[i] - 1);
 8001b46:	4b66      	ldr	r3, [pc, #408]	; (8001ce0 <NTC_Array+0x398>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd14 	bl	8000578 <__aeabi_f2d>
 8001b50:	4604      	mov	r4, r0
 8001b52:	460d      	mov	r5, r1
 8001b54:	4a61      	ldr	r2, [pc, #388]	; (8001cdc <NTC_Array+0x394>)
 8001b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fd0a 	bl	8000578 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	a157      	add	r1, pc, #348	; (adr r1, 8001cc8 <NTC_Array+0x380>)
 8001b6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b6e:	f7fe fe85 	bl	800087c <__aeabi_ddiv>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4b59      	ldr	r3, [pc, #356]	; (8001ce4 <NTC_Array+0x39c>)
 8001b80:	f7fe fb9a 	bl	80002b8 <__aeabi_dsub>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4620      	mov	r0, r4
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	f7fe fd4c 	bl	8000628 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f81e 	bl	8000bd8 <__aeabi_d2f>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	653b      	str	r3, [r7, #80]	; 0x50

    		    			  NTC_Data[i] = 1.0 / ((log(resistance / Divider_Resistor)) / T1_Bvalue + 1.0 / T0) - 273.15;
 8001ba0:	4b4f      	ldr	r3, [pc, #316]	; (8001ce0 <NTC_Array+0x398>)
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001baa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bae:	ee16 0a90 	vmov	r0, s13
 8001bb2:	f7fe fce1 	bl	8000578 <__aeabi_f2d>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	ec43 2b10 	vmov	d0, r2, r3
 8001bbe:	f00e f837 	bl	800fc30 <log>
 8001bc2:	ec55 4b10 	vmov	r4, r5, d0
 8001bc6:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <NTC_Array+0x3a0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcd4 	bl	8000578 <__aeabi_f2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	f7fe fe50 	bl	800087c <__aeabi_ddiv>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4614      	mov	r4, r2
 8001be2:	461d      	mov	r5, r3
 8001be4:	4b41      	ldr	r3, [pc, #260]	; (8001cec <NTC_Array+0x3a4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fcc5 	bl	8000578 <__aeabi_f2d>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	f04f 0000 	mov.w	r0, #0
 8001bf6:	493b      	ldr	r1, [pc, #236]	; (8001ce4 <NTC_Array+0x39c>)
 8001bf8:	f7fe fe40 	bl	800087c <__aeabi_ddiv>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe fb5a 	bl	80002bc <__adddf3>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	f04f 0000 	mov.w	r0, #0
 8001c10:	4934      	ldr	r1, [pc, #208]	; (8001ce4 <NTC_Array+0x39c>)
 8001c12:	f7fe fe33 	bl	800087c <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	a32c      	add	r3, pc, #176	; (adr r3, 8001cd0 <NTC_Array+0x388>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fb48 	bl	80002b8 <__aeabi_dsub>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c36:	18d4      	adds	r4, r2, r3
 8001c38:	f7fe ffa6 	bl	8000b88 <__aeabi_d2iz>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	6023      	str	r3, [r4, #0]

    		    			  /*************************NTC CALCULATION*********************************/
    	}
    	if(i==2)
 8001c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	f040 80c5 	bne.w	8001dd2 <NTC_Array+0x48a>
    	{
    		 ADC_ChannelConfTypeDef sConfig = {0};
 8001c48:	f107 0318 	add.w	r3, r7, #24
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
    		    		 sConfig.Channel = ADC_CHANNEL_3;
 8001c56:	2303      	movs	r3, #3
 8001c58:	61bb      	str	r3, [r7, #24]
    		    		 sConfig.Rank = 1;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	61fb      	str	r3, [r7, #28]
    		    		 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
    		    			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c62:	f107 0318 	add.w	r3, r7, #24
 8001c66:	4619      	mov	r1, r3
 8001c68:	481b      	ldr	r0, [pc, #108]	; (8001cd8 <NTC_Array+0x390>)
 8001c6a:	f002 f8e7 	bl	8003e3c <HAL_ADC_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <NTC_Array+0x330>
    		    			  {
    		    			      Error_Handler();
 8001c74:	f001 fb3a 	bl	80032ec <Error_Handler>
    		    			  }
    		    			  HAL_ADC_Start(&hadc1);
 8001c78:	4817      	ldr	r0, [pc, #92]	; (8001cd8 <NTC_Array+0x390>)
 8001c7a:	f001 ff5f 	bl	8003b3c <HAL_ADC_Start>
    		    			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001c7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c82:	4815      	ldr	r0, [pc, #84]	; (8001cd8 <NTC_Array+0x390>)
 8001c84:	f002 f841 	bl	8003d0a <HAL_ADC_PollForConversion>
    		    			  NTC_ADC_Buffer[i] = HAL_ADC_GetValue(&hadc1);
 8001c88:	4813      	ldr	r0, [pc, #76]	; (8001cd8 <NTC_Array+0x390>)
 8001c8a:	f002 f8c9 	bl	8003e20 <HAL_ADC_GetValue>
 8001c8e:	ee07 0a90 	vmov	s15, r0
 8001c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c96:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <NTC_Array+0x394>)
 8001c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	edc3 7a00 	vstr	s15, [r3]
    		    			  HAL_ADC_Stop(&hadc1);
 8001ca2:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <NTC_Array+0x390>)
 8001ca4:	f001 fffe 	bl	8003ca4 <HAL_ADC_Stop>
//
//    		    			  float logR = log(Res / Divider_Resistor);
//
//    		    			  NTC_Data[i] = 1.0 / ((logR / T2_Bvalue) + (1.0 / T0)) - 275.15;

    		    			  float resistance = Divider_Resistor * (4095.0 / NTC_ADC_Buffer[i] - 1);
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <NTC_Array+0x398>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc63 	bl	8000578 <__aeabi_f2d>
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	460d      	mov	r5, r1
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <NTC_Array+0x394>)
 8001cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	e016      	b.n	8001cf0 <NTC_Array+0x3a8>
 8001cc2:	bf00      	nop
 8001cc4:	f3af 8000 	nop.w
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	40affe00 	.word	0x40affe00
 8001cd0:	66666666 	.word	0x66666666
 8001cd4:	40711266 	.word	0x40711266
 8001cd8:	2000240c 	.word	0x2000240c
 8001cdc:	20000228 	.word	0x20000228
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	3ff00000 	.word	0x3ff00000
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	20000004 	.word	0x20000004
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc41 	bl	8000578 <__aeabi_f2d>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	a197      	add	r1, pc, #604	; (adr r1, 8001f58 <NTC_Array+0x610>)
 8001cfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d00:	f7fe fdbc 	bl	800087c <__aeabi_ddiv>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	4b93      	ldr	r3, [pc, #588]	; (8001f60 <NTC_Array+0x618>)
 8001d12:	f7fe fad1 	bl	80002b8 <__aeabi_dsub>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f7fe fc83 	bl	8000628 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7fe ff55 	bl	8000bd8 <__aeabi_d2f>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	64fb      	str	r3, [r7, #76]	; 0x4c

    		    			  NTC_Data[i] = 1.0 / ((log(resistance / Divider_Resistor)) / T1_Bvalue + 1.0 / T0) - 273.15;
 8001d32:	4b8c      	ldr	r3, [pc, #560]	; (8001f64 <NTC_Array+0x61c>)
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001d3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d40:	ee16 0a90 	vmov	r0, s13
 8001d44:	f7fe fc18 	bl	8000578 <__aeabi_f2d>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	ec43 2b10 	vmov	d0, r2, r3
 8001d50:	f00d ff6e 	bl	800fc30 <log>
 8001d54:	ec55 4b10 	vmov	r4, r5, d0
 8001d58:	4b83      	ldr	r3, [pc, #524]	; (8001f68 <NTC_Array+0x620>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fc0b 	bl	8000578 <__aeabi_f2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4620      	mov	r0, r4
 8001d68:	4629      	mov	r1, r5
 8001d6a:	f7fe fd87 	bl	800087c <__aeabi_ddiv>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4614      	mov	r4, r2
 8001d74:	461d      	mov	r5, r3
 8001d76:	4b7d      	ldr	r3, [pc, #500]	; (8001f6c <NTC_Array+0x624>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fbfc 	bl	8000578 <__aeabi_f2d>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	f04f 0000 	mov.w	r0, #0
 8001d88:	4975      	ldr	r1, [pc, #468]	; (8001f60 <NTC_Array+0x618>)
 8001d8a:	f7fe fd77 	bl	800087c <__aeabi_ddiv>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4620      	mov	r0, r4
 8001d94:	4629      	mov	r1, r5
 8001d96:	f7fe fa91 	bl	80002bc <__adddf3>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	f04f 0000 	mov.w	r0, #0
 8001da2:	496f      	ldr	r1, [pc, #444]	; (8001f60 <NTC_Array+0x618>)
 8001da4:	f7fe fd6a 	bl	800087c <__aeabi_ddiv>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	a367      	add	r3, pc, #412	; (adr r3, 8001f50 <NTC_Array+0x608>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fa7f 	bl	80002b8 <__aeabi_dsub>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dc8:	18d4      	adds	r4, r2, r3
 8001dca:	f7fe fedd 	bl	8000b88 <__aeabi_d2iz>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6023      	str	r3, [r4, #0]
    		    			  /*************************NTC CALCULATION*********************************/

    	}
    	if(i==3)
 8001dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	f040 80ad 	bne.w	8001f34 <NTC_Array+0x5ec>
    	{
    		 ADC_ChannelConfTypeDef sConfig = {0};
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
    		    		 sConfig.Channel = ADC_CHANNEL_4;
 8001de8:	2304      	movs	r3, #4
 8001dea:	60bb      	str	r3, [r7, #8]
    		    		 sConfig.Rank = 1;
 8001dec:	2301      	movs	r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
    		    		 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
    		    			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	4619      	mov	r1, r3
 8001dfa:	485d      	ldr	r0, [pc, #372]	; (8001f70 <NTC_Array+0x628>)
 8001dfc:	f002 f81e 	bl	8003e3c <HAL_ADC_ConfigChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <NTC_Array+0x4c2>
    		    			  {
    		    			      Error_Handler();
 8001e06:	f001 fa71 	bl	80032ec <Error_Handler>
    		    			  }
    		    			  HAL_ADC_Start(&hadc1);
 8001e0a:	4859      	ldr	r0, [pc, #356]	; (8001f70 <NTC_Array+0x628>)
 8001e0c:	f001 fe96 	bl	8003b3c <HAL_ADC_Start>
    		    			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	4856      	ldr	r0, [pc, #344]	; (8001f70 <NTC_Array+0x628>)
 8001e16:	f001 ff78 	bl	8003d0a <HAL_ADC_PollForConversion>
    		    			  NTC_ADC_Buffer[i] = HAL_ADC_GetValue(&hadc1);
 8001e1a:	4855      	ldr	r0, [pc, #340]	; (8001f70 <NTC_Array+0x628>)
 8001e1c:	f002 f800 	bl	8003e20 <HAL_ADC_GetValue>
 8001e20:	ee07 0a90 	vmov	s15, r0
 8001e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e28:	4a52      	ldr	r2, [pc, #328]	; (8001f74 <NTC_Array+0x62c>)
 8001e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	edc3 7a00 	vstr	s15, [r3]
    		    			  HAL_ADC_Stop(&hadc1);
 8001e34:	484e      	ldr	r0, [pc, #312]	; (8001f70 <NTC_Array+0x628>)
 8001e36:	f001 ff35 	bl	8003ca4 <HAL_ADC_Stop>
//
//    		    			  float logR = log(Res / Divider_Resistor);
//
//    		    			  NTC_Data[i] = 1.0 / ((logR / T2_Bvalue) + (1.0 / T0)) - 275.15;

    		    			  float resistance = Divider_Resistor * (4095.0 / NTC_ADC_Buffer[i] - 1);
 8001e3a:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <NTC_Array+0x61c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fb9a 	bl	8000578 <__aeabi_f2d>
 8001e44:	4604      	mov	r4, r0
 8001e46:	460d      	mov	r5, r1
 8001e48:	4a4a      	ldr	r2, [pc, #296]	; (8001f74 <NTC_Array+0x62c>)
 8001e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb90 	bl	8000578 <__aeabi_f2d>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	a13e      	add	r1, pc, #248	; (adr r1, 8001f58 <NTC_Array+0x610>)
 8001e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e62:	f7fe fd0b 	bl	800087c <__aeabi_ddiv>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <NTC_Array+0x618>)
 8001e74:	f7fe fa20 	bl	80002b8 <__aeabi_dsub>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	f7fe fbd2 	bl	8000628 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7fe fea4 	bl	8000bd8 <__aeabi_d2f>
 8001e90:	4603      	mov	r3, r0
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48

    		    			  NTC_Data[i] = 1.0 / ((log(resistance / Divider_Resistor)) / T1_Bvalue + 1.0 / T0) - 273.15;
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <NTC_Array+0x61c>)
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001e9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ea2:	ee16 0a90 	vmov	r0, s13
 8001ea6:	f7fe fb67 	bl	8000578 <__aeabi_f2d>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	ec43 2b10 	vmov	d0, r2, r3
 8001eb2:	f00d febd 	bl	800fc30 <log>
 8001eb6:	ec55 4b10 	vmov	r4, r5, d0
 8001eba:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <NTC_Array+0x620>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fb5a 	bl	8000578 <__aeabi_f2d>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4620      	mov	r0, r4
 8001eca:	4629      	mov	r1, r5
 8001ecc:	f7fe fcd6 	bl	800087c <__aeabi_ddiv>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4614      	mov	r4, r2
 8001ed6:	461d      	mov	r5, r3
 8001ed8:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <NTC_Array+0x624>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fb4b 	bl	8000578 <__aeabi_f2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	f04f 0000 	mov.w	r0, #0
 8001eea:	491d      	ldr	r1, [pc, #116]	; (8001f60 <NTC_Array+0x618>)
 8001eec:	f7fe fcc6 	bl	800087c <__aeabi_ddiv>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	f7fe f9e0 	bl	80002bc <__adddf3>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	f04f 0000 	mov.w	r0, #0
 8001f04:	4916      	ldr	r1, [pc, #88]	; (8001f60 <NTC_Array+0x618>)
 8001f06:	f7fe fcb9 	bl	800087c <__aeabi_ddiv>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	a30f      	add	r3, pc, #60	; (adr r3, 8001f50 <NTC_Array+0x608>)
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	f7fe f9ce 	bl	80002b8 <__aeabi_dsub>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f2a:	18d4      	adds	r4, r2, r3
 8001f2c:	f7fe fe2c 	bl	8000b88 <__aeabi_d2iz>
 8001f30:	4603      	mov	r3, r0
 8001f32:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < Tot_Sensor; i++) {
 8001f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f36:	3301      	adds	r3, #1
 8001f38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	f6ff ad1c 	blt.w	800197c <NTC_Array+0x34>


    }

    // Return the pointer to the allocated NTC_Data
    return NTC_Data;
 8001f44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3760      	adds	r7, #96	; 0x60
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	66666666 	.word	0x66666666
 8001f54:	40711266 	.word	0x40711266
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	40affe00 	.word	0x40affe00
 8001f60:	3ff00000 	.word	0x3ff00000
 8001f64:	20000000 	.word	0x20000000
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	2000240c 	.word	0x2000240c
 8001f74:	20000228 	.word	0x20000228

08001f78 <PresureSensorData>:


float Pressure_Adc =0;

float PresureSensorData(float P_SENS)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	ed87 0a01 	vstr	s0, [r7, #4]
				 ADC_ChannelConfTypeDef sConfig = {0};
 8001f82:	f107 0308 	add.w	r3, r7, #8
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
	    		 sConfig.Channel = ADC_CHANNEL_7;
 8001f90:	2307      	movs	r3, #7
 8001f92:	60bb      	str	r3, [r7, #8]
	    		 sConfig.Rank = 1;
 8001f94:	2301      	movs	r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
	    		 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]
	    			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f9c:	f107 0308 	add.w	r3, r7, #8
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	483f      	ldr	r0, [pc, #252]	; (80020a0 <PresureSensorData+0x128>)
 8001fa4:	f001 ff4a 	bl	8003e3c <HAL_ADC_ConfigChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <PresureSensorData+0x3a>
	    			  {
	    			      Error_Handler();
 8001fae:	f001 f99d 	bl	80032ec <Error_Handler>
	    			  }
	    			  HAL_ADC_Start(&hadc1);
 8001fb2:	483b      	ldr	r0, [pc, #236]	; (80020a0 <PresureSensorData+0x128>)
 8001fb4:	f001 fdc2 	bl	8003b3c <HAL_ADC_Start>
	    			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbc:	4838      	ldr	r0, [pc, #224]	; (80020a0 <PresureSensorData+0x128>)
 8001fbe:	f001 fea4 	bl	8003d0a <HAL_ADC_PollForConversion>
	    			  Pressure_Adc = HAL_ADC_GetValue(&hadc1);
 8001fc2:	4837      	ldr	r0, [pc, #220]	; (80020a0 <PresureSensorData+0x128>)
 8001fc4:	f001 ff2c 	bl	8003e20 <HAL_ADC_GetValue>
 8001fc8:	ee07 0a90 	vmov	s15, r0
 8001fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fd0:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <PresureSensorData+0x12c>)
 8001fd2:	edc3 7a00 	vstr	s15, [r3]
	    			  HAL_ADC_Stop(&hadc1);
 8001fd6:	4832      	ldr	r0, [pc, #200]	; (80020a0 <PresureSensorData+0x128>)
 8001fd8:	f001 fe64 	bl	8003ca4 <HAL_ADC_Stop>

	    			 float p_volt = (Pressure_Adc * Volt_Ref) /ADC_Res;
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <PresureSensorData+0x12c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fac9 	bl	8000578 <__aeabi_f2d>
 8001fe6:	a328      	add	r3, pc, #160	; (adr r3, 8002088 <PresureSensorData+0x110>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fb1c 	bl	8000628 <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	a325      	add	r3, pc, #148	; (adr r3, 8002090 <PresureSensorData+0x118>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	f7fe fc3d 	bl	800087c <__aeabi_ddiv>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4610      	mov	r0, r2
 8002008:	4619      	mov	r1, r3
 800200a:	f7fe fde5 	bl	8000bd8 <__aeabi_d2f>
 800200e:	4603      	mov	r3, r0
 8002010:	61fb      	str	r3, [r7, #28]
	    			 float Pressure = (p_volt / Volt_Ref) / 0.01155; //  1.5-3.5mV/V and 3.3V swing as per the circuit:
 8002012:	69f8      	ldr	r0, [r7, #28]
 8002014:	f7fe fab0 	bl	8000578 <__aeabi_f2d>
 8002018:	a31b      	add	r3, pc, #108	; (adr r3, 8002088 <PresureSensorData+0x110>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe fc2d 	bl	800087c <__aeabi_ddiv>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	a31b      	add	r3, pc, #108	; (adr r3, 8002098 <PresureSensorData+0x120>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe fc24 	bl	800087c <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fdcc 	bl	8000bd8 <__aeabi_d2f>
 8002040:	4603      	mov	r3, r0
 8002042:	61bb      	str	r3, [r7, #24]
	    			 if (!isfinite(Pressure) || isnan(Pressure))
 8002044:	edd7 7a06 	vldr	s15, [r7, #24]
 8002048:	eef0 7ae7 	vabs.f32	s15, s15
 800204c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80020a8 <PresureSensorData+0x130>
 8002050:	eef4 7a47 	vcmp.f32	s15, s14
 8002054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002058:	d808      	bhi.n	800206c <PresureSensorData+0xf4>
 800205a:	ed97 7a06 	vldr	s14, [r7, #24]
 800205e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002062:	eeb4 7a67 	vcmp.f32	s14, s15
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	d702      	bvc.n	8002072 <PresureSensorData+0xfa>
	    			{
	    				 return 0.0; // Return 0 if value is -inf, inf, or nan
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	e000      	b.n	8002074 <PresureSensorData+0xfc>
	    			}

	    			 return Pressure;
 8002072:	69bb      	ldr	r3, [r7, #24]

}
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eeb0 0a67 	vmov.f32	s0, s15
 800207c:	3720      	adds	r7, #32
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	f3af 8000 	nop.w
 8002088:	66666666 	.word	0x66666666
 800208c:	400a6666 	.word	0x400a6666
 8002090:	00000000 	.word	0x00000000
 8002094:	40affe00 	.word	0x40affe00
 8002098:	c226809d 	.word	0xc226809d
 800209c:	3f87a786 	.word	0x3f87a786
 80020a0:	2000240c 	.word	0x2000240c
 80020a4:	20000238 	.word	0x20000238
 80020a8:	7f7fffff 	.word	0x7f7fffff

080020ac <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_SDIO_SD_Init(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
	 hsd.Instance = SDIO;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <MX_SDIO_SD_Init+0x38>)
 80020b2:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <MX_SDIO_SD_Init+0x3c>)
 80020b4:	601a      	str	r2, [r3, #0]
		  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <MX_SDIO_SD_Init+0x38>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
		  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <MX_SDIO_SD_Init+0x38>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
		  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <MX_SDIO_SD_Init+0x38>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	60da      	str	r2, [r3, #12]
		  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <MX_SDIO_SD_Init+0x38>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
		  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <MX_SDIO_SD_Init+0x38>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
		  hsd.Init.ClockDiv = 6;
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <MX_SDIO_SD_Init+0x38>)
 80020d6:	2206      	movs	r2, #6
 80020d8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	200024a8 	.word	0x200024a8
 80020e8:	40012c00 	.word	0x40012c00

080020ec <SD_Card_Test>:
 FILINFO fno;
 DIR dir;  //Dir
 FRESULT fresult;  // result
 UINT br, bw;  // File read/write count

uint8_t SD_Card_Test() {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	fresult = f_mount( & fs, "/", 1);
 80020f0:	2201      	movs	r2, #1
 80020f2:	4912      	ldr	r1, [pc, #72]	; (800213c <SD_Card_Test+0x50>)
 80020f4:	4812      	ldr	r0, [pc, #72]	; (8002140 <SD_Card_Test+0x54>)
 80020f6:	f009 fc29 	bl	800b94c <f_mount>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <SD_Card_Test+0x58>)
 8002100:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <SD_Card_Test+0x58>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <SD_Card_Test+0x2a>
  {
    UART_Printf("xxxxxxxxxxCHECK SD CARD(SD card is must to store data)xxxxxxxxxx\n");
 800210a:	480f      	ldr	r0, [pc, #60]	; (8002148 <SD_Card_Test+0x5c>)
 800210c:	f000 fe60 	bl	8002dd0 <UART_Printf>
    return fresult;
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <SD_Card_Test+0x58>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	e00f      	b.n	8002136 <SD_Card_Test+0x4a>
  }
  HAL_Delay(50);
 8002116:	2032      	movs	r0, #50	; 0x32
 8002118:	f001 fc88 	bl	8003a2c <HAL_Delay>
  UART_Printf("*************SD_CARD_WORKING_FINE*************\n");
 800211c:	480b      	ldr	r0, [pc, #44]	; (800214c <SD_Card_Test+0x60>)
 800211e:	f000 fe57 	bl	8002dd0 <UART_Printf>
  HAL_Delay(50);
 8002122:	2032      	movs	r0, #50	; 0x32
 8002124:	f001 fc82 	bl	8003a2c <HAL_Delay>
  f_mount(NULL, "", 0);
 8002128:	2200      	movs	r2, #0
 800212a:	4909      	ldr	r1, [pc, #36]	; (8002150 <SD_Card_Test+0x64>)
 800212c:	2000      	movs	r0, #0
 800212e:	f009 fc0d 	bl	800b94c <f_mount>
  return fresult;
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SD_Card_Test+0x58>)
 8002134:	781b      	ldrb	r3, [r3, #0]
}
 8002136:	4618      	mov	r0, r3
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	0801081c 	.word	0x0801081c
 8002140:	20000364 	.word	0x20000364
 8002144:	20002400 	.word	0x20002400
 8002148:	08010820 	.word	0x08010820
 800214c:	08010864 	.word	0x08010864
 8002150:	08010894 	.word	0x08010894

08002154 <File_Number_Create>:



uint8_t File_Number_Create()
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0

	fresult = f_mount( & fs, "/", 1);
 8002158:	2201      	movs	r2, #1
 800215a:	4943      	ldr	r1, [pc, #268]	; (8002268 <File_Number_Create+0x114>)
 800215c:	4843      	ldr	r0, [pc, #268]	; (800226c <File_Number_Create+0x118>)
 800215e:	f009 fbf5 	bl	800b94c <f_mount>
 8002162:	4603      	mov	r3, r0
 8002164:	461a      	mov	r2, r3
 8002166:	4b42      	ldr	r3, [pc, #264]	; (8002270 <File_Number_Create+0x11c>)
 8002168:	701a      	strb	r2, [r3, #0]
	  if (fresult != FR_OK)
 800216a:	4b41      	ldr	r3, [pc, #260]	; (8002270 <File_Number_Create+0x11c>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00d      	beq.n	800218e <File_Number_Create+0x3a>
	  {
		f_closedir(&dir);
 8002172:	4840      	ldr	r0, [pc, #256]	; (8002274 <File_Number_Create+0x120>)
 8002174:	f00a fc2e 	bl	800c9d4 <f_closedir>
		f_mount(NULL, "", 0);
 8002178:	2200      	movs	r2, #0
 800217a:	493f      	ldr	r1, [pc, #252]	; (8002278 <File_Number_Create+0x124>)
 800217c:	2000      	movs	r0, #0
 800217e:	f009 fbe5 	bl	800b94c <f_mount>
	    UART_Printf("SD CARD MOUNT ISSUE IN FILE_NUMBER_CREATE FUNCTION\n");
 8002182:	483e      	ldr	r0, [pc, #248]	; (800227c <File_Number_Create+0x128>)
 8002184:	f000 fe24 	bl	8002dd0 <UART_Printf>
	    return fresult;
 8002188:	4b39      	ldr	r3, [pc, #228]	; (8002270 <File_Number_Create+0x11c>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	e069      	b.n	8002262 <File_Number_Create+0x10e>
	  }
	  HAL_Delay(50);
 800218e:	2032      	movs	r0, #50	; 0x32
 8002190:	f001 fc4c 	bl	8003a2c <HAL_Delay>

	fresult = f_opendir(&dir, "/");
 8002194:	4934      	ldr	r1, [pc, #208]	; (8002268 <File_Number_Create+0x114>)
 8002196:	4837      	ldr	r0, [pc, #220]	; (8002274 <File_Number_Create+0x120>)
 8002198:	f00a fba9 	bl	800c8ee <f_opendir>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	4b33      	ldr	r3, [pc, #204]	; (8002270 <File_Number_Create+0x11c>)
 80021a2:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80021a4:	4b32      	ldr	r3, [pc, #200]	; (8002270 <File_Number_Create+0x11c>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <File_Number_Create+0x64>
	 {
		UART_Printf("SD CARD DIR OPEN ISSUE IN FILE_NUMBER_CREATE FUNCTION\n");
 80021ac:	4834      	ldr	r0, [pc, #208]	; (8002280 <File_Number_Create+0x12c>)
 80021ae:	f000 fe0f 	bl	8002dd0 <UART_Printf>
		return fresult;
 80021b2:	4b2f      	ldr	r3, [pc, #188]	; (8002270 <File_Number_Create+0x11c>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	e054      	b.n	8002262 <File_Number_Create+0x10e>
	 }
	fresult = f_stat("File_Number.txt", & fileInfo);
 80021b8:	4932      	ldr	r1, [pc, #200]	; (8002284 <File_Number_Create+0x130>)
 80021ba:	4833      	ldr	r0, [pc, #204]	; (8002288 <File_Number_Create+0x134>)
 80021bc:	f00a fc30 	bl	800ca20 <f_stat>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b2a      	ldr	r3, [pc, #168]	; (8002270 <File_Number_Create+0x11c>)
 80021c6:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_NO_FILE)
 80021c8:	4b29      	ldr	r3, [pc, #164]	; (8002270 <File_Number_Create+0x11c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d011      	beq.n	80021f4 <File_Number_Create+0xa0>
	{
		UART_Printf("File_Number.txt already present\n");
 80021d0:	482e      	ldr	r0, [pc, #184]	; (800228c <File_Number_Create+0x138>)
 80021d2:	f000 fdfd 	bl	8002dd0 <UART_Printf>
		f_closedir(&dir);
 80021d6:	4827      	ldr	r0, [pc, #156]	; (8002274 <File_Number_Create+0x120>)
 80021d8:	f00a fbfc 	bl	800c9d4 <f_closedir>
		fresult = f_mount(NULL, "", 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	4926      	ldr	r1, [pc, #152]	; (8002278 <File_Number_Create+0x124>)
 80021e0:	2000      	movs	r0, #0
 80021e2:	f009 fbb3 	bl	800b94c <f_mount>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <File_Number_Create+0x11c>)
 80021ec:	701a      	strb	r2, [r3, #0]
		return fresult;
 80021ee:	4b20      	ldr	r3, [pc, #128]	; (8002270 <File_Number_Create+0x11c>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	e036      	b.n	8002262 <File_Number_Create+0x10e>
	}
	else
	{
		fresult = f_open(&fil, "File_Number.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 80021f4:	220b      	movs	r2, #11
 80021f6:	4924      	ldr	r1, [pc, #144]	; (8002288 <File_Number_Create+0x134>)
 80021f8:	4825      	ldr	r0, [pc, #148]	; (8002290 <File_Number_Create+0x13c>)
 80021fa:	f009 fbed 	bl	800b9d8 <f_open>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <File_Number_Create+0x11c>)
 8002204:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <File_Number_Create+0x11c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d011      	beq.n	8002232 <File_Number_Create+0xde>
		{
			UART_Printf("Problem to create File_Number.txt\n");
 800220e:	4821      	ldr	r0, [pc, #132]	; (8002294 <File_Number_Create+0x140>)
 8002210:	f000 fdde 	bl	8002dd0 <UART_Printf>
			return fresult;
		}
	}


	f_closedir(&dir);
 8002214:	4817      	ldr	r0, [pc, #92]	; (8002274 <File_Number_Create+0x120>)
 8002216:	f00a fbdd 	bl	800c9d4 <f_closedir>
	fresult = f_mount(NULL, "", 0);
 800221a:	2200      	movs	r2, #0
 800221c:	4916      	ldr	r1, [pc, #88]	; (8002278 <File_Number_Create+0x124>)
 800221e:	2000      	movs	r0, #0
 8002220:	f009 fb94 	bl	800b94c <f_mount>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <File_Number_Create+0x11c>)
 800222a:	701a      	strb	r2, [r3, #0]
	return fresult;
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <File_Number_Create+0x11c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	e017      	b.n	8002262 <File_Number_Create+0x10e>
			UART_Printf("New File_Number.txt created\n");
 8002232:	4819      	ldr	r0, [pc, #100]	; (8002298 <File_Number_Create+0x144>)
 8002234:	f000 fdcc 	bl	8002dd0 <UART_Printf>
			f_puts("1", &fil);
 8002238:	4915      	ldr	r1, [pc, #84]	; (8002290 <File_Number_Create+0x13c>)
 800223a:	4818      	ldr	r0, [pc, #96]	; (800229c <File_Number_Create+0x148>)
 800223c:	f00a fcdd 	bl	800cbfa <f_puts>
			f_close(&fil);
 8002240:	4813      	ldr	r0, [pc, #76]	; (8002290 <File_Number_Create+0x13c>)
 8002242:	f00a f906 	bl	800c452 <f_close>
			f_closedir(&dir);
 8002246:	480b      	ldr	r0, [pc, #44]	; (8002274 <File_Number_Create+0x120>)
 8002248:	f00a fbc4 	bl	800c9d4 <f_closedir>
			fresult = f_mount(NULL, "", 0);
 800224c:	2200      	movs	r2, #0
 800224e:	490a      	ldr	r1, [pc, #40]	; (8002278 <File_Number_Create+0x124>)
 8002250:	2000      	movs	r0, #0
 8002252:	f009 fb7b 	bl	800b94c <f_mount>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <File_Number_Create+0x11c>)
 800225c:	701a      	strb	r2, [r3, #0]
			return fresult;
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <File_Number_Create+0x11c>)
 8002260:	781b      	ldrb	r3, [r3, #0]
}
 8002262:	4618      	mov	r0, r3
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	0801081c 	.word	0x0801081c
 800226c:	20000364 	.word	0x20000364
 8002270:	20002400 	.word	0x20002400
 8002274:	200023cc 	.word	0x200023cc
 8002278:	08010894 	.word	0x08010894
 800227c:	08010898 	.word	0x08010898
 8002280:	080108cc 	.word	0x080108cc
 8002284:	2000024c 	.word	0x2000024c
 8002288:	08010904 	.word	0x08010904
 800228c:	08010914 	.word	0x08010914
 8002290:	2000139c 	.word	0x2000139c
 8002294:	08010938 	.word	0x08010938
 8002298:	0801095c 	.word	0x0801095c
 800229c:	0801097c 	.word	0x0801097c

080022a0 <Num_Sys_Create>:




uint8_t Num_Sys_Create()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	fresult = f_mount( & fs, "/", 1);
 80022a4:	2201      	movs	r2, #1
 80022a6:	4943      	ldr	r1, [pc, #268]	; (80023b4 <Num_Sys_Create+0x114>)
 80022a8:	4843      	ldr	r0, [pc, #268]	; (80023b8 <Num_Sys_Create+0x118>)
 80022aa:	f009 fb4f 	bl	800b94c <f_mount>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b42      	ldr	r3, [pc, #264]	; (80023bc <Num_Sys_Create+0x11c>)
 80022b4:	701a      	strb	r2, [r3, #0]
		  if (fresult != FR_OK)
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <Num_Sys_Create+0x11c>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00d      	beq.n	80022da <Num_Sys_Create+0x3a>
		  {
			f_closedir(&dir);
 80022be:	4840      	ldr	r0, [pc, #256]	; (80023c0 <Num_Sys_Create+0x120>)
 80022c0:	f00a fb88 	bl	800c9d4 <f_closedir>
			f_mount(NULL, "", 0);
 80022c4:	2200      	movs	r2, #0
 80022c6:	493f      	ldr	r1, [pc, #252]	; (80023c4 <Num_Sys_Create+0x124>)
 80022c8:	2000      	movs	r0, #0
 80022ca:	f009 fb3f 	bl	800b94c <f_mount>
		    UART_Printf("SD CARD MOUNT ISSUE IN Num_Sys FUNCTION\n");
 80022ce:	483e      	ldr	r0, [pc, #248]	; (80023c8 <Num_Sys_Create+0x128>)
 80022d0:	f000 fd7e 	bl	8002dd0 <UART_Printf>
		    return fresult;
 80022d4:	4b39      	ldr	r3, [pc, #228]	; (80023bc <Num_Sys_Create+0x11c>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	e069      	b.n	80023ae <Num_Sys_Create+0x10e>
		  }
		  HAL_Delay(50);
 80022da:	2032      	movs	r0, #50	; 0x32
 80022dc:	f001 fba6 	bl	8003a2c <HAL_Delay>

		fresult = f_opendir(&dir, "/");
 80022e0:	4934      	ldr	r1, [pc, #208]	; (80023b4 <Num_Sys_Create+0x114>)
 80022e2:	4837      	ldr	r0, [pc, #220]	; (80023c0 <Num_Sys_Create+0x120>)
 80022e4:	f00a fb03 	bl	800c8ee <f_opendir>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b33      	ldr	r3, [pc, #204]	; (80023bc <Num_Sys_Create+0x11c>)
 80022ee:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <Num_Sys_Create+0x11c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <Num_Sys_Create+0x64>
		 {
			UART_Printf("SD CARD DIR OPEN ISSUE IN FILE_NUMBER_CREATE FUNCTION\n");
 80022f8:	4834      	ldr	r0, [pc, #208]	; (80023cc <Num_Sys_Create+0x12c>)
 80022fa:	f000 fd69 	bl	8002dd0 <UART_Printf>
			return fresult;
 80022fe:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <Num_Sys_Create+0x11c>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	e054      	b.n	80023ae <Num_Sys_Create+0x10e>
		 }
		fresult = f_stat("Num_Sys.txt", & fileInfo);
 8002304:	4932      	ldr	r1, [pc, #200]	; (80023d0 <Num_Sys_Create+0x130>)
 8002306:	4833      	ldr	r0, [pc, #204]	; (80023d4 <Num_Sys_Create+0x134>)
 8002308:	f00a fb8a 	bl	800ca20 <f_stat>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <Num_Sys_Create+0x11c>)
 8002312:	701a      	strb	r2, [r3, #0]
		if(fresult != FR_NO_FILE)
 8002314:	4b29      	ldr	r3, [pc, #164]	; (80023bc <Num_Sys_Create+0x11c>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d011      	beq.n	8002340 <Num_Sys_Create+0xa0>
		{
			UART_Printf("Num_Sys.txt already present\n");
 800231c:	482e      	ldr	r0, [pc, #184]	; (80023d8 <Num_Sys_Create+0x138>)
 800231e:	f000 fd57 	bl	8002dd0 <UART_Printf>
			f_closedir(&dir);
 8002322:	4827      	ldr	r0, [pc, #156]	; (80023c0 <Num_Sys_Create+0x120>)
 8002324:	f00a fb56 	bl	800c9d4 <f_closedir>
			fresult = f_mount(NULL, "", 0);
 8002328:	2200      	movs	r2, #0
 800232a:	4926      	ldr	r1, [pc, #152]	; (80023c4 <Num_Sys_Create+0x124>)
 800232c:	2000      	movs	r0, #0
 800232e:	f009 fb0d 	bl	800b94c <f_mount>
 8002332:	4603      	mov	r3, r0
 8002334:	461a      	mov	r2, r3
 8002336:	4b21      	ldr	r3, [pc, #132]	; (80023bc <Num_Sys_Create+0x11c>)
 8002338:	701a      	strb	r2, [r3, #0]
			return fresult;
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <Num_Sys_Create+0x11c>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	e036      	b.n	80023ae <Num_Sys_Create+0x10e>
		}
		else
		{
			fresult = f_open(&fil, "Num_Sys.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8002340:	220b      	movs	r2, #11
 8002342:	4924      	ldr	r1, [pc, #144]	; (80023d4 <Num_Sys_Create+0x134>)
 8002344:	4825      	ldr	r0, [pc, #148]	; (80023dc <Num_Sys_Create+0x13c>)
 8002346:	f009 fb47 	bl	800b9d8 <f_open>
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <Num_Sys_Create+0x11c>)
 8002350:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8002352:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <Num_Sys_Create+0x11c>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d011      	beq.n	800237e <Num_Sys_Create+0xde>
			{
				UART_Printf("Problem to create Num_Sys.txt\n");
 800235a:	4821      	ldr	r0, [pc, #132]	; (80023e0 <Num_Sys_Create+0x140>)
 800235c:	f000 fd38 	bl	8002dd0 <UART_Printf>
				return fresult;
			}
		}


		f_closedir(&dir);
 8002360:	4817      	ldr	r0, [pc, #92]	; (80023c0 <Num_Sys_Create+0x120>)
 8002362:	f00a fb37 	bl	800c9d4 <f_closedir>
		fresult = f_mount(NULL, "", 0);
 8002366:	2200      	movs	r2, #0
 8002368:	4916      	ldr	r1, [pc, #88]	; (80023c4 <Num_Sys_Create+0x124>)
 800236a:	2000      	movs	r0, #0
 800236c:	f009 faee 	bl	800b94c <f_mount>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <Num_Sys_Create+0x11c>)
 8002376:	701a      	strb	r2, [r3, #0]
		return fresult;
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <Num_Sys_Create+0x11c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	e017      	b.n	80023ae <Num_Sys_Create+0x10e>
				UART_Printf("New Num_Sys.txt created\n");
 800237e:	4819      	ldr	r0, [pc, #100]	; (80023e4 <Num_Sys_Create+0x144>)
 8002380:	f000 fd26 	bl	8002dd0 <UART_Printf>
				f_puts("GERMAN", &fil);
 8002384:	4915      	ldr	r1, [pc, #84]	; (80023dc <Num_Sys_Create+0x13c>)
 8002386:	4818      	ldr	r0, [pc, #96]	; (80023e8 <Num_Sys_Create+0x148>)
 8002388:	f00a fc37 	bl	800cbfa <f_puts>
				fresult = f_close(&fil);
 800238c:	4813      	ldr	r0, [pc, #76]	; (80023dc <Num_Sys_Create+0x13c>)
 800238e:	f00a f860 	bl	800c452 <f_close>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <Num_Sys_Create+0x11c>)
 8002398:	701a      	strb	r2, [r3, #0]
				f_closedir(&dir);
 800239a:	4809      	ldr	r0, [pc, #36]	; (80023c0 <Num_Sys_Create+0x120>)
 800239c:	f00a fb1a 	bl	800c9d4 <f_closedir>
				f_mount(NULL, "", 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	4908      	ldr	r1, [pc, #32]	; (80023c4 <Num_Sys_Create+0x124>)
 80023a4:	2000      	movs	r0, #0
 80023a6:	f009 fad1 	bl	800b94c <f_mount>
				return fresult;
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <Num_Sys_Create+0x11c>)
 80023ac:	781b      	ldrb	r3, [r3, #0]

}
 80023ae:	4618      	mov	r0, r3
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	0801081c 	.word	0x0801081c
 80023b8:	20000364 	.word	0x20000364
 80023bc:	20002400 	.word	0x20002400
 80023c0:	200023cc 	.word	0x200023cc
 80023c4:	08010894 	.word	0x08010894
 80023c8:	08010980 	.word	0x08010980
 80023cc:	080108cc 	.word	0x080108cc
 80023d0:	2000024c 	.word	0x2000024c
 80023d4:	080109ac 	.word	0x080109ac
 80023d8:	080109b8 	.word	0x080109b8
 80023dc:	2000139c 	.word	0x2000139c
 80023e0:	080109d8 	.word	0x080109d8
 80023e4:	080109f8 	.word	0x080109f8
 80023e8:	08010a14 	.word	0x08010a14

080023ec <HTML_File_Create>:
uint8_t HTML_File_Create()
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
	fresult = f_mount( & fs, "/", 1);
 80023f2:	2201      	movs	r2, #1
 80023f4:	4958      	ldr	r1, [pc, #352]	; (8002558 <HTML_File_Create+0x16c>)
 80023f6:	4859      	ldr	r0, [pc, #356]	; (800255c <HTML_File_Create+0x170>)
 80023f8:	f009 faa8 	bl	800b94c <f_mount>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	4b57      	ldr	r3, [pc, #348]	; (8002560 <HTML_File_Create+0x174>)
 8002402:	701a      	strb	r2, [r3, #0]
			  if (fresult != FR_OK)
 8002404:	4b56      	ldr	r3, [pc, #344]	; (8002560 <HTML_File_Create+0x174>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00d      	beq.n	8002428 <HTML_File_Create+0x3c>
			  {
				f_closedir(&dir);
 800240c:	4855      	ldr	r0, [pc, #340]	; (8002564 <HTML_File_Create+0x178>)
 800240e:	f00a fae1 	bl	800c9d4 <f_closedir>
				f_mount(NULL, "", 0);
 8002412:	2200      	movs	r2, #0
 8002414:	4954      	ldr	r1, [pc, #336]	; (8002568 <HTML_File_Create+0x17c>)
 8002416:	2000      	movs	r0, #0
 8002418:	f009 fa98 	bl	800b94c <f_mount>
			    UART_Printf("SD CARD MOUNT ISSUE IN HTML file FUNCTION\n");
 800241c:	4853      	ldr	r0, [pc, #332]	; (800256c <HTML_File_Create+0x180>)
 800241e:	f000 fcd7 	bl	8002dd0 <UART_Printf>
			    return fresult;
 8002422:	4b4f      	ldr	r3, [pc, #316]	; (8002560 <HTML_File_Create+0x174>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	e092      	b.n	800254e <HTML_File_Create+0x162>
			  }
			  HAL_Delay(50);
 8002428:	2032      	movs	r0, #50	; 0x32
 800242a:	f001 faff 	bl	8003a2c <HAL_Delay>

			fresult = f_opendir(&dir, "/");
 800242e:	494a      	ldr	r1, [pc, #296]	; (8002558 <HTML_File_Create+0x16c>)
 8002430:	484c      	ldr	r0, [pc, #304]	; (8002564 <HTML_File_Create+0x178>)
 8002432:	f00a fa5c 	bl	800c8ee <f_opendir>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	4b49      	ldr	r3, [pc, #292]	; (8002560 <HTML_File_Create+0x174>)
 800243c:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 800243e:	4b48      	ldr	r3, [pc, #288]	; (8002560 <HTML_File_Create+0x174>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HTML_File_Create+0x66>
			 {
				UART_Printf("SD CARD DIR OPEN ISSUE IN HTML file FUNCTION\n");
 8002446:	484a      	ldr	r0, [pc, #296]	; (8002570 <HTML_File_Create+0x184>)
 8002448:	f000 fcc2 	bl	8002dd0 <UART_Printf>
				return fresult;
 800244c:	4b44      	ldr	r3, [pc, #272]	; (8002560 <HTML_File_Create+0x174>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	e07d      	b.n	800254e <HTML_File_Create+0x162>
			 }
			fresult = f_stat("index.html", & fileInfo);
 8002452:	4948      	ldr	r1, [pc, #288]	; (8002574 <HTML_File_Create+0x188>)
 8002454:	4848      	ldr	r0, [pc, #288]	; (8002578 <HTML_File_Create+0x18c>)
 8002456:	f00a fae3 	bl	800ca20 <f_stat>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	4b40      	ldr	r3, [pc, #256]	; (8002560 <HTML_File_Create+0x174>)
 8002460:	701a      	strb	r2, [r3, #0]
			if(fresult != FR_NO_FILE)
 8002462:	4b3f      	ldr	r3, [pc, #252]	; (8002560 <HTML_File_Create+0x174>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b04      	cmp	r3, #4
 8002468:	d011      	beq.n	800248e <HTML_File_Create+0xa2>
			{
				UART_Printf("index.html already present\n");
 800246a:	4844      	ldr	r0, [pc, #272]	; (800257c <HTML_File_Create+0x190>)
 800246c:	f000 fcb0 	bl	8002dd0 <UART_Printf>
				f_closedir(&dir);
 8002470:	483c      	ldr	r0, [pc, #240]	; (8002564 <HTML_File_Create+0x178>)
 8002472:	f00a faaf 	bl	800c9d4 <f_closedir>
				fresult = f_mount(NULL, "", 0);
 8002476:	2200      	movs	r2, #0
 8002478:	493b      	ldr	r1, [pc, #236]	; (8002568 <HTML_File_Create+0x17c>)
 800247a:	2000      	movs	r0, #0
 800247c:	f009 fa66 	bl	800b94c <f_mount>
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	4b36      	ldr	r3, [pc, #216]	; (8002560 <HTML_File_Create+0x174>)
 8002486:	701a      	strb	r2, [r3, #0]
				return fresult;
 8002488:	4b35      	ldr	r3, [pc, #212]	; (8002560 <HTML_File_Create+0x174>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	e05f      	b.n	800254e <HTML_File_Create+0x162>
			}
			else
			{
				fresult = f_open(&fil, "index.html", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 800248e:	220b      	movs	r2, #11
 8002490:	4939      	ldr	r1, [pc, #228]	; (8002578 <HTML_File_Create+0x18c>)
 8002492:	483b      	ldr	r0, [pc, #236]	; (8002580 <HTML_File_Create+0x194>)
 8002494:	f009 faa0 	bl	800b9d8 <f_open>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	4b30      	ldr	r3, [pc, #192]	; (8002560 <HTML_File_Create+0x174>)
 800249e:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 80024a0:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <HTML_File_Create+0x174>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HTML_File_Create+0xc4>
				{
					UART_Printf("Problem to create index.html\n");
 80024a8:	4836      	ldr	r0, [pc, #216]	; (8002584 <HTML_File_Create+0x198>)
 80024aa:	f000 fc91 	bl	8002dd0 <UART_Printf>
 80024ae:	e005      	b.n	80024bc <HTML_File_Create+0xd0>
				}
				else
				{
					UART_Printf("New index.html created\n");
 80024b0:	4835      	ldr	r0, [pc, #212]	; (8002588 <HTML_File_Create+0x19c>)
 80024b2:	f000 fc8d 	bl	8002dd0 <UART_Printf>
					f_close(&fil);
 80024b6:	4832      	ldr	r0, [pc, #200]	; (8002580 <HTML_File_Create+0x194>)
 80024b8:	f009 ffcb 	bl	800c452 <f_close>

				}
			}

			fresult = f_open(&fil, "Num_Sys.txt", FA_READ | FA_WRITE);
 80024bc:	2203      	movs	r2, #3
 80024be:	4933      	ldr	r1, [pc, #204]	; (800258c <HTML_File_Create+0x1a0>)
 80024c0:	482f      	ldr	r0, [pc, #188]	; (8002580 <HTML_File_Create+0x194>)
 80024c2:	f009 fa89 	bl	800b9d8 <f_open>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HTML_File_Create+0x174>)
 80024cc:	701a      	strb	r2, [r3, #0]
			f_gets(Num_File_Data, sizeof(Num_File_Data), & fil);
 80024ce:	4a2c      	ldr	r2, [pc, #176]	; (8002580 <HTML_File_Create+0x194>)
 80024d0:	210a      	movs	r1, #10
 80024d2:	482f      	ldr	r0, [pc, #188]	; (8002590 <HTML_File_Create+0x1a4>)
 80024d4:	f00a fadd 	bl	800ca92 <f_gets>
			f_close(&fil);
 80024d8:	4829      	ldr	r0, [pc, #164]	; (8002580 <HTML_File_Create+0x194>)
 80024da:	f009 ffba 	bl	800c452 <f_close>
			char sys1[] = {"GERMAN"};
 80024de:	4a2d      	ldr	r2, [pc, #180]	; (8002594 <HTML_File_Create+0x1a8>)
 80024e0:	463b      	mov	r3, r7
 80024e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024e6:	6018      	str	r0, [r3, #0]
 80024e8:	3304      	adds	r3, #4
 80024ea:	8019      	strh	r1, [r3, #0]
 80024ec:	3302      	adds	r3, #2
 80024ee:	0c0a      	lsrs	r2, r1, #16
 80024f0:	701a      	strb	r2, [r3, #0]
			f_open(&fil, "index.html", FA_READ | FA_WRITE);
 80024f2:	2203      	movs	r2, #3
 80024f4:	4920      	ldr	r1, [pc, #128]	; (8002578 <HTML_File_Create+0x18c>)
 80024f6:	4822      	ldr	r0, [pc, #136]	; (8002580 <HTML_File_Create+0x194>)
 80024f8:	f009 fa6e 	bl	800b9d8 <f_open>
			UART_Printf("-----------------Pls wait File Loading--------------------- \n");
 80024fc:	4826      	ldr	r0, [pc, #152]	; (8002598 <HTML_File_Create+0x1ac>)
 80024fe:	f000 fc67 	bl	8002dd0 <UART_Printf>
			(strcmp(Num_File_Data,sys1)==0)? f_puts(GERMAN, & fil) : f_puts(USA, & fil);
 8002502:	463b      	mov	r3, r7
 8002504:	4619      	mov	r1, r3
 8002506:	4822      	ldr	r0, [pc, #136]	; (8002590 <HTML_File_Create+0x1a4>)
 8002508:	f7fd fe6a 	bl	80001e0 <strcmp>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d104      	bne.n	800251c <HTML_File_Create+0x130>
 8002512:	491b      	ldr	r1, [pc, #108]	; (8002580 <HTML_File_Create+0x194>)
 8002514:	4821      	ldr	r0, [pc, #132]	; (800259c <HTML_File_Create+0x1b0>)
 8002516:	f00a fb70 	bl	800cbfa <f_puts>
 800251a:	e003      	b.n	8002524 <HTML_File_Create+0x138>
 800251c:	4918      	ldr	r1, [pc, #96]	; (8002580 <HTML_File_Create+0x194>)
 800251e:	4820      	ldr	r0, [pc, #128]	; (80025a0 <HTML_File_Create+0x1b4>)
 8002520:	f00a fb6b 	bl	800cbfa <f_puts>
			HAL_Delay(10000);
 8002524:	f242 7010 	movw	r0, #10000	; 0x2710
 8002528:	f001 fa80 	bl	8003a2c <HAL_Delay>
//				 	f_mount(NULL, "", 0);
//				 	return 1;
//			  }
//			  else
//			  {
			f_close(&fil);
 800252c:	4814      	ldr	r0, [pc, #80]	; (8002580 <HTML_File_Create+0x194>)
 800252e:	f009 ff90 	bl	800c452 <f_close>
			f_closedir(&dir);
 8002532:	480c      	ldr	r0, [pc, #48]	; (8002564 <HTML_File_Create+0x178>)
 8002534:	f00a fa4e 	bl	800c9d4 <f_closedir>
			fresult = f_mount(NULL, "", 0);
 8002538:	2200      	movs	r2, #0
 800253a:	490b      	ldr	r1, [pc, #44]	; (8002568 <HTML_File_Create+0x17c>)
 800253c:	2000      	movs	r0, #0
 800253e:	f009 fa05 	bl	800b94c <f_mount>
 8002542:	4603      	mov	r3, r0
 8002544:	461a      	mov	r2, r3
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <HTML_File_Create+0x174>)
 8002548:	701a      	strb	r2, [r3, #0]
			return fresult;
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HTML_File_Create+0x174>)
 800254c:	781b      	ldrb	r3, [r3, #0]
//			  }



}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	0801081c 	.word	0x0801081c
 800255c:	20000364 	.word	0x20000364
 8002560:	20002400 	.word	0x20002400
 8002564:	200023cc 	.word	0x200023cc
 8002568:	08010894 	.word	0x08010894
 800256c:	08010a1c 	.word	0x08010a1c
 8002570:	08010a48 	.word	0x08010a48
 8002574:	2000024c 	.word	0x2000024c
 8002578:	08010a78 	.word	0x08010a78
 800257c:	08010a84 	.word	0x08010a84
 8002580:	2000139c 	.word	0x2000139c
 8002584:	08010aa0 	.word	0x08010aa0
 8002588:	08010ac0 	.word	0x08010ac0
 800258c:	080109ac 	.word	0x080109ac
 8002590:	20000240 	.word	0x20000240
 8002594:	08010a14 	.word	0x08010a14
 8002598:	08010ad8 	.word	0x08010ad8
 800259c:	08010dc4 	.word	0x08010dc4
 80025a0:	08014614 	.word	0x08014614

080025a4 <Read_Log_Number>:

uint8_t Read_Log_Number(uint8_t FileNo)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]



	char File_No[10];
	f_mount(&fs, "", 1);
 80025ae:	2201      	movs	r2, #1
 80025b0:	4915      	ldr	r1, [pc, #84]	; (8002608 <Read_Log_Number+0x64>)
 80025b2:	4816      	ldr	r0, [pc, #88]	; (800260c <Read_Log_Number+0x68>)
 80025b4:	f009 f9ca 	bl	800b94c <f_mount>
	f_opendir(&dir, "/");
 80025b8:	4915      	ldr	r1, [pc, #84]	; (8002610 <Read_Log_Number+0x6c>)
 80025ba:	4816      	ldr	r0, [pc, #88]	; (8002614 <Read_Log_Number+0x70>)
 80025bc:	f00a f997 	bl	800c8ee <f_opendir>
	fresult = f_open(&fil, "File_Number.txt", FA_READ | FA_WRITE);
 80025c0:	2203      	movs	r2, #3
 80025c2:	4915      	ldr	r1, [pc, #84]	; (8002618 <Read_Log_Number+0x74>)
 80025c4:	4815      	ldr	r0, [pc, #84]	; (800261c <Read_Log_Number+0x78>)
 80025c6:	f009 fa07 	bl	800b9d8 <f_open>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <Read_Log_Number+0x7c>)
 80025d0:	701a      	strb	r2, [r3, #0]
	f_gets(File_No, sizeof(File_No), &fil);
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	4a11      	ldr	r2, [pc, #68]	; (800261c <Read_Log_Number+0x78>)
 80025d8:	210a      	movs	r1, #10
 80025da:	4618      	mov	r0, r3
 80025dc:	f00a fa59 	bl	800ca92 <f_gets>
	f_close(&fil);
 80025e0:	480e      	ldr	r0, [pc, #56]	; (800261c <Read_Log_Number+0x78>)
 80025e2:	f009 ff36 	bl	800c452 <f_close>
	f_closedir(&dir);
 80025e6:	480b      	ldr	r0, [pc, #44]	; (8002614 <Read_Log_Number+0x70>)
 80025e8:	f00a f9f4 	bl	800c9d4 <f_closedir>
	f_mount(NULL, "", 0);
 80025ec:	2200      	movs	r2, #0
 80025ee:	4906      	ldr	r1, [pc, #24]	; (8002608 <Read_Log_Number+0x64>)
 80025f0:	2000      	movs	r0, #0
 80025f2:	f009 f9ab 	bl	800b94c <f_mount>
	FileNo = (uint8_t)(File_No[0] - '0');
 80025f6:	7b3b      	ldrb	r3, [r7, #12]
 80025f8:	3b30      	subs	r3, #48	; 0x30
 80025fa:	71fb      	strb	r3, [r7, #7]
	return FileNo;
 80025fc:	79fb      	ldrb	r3, [r7, #7]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	08010894 	.word	0x08010894
 800260c:	20000364 	.word	0x20000364
 8002610:	0801081c 	.word	0x0801081c
 8002614:	200023cc 	.word	0x200023cc
 8002618:	08010904 	.word	0x08010904
 800261c:	2000139c 	.word	0x2000139c
 8002620:	20002400 	.word	0x20002400

08002624 <Read_Number_Sys>:


uint8_t Read_Number_Sys(uint8_t sys_type)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
	uint8_t system_type = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	77fb      	strb	r3, [r7, #31]
	char File_No[9];
	f_mount(&fs, "", 1);
 8002632:	2201      	movs	r2, #1
 8002634:	4920      	ldr	r1, [pc, #128]	; (80026b8 <Read_Number_Sys+0x94>)
 8002636:	4821      	ldr	r0, [pc, #132]	; (80026bc <Read_Number_Sys+0x98>)
 8002638:	f009 f988 	bl	800b94c <f_mount>
	f_opendir(&dir, "/");
 800263c:	4920      	ldr	r1, [pc, #128]	; (80026c0 <Read_Number_Sys+0x9c>)
 800263e:	4821      	ldr	r0, [pc, #132]	; (80026c4 <Read_Number_Sys+0xa0>)
 8002640:	f00a f955 	bl	800c8ee <f_opendir>
	fresult = f_open(&fil, "Num_Sys.txt", FA_READ | FA_WRITE);
 8002644:	2203      	movs	r2, #3
 8002646:	4920      	ldr	r1, [pc, #128]	; (80026c8 <Read_Number_Sys+0xa4>)
 8002648:	4820      	ldr	r0, [pc, #128]	; (80026cc <Read_Number_Sys+0xa8>)
 800264a:	f009 f9c5 	bl	800b9d8 <f_open>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <Read_Number_Sys+0xac>)
 8002654:	701a      	strb	r2, [r3, #0]
	f_gets(File_No, sizeof(File_No), &fil);
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <Read_Number_Sys+0xa8>)
 800265c:	2109      	movs	r1, #9
 800265e:	4618      	mov	r0, r3
 8002660:	f00a fa17 	bl	800ca92 <f_gets>
	f_close(&fil);
 8002664:	4819      	ldr	r0, [pc, #100]	; (80026cc <Read_Number_Sys+0xa8>)
 8002666:	f009 fef4 	bl	800c452 <f_close>
	f_closedir(&dir);
 800266a:	4816      	ldr	r0, [pc, #88]	; (80026c4 <Read_Number_Sys+0xa0>)
 800266c:	f00a f9b2 	bl	800c9d4 <f_closedir>
	f_mount(NULL, "", 0);
 8002670:	2200      	movs	r2, #0
 8002672:	4911      	ldr	r1, [pc, #68]	; (80026b8 <Read_Number_Sys+0x94>)
 8002674:	2000      	movs	r0, #0
 8002676:	f009 f969 	bl	800b94c <f_mount>
	char sys1[] = {"GERMAN"};
 800267a:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <Read_Number_Sys+0xb0>)
 800267c:	f107 030c 	add.w	r3, r7, #12
 8002680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002684:	6018      	str	r0, [r3, #0]
 8002686:	3304      	adds	r3, #4
 8002688:	8019      	strh	r1, [r3, #0]
 800268a:	3302      	adds	r3, #2
 800268c:	0c0a      	lsrs	r2, r1, #16
 800268e:	701a      	strb	r2, [r3, #0]
	system_type = (strcmp(File_No , sys1)==0) ? 1 : 2;
 8002690:	f107 020c 	add.w	r2, r7, #12
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd fda0 	bl	80001e0 <strcmp>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <Read_Number_Sys+0x86>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <Read_Number_Sys+0x88>
 80026aa:	2302      	movs	r3, #2
 80026ac:	77fb      	strb	r3, [r7, #31]
	return system_type;
 80026ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	08010894 	.word	0x08010894
 80026bc:	20000364 	.word	0x20000364
 80026c0:	0801081c 	.word	0x0801081c
 80026c4:	200023cc 	.word	0x200023cc
 80026c8:	080109ac 	.word	0x080109ac
 80026cc:	2000139c 	.word	0x2000139c
 80026d0:	20002400 	.word	0x20002400
 80026d4:	08010a14 	.word	0x08010a14

080026d8 <Create_DataLog_File>:



void Create_DataLog_File()
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0

    char File[20];
    NumberSystem = Read_Number_Sys(NumberSystem);
 80026de:	4b25      	ldr	r3, [pc, #148]	; (8002774 <Create_DataLog_File+0x9c>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff9e 	bl	8002624 <Read_Number_Sys>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b21      	ldr	r3, [pc, #132]	; (8002774 <Create_DataLog_File+0x9c>)
 80026ee:	701a      	strb	r2, [r3, #0]
    sprintf(File, "%s%d.csv", File_Name, Current_Log_File_No);
 80026f0:	4b21      	ldr	r3, [pc, #132]	; (8002778 <Create_DataLog_File+0xa0>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	4638      	mov	r0, r7
 80026f6:	4a21      	ldr	r2, [pc, #132]	; (800277c <Create_DataLog_File+0xa4>)
 80026f8:	4921      	ldr	r1, [pc, #132]	; (8002780 <Create_DataLog_File+0xa8>)
 80026fa:	f00b f9b3 	bl	800da64 <siprintf>
    fresult = f_mount(&fs, "", 1);
 80026fe:	2201      	movs	r2, #1
 8002700:	4920      	ldr	r1, [pc, #128]	; (8002784 <Create_DataLog_File+0xac>)
 8002702:	4821      	ldr	r0, [pc, #132]	; (8002788 <Create_DataLog_File+0xb0>)
 8002704:	f009 f922 	bl	800b94c <f_mount>
 8002708:	4603      	mov	r3, r0
 800270a:	461a      	mov	r2, r3
 800270c:	4b1f      	ldr	r3, [pc, #124]	; (800278c <Create_DataLog_File+0xb4>)
 800270e:	701a      	strb	r2, [r3, #0]
    f_opendir(&dir, "/");
 8002710:	491f      	ldr	r1, [pc, #124]	; (8002790 <Create_DataLog_File+0xb8>)
 8002712:	4820      	ldr	r0, [pc, #128]	; (8002794 <Create_DataLog_File+0xbc>)
 8002714:	f00a f8eb 	bl	800c8ee <f_opendir>
    fresult = f_open(&fil, File, FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8002718:	463b      	mov	r3, r7
 800271a:	220b      	movs	r2, #11
 800271c:	4619      	mov	r1, r3
 800271e:	481e      	ldr	r0, [pc, #120]	; (8002798 <Create_DataLog_File+0xc0>)
 8002720:	f009 f95a 	bl	800b9d8 <f_open>
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <Create_DataLog_File+0xb4>)
 800272a:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800272c:	4b17      	ldr	r3, [pc, #92]	; (800278c <Create_DataLog_File+0xb4>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d112      	bne.n	800275a <Create_DataLog_File+0x82>
    {

    	const char* header = (NumberSystem == 1)
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <Create_DataLog_File+0x9c>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <Create_DataLog_File+0x68>
 800273c:	4b17      	ldr	r3, [pc, #92]	; (800279c <Create_DataLog_File+0xc4>)
 800273e:	e000      	b.n	8002742 <Create_DataLog_File+0x6a>
 8002740:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <Create_DataLog_File+0xc8>)
 8002742:	617b      	str	r3, [r7, #20]
    	    ? "Time; X-axis; Y-axis; Z-axis; On_brd_TEMP; TEMP1; TEMP2; TEMP3; 40khz;R_Water;Pressure; Sleep_cnt \n"
    	    : "Time, X-axis, Y-axis, Z-axis, On_brd_TEMP, TEMP1, TEMP2, TEMP3, 40khz,R_Water,Pressure, Sleep_cnt \n";

    	f_puts(header, &fil);
 8002744:	4914      	ldr	r1, [pc, #80]	; (8002798 <Create_DataLog_File+0xc0>)
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f00a fa57 	bl	800cbfa <f_puts>
        f_close(&fil);
 800274c:	4812      	ldr	r0, [pc, #72]	; (8002798 <Create_DataLog_File+0xc0>)
 800274e:	f009 fe80 	bl	800c452 <f_close>
        UART_Printf("Data_log file created and attributes loaded\n");
 8002752:	4814      	ldr	r0, [pc, #80]	; (80027a4 <Create_DataLog_File+0xcc>)
 8002754:	f000 fb3c 	bl	8002dd0 <UART_Printf>
 8002758:	e002      	b.n	8002760 <Create_DataLog_File+0x88>
    }
    else
    {
        UART_Printf("Issue while open Data_log file \n");
 800275a:	4813      	ldr	r0, [pc, #76]	; (80027a8 <Create_DataLog_File+0xd0>)
 800275c:	f000 fb38 	bl	8002dd0 <UART_Printf>
    }
    f_mount(NULL, "", 0);
 8002760:	2200      	movs	r2, #0
 8002762:	4908      	ldr	r1, [pc, #32]	; (8002784 <Create_DataLog_File+0xac>)
 8002764:	2000      	movs	r0, #0
 8002766:	f009 f8f1 	bl	800b94c <f_mount>
}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000024a 	.word	0x2000024a
 8002778:	20002605 	.word	0x20002605
 800277c:	08017e5c 	.word	0x08017e5c
 8002780:	08010b18 	.word	0x08010b18
 8002784:	08010894 	.word	0x08010894
 8002788:	20000364 	.word	0x20000364
 800278c:	20002400 	.word	0x20002400
 8002790:	0801081c 	.word	0x0801081c
 8002794:	200023cc 	.word	0x200023cc
 8002798:	2000139c 	.word	0x2000139c
 800279c:	08010b24 	.word	0x08010b24
 80027a0:	08010b88 	.word	0x08010b88
 80027a4:	08010bec 	.word	0x08010bec
 80027a8:	08010c1c 	.word	0x08010c1c

080027ac <DATA_LOG>:

//extern DataSet Store_Data();

void DATA_LOG()
{
 80027ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b0:	b0ec      	sub	sp, #432	; 0x1b0
 80027b2:	af16      	add	r7, sp, #88	; 0x58
	 char buffer[200];

	 DataSet data = Store_Data();
 80027b4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80027b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe ff11 	bl	80015e4 <Store_Data>

	  if(NumberSystem==2)//USA
 80027c2:	4bb4      	ldr	r3, [pc, #720]	; (8002a94 <DATA_LOG+0x2e8>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	f040 80a4 	bne.w	8002914 <DATA_LOG+0x168>
	  {
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 80027cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80027d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fece 	bl	8000578 <__aeabi_f2d>
 80027dc:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 80027e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80027e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fec4 	bl	8000578 <__aeabi_f2d>
 80027f0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80027f4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80027f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd feba 	bl	8000578 <__aeabi_f2d>
 8002804:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8002808:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800280c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd feb0 	bl	8000578 <__aeabi_f2d>
 8002818:	e9c7 0108 	strd	r0, r1, [r7, #32]
					data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 800281c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002820:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002824:	691b      	ldr	r3, [r3, #16]
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fea6 	bl	8000578 <__aeabi_f2d>
 800282c:	e9c7 0106 	strd	r0, r1, [r7, #24]
					data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 8002830:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002834:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002838:	695b      	ldr	r3, [r3, #20]
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 800283a:	4618      	mov	r0, r3
 800283c:	f7fd fe9c 	bl	8000578 <__aeabi_f2d>
 8002840:	e9c7 0104 	strd	r0, r1, [r7, #16]
					data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 8002844:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002848:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800284c:	699b      	ldr	r3, [r3, #24]
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe92 	bl	8000578 <__aeabi_f2d>
 8002854:	e9c7 0102 	strd	r0, r1, [r7, #8]
					data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 8002858:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800285c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002860:	69db      	ldr	r3, [r3, #28]
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd fe88 	bl	8000578 <__aeabi_f2d>
 8002868:	e9c7 0100 	strd	r0, r1, [r7]
					data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 800286c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002870:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002874:	6a1b      	ldr	r3, [r3, #32]
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe7e 	bl	8000578 <__aeabi_f2d>
 800287c:	4682      	mov	sl, r0
 800287e:	468b      	mov	fp, r1
					data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 8002880:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002884:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 800288a:	4618      	mov	r0, r3
 800288c:	f7fd fe74 	bl	8000578 <__aeabi_f2d>
 8002890:	4680      	mov	r8, r0
 8002892:	4689      	mov	r9, r1
					data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 8002894:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002898:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe6a 	bl	8000578 <__aeabi_f2d>
 80028a4:	4604      	mov	r4, r0
 80028a6:	460d      	mov	r5, r1
					data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 80028a8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80028ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		  sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fe60 	bl	8000578 <__aeabi_f2d>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80028c0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80028c4:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 80028c8:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80028cc:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 80028d0:	ed97 7b00 	vldr	d7, [r7]
 80028d4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80028d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80028dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80028e0:	ed97 7b04 	vldr	d7, [r7, #16]
 80028e4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80028e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80028ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80028f0:	ed97 7b08 	vldr	d7, [r7, #32]
 80028f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80028f8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80028fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002900:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002904:	ed8d 7b00 	vstr	d7, [sp]
 8002908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800290c:	4962      	ldr	r1, [pc, #392]	; (8002a98 <DATA_LOG+0x2ec>)
 800290e:	f00b f8a9 	bl	800da64 <siprintf>
 8002912:	e0d6      	b.n	8002ac2 <DATA_LOG+0x316>
	  }
	  else if(NumberSystem==1)//GERMAN
 8002914:	4b5f      	ldr	r3, [pc, #380]	; (8002a94 <DATA_LOG+0x2e8>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	f040 80d2 	bne.w	8002ac2 <DATA_LOG+0x316>
	  {
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 800291e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002922:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe25 	bl	8000578 <__aeabi_f2d>
 800292e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8002932:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002936:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fe1b 	bl	8000578 <__aeabi_f2d>
 8002942:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8002946:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800294a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fe11 	bl	8000578 <__aeabi_f2d>
 8002956:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 800295a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800295e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4618      	mov	r0, r3
 8002966:	f7fd fe07 	bl	8000578 <__aeabi_f2d>
 800296a:	e9c7 0108 	strd	r0, r1, [r7, #32]
				data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 800296e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002972:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002976:	691b      	ldr	r3, [r3, #16]
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fdfd 	bl	8000578 <__aeabi_f2d>
 800297e:	e9c7 0106 	strd	r0, r1, [r7, #24]
				data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 8002982:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002986:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800298a:	695b      	ldr	r3, [r3, #20]
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fdf3 	bl	8000578 <__aeabi_f2d>
 8002992:	e9c7 0104 	strd	r0, r1, [r7, #16]
				data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 8002996:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800299a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800299e:	699b      	ldr	r3, [r3, #24]
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fde9 	bl	8000578 <__aeabi_f2d>
 80029a6:	e9c7 0102 	strd	r0, r1, [r7, #8]
				data.On_Board_Temp, data.EXT_Temp1, data.EXT_Temp2, data.EXT_Temp3,
 80029aa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029b2:	69db      	ldr	r3, [r3, #28]
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fddf 	bl	8000578 <__aeabi_f2d>
 80029ba:	e9c7 0100 	strd	r0, r1, [r7]
				data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 80029be:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029c6:	6a1b      	ldr	r3, [r3, #32]
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fdd5 	bl	8000578 <__aeabi_f2d>
 80029ce:	4682      	mov	sl, r0
 80029d0:	468b      	mov	fp, r1
				data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 80029d2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fdcb 	bl	8000578 <__aeabi_f2d>
 80029e2:	4680      	mov	r8, r0
 80029e4:	4689      	mov	r9, r1
				data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 80029e6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fdc1 	bl	8000578 <__aeabi_f2d>
 80029f6:	4604      	mov	r4, r0
 80029f8:	460d      	mov	r5, r1
				data.Amplitude, data.Water_Resistance, data.Pressure, data.Sleep_Count); // @suppress("Float formatting support")
 80029fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80029fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	  sprintf(buffer, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f \n", data.Timer_Count, data.XAxis, data.YAxis, data.ZAxis,
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fdb7 	bl	8000578 <__aeabi_f2d>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002a12:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8002a16:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8002a1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8002a1e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8002a22:	ed97 7b00 	vldr	d7, [r7]
 8002a26:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002a2a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a2e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002a32:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a36:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002a3a:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002a42:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a46:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002a4a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002a4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002a52:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002a56:	ed8d 7b00 	vstr	d7, [sp]
 8002a5a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a5e:	490f      	ldr	r1, [pc, #60]	; (8002a9c <DATA_LOG+0x2f0>)
 8002a60:	f00b f800 	bl	800da64 <siprintf>

	  for( int i=0;i<sizeof(buffer);i++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a6a:	e026      	b.n	8002aba <DATA_LOG+0x30e>
	  {
		  switch (buffer[i])
 8002a6c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a70:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002a74:	4413      	add	r3, r2
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b2c      	cmp	r3, #44	; 0x2c
 8002a7a:	d002      	beq.n	8002a82 <DATA_LOG+0x2d6>
 8002a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8002a7e:	d00f      	beq.n	8002aa0 <DATA_LOG+0x2f4>
 8002a80:	e016      	b.n	8002ab0 <DATA_LOG+0x304>
		  {
		  case ',':
			  buffer[i]=';';
 8002a82:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a86:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002a8a:	4413      	add	r3, r2
 8002a8c:	223b      	movs	r2, #59	; 0x3b
 8002a8e:	701a      	strb	r2, [r3, #0]
			  break;
 8002a90:	e00e      	b.n	8002ab0 <DATA_LOG+0x304>
 8002a92:	bf00      	nop
 8002a94:	2000024a 	.word	0x2000024a
 8002a98:	08010c40 	.word	0x08010c40
 8002a9c:	08010c68 	.word	0x08010c68
		  case '.':
			  buffer[i] = ',';
 8002aa0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002aa4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002aa8:	4413      	add	r3, r2
 8002aaa:	222c      	movs	r2, #44	; 0x2c
 8002aac:	701a      	strb	r2, [r3, #0]
			  break;
 8002aae:	bf00      	nop
	  for( int i=0;i<sizeof(buffer);i++)
 8002ab0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002aba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002abe:	2bc7      	cmp	r3, #199	; 0xc7
 8002ac0:	d9d4      	bls.n	8002a6c <DATA_LOG+0x2c0>
	  }
	  }
	  }

	  	  int File_Size = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	  	  char temp[20];
	  	f_mount(&fs, "", 1);
 8002ac8:	2201      	movs	r2, #1
 8002aca:	492b      	ldr	r1, [pc, #172]	; (8002b78 <DATA_LOG+0x3cc>)
 8002acc:	482b      	ldr	r0, [pc, #172]	; (8002b7c <DATA_LOG+0x3d0>)
 8002ace:	f008 ff3d 	bl	800b94c <f_mount>
	  	f_opendir(&dir, "/");
 8002ad2:	492b      	ldr	r1, [pc, #172]	; (8002b80 <DATA_LOG+0x3d4>)
 8002ad4:	482b      	ldr	r0, [pc, #172]	; (8002b84 <DATA_LOG+0x3d8>)
 8002ad6:	f009 ff0a 	bl	800c8ee <f_opendir>
	  	sprintf(temp, "%s%d.csv", File_Name,Current_Log_File_No);
 8002ada:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <DATA_LOG+0x3dc>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002ae2:	4a2a      	ldr	r2, [pc, #168]	; (8002b8c <DATA_LOG+0x3e0>)
 8002ae4:	492a      	ldr	r1, [pc, #168]	; (8002b90 <DATA_LOG+0x3e4>)
 8002ae6:	f00a ffbd 	bl	800da64 <siprintf>
	  	f_open(&fil, temp, FA_READ | FA_WRITE);
 8002aea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002aee:	2203      	movs	r2, #3
 8002af0:	4619      	mov	r1, r3
 8002af2:	4828      	ldr	r0, [pc, #160]	; (8002b94 <DATA_LOG+0x3e8>)
 8002af4:	f008 ff70 	bl	800b9d8 <f_open>
	  	f_lseek(&fil, f_size(&fil));
 8002af8:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <DATA_LOG+0x3e8>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4619      	mov	r1, r3
 8002afe:	4825      	ldr	r0, [pc, #148]	; (8002b94 <DATA_LOG+0x3e8>)
 8002b00:	f009 fcd1 	bl	800c4a6 <f_lseek>
	  	fresult = f_puts(buffer, &fil);
 8002b04:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002b08:	4922      	ldr	r1, [pc, #136]	; (8002b94 <DATA_LOG+0x3e8>)
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f00a f875 	bl	800cbfa <f_puts>
 8002b10:	4603      	mov	r3, r0
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <DATA_LOG+0x3ec>)
 8002b16:	701a      	strb	r2, [r3, #0]
	  	f_stat(temp, &fileInfo);
 8002b18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b1c:	491f      	ldr	r1, [pc, #124]	; (8002b9c <DATA_LOG+0x3f0>)
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f009 ff7e 	bl	800ca20 <f_stat>
	  	File_Size = fileInfo.fsize;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <DATA_LOG+0x3f0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	  	f_close(&fil);
 8002b2c:	4819      	ldr	r0, [pc, #100]	; (8002b94 <DATA_LOG+0x3e8>)
 8002b2e:	f009 fc90 	bl	800c452 <f_close>
	  	f_closedir(&dir);
 8002b32:	4814      	ldr	r0, [pc, #80]	; (8002b84 <DATA_LOG+0x3d8>)
 8002b34:	f009 ff4e 	bl	800c9d4 <f_closedir>
	  	f_mount(NULL, "", 0);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	490f      	ldr	r1, [pc, #60]	; (8002b78 <DATA_LOG+0x3cc>)
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f008 ff05 	bl	800b94c <f_mount>
	  	if(Log_File_Num == 0)
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <DATA_LOG+0x3f4>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	f083 0301 	eor.w	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <DATA_LOG+0x3ae>
	  	{
	  		Update_Log_Num();
 8002b50:	f000 f82a 	bl	8002ba8 <Update_Log_Num>
	  		Log_File_Num = 1;
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <DATA_LOG+0x3f4>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
	    }
	  	UART_Printf("Data saved in log file = %s%d file size = %d Bytes\n",File_Name,Current_Log_File_No,File_Size);
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <DATA_LOG+0x3dc>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002b64:	4909      	ldr	r1, [pc, #36]	; (8002b8c <DATA_LOG+0x3e0>)
 8002b66:	480f      	ldr	r0, [pc, #60]	; (8002ba4 <DATA_LOG+0x3f8>)
 8002b68:	f000 f932 	bl	8002dd0 <UART_Printf>
}
 8002b6c:	bf00      	nop
 8002b6e:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8002b72:	46bd      	mov	sp, r7
 8002b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b78:	08010894 	.word	0x08010894
 8002b7c:	20000364 	.word	0x20000364
 8002b80:	0801081c 	.word	0x0801081c
 8002b84:	200023cc 	.word	0x200023cc
 8002b88:	20002605 	.word	0x20002605
 8002b8c:	08017e5c 	.word	0x08017e5c
 8002b90:	08010b18 	.word	0x08010b18
 8002b94:	2000139c 	.word	0x2000139c
 8002b98:	20002400 	.word	0x20002400
 8002b9c:	2000024c 	.word	0x2000024c
 8002ba0:	2000023c 	.word	0x2000023c
 8002ba4:	08010c90 	.word	0x08010c90

08002ba8 <Update_Log_Num>:

void Update_Log_Num()
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
	uint8_t Log_Number = Current_Log_File_No+1;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <Update_Log_Num+0x70>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
	char Log[10];
	sprintf(Log,"%d",Log_Number);
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	1d3b      	adds	r3, r7, #4
 8002bba:	4918      	ldr	r1, [pc, #96]	; (8002c1c <Update_Log_Num+0x74>)
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f00a ff51 	bl	800da64 <siprintf>
	f_mount( & fs, "/", 1);
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4916      	ldr	r1, [pc, #88]	; (8002c20 <Update_Log_Num+0x78>)
 8002bc6:	4817      	ldr	r0, [pc, #92]	; (8002c24 <Update_Log_Num+0x7c>)
 8002bc8:	f008 fec0 	bl	800b94c <f_mount>
	f_opendir(&dir, "/");
 8002bcc:	4914      	ldr	r1, [pc, #80]	; (8002c20 <Update_Log_Num+0x78>)
 8002bce:	4816      	ldr	r0, [pc, #88]	; (8002c28 <Update_Log_Num+0x80>)
 8002bd0:	f009 fe8d 	bl	800c8ee <f_opendir>
	f_stat("File_Number.txt", & fileInfo);
 8002bd4:	4915      	ldr	r1, [pc, #84]	; (8002c2c <Update_Log_Num+0x84>)
 8002bd6:	4816      	ldr	r0, [pc, #88]	; (8002c30 <Update_Log_Num+0x88>)
 8002bd8:	f009 ff22 	bl	800ca20 <f_stat>
	f_open(&fil, "File_Number.txt", FA_WRITE | FA_READ);
 8002bdc:	2203      	movs	r2, #3
 8002bde:	4914      	ldr	r1, [pc, #80]	; (8002c30 <Update_Log_Num+0x88>)
 8002be0:	4814      	ldr	r0, [pc, #80]	; (8002c34 <Update_Log_Num+0x8c>)
 8002be2:	f008 fef9 	bl	800b9d8 <f_open>
	f_puts(Log, &fil);
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	4912      	ldr	r1, [pc, #72]	; (8002c34 <Update_Log_Num+0x8c>)
 8002bea:	4618      	mov	r0, r3
 8002bec:	f00a f805 	bl	800cbfa <f_puts>
	f_close(&fil);
 8002bf0:	4810      	ldr	r0, [pc, #64]	; (8002c34 <Update_Log_Num+0x8c>)
 8002bf2:	f009 fc2e 	bl	800c452 <f_close>
	f_closedir(&dir);
 8002bf6:	480c      	ldr	r0, [pc, #48]	; (8002c28 <Update_Log_Num+0x80>)
 8002bf8:	f009 feec 	bl	800c9d4 <f_closedir>
	f_mount(NULL, "", 0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	490e      	ldr	r1, [pc, #56]	; (8002c38 <Update_Log_Num+0x90>)
 8002c00:	2000      	movs	r0, #0
 8002c02:	f008 fea3 	bl	800b94c <f_mount>
	UART_Printf("Log Number Updated %d \n",Log_Number);
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	480c      	ldr	r0, [pc, #48]	; (8002c3c <Update_Log_Num+0x94>)
 8002c0c:	f000 f8e0 	bl	8002dd0 <UART_Printf>

}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20002605 	.word	0x20002605
 8002c1c:	08010cc4 	.word	0x08010cc4
 8002c20:	0801081c 	.word	0x0801081c
 8002c24:	20000364 	.word	0x20000364
 8002c28:	200023cc 	.word	0x200023cc
 8002c2c:	2000024c 	.word	0x2000024c
 8002c30:	08010904 	.word	0x08010904
 8002c34:	2000139c 	.word	0x2000139c
 8002c38:	08010894 	.word	0x08010894
 8002c3c:	08010cc8 	.word	0x08010cc8

08002c40 <MX_TIM3_Init>:
#include "Define.h"
/**
 * @brief Initializes TIM3 for a specific purpose, like periodic interrupts.
 */
void MX_TIM3_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c46:	f107 0308 	add.w	r3, r7, #8
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c54:	463b      	mov	r3, r7
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002c5e:	4a1e      	ldr	r2, [pc, #120]	; (8002cd8 <MX_TIM3_Init+0x98>)
 8002c60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9199;
 8002c62:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002c64:	f242 32ef 	movw	r2, #9199	; 0x23ef
 8002c68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = ((Loop_Time*10)-1);
 8002c70:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002c72:	f241 3287 	movw	r2, #4999	; 0x1387
 8002c76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c84:	4813      	ldr	r0, [pc, #76]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002c86:	f004 fc49 	bl	800751c <HAL_TIM_Base_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002c90:	f000 fb2c 	bl	80032ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c9a:	f107 0308 	add.w	r3, r7, #8
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	480c      	ldr	r0, [pc, #48]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002ca2:	f004 fddd 	bl	8007860 <HAL_TIM_ConfigClockSource>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002cac:	f000 fb1e 	bl	80032ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cb8:	463b      	mov	r3, r7
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4805      	ldr	r0, [pc, #20]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002cbe:	f004 ffe5 	bl	8007c8c <HAL_TIMEx_MasterConfigSynchronization>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002cc8:	f000 fb10 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ccc:	bf00      	nop
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	2000252c 	.word	0x2000252c
 8002cd8:	40000400 	.word	0x40000400

08002cdc <MX_TIM4_Init>:

/**
 * @brief Initializes TIM4 for a specific purpose, like periodic interrupts.
 */
void MX_TIM4_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ce2:	f107 0308 	add.w	r3, r7, #8
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf0:	463b      	mov	r3, r7
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002cfa:	4a1e      	ldr	r2, [pc, #120]	; (8002d74 <MX_TIM4_Init+0x98>)
 8002cfc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9199;
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d00:	f242 32ef 	movw	r2, #9199	; 0x23ef
 8002d04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d06:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = ((Sleep_Time*10)-1);
 8002d0c:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d0e:	4a1a      	ldr	r2, [pc, #104]	; (8002d78 <MX_TIM4_Init+0x9c>)
 8002d10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d12:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d18:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d1e:	4814      	ldr	r0, [pc, #80]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d20:	f004 fbfc 	bl	800751c <HAL_TIM_Base_Init>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002d2a:	f000 fadf 	bl	80032ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d34:	f107 0308 	add.w	r3, r7, #8
 8002d38:	4619      	mov	r1, r3
 8002d3a:	480d      	ldr	r0, [pc, #52]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d3c:	f004 fd90 	bl	8007860 <HAL_TIM_ConfigClockSource>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002d46:	f000 fad1 	bl	80032ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d52:	463b      	mov	r3, r7
 8002d54:	4619      	mov	r1, r3
 8002d56:	4806      	ldr	r0, [pc, #24]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d58:	f004 ff98 	bl	8007c8c <HAL_TIMEx_MasterConfigSynchronization>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002d62:	f000 fac3 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20002574 	.word	0x20002574
 8002d74:	40000800 	.word	0x40000800
 8002d78:	0001869f 	.word	0x0001869f

08002d7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART1_UART_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <MX_USART1_UART_Init+0x4c>)
 8002d82:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <MX_USART1_UART_Init+0x50>)
 8002d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <MX_USART1_UART_Init+0x4c>)
 8002d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <MX_USART1_UART_Init+0x4c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <MX_USART1_UART_Init+0x4c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <MX_USART1_UART_Init+0x4c>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <MX_USART1_UART_Init+0x4c>)
 8002da2:	220c      	movs	r2, #12
 8002da4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <MX_USART1_UART_Init+0x4c>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <MX_USART1_UART_Init+0x4c>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002db2:	4805      	ldr	r0, [pc, #20]	; (8002dc8 <MX_USART1_UART_Init+0x4c>)
 8002db4:	f004 ffec 	bl	8007d90 <HAL_UART_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002dbe:	f000 fa95 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200025bc 	.word	0x200025bc
 8002dcc:	40011000 	.word	0x40011000

08002dd0 <UART_Printf>:


 //-------------------------------------UART PRINT -->BEGIN-------------------------------------------//
 void UART_Printf(const char * fmt, ...) {
 8002dd0:	b40f      	push	{r0, r1, r2, r3}
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b0c2      	sub	sp, #264	; 0x108
 8002dd6:	af00      	add	r7, sp, #0
   char buff[256];
   va_list args;
   va_start(args, fmt);
 8002dd8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8002ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002de0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002de4:	601a      	str	r2, [r3, #0]
   vsnprintf(buff, sizeof(buff), fmt, args);
 8002de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002dea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002dee:	f107 0008 	add.w	r0, r7, #8
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dfc:	f00a fec0 	bl	800db80 <vsniprintf>
   HAL_UART_Transmit( & huart1, (uint8_t * ) buff, strlen(buff), HAL_MAX_DELAY);
 8002e00:	f107 0308 	add.w	r3, r7, #8
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd fa4b 	bl	80002a0 <strlen>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	f107 0108 	add.w	r1, r7, #8
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	4805      	ldr	r0, [pc, #20]	; (8002e2c <UART_Printf+0x5c>)
 8002e18:	f005 f80a 	bl	8007e30 <HAL_UART_Transmit>
   va_end(args);
 }
 8002e1c:	bf00      	nop
 8002e1e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002e22:	46bd      	mov	sp, r7
 8002e24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e28:	b004      	add	sp, #16
 8002e2a:	4770      	bx	lr
 8002e2c:	200025bc 	.word	0x200025bc

08002e30 <Ultrasonic_Amplitude>:
#include "Ultrasonic.h"


float U_adcBuffer = 0;
float Ultrasonic_Amplitude(float U_amp)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	ed87 0a01 	vstr	s0, [r7, #4]

					ADC_ChannelConfTypeDef sConfig = {0};
 8002e3a:	f107 030c 	add.w	r3, r7, #12
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	609a      	str	r2, [r3, #8]
 8002e46:	60da      	str	r2, [r3, #12]
		    		 sConfig.Channel = ADC_CHANNEL_0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
		    		 sConfig.Rank = 1;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
		    		 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
		    			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e54:	f107 030c 	add.w	r3, r7, #12
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4831      	ldr	r0, [pc, #196]	; (8002f20 <Ultrasonic_Amplitude+0xf0>)
 8002e5c:	f000 ffee 	bl	8003e3c <HAL_ADC_ConfigChannel>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <Ultrasonic_Amplitude+0x3a>
		    			  {
		    			      Error_Handler();
 8002e66:	f000 fa41 	bl	80032ec <Error_Handler>
		    			  }
		    			  HAL_ADC_Start(&hadc1);
 8002e6a:	482d      	ldr	r0, [pc, #180]	; (8002f20 <Ultrasonic_Amplitude+0xf0>)
 8002e6c:	f000 fe66 	bl	8003b3c <HAL_ADC_Start>
		    			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002e70:	f04f 31ff 	mov.w	r1, #4294967295
 8002e74:	482a      	ldr	r0, [pc, #168]	; (8002f20 <Ultrasonic_Amplitude+0xf0>)
 8002e76:	f000 ff48 	bl	8003d0a <HAL_ADC_PollForConversion>
		    			  U_adcBuffer = HAL_ADC_GetValue(&hadc1);
 8002e7a:	4829      	ldr	r0, [pc, #164]	; (8002f20 <Ultrasonic_Amplitude+0xf0>)
 8002e7c:	f000 ffd0 	bl	8003e20 <HAL_ADC_GetValue>
 8002e80:	ee07 0a90 	vmov	s15, r0
 8002e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e88:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <Ultrasonic_Amplitude+0xf4>)
 8002e8a:	edc3 7a00 	vstr	s15, [r3]
		    			  HAL_ADC_Stop(&hadc1);
 8002e8e:	4824      	ldr	r0, [pc, #144]	; (8002f20 <Ultrasonic_Amplitude+0xf0>)
 8002e90:	f000 ff08 	bl	8003ca4 <HAL_ADC_Stop>

		    			  float khz = 20*log(U_adcBuffer/2234.2);
 8002e94:	4b23      	ldr	r3, [pc, #140]	; (8002f24 <Ultrasonic_Amplitude+0xf4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fb6d 	bl	8000578 <__aeabi_f2d>
 8002e9e:	a31e      	add	r3, pc, #120	; (adr r3, 8002f18 <Ultrasonic_Amplitude+0xe8>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f7fd fcea 	bl	800087c <__aeabi_ddiv>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	ec43 2b17 	vmov	d7, r2, r3
 8002eb0:	eeb0 0a47 	vmov.f32	s0, s14
 8002eb4:	eef0 0a67 	vmov.f32	s1, s15
 8002eb8:	f00c feba 	bl	800fc30 <log>
 8002ebc:	ec51 0b10 	vmov	r0, r1, d0
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <Ultrasonic_Amplitude+0xf8>)
 8002ec6:	f7fd fbaf 	bl	8000628 <__aeabi_dmul>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f7fd fe81 	bl	8000bd8 <__aeabi_d2f>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	61fb      	str	r3, [r7, #28]
		    			  if (!isfinite(khz) || isnan(khz))
 8002eda:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ede:	eef0 7ae7 	vabs.f32	s15, s15
 8002ee2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002f2c <Ultrasonic_Amplitude+0xfc>
 8002ee6:	eef4 7a47 	vcmp.f32	s15, s14
 8002eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eee:	d808      	bhi.n	8002f02 <Ultrasonic_Amplitude+0xd2>
 8002ef0:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ef4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ef8:	eeb4 7a67 	vcmp.f32	s14, s15
 8002efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f00:	d702      	bvc.n	8002f08 <Ultrasonic_Amplitude+0xd8>
		    			  {
		    			         return 0.0; // Return 0 if value is -inf, inf, or nan
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e000      	b.n	8002f0a <Ultrasonic_Amplitude+0xda>
		    			  }
		    			  return khz;
 8002f08:	69fb      	ldr	r3, [r7, #28]


}
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	66666666 	.word	0x66666666
 8002f1c:	40a17466 	.word	0x40a17466
 8002f20:	2000240c 	.word	0x2000240c
 8002f24:	20002404 	.word	0x20002404
 8002f28:	40340000 	.word	0x40340000
 8002f2c:	7f7fffff 	.word	0x7f7fffff

08002f30 <Water_Res>:
#include "ADC.h"
#include "Water_Resistance.h"

float w_adcBuffer = 0;
float Water_Res(float W_res)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	ed87 0a01 	vstr	s0, [r7, #4]

					ADC_ChannelConfTypeDef sConfig = {0};
 8002f3a:	f107 0308 	add.w	r3, r7, #8
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	60da      	str	r2, [r3, #12]
		    		 sConfig.Channel = ADC_CHANNEL_8;
 8002f48:	2308      	movs	r3, #8
 8002f4a:	60bb      	str	r3, [r7, #8]
		    		 sConfig.Rank = 1;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
		    		 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]
		    			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f54:	f107 0308 	add.w	r3, r7, #8
 8002f58:	4619      	mov	r1, r3
 8002f5a:	483f      	ldr	r0, [pc, #252]	; (8003058 <Water_Res+0x128>)
 8002f5c:	f000 ff6e 	bl	8003e3c <HAL_ADC_ConfigChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <Water_Res+0x3a>
		    			  {
		    			      Error_Handler();
 8002f66:	f000 f9c1 	bl	80032ec <Error_Handler>
		    			  }
		    			  HAL_ADC_Start(&hadc1);
 8002f6a:	483b      	ldr	r0, [pc, #236]	; (8003058 <Water_Res+0x128>)
 8002f6c:	f000 fde6 	bl	8003b3c <HAL_ADC_Start>
		    			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002f70:	f04f 31ff 	mov.w	r1, #4294967295
 8002f74:	4838      	ldr	r0, [pc, #224]	; (8003058 <Water_Res+0x128>)
 8002f76:	f000 fec8 	bl	8003d0a <HAL_ADC_PollForConversion>
		    			  w_adcBuffer = HAL_ADC_GetValue(&hadc1);
 8002f7a:	4837      	ldr	r0, [pc, #220]	; (8003058 <Water_Res+0x128>)
 8002f7c:	f000 ff50 	bl	8003e20 <HAL_ADC_GetValue>
 8002f80:	ee07 0a90 	vmov	s15, r0
 8002f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f88:	4b34      	ldr	r3, [pc, #208]	; (800305c <Water_Res+0x12c>)
 8002f8a:	edc3 7a00 	vstr	s15, [r3]
		    			  HAL_ADC_Stop(&hadc1);
 8002f8e:	4832      	ldr	r0, [pc, #200]	; (8003058 <Water_Res+0x128>)
 8002f90:	f000 fe88 	bl	8003ca4 <HAL_ADC_Stop>
		    			  float OP_voltage = w_adcBuffer * Volt_Ref / ADC_Res;
 8002f94:	4b31      	ldr	r3, [pc, #196]	; (800305c <Water_Res+0x12c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd faed 	bl	8000578 <__aeabi_f2d>
 8002f9e:	a328      	add	r3, pc, #160	; (adr r3, 8003040 <Water_Res+0x110>)
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	f7fd fb40 	bl	8000628 <__aeabi_dmul>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	a325      	add	r3, pc, #148	; (adr r3, 8003048 <Water_Res+0x118>)
 8002fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb6:	f7fd fc61 	bl	800087c <__aeabi_ddiv>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f7fd fe09 	bl	8000bd8 <__aeabi_d2f>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	61fb      	str	r3, [r7, #28]
		    			  float Rwater = ((1000 * Volt_Ref)/ OP_voltage)-1000;// 1000 IS 1K ITS USED IN VOLT DIVIDER CIRCUIT IN DATALOGGER formula:R1 = ((R2XVIN)/VOUT)-R2
 8002fca:	69f8      	ldr	r0, [r7, #28]
 8002fcc:	f7fd fad4 	bl	8000578 <__aeabi_f2d>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	a11e      	add	r1, pc, #120	; (adr r1, 8003050 <Water_Res+0x120>)
 8002fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fda:	f7fd fc4f 	bl	800087c <__aeabi_ddiv>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <Water_Res+0x130>)
 8002fec:	f7fd f964 	bl	80002b8 <__aeabi_dsub>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f7fd fdee 	bl	8000bd8 <__aeabi_d2f>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	61bb      	str	r3, [r7, #24]
		    			  if (!isfinite(Rwater) || isnan(Rwater))
 8003000:	edd7 7a06 	vldr	s15, [r7, #24]
 8003004:	eef0 7ae7 	vabs.f32	s15, s15
 8003008:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003064 <Water_Res+0x134>
 800300c:	eef4 7a47 	vcmp.f32	s15, s14
 8003010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003014:	d808      	bhi.n	8003028 <Water_Res+0xf8>
 8003016:	ed97 7a06 	vldr	s14, [r7, #24]
 800301a:	edd7 7a06 	vldr	s15, [r7, #24]
 800301e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003026:	d702      	bvc.n	800302e <Water_Res+0xfe>
		    			  	{
		    				  return 0.0; // Return 0 if value is -inf, inf, or nan
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e000      	b.n	8003030 <Water_Res+0x100>
		    			  	}


		    			  return Rwater;
 800302e:	69bb      	ldr	r3, [r7, #24]


}
 8003030:	ee07 3a90 	vmov	s15, r3
 8003034:	eeb0 0a67 	vmov.f32	s0, s15
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	66666666 	.word	0x66666666
 8003044:	400a6666 	.word	0x400a6666
 8003048:	00000000 	.word	0x00000000
 800304c:	40affe00 	.word	0x40affe00
 8003050:	00000000 	.word	0x00000000
 8003054:	40a9c800 	.word	0x40a9c800
 8003058:	2000240c 	.word	0x2000240c
 800305c:	20002408 	.word	0x20002408
 8003060:	408f4000 	.word	0x408f4000
 8003064:	7f7fffff 	.word	0x7f7fffff

08003068 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800306c:	f3bf 8f4f 	dsb	sy
}
 8003070:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <__NVIC_SystemReset+0x24>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800307a:	4904      	ldr	r1, [pc, #16]	; (800308c <__NVIC_SystemReset+0x24>)
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <__NVIC_SystemReset+0x28>)
 800307e:	4313      	orrs	r3, r2
 8003080:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003082:	f3bf 8f4f 	dsb	sy
}
 8003086:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003088:	bf00      	nop
 800308a:	e7fd      	b.n	8003088 <__NVIC_SystemReset+0x20>
 800308c:	e000ed00 	.word	0xe000ed00
 8003090:	05fa0004 	.word	0x05fa0004

08003094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800309a:	f000 fc55 	bl	8003948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800309e:	f000 f8bd 	bl	800321c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030a2:	f7fe fb25 	bl	80016f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80030a6:	f7fd ff65 	bl	8000f74 <MX_ADC1_Init>
  MX_I2C1_Init();
 80030aa:	f7fe fb91 	bl	80017d0 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 80030ae:	f7fe fffd 	bl	80020ac <MX_SDIO_SD_Init>
  MX_TIM3_Init();
 80030b2:	f7ff fdc5 	bl	8002c40 <MX_TIM3_Init>
  MX_TIM4_Init();
 80030b6:	f7ff fe11 	bl	8002cdc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80030ba:	f7ff fe5f 	bl	8002d7c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80030be:	f005 ffe7 	bl	8009090 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  /************************Accelerometer_status*****************************/
  bool Acc_Status = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	71fb      	strb	r3, [r7, #7]
  uint8_t i = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	71bb      	strb	r3, [r7, #6]
  while(!Acc_Status)
 80030ca:	e014      	b.n	80030f6 <main+0x62>
  {
	  Acc_Status = Acc_Init();
 80030cc:	f7fd ff8c 	bl	8000fe8 <Acc_Init>
 80030d0:	4603      	mov	r3, r0
 80030d2:	71fb      	strb	r3, [r7, #7]
	  UART_Printf("Acclerometer Testing time %d\n",i);
 80030d4:	79bb      	ldrb	r3, [r7, #6]
 80030d6:	4619      	mov	r1, r3
 80030d8:	4847      	ldr	r0, [pc, #284]	; (80031f8 <main+0x164>)
 80030da:	f7ff fe79 	bl	8002dd0 <UART_Printf>
	  i++;
 80030de:	79bb      	ldrb	r3, [r7, #6]
 80030e0:	3301      	adds	r3, #1
 80030e2:	71bb      	strb	r3, [r7, #6]
	  HAL_Delay(500);
 80030e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030e8:	f000 fca0 	bl	8003a2c <HAL_Delay>
	   if(i>10)
 80030ec:	79bb      	ldrb	r3, [r7, #6]
 80030ee:	2b0a      	cmp	r3, #10
 80030f0:	d901      	bls.n	80030f6 <main+0x62>
	   {
		   NVIC_SystemReset();
 80030f2:	f7ff ffb9 	bl	8003068 <__NVIC_SystemReset>
  while(!Acc_Status)
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	f083 0301 	eor.w	r3, r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e4      	bne.n	80030cc <main+0x38>
	   }
  }
  UART_Printf("Accelerometer Working \n");
 8003102:	483e      	ldr	r0, [pc, #248]	; (80031fc <main+0x168>)
 8003104:	f7ff fe64 	bl	8002dd0 <UART_Printf>
  /************************Accelerometer_status*****************************/


  /************************SD CARD_status*****************************/

  uint8_t sdCardStatus = SD_Card_Test();
 8003108:	f7fe fff0 	bl	80020ec <SD_Card_Test>
 800310c:	4603      	mov	r3, r0
 800310e:	717b      	strb	r3, [r7, #5]
   while (sdCardStatus != FR_OK)
 8003110:	e007      	b.n	8003122 <main+0x8e>
   {
     sdCardStatus = SD_Card_Test();
 8003112:	f7fe ffeb 	bl	80020ec <SD_Card_Test>
 8003116:	4603      	mov	r3, r0
 8003118:	717b      	strb	r3, [r7, #5]
     HAL_Delay(500);
 800311a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800311e:	f000 fc85 	bl	8003a2c <HAL_Delay>
   while (sdCardStatus != FR_OK)
 8003122:	797b      	ldrb	r3, [r7, #5]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f4      	bne.n	8003112 <main+0x7e>

  /************************SD CARD_status*****************************/

   /************************SD CARD_Create Number file.txt*****************************/

 uint8_t F_N_C = File_Number_Create();
 8003128:	f7ff f814 	bl	8002154 <File_Number_Create>
 800312c:	4603      	mov	r3, r0
 800312e:	713b      	strb	r3, [r7, #4]
  while(F_N_C != FR_OK)
 8003130:	e007      	b.n	8003142 <main+0xae>
  {
	  F_N_C = File_Number_Create();
 8003132:	f7ff f80f 	bl	8002154 <File_Number_Create>
 8003136:	4603      	mov	r3, r0
 8003138:	713b      	strb	r3, [r7, #4]
   HAL_Delay(500);
 800313a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800313e:	f000 fc75 	bl	8003a2c <HAL_Delay>
  while(F_N_C != FR_OK)
 8003142:	793b      	ldrb	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f4      	bne.n	8003132 <main+0x9e>
   /************************SD CARD_Create Number file.txt*****************************/


   /************************SD CARD_Create Num_sys.txt*****************************/

  uint8_t Num_SYS = Num_Sys_Create();
 8003148:	f7ff f8aa 	bl	80022a0 <Num_Sys_Create>
 800314c:	4603      	mov	r3, r0
 800314e:	70fb      	strb	r3, [r7, #3]
  while(Num_SYS != FR_OK)
 8003150:	e007      	b.n	8003162 <main+0xce>
  {
	  Num_SYS = Num_Sys_Create();  //Germany OR USA
 8003152:	f7ff f8a5 	bl	80022a0 <Num_Sys_Create>
 8003156:	4603      	mov	r3, r0
 8003158:	70fb      	strb	r3, [r7, #3]
   HAL_Delay(500);
 800315a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800315e:	f000 fc65 	bl	8003a2c <HAL_Delay>
  while(Num_SYS != FR_OK)
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f4      	bne.n	8003152 <main+0xbe>
  }

   /************************SD CARD_Create Num_sys.txt*****************************/

   /************************SD CARD_Create HTML*****************************/
  uint8_t HTML = HTML_File_Create();
 8003168:	f7ff f940 	bl	80023ec <HTML_File_Create>
 800316c:	4603      	mov	r3, r0
 800316e:	70bb      	strb	r3, [r7, #2]
  while (HTML !=FR_OK)
 8003170:	e007      	b.n	8003182 <main+0xee>
  {
   HTML = HTML_File_Create();
 8003172:	f7ff f93b 	bl	80023ec <HTML_File_Create>
 8003176:	4603      	mov	r3, r0
 8003178:	70bb      	strb	r3, [r7, #2]
   HAL_Delay(500);
 800317a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800317e:	f000 fc55 	bl	8003a2c <HAL_Delay>
  while (HTML !=FR_OK)
 8003182:	78bb      	ldrb	r3, [r7, #2]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f4      	bne.n	8003172 <main+0xde>
  }

   /************************SD CARD_Create HTML*****************************/

   uint8_t Sys_Type = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	707b      	strb	r3, [r7, #1]
   Sys_Type = Read_Number_Sys(Sys_Type);
 800318c:	787b      	ldrb	r3, [r7, #1]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fa48 	bl	8002624 <Read_Number_Sys>
 8003194:	4603      	mov	r3, r0
 8003196:	707b      	strb	r3, [r7, #1]
   (Sys_Type == 1)? UART_Printf("Device Storage Type is GERMANY \n"):UART_Printf("Device Storage Type is USA \n");
 8003198:	787b      	ldrb	r3, [r7, #1]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d103      	bne.n	80031a6 <main+0x112>
 800319e:	4818      	ldr	r0, [pc, #96]	; (8003200 <main+0x16c>)
 80031a0:	f7ff fe16 	bl	8002dd0 <UART_Printf>
 80031a4:	e002      	b.n	80031ac <main+0x118>
 80031a6:	4817      	ldr	r0, [pc, #92]	; (8003204 <main+0x170>)
 80031a8:	f7ff fe12 	bl	8002dd0 <UART_Printf>



   /************************Get Log file Number*****************************/

      Current_Log_File_No =  Read_Log_Number(Current_Log_File_No);
 80031ac:	4b16      	ldr	r3, [pc, #88]	; (8003208 <main+0x174>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff f9f7 	bl	80025a4 <Read_Log_Number>
 80031b6:	4603      	mov	r3, r0
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <main+0x174>)
 80031bc:	701a      	strb	r2, [r3, #0]
      UART_Printf("Current Log File Number is %d \n",Current_Log_File_No);
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <main+0x174>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	4619      	mov	r1, r3
 80031c4:	4811      	ldr	r0, [pc, #68]	; (800320c <main+0x178>)
 80031c6:	f7ff fe03 	bl	8002dd0 <UART_Printf>
   /************************Get Log file Number*****************************/


   /************************SD CARD_Create DataLog*****************************/

   Create_DataLog_File();
 80031ca:	f7ff fa85 	bl	80026d8 <Create_DataLog_File>
   /************************SD CARD_Create DataLog*****************************/



   /************************System_Start*****************************/
   while(!Sys_Start)
 80031ce:	e005      	b.n	80031dc <main+0x148>
   {
   System_Start();
 80031d0:	f7fe f926 	bl	8001420 <System_Start>
   HAL_Delay(500);
 80031d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031d8:	f000 fc28 	bl	8003a2c <HAL_Delay>
   while(!Sys_Start)
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <main+0x17c>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	f083 0301 	eor.w	r3, r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f2      	bne.n	80031d0 <main+0x13c>



  /************************Start_Timer_Interrupt*****************************/

   HAL_TIM_Base_Start_IT(&htim3);
 80031ea:	480a      	ldr	r0, [pc, #40]	; (8003214 <main+0x180>)
 80031ec:	f004 f9e6 	bl	80075bc <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start_IT(&htim4);
 80031f0:	4809      	ldr	r0, [pc, #36]	; (8003218 <main+0x184>)
 80031f2:	f004 f9e3 	bl	80075bc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80031f6:	e7fe      	b.n	80031f6 <main+0x162>
 80031f8:	08010ce0 	.word	0x08010ce0
 80031fc:	08010d00 	.word	0x08010d00
 8003200:	08010d18 	.word	0x08010d18
 8003204:	08010d3c 	.word	0x08010d3c
 8003208:	20002605 	.word	0x20002605
 800320c:	08010d5c 	.word	0x08010d5c
 8003210:	20002604 	.word	0x20002604
 8003214:	2000252c 	.word	0x2000252c
 8003218:	20002574 	.word	0x20002574

0800321c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b094      	sub	sp, #80	; 0x50
 8003220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003222:	f107 0320 	add.w	r3, r7, #32
 8003226:	2230      	movs	r2, #48	; 0x30
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f00a fcb6 	bl	800db9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003230:	f107 030c 	add.w	r3, r7, #12
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003240:	2300      	movs	r3, #0
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <SystemClock_Config+0xc8>)
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <SystemClock_Config+0xc8>)
 800324a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324e:	6413      	str	r3, [r2, #64]	; 0x40
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <SystemClock_Config+0xc8>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800325c:	2300      	movs	r3, #0
 800325e:	607b      	str	r3, [r7, #4]
 8003260:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <SystemClock_Config+0xcc>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a20      	ldr	r2, [pc, #128]	; (80032e8 <SystemClock_Config+0xcc>)
 8003266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <SystemClock_Config+0xcc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003278:	2301      	movs	r3, #1
 800327a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800327c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003282:	2302      	movs	r3, #2
 8003284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003286:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800328a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800328c:	2310      	movs	r3, #16
 800328e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003290:	23c0      	movs	r3, #192	; 0xc0
 8003292:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003294:	2302      	movs	r3, #2
 8003296:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003298:	2304      	movs	r3, #4
 800329a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800329c:	f107 0320 	add.w	r3, r7, #32
 80032a0:	4618      	mov	r0, r3
 80032a2:	f002 fb03 	bl	80058ac <HAL_RCC_OscConfig>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80032ac:	f000 f81e 	bl	80032ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032b0:	230f      	movs	r3, #15
 80032b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032b4:	2302      	movs	r3, #2
 80032b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80032c6:	f107 030c 	add.w	r3, r7, #12
 80032ca:	2103      	movs	r1, #3
 80032cc:	4618      	mov	r0, r3
 80032ce:	f002 fd65 	bl	8005d9c <HAL_RCC_ClockConfig>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80032d8:	f000 f808 	bl	80032ec <Error_Handler>
  }
}
 80032dc:	bf00      	nop
 80032de:	3750      	adds	r7, #80	; 0x50
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40007000 	.word	0x40007000

080032ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032f0:	b672      	cpsid	i
}
 80032f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032f4:	e7fe      	b.n	80032f4 <Error_Handler+0x8>
	...

080032f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	4b10      	ldr	r3, [pc, #64]	; (8003344 <HAL_MspInit+0x4c>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	4a0f      	ldr	r2, [pc, #60]	; (8003344 <HAL_MspInit+0x4c>)
 8003308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800330c:	6453      	str	r3, [r2, #68]	; 0x44
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <HAL_MspInit+0x4c>)
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_MspInit+0x4c>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a08      	ldr	r2, [pc, #32]	; (8003344 <HAL_MspInit+0x4c>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_MspInit+0x4c>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800

08003348 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	f107 0314 	add.w	r3, r7, #20
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a24      	ldr	r2, [pc, #144]	; (80033f8 <HAL_ADC_MspInit+0xb0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d141      	bne.n	80033ee <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	4b23      	ldr	r3, [pc, #140]	; (80033fc <HAL_ADC_MspInit+0xb4>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	4a22      	ldr	r2, [pc, #136]	; (80033fc <HAL_ADC_MspInit+0xb4>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6453      	str	r3, [r2, #68]	; 0x44
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <HAL_ADC_MspInit+0xb4>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <HAL_ADC_MspInit+0xb4>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	4a1b      	ldr	r2, [pc, #108]	; (80033fc <HAL_ADC_MspInit+0xb4>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6313      	str	r3, [r2, #48]	; 0x30
 8003396:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_ADC_MspInit+0xb4>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_ADC_MspInit+0xb4>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	4a14      	ldr	r2, [pc, #80]	; (80033fc <HAL_ADC_MspInit+0xb4>)
 80033ac:	f043 0302 	orr.w	r3, r3, #2
 80033b0:	6313      	str	r3, [r2, #48]	; 0x30
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_ADC_MspInit+0xb4>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Ultrsonic_Pin|T1_Pin|T2_Pin|T3_Pin
 80033be:	239f      	movs	r3, #159	; 0x9f
 80033c0:	617b      	str	r3, [r7, #20]
                          |T4_Pin|PR_SEN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033c2:	2303      	movs	r3, #3
 80033c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ca:	f107 0314 	add.w	r3, r7, #20
 80033ce:	4619      	mov	r1, r3
 80033d0:	480b      	ldr	r0, [pc, #44]	; (8003400 <HAL_ADC_MspInit+0xb8>)
 80033d2:	f001 f873 	bl	80044bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Water_Res_Pin;
 80033d6:	2301      	movs	r3, #1
 80033d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033da:	2303      	movs	r3, #3
 80033dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Water_Res_GPIO_Port, &GPIO_InitStruct);
 80033e2:	f107 0314 	add.w	r3, r7, #20
 80033e6:	4619      	mov	r1, r3
 80033e8:	4806      	ldr	r0, [pc, #24]	; (8003404 <HAL_ADC_MspInit+0xbc>)
 80033ea:	f001 f867 	bl	80044bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033ee:	bf00      	nop
 80033f0:	3728      	adds	r7, #40	; 0x28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40012000 	.word	0x40012000
 80033fc:	40023800 	.word	0x40023800
 8003400:	40020000 	.word	0x40020000
 8003404:	40020400 	.word	0x40020400

08003408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	; 0x28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 0314 	add.w	r3, r7, #20
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <HAL_I2C_MspInit+0x84>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d12b      	bne.n	8003482 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	4b18      	ldr	r3, [pc, #96]	; (8003490 <HAL_I2C_MspInit+0x88>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a17      	ldr	r2, [pc, #92]	; (8003490 <HAL_I2C_MspInit+0x88>)
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <HAL_I2C_MspInit+0x88>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003446:	23c0      	movs	r3, #192	; 0xc0
 8003448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800344a:	2312      	movs	r3, #18
 800344c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003452:	2303      	movs	r3, #3
 8003454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003456:	2304      	movs	r3, #4
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345a:	f107 0314 	add.w	r3, r7, #20
 800345e:	4619      	mov	r1, r3
 8003460:	480c      	ldr	r0, [pc, #48]	; (8003494 <HAL_I2C_MspInit+0x8c>)
 8003462:	f001 f82b 	bl	80044bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <HAL_I2C_MspInit+0x88>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	4a08      	ldr	r2, [pc, #32]	; (8003490 <HAL_I2C_MspInit+0x88>)
 8003470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003474:	6413      	str	r3, [r2, #64]	; 0x40
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <HAL_I2C_MspInit+0x88>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003482:	bf00      	nop
 8003484:	3728      	adds	r7, #40	; 0x28
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40005400 	.word	0x40005400
 8003490:	40023800 	.word	0x40023800
 8003494:	40020400 	.word	0x40020400

08003498 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	; 0x28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a29      	ldr	r2, [pc, #164]	; (800355c <HAL_SD_MspInit+0xc4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d14b      	bne.n	8003552 <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	4b28      	ldr	r3, [pc, #160]	; (8003560 <HAL_SD_MspInit+0xc8>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	4a27      	ldr	r2, [pc, #156]	; (8003560 <HAL_SD_MspInit+0xc8>)
 80034c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034c8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ca:	4b25      	ldr	r3, [pc, #148]	; (8003560 <HAL_SD_MspInit+0xc8>)
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	4b21      	ldr	r3, [pc, #132]	; (8003560 <HAL_SD_MspInit+0xc8>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	4a20      	ldr	r2, [pc, #128]	; (8003560 <HAL_SD_MspInit+0xc8>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6313      	str	r3, [r2, #48]	; 0x30
 80034e6:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <HAL_SD_MspInit+0xc8>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <HAL_SD_MspInit+0xc8>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	4a19      	ldr	r2, [pc, #100]	; (8003560 <HAL_SD_MspInit+0xc8>)
 80034fc:	f043 0302 	orr.w	r3, r3, #2
 8003500:	6313      	str	r3, [r2, #48]	; 0x30
 8003502:	4b17      	ldr	r3, [pc, #92]	; (8003560 <HAL_SD_MspInit+0xc8>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800350e:	f44f 7350 	mov.w	r3, #832	; 0x340
 8003512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003514:	2302      	movs	r3, #2
 8003516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351c:	2303      	movs	r3, #3
 800351e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003520:	230c      	movs	r3, #12
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003524:	f107 0314 	add.w	r3, r7, #20
 8003528:	4619      	mov	r1, r3
 800352a:	480e      	ldr	r0, [pc, #56]	; (8003564 <HAL_SD_MspInit+0xcc>)
 800352c:	f000 ffc6 	bl	80044bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
 8003530:	f248 0330 	movw	r3, #32816	; 0x8030
 8003534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353e:	2303      	movs	r3, #3
 8003540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003542:	230c      	movs	r3, #12
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4619      	mov	r1, r3
 800354c:	4806      	ldr	r0, [pc, #24]	; (8003568 <HAL_SD_MspInit+0xd0>)
 800354e:	f000 ffb5 	bl	80044bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	; 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40023800 	.word	0x40023800
 8003564:	40020000 	.word	0x40020000
 8003568:	40020400 	.word	0x40020400

0800356c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <HAL_TIM_Base_MspInit+0x80>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d116      	bne.n	80035ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <HAL_TIM_Base_MspInit+0x84>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <HAL_TIM_Base_MspInit+0x84>)
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <HAL_TIM_Base_MspInit+0x84>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800359a:	2200      	movs	r2, #0
 800359c:	2100      	movs	r1, #0
 800359e:	201d      	movs	r0, #29
 80035a0:	f000 ff55 	bl	800444e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035a4:	201d      	movs	r0, #29
 80035a6:	f000 ff6e 	bl	8004486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80035aa:	e01a      	b.n	80035e2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a10      	ldr	r2, [pc, #64]	; (80035f4 <HAL_TIM_Base_MspInit+0x88>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d115      	bne.n	80035e2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <HAL_TIM_Base_MspInit+0x84>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	4a0c      	ldr	r2, [pc, #48]	; (80035f0 <HAL_TIM_Base_MspInit+0x84>)
 80035c0:	f043 0304 	orr.w	r3, r3, #4
 80035c4:	6413      	str	r3, [r2, #64]	; 0x40
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_TIM_Base_MspInit+0x84>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2100      	movs	r1, #0
 80035d6:	201e      	movs	r0, #30
 80035d8:	f000 ff39 	bl	800444e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035dc:	201e      	movs	r0, #30
 80035de:	f000 ff52 	bl	8004486 <HAL_NVIC_EnableIRQ>
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40000800 	.word	0x40000800

080035f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a28      	ldr	r2, [pc, #160]	; (80036b8 <HAL_UART_MspInit+0xc0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d14a      	bne.n	80036b0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	4b27      	ldr	r3, [pc, #156]	; (80036bc <HAL_UART_MspInit+0xc4>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	4a26      	ldr	r2, [pc, #152]	; (80036bc <HAL_UART_MspInit+0xc4>)
 8003624:	f043 0310 	orr.w	r3, r3, #16
 8003628:	6453      	str	r3, [r2, #68]	; 0x44
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_UART_MspInit+0xc4>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_UART_MspInit+0xc4>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <HAL_UART_MspInit+0xc4>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	6313      	str	r3, [r2, #48]	; 0x30
 8003646:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <HAL_UART_MspInit+0xc4>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	4b19      	ldr	r3, [pc, #100]	; (80036bc <HAL_UART_MspInit+0xc4>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4a18      	ldr	r2, [pc, #96]	; (80036bc <HAL_UART_MspInit+0xc4>)
 800365c:	f043 0302 	orr.w	r3, r3, #2
 8003660:	6313      	str	r3, [r2, #48]	; 0x30
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <HAL_UART_MspInit+0xc4>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800366e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003674:	2302      	movs	r3, #2
 8003676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800367c:	2303      	movs	r3, #3
 800367e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003680:	2307      	movs	r3, #7
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003684:	f107 0314 	add.w	r3, r7, #20
 8003688:	4619      	mov	r1, r3
 800368a:	480d      	ldr	r0, [pc, #52]	; (80036c0 <HAL_UART_MspInit+0xc8>)
 800368c:	f000 ff16 	bl	80044bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003690:	2308      	movs	r3, #8
 8003692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003694:	2302      	movs	r3, #2
 8003696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	2300      	movs	r3, #0
 800369a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800369c:	2303      	movs	r3, #3
 800369e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036a0:	2307      	movs	r3, #7
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	4619      	mov	r1, r3
 80036aa:	4806      	ldr	r0, [pc, #24]	; (80036c4 <HAL_UART_MspInit+0xcc>)
 80036ac:	f000 ff06 	bl	80044bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80036b0:	bf00      	nop
 80036b2:	3728      	adds	r7, #40	; 0x28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40011000 	.word	0x40011000
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40020000 	.word	0x40020000
 80036c4:	40020400 	.word	0x40020400

080036c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036cc:	e7fe      	b.n	80036cc <NMI_Handler+0x4>

080036ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036ce:	b480      	push	{r7}
 80036d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036d2:	e7fe      	b.n	80036d2 <HardFault_Handler+0x4>

080036d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036d8:	e7fe      	b.n	80036d8 <MemManage_Handler+0x4>

080036da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036da:	b480      	push	{r7}
 80036dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036de:	e7fe      	b.n	80036de <BusFault_Handler+0x4>

080036e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036e4:	e7fe      	b.n	80036e4 <UsageFault_Handler+0x4>

080036e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036e6:	b480      	push	{r7}
 80036e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003714:	f000 f96a 	bl	80039ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003718:	bf00      	nop
 800371a:	bd80      	pop	{r7, pc}

0800371c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <TIM3_IRQHandler+0x10>)
 8003722:	f003 ffad 	bl	8007680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	2000252c 	.word	0x2000252c

08003730 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <TIM4_IRQHandler+0x10>)
 8003736:	f003 ffa3 	bl	8007680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20002574 	.word	0x20002574

08003744 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return 1;
 8003748:	2301      	movs	r3, #1
}
 800374a:	4618      	mov	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <_kill>:

int _kill(int pid, int sig)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800375e:	f00a fa7f 	bl	800dc60 <__errno>
 8003762:	4603      	mov	r3, r0
 8003764:	2216      	movs	r2, #22
 8003766:	601a      	str	r2, [r3, #0]
  return -1;
 8003768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <_exit>:

void _exit (int status)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800377c:	f04f 31ff 	mov.w	r1, #4294967295
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff ffe7 	bl	8003754 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003786:	e7fe      	b.n	8003786 <_exit+0x12>

08003788 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e00a      	b.n	80037b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800379a:	f3af 8000 	nop.w
 800379e:	4601      	mov	r1, r0
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	60ba      	str	r2, [r7, #8]
 80037a6:	b2ca      	uxtb	r2, r1
 80037a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	3301      	adds	r3, #1
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	dbf0      	blt.n	800379a <_read+0x12>
  }

  return len;
 80037b8:	687b      	ldr	r3, [r7, #4]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	e009      	b.n	80037e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	60ba      	str	r2, [r7, #8]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	3301      	adds	r3, #1
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	dbf1      	blt.n	80037d4 <_write+0x12>
  }
  return len;
 80037f0:	687b      	ldr	r3, [r7, #4]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <_close>:

int _close(int file)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003802:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003822:	605a      	str	r2, [r3, #4]
  return 0;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <_isatty>:

int _isatty(int file)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800383a:	2301      	movs	r3, #1
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800386c:	4a14      	ldr	r2, [pc, #80]	; (80038c0 <_sbrk+0x5c>)
 800386e:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <_sbrk+0x60>)
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <_sbrk+0x64>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <_sbrk+0x64>)
 8003882:	4a12      	ldr	r2, [pc, #72]	; (80038cc <_sbrk+0x68>)
 8003884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <_sbrk+0x64>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4413      	add	r3, r2
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	429a      	cmp	r2, r3
 8003892:	d207      	bcs.n	80038a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003894:	f00a f9e4 	bl	800dc60 <__errno>
 8003898:	4603      	mov	r3, r0
 800389a:	220c      	movs	r2, #12
 800389c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800389e:	f04f 33ff 	mov.w	r3, #4294967295
 80038a2:	e009      	b.n	80038b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038a4:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <_sbrk+0x64>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038aa:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <_sbrk+0x64>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	4a05      	ldr	r2, [pc, #20]	; (80038c8 <_sbrk+0x64>)
 80038b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038b6:	68fb      	ldr	r3, [r7, #12]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20020000 	.word	0x20020000
 80038c4:	00000400 	.word	0x00000400
 80038c8:	20002608 	.word	0x20002608
 80038cc:	20002998 	.word	0x20002998

080038d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038d4:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <SystemInit+0x20>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <SystemInit+0x20>)
 80038dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80038f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800392c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80038f8:	f7ff ffea 	bl	80038d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038fc:	480c      	ldr	r0, [pc, #48]	; (8003930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038fe:	490d      	ldr	r1, [pc, #52]	; (8003934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003900:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003904:	e002      	b.n	800390c <LoopCopyDataInit>

08003906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800390a:	3304      	adds	r3, #4

0800390c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800390c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800390e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003910:	d3f9      	bcc.n	8003906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003914:	4c0a      	ldr	r4, [pc, #40]	; (8003940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003918:	e001      	b.n	800391e <LoopFillZerobss>

0800391a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800391a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800391c:	3204      	adds	r2, #4

0800391e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800391e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003920:	d3fb      	bcc.n	800391a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003922:	f00a f9a3 	bl	800dc6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003926:	f7ff fbb5 	bl	8003094 <main>
  bx  lr    
 800392a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800392c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003934:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003938:	080186c8 	.word	0x080186c8
  ldr r2, =_sbss
 800393c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003940:	20002998 	.word	0x20002998

08003944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003944:	e7fe      	b.n	8003944 <ADC_IRQHandler>
	...

08003948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800394c:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <HAL_Init+0x40>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a0d      	ldr	r2, [pc, #52]	; (8003988 <HAL_Init+0x40>)
 8003952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_Init+0x40>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <HAL_Init+0x40>)
 800395e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003964:	4b08      	ldr	r3, [pc, #32]	; (8003988 <HAL_Init+0x40>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a07      	ldr	r2, [pc, #28]	; (8003988 <HAL_Init+0x40>)
 800396a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003970:	2003      	movs	r0, #3
 8003972:	f000 fd61 	bl	8004438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003976:	200f      	movs	r0, #15
 8003978:	f000 f808 	bl	800398c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800397c:	f7ff fcbc 	bl	80032f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40023c00 	.word	0x40023c00

0800398c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <HAL_InitTick+0x54>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <HAL_InitTick+0x58>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	4619      	mov	r1, r3
 800399e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fd79 	bl	80044a2 <HAL_SYSTICK_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e00e      	b.n	80039d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b0f      	cmp	r3, #15
 80039be:	d80a      	bhi.n	80039d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039c0:	2200      	movs	r2, #0
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295
 80039c8:	f000 fd41 	bl	800444e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039cc:	4a06      	ldr	r2, [pc, #24]	; (80039e8 <HAL_InitTick+0x5c>)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e000      	b.n	80039d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	2000000c 	.word	0x2000000c
 80039e4:	20000014 	.word	0x20000014
 80039e8:	20000010 	.word	0x20000010

080039ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <HAL_IncTick+0x20>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_IncTick+0x24>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4413      	add	r3, r2
 80039fc:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <HAL_IncTick+0x24>)
 80039fe:	6013      	str	r3, [r2, #0]
}
 8003a00:	bf00      	nop
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000014 	.word	0x20000014
 8003a10:	2000260c 	.word	0x2000260c

08003a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  return uwTick;
 8003a18:	4b03      	ldr	r3, [pc, #12]	; (8003a28 <HAL_GetTick+0x14>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	2000260c 	.word	0x2000260c

08003a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a34:	f7ff ffee 	bl	8003a14 <HAL_GetTick>
 8003a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d005      	beq.n	8003a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <HAL_Delay+0x44>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  }


  while((HAL_GetTick() - tickstart) < wait)
 8003a52:	bf00      	nop
 8003a54:	f7ff ffde 	bl	8003a14 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d8f7      	bhi.n	8003a54 <HAL_Delay+0x28>
  {
  }
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000014 	.word	0x20000014

08003a74 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_SuspendTick+0x1c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <HAL_SuspendTick+0x1c>)
 8003a7e:	f023 0302 	bic.w	r3, r3, #2
 8003a82:	6013      	str	r3, [r2, #0]
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	e000e010 	.word	0xe000e010

08003a94 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_ResumeTick+0x1c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a04      	ldr	r2, [pc, #16]	; (8003ab0 <HAL_ResumeTick+0x1c>)
 8003a9e:	f043 0302 	orr.w	r3, r3, #2
 8003aa2:	6013      	str	r3, [r2, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000e010 	.word	0xe000e010

08003ab4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e033      	b.n	8003b32 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff fc38 	bl	8003348 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d118      	bne.n	8003b24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003afa:	f023 0302 	bic.w	r3, r3, #2
 8003afe:	f043 0202 	orr.w	r2, r3, #2
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 faca 	bl	80040a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f023 0303 	bic.w	r3, r3, #3
 8003b1a:	f043 0201 	orr.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
 8003b22:	e001      	b.n	8003b28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_ADC_Start+0x1a>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e097      	b.n	8003c86 <HAL_ADC_Start+0x14a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d018      	beq.n	8003b9e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b7c:	4b45      	ldr	r3, [pc, #276]	; (8003c94 <HAL_ADC_Start+0x158>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a45      	ldr	r2, [pc, #276]	; (8003c98 <HAL_ADC_Start+0x15c>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	0c9a      	lsrs	r2, r3, #18
 8003b88:	4613      	mov	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003b90:	e002      	b.n	8003b98 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f9      	bne.n	8003b92 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d15f      	bne.n	8003c6c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bb4:	f023 0301 	bic.w	r3, r3, #1
 8003bb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d007      	beq.n	8003bde <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bea:	d106      	bne.n	8003bfa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	f023 0206 	bic.w	r2, r3, #6
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	645a      	str	r2, [r3, #68]	; 0x44
 8003bf8:	e002      	b.n	8003c00 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c08:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <HAL_ADC_Start+0x160>)
 8003c0a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c14:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10f      	bne.n	8003c42 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d129      	bne.n	8003c84 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	e020      	b.n	8003c84 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <HAL_ADC_Start+0x164>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d11b      	bne.n	8003c84 <HAL_ADC_Start+0x148>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d114      	bne.n	8003c84 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	e00b      	b.n	8003c84 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	f043 0210 	orr.w	r2, r3, #16
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	2000000c 	.word	0x2000000c
 8003c98:	431bde83 	.word	0x431bde83
 8003c9c:	40012300 	.word	0x40012300
 8003ca0:	40012000 	.word	0x40012000

08003ca4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_ADC_Stop+0x16>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e021      	b.n	8003cfe <HAL_ADC_Stop+0x5a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d109      	bne.n	8003cf4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	f043 0201 	orr.w	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d26:	d113      	bne.n	8003d50 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d36:	d10b      	bne.n	8003d50 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f043 0220 	orr.w	r2, r3, #32
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e063      	b.n	8003e18 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d50:	f7ff fe60 	bl	8003a14 <HAL_GetTick>
 8003d54:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d56:	e021      	b.n	8003d9c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d01d      	beq.n	8003d9c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <HAL_ADC_PollForConversion+0x6c>
 8003d66:	f7ff fe55 	bl	8003a14 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d212      	bcs.n	8003d9c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d00b      	beq.n	8003d9c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	f043 0204 	orr.w	r2, r3, #4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e03d      	b.n	8003e18 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d1d6      	bne.n	8003d58 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f06f 0212 	mvn.w	r2, #18
 8003db2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d123      	bne.n	8003e16 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d11f      	bne.n	8003e16 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d006      	beq.n	8003df2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d111      	bne.n	8003e16 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d105      	bne.n	8003e16 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f043 0201 	orr.w	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x1c>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e113      	b.n	8004080 <HAL_ADC_ConfigChannel+0x244>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b09      	cmp	r3, #9
 8003e66:	d925      	bls.n	8003eb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68d9      	ldr	r1, [r3, #12]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	4613      	mov	r3, r2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3b1e      	subs	r3, #30
 8003e7e:	2207      	movs	r2, #7
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43da      	mvns	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	400a      	ands	r2, r1
 8003e8c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68d9      	ldr	r1, [r3, #12]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4403      	add	r3, r0
 8003ea6:	3b1e      	subs	r3, #30
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	e022      	b.n	8003efa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6919      	ldr	r1, [r3, #16]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	2207      	movs	r2, #7
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43da      	mvns	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6919      	ldr	r1, [r3, #16]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	4618      	mov	r0, r3
 8003eea:	4603      	mov	r3, r0
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4403      	add	r3, r0
 8003ef0:	409a      	lsls	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d824      	bhi.n	8003f4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	3b05      	subs	r3, #5
 8003f14:	221f      	movs	r2, #31
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	400a      	ands	r2, r1
 8003f22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	4618      	mov	r0, r3
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3b05      	subs	r3, #5
 8003f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	635a      	str	r2, [r3, #52]	; 0x34
 8003f4a:	e04c      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	d824      	bhi.n	8003f9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	3b23      	subs	r3, #35	; 0x23
 8003f66:	221f      	movs	r2, #31
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43da      	mvns	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	400a      	ands	r2, r1
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	4618      	mov	r0, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3b23      	subs	r3, #35	; 0x23
 8003f90:	fa00 f203 	lsl.w	r2, r0, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f9c:	e023      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	3b41      	subs	r3, #65	; 0x41
 8003fb0:	221f      	movs	r2, #31
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43da      	mvns	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	400a      	ands	r2, r1
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	4618      	mov	r0, r3
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3b41      	subs	r3, #65	; 0x41
 8003fda:	fa00 f203 	lsl.w	r2, r0, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fe6:	4b29      	ldr	r3, [pc, #164]	; (800408c <HAL_ADC_ConfigChannel+0x250>)
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a28      	ldr	r2, [pc, #160]	; (8004090 <HAL_ADC_ConfigChannel+0x254>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d10f      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x1d8>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b12      	cmp	r3, #18
 8003ffa:	d10b      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1d      	ldr	r2, [pc, #116]	; (8004090 <HAL_ADC_ConfigChannel+0x254>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d12b      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x23a>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1c      	ldr	r2, [pc, #112]	; (8004094 <HAL_ADC_ConfigChannel+0x258>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <HAL_ADC_ConfigChannel+0x1f4>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b11      	cmp	r3, #17
 800402e:	d122      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a11      	ldr	r2, [pc, #68]	; (8004094 <HAL_ADC_ConfigChannel+0x258>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d111      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004052:	4b11      	ldr	r3, [pc, #68]	; (8004098 <HAL_ADC_ConfigChannel+0x25c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a11      	ldr	r2, [pc, #68]	; (800409c <HAL_ADC_ConfigChannel+0x260>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	0c9a      	lsrs	r2, r3, #18
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004068:	e002      	b.n	8004070 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	3b01      	subs	r3, #1
 800406e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f9      	bne.n	800406a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	40012300 	.word	0x40012300
 8004090:	40012000 	.word	0x40012000
 8004094:	10000012 	.word	0x10000012
 8004098:	2000000c 	.word	0x2000000c
 800409c:	431bde83 	.word	0x431bde83

080040a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040a8:	4b79      	ldr	r3, [pc, #484]	; (8004290 <ADC_Init+0x1f0>)
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6859      	ldr	r1, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	021a      	lsls	r2, r3, #8
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80040f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6859      	ldr	r1, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800411a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6899      	ldr	r1, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	4a58      	ldr	r2, [pc, #352]	; (8004294 <ADC_Init+0x1f4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d022      	beq.n	800417e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004146:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6899      	ldr	r1, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004168:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6899      	ldr	r1, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	609a      	str	r2, [r3, #8]
 800417c:	e00f      	b.n	800419e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800418c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800419c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0202 	bic.w	r2, r2, #2
 80041ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6899      	ldr	r1, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	7e1b      	ldrb	r3, [r3, #24]
 80041b8:	005a      	lsls	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01b      	beq.n	8004204 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80041ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6859      	ldr	r1, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	3b01      	subs	r3, #1
 80041f8:	035a      	lsls	r2, r3, #13
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	e007      	b.n	8004214 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004212:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	3b01      	subs	r3, #1
 8004230:	051a      	lsls	r2, r3, #20
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004248:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6899      	ldr	r1, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004256:	025a      	lsls	r2, r3, #9
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6899      	ldr	r1, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	029a      	lsls	r2, r3, #10
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	609a      	str	r2, [r3, #8]
}
 8004284:	bf00      	nop
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	40012300 	.word	0x40012300
 8004294:	0f000001 	.word	0x0f000001

08004298 <__NVIC_SetPriorityGrouping>:
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <__NVIC_SetPriorityGrouping+0x44>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042b4:	4013      	ands	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ca:	4a04      	ldr	r2, [pc, #16]	; (80042dc <__NVIC_SetPriorityGrouping+0x44>)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	60d3      	str	r3, [r2, #12]
}
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <__NVIC_GetPriorityGrouping>:
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <__NVIC_GetPriorityGrouping+0x18>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	f003 0307 	and.w	r3, r3, #7
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <__NVIC_EnableIRQ>:
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	2b00      	cmp	r3, #0
 800430c:	db0b      	blt.n	8004326 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	f003 021f 	and.w	r2, r3, #31
 8004314:	4907      	ldr	r1, [pc, #28]	; (8004334 <__NVIC_EnableIRQ+0x38>)
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	2001      	movs	r0, #1
 800431e:	fa00 f202 	lsl.w	r2, r0, r2
 8004322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	e000e100 	.word	0xe000e100

08004338 <__NVIC_SetPriority>:
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	6039      	str	r1, [r7, #0]
 8004342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004348:	2b00      	cmp	r3, #0
 800434a:	db0a      	blt.n	8004362 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	490c      	ldr	r1, [pc, #48]	; (8004384 <__NVIC_SetPriority+0x4c>)
 8004352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004356:	0112      	lsls	r2, r2, #4
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	440b      	add	r3, r1
 800435c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004360:	e00a      	b.n	8004378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	4908      	ldr	r1, [pc, #32]	; (8004388 <__NVIC_SetPriority+0x50>)
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	3b04      	subs	r3, #4
 8004370:	0112      	lsls	r2, r2, #4
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	440b      	add	r3, r1
 8004376:	761a      	strb	r2, [r3, #24]
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	e000e100 	.word	0xe000e100
 8004388:	e000ed00 	.word	0xe000ed00

0800438c <NVIC_EncodePriority>:
{
 800438c:	b480      	push	{r7}
 800438e:	b089      	sub	sp, #36	; 0x24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f1c3 0307 	rsb	r3, r3, #7
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	bf28      	it	cs
 80043aa:	2304      	movcs	r3, #4
 80043ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2b06      	cmp	r3, #6
 80043b4:	d902      	bls.n	80043bc <NVIC_EncodePriority+0x30>
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3b03      	subs	r3, #3
 80043ba:	e000      	b.n	80043be <NVIC_EncodePriority+0x32>
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c0:	f04f 32ff 	mov.w	r2, #4294967295
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43da      	mvns	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	401a      	ands	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043d4:	f04f 31ff 	mov.w	r1, #4294967295
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	fa01 f303 	lsl.w	r3, r1, r3
 80043de:	43d9      	mvns	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e4:	4313      	orrs	r3, r2
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3724      	adds	r7, #36	; 0x24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3b01      	subs	r3, #1
 8004400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004404:	d301      	bcc.n	800440a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004406:	2301      	movs	r3, #1
 8004408:	e00f      	b.n	800442a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800440a:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <SysTick_Config+0x40>)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3b01      	subs	r3, #1
 8004410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004412:	210f      	movs	r1, #15
 8004414:	f04f 30ff 	mov.w	r0, #4294967295
 8004418:	f7ff ff8e 	bl	8004338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <SysTick_Config+0x40>)
 800441e:	2200      	movs	r2, #0
 8004420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004422:	4b04      	ldr	r3, [pc, #16]	; (8004434 <SysTick_Config+0x40>)
 8004424:	2207      	movs	r2, #7
 8004426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	e000e010 	.word	0xe000e010

08004438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff ff29 	bl	8004298 <__NVIC_SetPriorityGrouping>
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800444e:	b580      	push	{r7, lr}
 8004450:	b086      	sub	sp, #24
 8004452:	af00      	add	r7, sp, #0
 8004454:	4603      	mov	r3, r0
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004460:	f7ff ff3e 	bl	80042e0 <__NVIC_GetPriorityGrouping>
 8004464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	6978      	ldr	r0, [r7, #20]
 800446c:	f7ff ff8e 	bl	800438c <NVIC_EncodePriority>
 8004470:	4602      	mov	r2, r0
 8004472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff ff5d 	bl	8004338 <__NVIC_SetPriority>
}
 800447e:	bf00      	nop
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	4603      	mov	r3, r0
 800448e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff ff31 	bl	80042fc <__NVIC_EnableIRQ>
}
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff ffa2 	bl	80043f4 <SysTick_Config>
 80044b0:	4603      	mov	r3, r0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044bc:	b480      	push	{r7}
 80044be:	b089      	sub	sp, #36	; 0x24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	e159      	b.n	800478c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044d8:	2201      	movs	r2, #1
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4013      	ands	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	f040 8148 	bne.w	8004786 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d005      	beq.n	800450e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800450a:	2b02      	cmp	r3, #2
 800450c:	d130      	bne.n	8004570 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	2203      	movs	r2, #3
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4013      	ands	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004544:	2201      	movs	r2, #1
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	43db      	mvns	r3, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f003 0201 	and.w	r2, r3, #1
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	2b03      	cmp	r3, #3
 800457a:	d017      	beq.n	80045ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	2203      	movs	r2, #3
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d123      	bne.n	8004600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	08da      	lsrs	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3208      	adds	r2, #8
 80045c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	220f      	movs	r2, #15
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43db      	mvns	r3, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4013      	ands	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	08da      	lsrs	r2, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3208      	adds	r2, #8
 80045fa:	69b9      	ldr	r1, [r7, #24]
 80045fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	2203      	movs	r2, #3
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	43db      	mvns	r3, r3
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4013      	ands	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 0203 	and.w	r2, r3, #3
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4313      	orrs	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80a2 	beq.w	8004786 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	4b57      	ldr	r3, [pc, #348]	; (80047a4 <HAL_GPIO_Init+0x2e8>)
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	4a56      	ldr	r2, [pc, #344]	; (80047a4 <HAL_GPIO_Init+0x2e8>)
 800464c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004650:	6453      	str	r3, [r2, #68]	; 0x44
 8004652:	4b54      	ldr	r3, [pc, #336]	; (80047a4 <HAL_GPIO_Init+0x2e8>)
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800465e:	4a52      	ldr	r2, [pc, #328]	; (80047a8 <HAL_GPIO_Init+0x2ec>)
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	089b      	lsrs	r3, r3, #2
 8004664:	3302      	adds	r3, #2
 8004666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	220f      	movs	r2, #15
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43db      	mvns	r3, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4013      	ands	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a49      	ldr	r2, [pc, #292]	; (80047ac <HAL_GPIO_Init+0x2f0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d019      	beq.n	80046be <HAL_GPIO_Init+0x202>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a48      	ldr	r2, [pc, #288]	; (80047b0 <HAL_GPIO_Init+0x2f4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <HAL_GPIO_Init+0x1fe>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a47      	ldr	r2, [pc, #284]	; (80047b4 <HAL_GPIO_Init+0x2f8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00d      	beq.n	80046b6 <HAL_GPIO_Init+0x1fa>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a46      	ldr	r2, [pc, #280]	; (80047b8 <HAL_GPIO_Init+0x2fc>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d007      	beq.n	80046b2 <HAL_GPIO_Init+0x1f6>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a45      	ldr	r2, [pc, #276]	; (80047bc <HAL_GPIO_Init+0x300>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d101      	bne.n	80046ae <HAL_GPIO_Init+0x1f2>
 80046aa:	2304      	movs	r3, #4
 80046ac:	e008      	b.n	80046c0 <HAL_GPIO_Init+0x204>
 80046ae:	2307      	movs	r3, #7
 80046b0:	e006      	b.n	80046c0 <HAL_GPIO_Init+0x204>
 80046b2:	2303      	movs	r3, #3
 80046b4:	e004      	b.n	80046c0 <HAL_GPIO_Init+0x204>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e002      	b.n	80046c0 <HAL_GPIO_Init+0x204>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <HAL_GPIO_Init+0x204>
 80046be:	2300      	movs	r3, #0
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	f002 0203 	and.w	r2, r2, #3
 80046c6:	0092      	lsls	r2, r2, #2
 80046c8:	4093      	lsls	r3, r2
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046d0:	4935      	ldr	r1, [pc, #212]	; (80047a8 <HAL_GPIO_Init+0x2ec>)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	089b      	lsrs	r3, r3, #2
 80046d6:	3302      	adds	r3, #2
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046de:	4b38      	ldr	r3, [pc, #224]	; (80047c0 <HAL_GPIO_Init+0x304>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004702:	4a2f      	ldr	r2, [pc, #188]	; (80047c0 <HAL_GPIO_Init+0x304>)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004708:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <HAL_GPIO_Init+0x304>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	43db      	mvns	r3, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800472c:	4a24      	ldr	r2, [pc, #144]	; (80047c0 <HAL_GPIO_Init+0x304>)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004732:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <HAL_GPIO_Init+0x304>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004756:	4a1a      	ldr	r2, [pc, #104]	; (80047c0 <HAL_GPIO_Init+0x304>)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800475c:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <HAL_GPIO_Init+0x304>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004780:	4a0f      	ldr	r2, [pc, #60]	; (80047c0 <HAL_GPIO_Init+0x304>)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3301      	adds	r3, #1
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	2b0f      	cmp	r3, #15
 8004790:	f67f aea2 	bls.w	80044d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	3724      	adds	r7, #36	; 0x24
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40013800 	.word	0x40013800
 80047ac:	40020000 	.word	0x40020000
 80047b0:	40020400 	.word	0x40020400
 80047b4:	40020800 	.word	0x40020800
 80047b8:	40020c00 	.word	0x40020c00
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40013c00 	.word	0x40013c00

080047c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	887b      	ldrh	r3, [r7, #2]
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047dc:	2301      	movs	r3, #1
 80047de:	73fb      	strb	r3, [r7, #15]
 80047e0:	e001      	b.n	80047e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	807b      	strh	r3, [r7, #2]
 8004800:	4613      	mov	r3, r2
 8004802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004804:	787b      	ldrb	r3, [r7, #1]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800480a:	887a      	ldrh	r2, [r7, #2]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004810:	e003      	b.n	800481a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004812:	887b      	ldrh	r3, [r7, #2]
 8004814:	041a      	lsls	r2, r3, #16
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	619a      	str	r2, [r3, #24]
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e12b      	b.n	8004a92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fe fdda 	bl	8003408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2224      	movs	r2, #36	; 0x24
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0201 	bic.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800487a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800488a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800488c:	f001 fc7c 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 8004890:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4a81      	ldr	r2, [pc, #516]	; (8004a9c <HAL_I2C_Init+0x274>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d807      	bhi.n	80048ac <HAL_I2C_Init+0x84>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4a80      	ldr	r2, [pc, #512]	; (8004aa0 <HAL_I2C_Init+0x278>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	bf94      	ite	ls
 80048a4:	2301      	movls	r3, #1
 80048a6:	2300      	movhi	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	e006      	b.n	80048ba <HAL_I2C_Init+0x92>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4a7d      	ldr	r2, [pc, #500]	; (8004aa4 <HAL_I2C_Init+0x27c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	bf94      	ite	ls
 80048b4:	2301      	movls	r3, #1
 80048b6:	2300      	movhi	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e0e7      	b.n	8004a92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a78      	ldr	r2, [pc, #480]	; (8004aa8 <HAL_I2C_Init+0x280>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	0c9b      	lsrs	r3, r3, #18
 80048cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	4a6a      	ldr	r2, [pc, #424]	; (8004a9c <HAL_I2C_Init+0x274>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d802      	bhi.n	80048fc <HAL_I2C_Init+0xd4>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	3301      	adds	r3, #1
 80048fa:	e009      	b.n	8004910 <HAL_I2C_Init+0xe8>
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004902:	fb02 f303 	mul.w	r3, r2, r3
 8004906:	4a69      	ldr	r2, [pc, #420]	; (8004aac <HAL_I2C_Init+0x284>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	099b      	lsrs	r3, r3, #6
 800490e:	3301      	adds	r3, #1
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	430b      	orrs	r3, r1
 8004916:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004922:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	495c      	ldr	r1, [pc, #368]	; (8004a9c <HAL_I2C_Init+0x274>)
 800492c:	428b      	cmp	r3, r1
 800492e:	d819      	bhi.n	8004964 <HAL_I2C_Init+0x13c>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	1e59      	subs	r1, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	fbb1 f3f3 	udiv	r3, r1, r3
 800493e:	1c59      	adds	r1, r3, #1
 8004940:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004944:	400b      	ands	r3, r1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <HAL_I2C_Init+0x138>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1e59      	subs	r1, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	fbb1 f3f3 	udiv	r3, r1, r3
 8004958:	3301      	adds	r3, #1
 800495a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495e:	e051      	b.n	8004a04 <HAL_I2C_Init+0x1dc>
 8004960:	2304      	movs	r3, #4
 8004962:	e04f      	b.n	8004a04 <HAL_I2C_Init+0x1dc>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d111      	bne.n	8004990 <HAL_I2C_Init+0x168>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1e58      	subs	r0, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	440b      	add	r3, r1
 800497a:	fbb0 f3f3 	udiv	r3, r0, r3
 800497e:	3301      	adds	r3, #1
 8004980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf0c      	ite	eq
 8004988:	2301      	moveq	r3, #1
 800498a:	2300      	movne	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	e012      	b.n	80049b6 <HAL_I2C_Init+0x18e>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1e58      	subs	r0, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	0099      	lsls	r1, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a6:	3301      	adds	r3, #1
 80049a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_I2C_Init+0x196>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e022      	b.n	8004a04 <HAL_I2C_Init+0x1dc>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10e      	bne.n	80049e4 <HAL_I2C_Init+0x1bc>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1e58      	subs	r0, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6859      	ldr	r1, [r3, #4]
 80049ce:	460b      	mov	r3, r1
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	440b      	add	r3, r1
 80049d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80049d8:	3301      	adds	r3, #1
 80049da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e2:	e00f      	b.n	8004a04 <HAL_I2C_Init+0x1dc>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	1e58      	subs	r0, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6859      	ldr	r1, [r3, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	0099      	lsls	r1, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049fa:	3301      	adds	r3, #1
 80049fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	6809      	ldr	r1, [r1, #0]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69da      	ldr	r2, [r3, #28]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6911      	ldr	r1, [r2, #16]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	68d2      	ldr	r2, [r2, #12]
 8004a3e:	4311      	orrs	r1, r2
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	430b      	orrs	r3, r1
 8004a46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	000186a0 	.word	0x000186a0
 8004aa0:	001e847f 	.word	0x001e847f
 8004aa4:	003d08ff 	.word	0x003d08ff
 8004aa8:	431bde83 	.word	0x431bde83
 8004aac:	10624dd3 	.word	0x10624dd3

08004ab0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	4608      	mov	r0, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	461a      	mov	r2, r3
 8004abe:	4603      	mov	r3, r0
 8004ac0:	817b      	strh	r3, [r7, #10]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	813b      	strh	r3, [r7, #8]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aca:	f7fe ffa3 	bl	8003a14 <HAL_GetTick>
 8004ace:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	f040 80d9 	bne.w	8004c90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	2319      	movs	r3, #25
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	496d      	ldr	r1, [pc, #436]	; (8004c9c <HAL_I2C_Mem_Write+0x1ec>)
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 fc8b 	bl	8005404 <I2C_WaitOnFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004af4:	2302      	movs	r3, #2
 8004af6:	e0cc      	b.n	8004c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_I2C_Mem_Write+0x56>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e0c5      	b.n	8004c92 <HAL_I2C_Mem_Write+0x1e2>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d007      	beq.n	8004b2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2221      	movs	r2, #33	; 0x21
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2240      	movs	r2, #64	; 0x40
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a3a      	ldr	r2, [r7, #32]
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4a4d      	ldr	r2, [pc, #308]	; (8004ca0 <HAL_I2C_Mem_Write+0x1f0>)
 8004b6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b6e:	88f8      	ldrh	r0, [r7, #6]
 8004b70:	893a      	ldrh	r2, [r7, #8]
 8004b72:	8979      	ldrh	r1, [r7, #10]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	9301      	str	r3, [sp, #4]
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 fac2 	bl	8005108 <I2C_RequestMemoryWrite>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d052      	beq.n	8004c30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e081      	b.n	8004c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fd50 	bl	8005638 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00d      	beq.n	8004bba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d107      	bne.n	8004bb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e06b      	b.n	8004c92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	781a      	ldrb	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d11b      	bne.n	8004c30 <HAL_I2C_Mem_Write+0x180>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d017      	beq.n	8004c30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	781a      	ldrb	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1aa      	bne.n	8004b8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 fd43 	bl	80056c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00d      	beq.n	8004c64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d107      	bne.n	8004c60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e016      	b.n	8004c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e000      	b.n	8004c92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c90:	2302      	movs	r3, #2
  }
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	00100002 	.word	0x00100002
 8004ca0:	ffff0000 	.word	0xffff0000

08004ca4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08c      	sub	sp, #48	; 0x30
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	4608      	mov	r0, r1
 8004cae:	4611      	mov	r1, r2
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	817b      	strh	r3, [r7, #10]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	813b      	strh	r3, [r7, #8]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cbe:	f7fe fea9 	bl	8003a14 <HAL_GetTick>
 8004cc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	f040 8214 	bne.w	80050fa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	2319      	movs	r3, #25
 8004cd8:	2201      	movs	r2, #1
 8004cda:	497b      	ldr	r1, [pc, #492]	; (8004ec8 <HAL_I2C_Mem_Read+0x224>)
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fb91 	bl	8005404 <I2C_WaitOnFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e207      	b.n	80050fc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_I2C_Mem_Read+0x56>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e200      	b.n	80050fc <HAL_I2C_Mem_Read+0x458>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d007      	beq.n	8004d20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2222      	movs	r2, #34	; 0x22
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2240      	movs	r2, #64	; 0x40
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a5b      	ldr	r2, [pc, #364]	; (8004ecc <HAL_I2C_Mem_Read+0x228>)
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d62:	88f8      	ldrh	r0, [r7, #6]
 8004d64:	893a      	ldrh	r2, [r7, #8]
 8004d66:	8979      	ldrh	r1, [r7, #10]
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	4603      	mov	r3, r0
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 fa5e 	bl	8005234 <I2C_RequestMemoryRead>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e1bc      	b.n	80050fc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d113      	bne.n	8004db2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	623b      	str	r3, [r7, #32]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	623b      	str	r3, [r7, #32]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	623b      	str	r3, [r7, #32]
 8004d9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e190      	b.n	80050d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d11b      	bne.n	8004df2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	61fb      	str	r3, [r7, #28]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e170      	b.n	80050d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d11b      	bne.n	8004e32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	e150      	b.n	80050d4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e48:	e144      	b.n	80050d4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	f200 80f1 	bhi.w	8005036 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d123      	bne.n	8004ea4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fc79 	bl	8005758 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e145      	b.n	80050fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ea2:	e117      	b.n	80050d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d14e      	bne.n	8004f4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	4906      	ldr	r1, [pc, #24]	; (8004ed0 <HAL_I2C_Mem_Read+0x22c>)
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 faa4 	bl	8005404 <I2C_WaitOnFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d008      	beq.n	8004ed4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e11a      	b.n	80050fc <HAL_I2C_Mem_Read+0x458>
 8004ec6:	bf00      	nop
 8004ec8:	00100002 	.word	0x00100002
 8004ecc:	ffff0000 	.word	0xffff0000
 8004ed0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f48:	e0c4      	b.n	80050d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	2200      	movs	r2, #0
 8004f52:	496c      	ldr	r1, [pc, #432]	; (8005104 <HAL_I2C_Mem_Read+0x460>)
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 fa55 	bl	8005404 <I2C_WaitOnFlagUntilTimeout>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0cb      	b.n	80050fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	2200      	movs	r2, #0
 8004fae:	4955      	ldr	r1, [pc, #340]	; (8005104 <HAL_I2C_Mem_Read+0x460>)
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 fa27 	bl	8005404 <I2C_WaitOnFlagUntilTimeout>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e09d      	b.n	80050fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501e:	3b01      	subs	r3, #1
 8005020:	b29a      	uxth	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005034:	e04e      	b.n	80050d4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005038:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 fb8c 	bl	8005758 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e058      	b.n	80050fc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005072:	b29b      	uxth	r3, r3
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b04      	cmp	r3, #4
 8005088:	d124      	bne.n	80050d4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508e:	2b03      	cmp	r3, #3
 8005090:	d107      	bne.n	80050a2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f47f aeb6 	bne.w	8004e4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	e000      	b.n	80050fc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80050fa:	2302      	movs	r3, #2
  }
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3728      	adds	r7, #40	; 0x28
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	00010004 	.word	0x00010004

08005108 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	4608      	mov	r0, r1
 8005112:	4611      	mov	r1, r2
 8005114:	461a      	mov	r2, r3
 8005116:	4603      	mov	r3, r0
 8005118:	817b      	strh	r3, [r7, #10]
 800511a:	460b      	mov	r3, r1
 800511c:	813b      	strh	r3, [r7, #8]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005130:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	2200      	movs	r2, #0
 800513a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 f960 	bl	8005404 <I2C_WaitOnFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00d      	beq.n	8005166 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005158:	d103      	bne.n	8005162 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005160:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e05f      	b.n	8005226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005166:	897b      	ldrh	r3, [r7, #10]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005174:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	6a3a      	ldr	r2, [r7, #32]
 800517a:	492d      	ldr	r1, [pc, #180]	; (8005230 <I2C_RequestMemoryWrite+0x128>)
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f9bb 	bl	80054f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e04c      	b.n	8005226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a4:	6a39      	ldr	r1, [r7, #32]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 fa46 	bl	8005638 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d107      	bne.n	80051ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e02b      	b.n	8005226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d105      	bne.n	80051e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051d4:	893b      	ldrh	r3, [r7, #8]
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	611a      	str	r2, [r3, #16]
 80051de:	e021      	b.n	8005224 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051e0:	893b      	ldrh	r3, [r7, #8]
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f0:	6a39      	ldr	r1, [r7, #32]
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 fa20 	bl	8005638 <I2C_WaitOnTXEFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00d      	beq.n	800521a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	2b04      	cmp	r3, #4
 8005204:	d107      	bne.n	8005216 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005214:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e005      	b.n	8005226 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800521a:	893b      	ldrh	r3, [r7, #8]
 800521c:	b2da      	uxtb	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	00010002 	.word	0x00010002

08005234 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	4608      	mov	r0, r1
 800523e:	4611      	mov	r1, r2
 8005240:	461a      	mov	r2, r3
 8005242:	4603      	mov	r3, r0
 8005244:	817b      	strh	r3, [r7, #10]
 8005246:	460b      	mov	r3, r1
 8005248:	813b      	strh	r3, [r7, #8]
 800524a:	4613      	mov	r3, r2
 800524c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800525c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800526c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	2200      	movs	r2, #0
 8005276:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f8c2 	bl	8005404 <I2C_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00d      	beq.n	80052a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005294:	d103      	bne.n	800529e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800529c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e0aa      	b.n	80053f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052a2:	897b      	ldrh	r3, [r7, #10]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	6a3a      	ldr	r2, [r7, #32]
 80052b6:	4952      	ldr	r1, [pc, #328]	; (8005400 <I2C_RequestMemoryRead+0x1cc>)
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f91d 	bl	80054f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e097      	b.n	80053f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e0:	6a39      	ldr	r1, [r7, #32]
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f9a8 	bl	8005638 <I2C_WaitOnTXEFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00d      	beq.n	800530a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d107      	bne.n	8005306 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005304:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e076      	b.n	80053f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d105      	bne.n	800531c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005310:	893b      	ldrh	r3, [r7, #8]
 8005312:	b2da      	uxtb	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	611a      	str	r2, [r3, #16]
 800531a:	e021      	b.n	8005360 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800531c:	893b      	ldrh	r3, [r7, #8]
 800531e:	0a1b      	lsrs	r3, r3, #8
 8005320:	b29b      	uxth	r3, r3
 8005322:	b2da      	uxtb	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800532a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532c:	6a39      	ldr	r1, [r7, #32]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 f982 	bl	8005638 <I2C_WaitOnTXEFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00d      	beq.n	8005356 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	2b04      	cmp	r3, #4
 8005340:	d107      	bne.n	8005352 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005350:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e050      	b.n	80053f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005356:	893b      	ldrh	r3, [r7, #8]
 8005358:	b2da      	uxtb	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005362:	6a39      	ldr	r1, [r7, #32]
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 f967 	bl	8005638 <I2C_WaitOnTXEFlagUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00d      	beq.n	800538c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	2b04      	cmp	r3, #4
 8005376:	d107      	bne.n	8005388 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005386:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e035      	b.n	80053f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800539a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f82b 	bl	8005404 <I2C_WaitOnFlagUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00d      	beq.n	80053d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c2:	d103      	bne.n	80053cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e013      	b.n	80053f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053d0:	897b      	ldrh	r3, [r7, #10]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	6a3a      	ldr	r2, [r7, #32]
 80053e4:	4906      	ldr	r1, [pc, #24]	; (8005400 <I2C_RequestMemoryRead+0x1cc>)
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f886 	bl	80054f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	00010002 	.word	0x00010002

08005404 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	4613      	mov	r3, r2
 8005412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005414:	e048      	b.n	80054a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541c:	d044      	beq.n	80054a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541e:	f7fe faf9 	bl	8003a14 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d302      	bcc.n	8005434 <I2C_WaitOnFlagUntilTimeout+0x30>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d139      	bne.n	80054a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	0c1b      	lsrs	r3, r3, #16
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b01      	cmp	r3, #1
 800543c:	d10d      	bne.n	800545a <I2C_WaitOnFlagUntilTimeout+0x56>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	43da      	mvns	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4013      	ands	r3, r2
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	e00c      	b.n	8005474 <I2C_WaitOnFlagUntilTimeout+0x70>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	43da      	mvns	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4013      	ands	r3, r2
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	429a      	cmp	r2, r3
 8005478:	d116      	bne.n	80054a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	f043 0220 	orr.w	r2, r3, #32
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e023      	b.n	80054f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	0c1b      	lsrs	r3, r3, #16
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d10d      	bne.n	80054ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	43da      	mvns	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4013      	ands	r3, r2
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bf0c      	ite	eq
 80054c4:	2301      	moveq	r3, #1
 80054c6:	2300      	movne	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	461a      	mov	r2, r3
 80054cc:	e00c      	b.n	80054e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	43da      	mvns	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4013      	ands	r3, r2
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bf0c      	ite	eq
 80054e0:	2301      	moveq	r3, #1
 80054e2:	2300      	movne	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	461a      	mov	r2, r3
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d093      	beq.n	8005416 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005506:	e071      	b.n	80055ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005516:	d123      	bne.n	8005560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005526:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005530:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	f043 0204 	orr.w	r2, r3, #4
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e067      	b.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005566:	d041      	beq.n	80055ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005568:	f7fe fa54 	bl	8003a14 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	429a      	cmp	r2, r3
 8005576:	d302      	bcc.n	800557e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d136      	bne.n	80055ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	0c1b      	lsrs	r3, r3, #16
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	d10c      	bne.n	80055a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	43da      	mvns	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4013      	ands	r3, r2
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	bf14      	ite	ne
 800559a:	2301      	movne	r3, #1
 800559c:	2300      	moveq	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	e00b      	b.n	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	43da      	mvns	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4013      	ands	r3, r2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bf14      	ite	ne
 80055b4:	2301      	movne	r3, #1
 80055b6:	2300      	moveq	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d016      	beq.n	80055ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	f043 0220 	orr.w	r2, r3, #32
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e021      	b.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	0c1b      	lsrs	r3, r3, #16
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d10c      	bne.n	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	43da      	mvns	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4013      	ands	r3, r2
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	bf14      	ite	ne
 8005608:	2301      	movne	r3, #1
 800560a:	2300      	moveq	r3, #0
 800560c:	b2db      	uxtb	r3, r3
 800560e:	e00b      	b.n	8005628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	43da      	mvns	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4013      	ands	r3, r2
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	bf14      	ite	ne
 8005622:	2301      	movne	r3, #1
 8005624:	2300      	moveq	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	f47f af6d 	bne.w	8005508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005644:	e034      	b.n	80056b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f8e3 	bl	8005812 <I2C_IsAcknowledgeFailed>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e034      	b.n	80056c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565c:	d028      	beq.n	80056b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565e:	f7fe f9d9 	bl	8003a14 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	429a      	cmp	r2, r3
 800566c:	d302      	bcc.n	8005674 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d11d      	bne.n	80056b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567e:	2b80      	cmp	r3, #128	; 0x80
 8005680:	d016      	beq.n	80056b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	f043 0220 	orr.w	r2, r3, #32
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e007      	b.n	80056c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ba:	2b80      	cmp	r3, #128	; 0x80
 80056bc:	d1c3      	bne.n	8005646 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056d4:	e034      	b.n	8005740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f89b 	bl	8005812 <I2C_IsAcknowledgeFailed>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e034      	b.n	8005750 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d028      	beq.n	8005740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ee:	f7fe f991 	bl	8003a14 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d11d      	bne.n	8005740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b04      	cmp	r3, #4
 8005710:	d016      	beq.n	8005740 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	f043 0220 	orr.w	r2, r3, #32
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e007      	b.n	8005750 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b04      	cmp	r3, #4
 800574c:	d1c3      	bne.n	80056d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005764:	e049      	b.n	80057fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b10      	cmp	r3, #16
 8005772:	d119      	bne.n	80057a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0210 	mvn.w	r2, #16
 800577c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e030      	b.n	800580a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a8:	f7fe f934 	bl	8003a14 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d302      	bcc.n	80057be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d11d      	bne.n	80057fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c8:	2b40      	cmp	r3, #64	; 0x40
 80057ca:	d016      	beq.n	80057fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f043 0220 	orr.w	r2, r3, #32
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e007      	b.n	800580a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	2b40      	cmp	r3, #64	; 0x40
 8005806:	d1ae      	bne.n	8005766 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005828:	d11b      	bne.n	8005862 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005832:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f043 0204 	orr.w	r2, r3, #4
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <HAL_PWR_EnterSLEEPMode+0x38>)
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <HAL_PWR_EnterSLEEPMode+0x38>)
 8005882:	f023 0304 	bic.w	r3, r3, #4
 8005886:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d005      	beq.n	800589a <HAL_PWR_EnterSLEEPMode+0x2a>
    /* Request Wait For Interrupt */
//    __WFI();
  }
  else
  {
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 800588e:	78fb      	ldrb	r3, [r7, #3]
 8005890:	2b03      	cmp	r3, #3
 8005892:	d002      	beq.n	800589a <HAL_PWR_EnterSLEEPMode+0x2a>
    {
      /* Clear all pending event */
      __SEV();
 8005894:	bf40      	sev
      __WFE();
 8005896:	bf20      	wfe
      __WFE();
 8005898:	bf20      	wfe
    }

    /* Request Wait For Event */
//    __WFI();
  }
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	e000ed00 	.word	0xe000ed00

080058ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e267      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d075      	beq.n	80059b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058ca:	4b88      	ldr	r3, [pc, #544]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 030c 	and.w	r3, r3, #12
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d00c      	beq.n	80058f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058d6:	4b85      	ldr	r3, [pc, #532]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058de:	2b08      	cmp	r3, #8
 80058e0:	d112      	bne.n	8005908 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058e2:	4b82      	ldr	r3, [pc, #520]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ee:	d10b      	bne.n	8005908 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f0:	4b7e      	ldr	r3, [pc, #504]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d05b      	beq.n	80059b4 <HAL_RCC_OscConfig+0x108>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d157      	bne.n	80059b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e242      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005910:	d106      	bne.n	8005920 <HAL_RCC_OscConfig+0x74>
 8005912:	4b76      	ldr	r3, [pc, #472]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a75      	ldr	r2, [pc, #468]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	e01d      	b.n	800595c <HAL_RCC_OscConfig+0xb0>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005928:	d10c      	bne.n	8005944 <HAL_RCC_OscConfig+0x98>
 800592a:	4b70      	ldr	r3, [pc, #448]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a6f      	ldr	r2, [pc, #444]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	4b6d      	ldr	r3, [pc, #436]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6c      	ldr	r2, [pc, #432]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 800593c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	e00b      	b.n	800595c <HAL_RCC_OscConfig+0xb0>
 8005944:	4b69      	ldr	r3, [pc, #420]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a68      	ldr	r2, [pc, #416]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 800594a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	4b66      	ldr	r3, [pc, #408]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a65      	ldr	r2, [pc, #404]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800595a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d013      	beq.n	800598c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005964:	f7fe f856 	bl	8003a14 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800596c:	f7fe f852 	bl	8003a14 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b64      	cmp	r3, #100	; 0x64
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e207      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597e:	4b5b      	ldr	r3, [pc, #364]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f0      	beq.n	800596c <HAL_RCC_OscConfig+0xc0>
 800598a:	e014      	b.n	80059b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800598c:	f7fe f842 	bl	8003a14 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005994:	f7fe f83e 	bl	8003a14 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b64      	cmp	r3, #100	; 0x64
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e1f3      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059a6:	4b51      	ldr	r3, [pc, #324]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f0      	bne.n	8005994 <HAL_RCC_OscConfig+0xe8>
 80059b2:	e000      	b.n	80059b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d063      	beq.n	8005a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059c2:	4b4a      	ldr	r3, [pc, #296]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 030c 	and.w	r3, r3, #12
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00b      	beq.n	80059e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ce:	4b47      	ldr	r3, [pc, #284]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d11c      	bne.n	8005a14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059da:	4b44      	ldr	r3, [pc, #272]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d116      	bne.n	8005a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059e6:	4b41      	ldr	r3, [pc, #260]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <HAL_RCC_OscConfig+0x152>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d001      	beq.n	80059fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e1c7      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fe:	4b3b      	ldr	r3, [pc, #236]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	4937      	ldr	r1, [pc, #220]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a12:	e03a      	b.n	8005a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d020      	beq.n	8005a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a1c:	4b34      	ldr	r3, [pc, #208]	; (8005af0 <HAL_RCC_OscConfig+0x244>)
 8005a1e:	2201      	movs	r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a22:	f7fd fff7 	bl	8003a14 <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a2a:	f7fd fff3 	bl	8003a14 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e1a8      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3c:	4b2b      	ldr	r3, [pc, #172]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0f0      	beq.n	8005a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a48:	4b28      	ldr	r3, [pc, #160]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4925      	ldr	r1, [pc, #148]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	600b      	str	r3, [r1, #0]
 8005a5c:	e015      	b.n	8005a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a5e:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <HAL_RCC_OscConfig+0x244>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a64:	f7fd ffd6 	bl	8003a14 <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a6c:	f7fd ffd2 	bl	8003a14 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e187      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a7e:	4b1b      	ldr	r3, [pc, #108]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f0      	bne.n	8005a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d036      	beq.n	8005b04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d016      	beq.n	8005acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a9e:	4b15      	ldr	r3, [pc, #84]	; (8005af4 <HAL_RCC_OscConfig+0x248>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa4:	f7fd ffb6 	bl	8003a14 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aac:	f7fd ffb2 	bl	8003a14 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e167      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005abe:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0f0      	beq.n	8005aac <HAL_RCC_OscConfig+0x200>
 8005aca:	e01b      	b.n	8005b04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005acc:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <HAL_RCC_OscConfig+0x248>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad2:	f7fd ff9f 	bl	8003a14 <HAL_GetTick>
 8005ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ad8:	e00e      	b.n	8005af8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ada:	f7fd ff9b 	bl	8003a14 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d907      	bls.n	8005af8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e150      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
 8005aec:	40023800 	.word	0x40023800
 8005af0:	42470000 	.word	0x42470000
 8005af4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af8:	4b88      	ldr	r3, [pc, #544]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1ea      	bne.n	8005ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8097 	beq.w	8005c40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b12:	2300      	movs	r3, #0
 8005b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b16:	4b81      	ldr	r3, [pc, #516]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10f      	bne.n	8005b42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b22:	2300      	movs	r3, #0
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	4b7d      	ldr	r3, [pc, #500]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	4a7c      	ldr	r2, [pc, #496]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b30:	6413      	str	r3, [r2, #64]	; 0x40
 8005b32:	4b7a      	ldr	r3, [pc, #488]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b42:	4b77      	ldr	r3, [pc, #476]	; (8005d20 <HAL_RCC_OscConfig+0x474>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d118      	bne.n	8005b80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b4e:	4b74      	ldr	r3, [pc, #464]	; (8005d20 <HAL_RCC_OscConfig+0x474>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a73      	ldr	r2, [pc, #460]	; (8005d20 <HAL_RCC_OscConfig+0x474>)
 8005b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b5a:	f7fd ff5b 	bl	8003a14 <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b62:	f7fd ff57 	bl	8003a14 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e10c      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b74:	4b6a      	ldr	r3, [pc, #424]	; (8005d20 <HAL_RCC_OscConfig+0x474>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0f0      	beq.n	8005b62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d106      	bne.n	8005b96 <HAL_RCC_OscConfig+0x2ea>
 8005b88:	4b64      	ldr	r3, [pc, #400]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8c:	4a63      	ldr	r2, [pc, #396]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005b8e:	f043 0301 	orr.w	r3, r3, #1
 8005b92:	6713      	str	r3, [r2, #112]	; 0x70
 8005b94:	e01c      	b.n	8005bd0 <HAL_RCC_OscConfig+0x324>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	2b05      	cmp	r3, #5
 8005b9c:	d10c      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x30c>
 8005b9e:	4b5f      	ldr	r3, [pc, #380]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba2:	4a5e      	ldr	r2, [pc, #376]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005ba4:	f043 0304 	orr.w	r3, r3, #4
 8005ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8005baa:	4b5c      	ldr	r3, [pc, #368]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bae:	4a5b      	ldr	r2, [pc, #364]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb6:	e00b      	b.n	8005bd0 <HAL_RCC_OscConfig+0x324>
 8005bb8:	4b58      	ldr	r3, [pc, #352]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbc:	4a57      	ldr	r2, [pc, #348]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005bbe:	f023 0301 	bic.w	r3, r3, #1
 8005bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc4:	4b55      	ldr	r3, [pc, #340]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc8:	4a54      	ldr	r2, [pc, #336]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005bca:	f023 0304 	bic.w	r3, r3, #4
 8005bce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d015      	beq.n	8005c04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd8:	f7fd ff1c 	bl	8003a14 <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bde:	e00a      	b.n	8005bf6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be0:	f7fd ff18 	bl	8003a14 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e0cb      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf6:	4b49      	ldr	r3, [pc, #292]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0ee      	beq.n	8005be0 <HAL_RCC_OscConfig+0x334>
 8005c02:	e014      	b.n	8005c2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c04:	f7fd ff06 	bl	8003a14 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c0a:	e00a      	b.n	8005c22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c0c:	f7fd ff02 	bl	8003a14 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e0b5      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c22:	4b3e      	ldr	r3, [pc, #248]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1ee      	bne.n	8005c0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d105      	bne.n	8005c40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c34:	4b39      	ldr	r3, [pc, #228]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	4a38      	ldr	r2, [pc, #224]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 80a1 	beq.w	8005d8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c4a:	4b34      	ldr	r3, [pc, #208]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d05c      	beq.n	8005d10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d141      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c5e:	4b31      	ldr	r3, [pc, #196]	; (8005d24 <HAL_RCC_OscConfig+0x478>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c64:	f7fd fed6 	bl	8003a14 <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c6c:	f7fd fed2 	bl	8003a14 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e087      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7e:	4b27      	ldr	r3, [pc, #156]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1f0      	bne.n	8005c6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69da      	ldr	r2, [r3, #28]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	019b      	lsls	r3, r3, #6
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	041b      	lsls	r3, r3, #16
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	061b      	lsls	r3, r3, #24
 8005cae:	491b      	ldr	r1, [pc, #108]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cb4:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <HAL_RCC_OscConfig+0x478>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cba:	f7fd feab 	bl	8003a14 <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc2:	f7fd fea7 	bl	8003a14 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e05c      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd4:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f0      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x416>
 8005ce0:	e054      	b.n	8005d8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce2:	4b10      	ldr	r3, [pc, #64]	; (8005d24 <HAL_RCC_OscConfig+0x478>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce8:	f7fd fe94 	bl	8003a14 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf0:	f7fd fe90 	bl	8003a14 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e045      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d02:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f0      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x444>
 8005d0e:	e03d      	b.n	8005d8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d107      	bne.n	8005d28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e038      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	40007000 	.word	0x40007000
 8005d24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d28:	4b1b      	ldr	r3, [pc, #108]	; (8005d98 <HAL_RCC_OscConfig+0x4ec>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d028      	beq.n	8005d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d121      	bne.n	8005d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d11a      	bne.n	8005d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d58:	4013      	ands	r3, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d111      	bne.n	8005d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	085b      	lsrs	r3, r3, #1
 8005d70:	3b01      	subs	r3, #1
 8005d72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d107      	bne.n	8005d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d001      	beq.n	8005d8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	40023800 	.word	0x40023800

08005d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e0cc      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005db0:	4b68      	ldr	r3, [pc, #416]	; (8005f54 <HAL_RCC_ClockConfig+0x1b8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d90c      	bls.n	8005dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dbe:	4b65      	ldr	r3, [pc, #404]	; (8005f54 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc6:	4b63      	ldr	r3, [pc, #396]	; (8005f54 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e0b8      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d020      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005df0:	4b59      	ldr	r3, [pc, #356]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	4a58      	ldr	r2, [pc, #352]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0308 	and.w	r3, r3, #8
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e08:	4b53      	ldr	r3, [pc, #332]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	4a52      	ldr	r2, [pc, #328]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e14:	4b50      	ldr	r3, [pc, #320]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	494d      	ldr	r1, [pc, #308]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d044      	beq.n	8005ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d107      	bne.n	8005e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3a:	4b47      	ldr	r3, [pc, #284]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d119      	bne.n	8005e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e07f      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d003      	beq.n	8005e5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	d107      	bne.n	8005e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5a:	4b3f      	ldr	r3, [pc, #252]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d109      	bne.n	8005e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e06f      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e6a:	4b3b      	ldr	r3, [pc, #236]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e067      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e7a:	4b37      	ldr	r3, [pc, #220]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f023 0203 	bic.w	r2, r3, #3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	4934      	ldr	r1, [pc, #208]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e8c:	f7fd fdc2 	bl	8003a14 <HAL_GetTick>
 8005e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e92:	e00a      	b.n	8005eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e94:	f7fd fdbe 	bl	8003a14 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e04f      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eaa:	4b2b      	ldr	r3, [pc, #172]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 020c 	and.w	r2, r3, #12
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d1eb      	bne.n	8005e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ebc:	4b25      	ldr	r3, [pc, #148]	; (8005f54 <HAL_RCC_ClockConfig+0x1b8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d20c      	bcs.n	8005ee4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eca:	4b22      	ldr	r3, [pc, #136]	; (8005f54 <HAL_RCC_ClockConfig+0x1b8>)
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ed2:	4b20      	ldr	r3, [pc, #128]	; (8005f54 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d001      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e032      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ef0:	4b19      	ldr	r3, [pc, #100]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	4916      	ldr	r1, [pc, #88]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d009      	beq.n	8005f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f0e:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	490e      	ldr	r1, [pc, #56]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f22:	f000 f821 	bl	8005f68 <HAL_RCC_GetSysClockFreq>
 8005f26:	4602      	mov	r2, r0
 8005f28:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	091b      	lsrs	r3, r3, #4
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	490a      	ldr	r1, [pc, #40]	; (8005f5c <HAL_RCC_ClockConfig+0x1c0>)
 8005f34:	5ccb      	ldrb	r3, [r1, r3]
 8005f36:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3a:	4a09      	ldr	r2, [pc, #36]	; (8005f60 <HAL_RCC_ClockConfig+0x1c4>)
 8005f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f3e:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <HAL_RCC_ClockConfig+0x1c8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fd fd22 	bl	800398c <HAL_InitTick>

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40023c00 	.word	0x40023c00
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	08017e68 	.word	0x08017e68
 8005f60:	2000000c 	.word	0x2000000c
 8005f64:	20000010 	.word	0x20000010

08005f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f6c:	b094      	sub	sp, #80	; 0x50
 8005f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f80:	4b79      	ldr	r3, [pc, #484]	; (8006168 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 030c 	and.w	r3, r3, #12
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d00d      	beq.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	f200 80e1 	bhi.w	8006154 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <HAL_RCC_GetSysClockFreq+0x34>
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d003      	beq.n	8005fa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f9a:	e0db      	b.n	8006154 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f9c:	4b73      	ldr	r3, [pc, #460]	; (800616c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fa0:	e0db      	b.n	800615a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fa2:	4b72      	ldr	r3, [pc, #456]	; (800616c <HAL_RCC_GetSysClockFreq+0x204>)
 8005fa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fa6:	e0d8      	b.n	800615a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fa8:	4b6f      	ldr	r3, [pc, #444]	; (8006168 <HAL_RCC_GetSysClockFreq+0x200>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fb2:	4b6d      	ldr	r3, [pc, #436]	; (8006168 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d063      	beq.n	8006086 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fbe:	4b6a      	ldr	r3, [pc, #424]	; (8006168 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	099b      	lsrs	r3, r3, #6
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005fda:	4622      	mov	r2, r4
 8005fdc:	462b      	mov	r3, r5
 8005fde:	f04f 0000 	mov.w	r0, #0
 8005fe2:	f04f 0100 	mov.w	r1, #0
 8005fe6:	0159      	lsls	r1, r3, #5
 8005fe8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fec:	0150      	lsls	r0, r2, #5
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	1a51      	subs	r1, r2, r1
 8005ff6:	6139      	str	r1, [r7, #16]
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	f04f 0200 	mov.w	r2, #0
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800600c:	4659      	mov	r1, fp
 800600e:	018b      	lsls	r3, r1, #6
 8006010:	4651      	mov	r1, sl
 8006012:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006016:	4651      	mov	r1, sl
 8006018:	018a      	lsls	r2, r1, #6
 800601a:	4651      	mov	r1, sl
 800601c:	ebb2 0801 	subs.w	r8, r2, r1
 8006020:	4659      	mov	r1, fp
 8006022:	eb63 0901 	sbc.w	r9, r3, r1
 8006026:	f04f 0200 	mov.w	r2, #0
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006036:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800603a:	4690      	mov	r8, r2
 800603c:	4699      	mov	r9, r3
 800603e:	4623      	mov	r3, r4
 8006040:	eb18 0303 	adds.w	r3, r8, r3
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	462b      	mov	r3, r5
 8006048:	eb49 0303 	adc.w	r3, r9, r3
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800605a:	4629      	mov	r1, r5
 800605c:	028b      	lsls	r3, r1, #10
 800605e:	4621      	mov	r1, r4
 8006060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006064:	4621      	mov	r1, r4
 8006066:	028a      	lsls	r2, r1, #10
 8006068:	4610      	mov	r0, r2
 800606a:	4619      	mov	r1, r3
 800606c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800606e:	2200      	movs	r2, #0
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28
 8006072:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006074:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006078:	f7fa fdfe 	bl	8000c78 <__aeabi_uldivmod>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4613      	mov	r3, r2
 8006082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006084:	e058      	b.n	8006138 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006086:	4b38      	ldr	r3, [pc, #224]	; (8006168 <HAL_RCC_GetSysClockFreq+0x200>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	099b      	lsrs	r3, r3, #6
 800608c:	2200      	movs	r2, #0
 800608e:	4618      	mov	r0, r3
 8006090:	4611      	mov	r1, r2
 8006092:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006096:	623b      	str	r3, [r7, #32]
 8006098:	2300      	movs	r3, #0
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
 800609c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060a0:	4642      	mov	r2, r8
 80060a2:	464b      	mov	r3, r9
 80060a4:	f04f 0000 	mov.w	r0, #0
 80060a8:	f04f 0100 	mov.w	r1, #0
 80060ac:	0159      	lsls	r1, r3, #5
 80060ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060b2:	0150      	lsls	r0, r2, #5
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4641      	mov	r1, r8
 80060ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80060be:	4649      	mov	r1, r9
 80060c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	f04f 0300 	mov.w	r3, #0
 80060cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060d8:	ebb2 040a 	subs.w	r4, r2, sl
 80060dc:	eb63 050b 	sbc.w	r5, r3, fp
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	00eb      	lsls	r3, r5, #3
 80060ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060ee:	00e2      	lsls	r2, r4, #3
 80060f0:	4614      	mov	r4, r2
 80060f2:	461d      	mov	r5, r3
 80060f4:	4643      	mov	r3, r8
 80060f6:	18e3      	adds	r3, r4, r3
 80060f8:	603b      	str	r3, [r7, #0]
 80060fa:	464b      	mov	r3, r9
 80060fc:	eb45 0303 	adc.w	r3, r5, r3
 8006100:	607b      	str	r3, [r7, #4]
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800610e:	4629      	mov	r1, r5
 8006110:	028b      	lsls	r3, r1, #10
 8006112:	4621      	mov	r1, r4
 8006114:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006118:	4621      	mov	r1, r4
 800611a:	028a      	lsls	r2, r1, #10
 800611c:	4610      	mov	r0, r2
 800611e:	4619      	mov	r1, r3
 8006120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006122:	2200      	movs	r2, #0
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	61fa      	str	r2, [r7, #28]
 8006128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800612c:	f7fa fda4 	bl	8000c78 <__aeabi_uldivmod>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4613      	mov	r3, r2
 8006136:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006138:	4b0b      	ldr	r3, [pc, #44]	; (8006168 <HAL_RCC_GetSysClockFreq+0x200>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	0c1b      	lsrs	r3, r3, #16
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	3301      	adds	r3, #1
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006148:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800614a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800614c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006150:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006152:	e002      	b.n	800615a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <HAL_RCC_GetSysClockFreq+0x204>)
 8006156:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800615a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800615c:	4618      	mov	r0, r3
 800615e:	3750      	adds	r7, #80	; 0x50
 8006160:	46bd      	mov	sp, r7
 8006162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006166:	bf00      	nop
 8006168:	40023800 	.word	0x40023800
 800616c:	00f42400 	.word	0x00f42400

08006170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006174:	4b03      	ldr	r3, [pc, #12]	; (8006184 <HAL_RCC_GetHCLKFreq+0x14>)
 8006176:	681b      	ldr	r3, [r3, #0]
}
 8006178:	4618      	mov	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	2000000c 	.word	0x2000000c

08006188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800618c:	f7ff fff0 	bl	8006170 <HAL_RCC_GetHCLKFreq>
 8006190:	4602      	mov	r2, r0
 8006192:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	0a9b      	lsrs	r3, r3, #10
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	4903      	ldr	r1, [pc, #12]	; (80061ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800619e:	5ccb      	ldrb	r3, [r1, r3]
 80061a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40023800 	.word	0x40023800
 80061ac:	08017e78 	.word	0x08017e78

080061b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061b4:	f7ff ffdc 	bl	8006170 <HAL_RCC_GetHCLKFreq>
 80061b8:	4602      	mov	r2, r0
 80061ba:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	0b5b      	lsrs	r3, r3, #13
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	4903      	ldr	r1, [pc, #12]	; (80061d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061c6:	5ccb      	ldrb	r3, [r1, r3]
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	40023800 	.word	0x40023800
 80061d4:	08017e78 	.word	0x08017e78

080061d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e022      	b.n	8006230 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d105      	bne.n	8006202 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7fd f94b 	bl	8003498 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2203      	movs	r2, #3
 8006206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f814 	bl	8006238 <HAL_SD_InitCard>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e00a      	b.n	8006230 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006238:	b5b0      	push	{r4, r5, r7, lr}
 800623a:	b08e      	sub	sp, #56	; 0x38
 800623c:	af04      	add	r7, sp, #16
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006240:	2300      	movs	r3, #0
 8006242:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006248:	2300      	movs	r3, #0
 800624a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006250:	2300      	movs	r3, #0
 8006252:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006254:	2376      	movs	r3, #118	; 0x76
 8006256:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681d      	ldr	r5, [r3, #0]
 800625c:	466c      	mov	r4, sp
 800625e:	f107 0314 	add.w	r3, r7, #20
 8006262:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006266:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800626a:	f107 0308 	add.w	r3, r7, #8
 800626e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006270:	4628      	mov	r0, r5
 8006272:	f002 f999 	bl	80085a8 <SDIO_Init>
 8006276:	4603      	mov	r3, r0
 8006278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800627c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e04f      	b.n	8006328 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006288:	4b29      	ldr	r3, [pc, #164]	; (8006330 <HAL_SD_InitCard+0xf8>)
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f002 f9d1 	bl	800863a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006298:	4b25      	ldr	r3, [pc, #148]	; (8006330 <HAL_SD_InitCard+0xf8>)
 800629a:	2201      	movs	r2, #1
 800629c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800629e:	2002      	movs	r0, #2
 80062a0:	f7fd fbc4 	bl	8003a2c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 ff13 	bl	80070d0 <SD_PowerON>
 80062aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	431a      	orrs	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e02e      	b.n	8006328 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fe32 	bl	8006f34 <SD_InitCard>
 80062d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e01b      	b.n	8006328 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062f8:	4618      	mov	r0, r3
 80062fa:	f002 fa30 	bl	800875e <SDMMC_CmdBlockLength>
 80062fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00f      	beq.n	8006326 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a0a      	ldr	r2, [pc, #40]	; (8006334 <HAL_SD_InitCard+0xfc>)
 800630c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3728      	adds	r7, #40	; 0x28
 800632c:	46bd      	mov	sp, r7
 800632e:	bdb0      	pop	{r4, r5, r7, pc}
 8006330:	422580a0 	.word	0x422580a0
 8006334:	004005ff 	.word	0x004005ff

08006338 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b092      	sub	sp, #72	; 0x48
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006346:	f7fd fb65 	bl	8003a14 <HAL_GetTick>
 800634a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d107      	bne.n	800636a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e1c5      	b.n	80066f6 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b01      	cmp	r3, #1
 8006374:	f040 81b8 	bne.w	80066e8 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800637e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	441a      	add	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006388:	429a      	cmp	r2, r3
 800638a:	d907      	bls.n	800639c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e1ac      	b.n	80066f6 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2203      	movs	r2, #3
 80063a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2200      	movs	r2, #0
 80063aa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d002      	beq.n	80063ba <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	025b      	lsls	r3, r3, #9
 80063b8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063ba:	f04f 33ff 	mov.w	r3, #4294967295
 80063be:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	025b      	lsls	r3, r3, #9
 80063c4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80063c6:	2390      	movs	r3, #144	; 0x90
 80063c8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80063ca:	2302      	movs	r3, #2
 80063cc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80063d2:	2301      	movs	r3, #1
 80063d4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f107 0214 	add.w	r2, r7, #20
 80063de:	4611      	mov	r1, r2
 80063e0:	4618      	mov	r0, r3
 80063e2:	f002 f990 	bl	8008706 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d90a      	bls.n	8006402 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2202      	movs	r2, #2
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063f8:	4618      	mov	r0, r3
 80063fa:	f002 f9f4 	bl	80087e6 <SDMMC_CmdReadMultiBlock>
 80063fe:	6478      	str	r0, [r7, #68]	; 0x44
 8006400:	e009      	b.n	8006416 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800640e:	4618      	mov	r0, r3
 8006410:	f002 f9c7 	bl	80087a2 <SDMMC_CmdReadSingleBlock>
 8006414:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006418:	2b00      	cmp	r3, #0
 800641a:	d012      	beq.n	8006442 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a7e      	ldr	r2, [pc, #504]	; (800661c <HAL_SD_ReadBlocks+0x2e4>)
 8006422:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800642a:	431a      	orrs	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e159      	b.n	80066f6 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006446:	e061      	b.n	800650c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d03c      	beq.n	80064d0 <HAL_SD_ReadBlocks+0x198>
 8006456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d039      	beq.n	80064d0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800645c:	2300      	movs	r3, #0
 800645e:	643b      	str	r3, [r7, #64]	; 0x40
 8006460:	e033      	b.n	80064ca <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f002 f8c9 	bl	80085fe <SDIO_ReadFIFO>
 800646c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006470:	b2da      	uxtb	r2, r3
 8006472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006474:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006478:	3301      	adds	r3, #1
 800647a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800647c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647e:	3b01      	subs	r3, #1
 8006480:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	0a1b      	lsrs	r3, r3, #8
 8006486:	b2da      	uxtb	r2, r3
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800648c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648e:	3301      	adds	r3, #1
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006494:	3b01      	subs	r3, #1
 8006496:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649a:	0c1b      	lsrs	r3, r3, #16
 800649c:	b2da      	uxtb	r2, r3
 800649e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80064a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a4:	3301      	adds	r3, #1
 80064a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80064a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064aa:	3b01      	subs	r3, #1
 80064ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	0e1b      	lsrs	r3, r3, #24
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80064b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ba:	3301      	adds	r3, #1
 80064bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80064be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c0:	3b01      	subs	r3, #1
 80064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80064c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c6:	3301      	adds	r3, #1
 80064c8:	643b      	str	r3, [r7, #64]	; 0x40
 80064ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064cc:	2b07      	cmp	r3, #7
 80064ce:	d9c8      	bls.n	8006462 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80064d0:	f7fd faa0 	bl	8003a14 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064dc:	429a      	cmp	r2, r3
 80064de:	d902      	bls.n	80064e6 <HAL_SD_ReadBlocks+0x1ae>
 80064e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d112      	bne.n	800650c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a4c      	ldr	r2, [pc, #304]	; (800661c <HAL_SD_ReadBlocks+0x2e4>)
 80064ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e0f4      	b.n	80066f6 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006512:	f240 332a 	movw	r3, #810	; 0x32a
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d095      	beq.n	8006448 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006526:	2b00      	cmp	r3, #0
 8006528:	d022      	beq.n	8006570 <HAL_SD_ReadBlocks+0x238>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d91f      	bls.n	8006570 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006534:	2b03      	cmp	r3, #3
 8006536:	d01b      	beq.n	8006570 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4618      	mov	r0, r3
 800653e:	f002 f9b9 	bl	80088b4 <SDMMC_CmdStopTransfer>
 8006542:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006546:	2b00      	cmp	r3, #0
 8006548:	d012      	beq.n	8006570 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a33      	ldr	r2, [pc, #204]	; (800661c <HAL_SD_ReadBlocks+0x2e4>)
 8006550:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006558:	431a      	orrs	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e0c2      	b.n	80066f6 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d106      	bne.n	800658c <HAL_SD_ReadBlocks+0x254>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006588:	2b00      	cmp	r3, #0
 800658a:	d012      	beq.n	80065b2 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a22      	ldr	r2, [pc, #136]	; (800661c <HAL_SD_ReadBlocks+0x2e4>)
 8006592:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	f043 0208 	orr.w	r2, r3, #8
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e0a1      	b.n	80066f6 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d012      	beq.n	80065e6 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a15      	ldr	r2, [pc, #84]	; (800661c <HAL_SD_ReadBlocks+0x2e4>)
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	f043 0202 	orr.w	r2, r3, #2
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e087      	b.n	80066f6 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d064      	beq.n	80066be <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a08      	ldr	r2, [pc, #32]	; (800661c <HAL_SD_ReadBlocks+0x2e4>)
 80065fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006600:	f043 0220 	orr.w	r2, r3, #32
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e06d      	b.n	80066f6 <HAL_SD_ReadBlocks+0x3be>
 800661a:	bf00      	nop
 800661c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f001 ffea 	bl	80085fe <SDIO_ReadFIFO>
 800662a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	b2da      	uxtb	r2, r3
 8006630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006632:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006636:	3301      	adds	r3, #1
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800663a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663c:	3b01      	subs	r3, #1
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	0a1b      	lsrs	r3, r3, #8
 8006644:	b2da      	uxtb	r2, r3
 8006646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006648:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664c:	3301      	adds	r3, #1
 800664e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006652:	3b01      	subs	r3, #1
 8006654:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	0c1b      	lsrs	r3, r3, #16
 800665a:	b2da      	uxtb	r2, r3
 800665c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	3301      	adds	r3, #1
 8006664:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006668:	3b01      	subs	r3, #1
 800666a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666e:	0e1b      	lsrs	r3, r3, #24
 8006670:	b2da      	uxtb	r2, r3
 8006672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006674:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006678:	3301      	adds	r3, #1
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800667c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800667e:	3b01      	subs	r3, #1
 8006680:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006682:	f7fd f9c7 	bl	8003a14 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800668e:	429a      	cmp	r2, r3
 8006690:	d902      	bls.n	8006698 <HAL_SD_ReadBlocks+0x360>
 8006692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006694:	2b00      	cmp	r3, #0
 8006696:	d112      	bne.n	80066be <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a18      	ldr	r2, [pc, #96]	; (8006700 <HAL_SD_ReadBlocks+0x3c8>)
 800669e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e01b      	b.n	80066f6 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <HAL_SD_ReadBlocks+0x39a>
 80066cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1a6      	bne.n	8006620 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f240 523a 	movw	r2, #1338	; 0x53a
 80066da:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	e006      	b.n	80066f6 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
  }
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3748      	adds	r7, #72	; 0x48
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	004005ff 	.word	0x004005ff

08006704 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b092      	sub	sp, #72	; 0x48
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006712:	f7fd f97f 	bl	8003a14 <HAL_GetTick>
 8006716:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d107      	bne.n	8006736 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e16d      	b.n	8006a12 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b01      	cmp	r3, #1
 8006740:	f040 8160 	bne.w	8006a04 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800674a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	441a      	add	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006754:	429a      	cmp	r2, r3
 8006756:	d907      	bls.n	8006768 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e154      	b.n	8006a12 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2203      	movs	r2, #3
 800676c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2200      	movs	r2, #0
 8006776:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677c:	2b01      	cmp	r3, #1
 800677e:	d002      	beq.n	8006786 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	025b      	lsls	r3, r3, #9
 8006784:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006786:	f04f 33ff 	mov.w	r3, #4294967295
 800678a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	025b      	lsls	r3, r3, #9
 8006790:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006792:	2390      	movs	r3, #144	; 0x90
 8006794:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006796:	2300      	movs	r3, #0
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800679a:	2300      	movs	r3, #0
 800679c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800679e:	2301      	movs	r3, #1
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f107 0218 	add.w	r2, r7, #24
 80067aa:	4611      	mov	r1, r2
 80067ac:	4618      	mov	r0, r3
 80067ae:	f001 ffaa 	bl	8008706 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d90a      	bls.n	80067ce <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2220      	movs	r2, #32
 80067bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067c4:	4618      	mov	r0, r3
 80067c6:	f002 f852 	bl	800886e <SDMMC_CmdWriteMultiBlock>
 80067ca:	6478      	str	r0, [r7, #68]	; 0x44
 80067cc:	e009      	b.n	80067e2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2210      	movs	r2, #16
 80067d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067da:	4618      	mov	r0, r3
 80067dc:	f002 f825 	bl	800882a <SDMMC_CmdWriteSingleBlock>
 80067e0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80067e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d012      	beq.n	800680e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a8b      	ldr	r2, [pc, #556]	; (8006a1c <HAL_SD_WriteBlocks+0x318>)
 80067ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f6:	431a      	orrs	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e101      	b.n	8006a12 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006812:	e065      	b.n	80068e0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d040      	beq.n	80068a4 <HAL_SD_WriteBlocks+0x1a0>
 8006822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d03d      	beq.n	80068a4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006828:	2300      	movs	r3, #0
 800682a:	643b      	str	r3, [r7, #64]	; 0x40
 800682c:	e037      	b.n	800689e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800682e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006836:	3301      	adds	r3, #1
 8006838:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800683a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683c:	3b01      	subs	r3, #1
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	021a      	lsls	r2, r3, #8
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800684c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684e:	3301      	adds	r3, #1
 8006850:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006854:	3b01      	subs	r3, #1
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	041a      	lsls	r2, r3, #16
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006866:	3301      	adds	r3, #1
 8006868:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800686a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686c:	3b01      	subs	r3, #1
 800686e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	061a      	lsls	r2, r3, #24
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800687c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687e:	3301      	adds	r3, #1
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006884:	3b01      	subs	r3, #1
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f107 0214 	add.w	r2, r7, #20
 8006890:	4611      	mov	r1, r2
 8006892:	4618      	mov	r0, r3
 8006894:	f001 fec0 	bl	8008618 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800689a:	3301      	adds	r3, #1
 800689c:	643b      	str	r3, [r7, #64]	; 0x40
 800689e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a0:	2b07      	cmp	r3, #7
 80068a2:	d9c4      	bls.n	800682e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80068a4:	f7fd f8b6 	bl	8003a14 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d902      	bls.n	80068ba <HAL_SD_WriteBlocks+0x1b6>
 80068b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d112      	bne.n	80068e0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a57      	ldr	r2, [pc, #348]	; (8006a1c <HAL_SD_WriteBlocks+0x318>)
 80068c0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068c8:	431a      	orrs	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e098      	b.n	8006a12 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e6:	f240 331a 	movw	r3, #794	; 0x31a
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d091      	beq.n	8006814 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d022      	beq.n	8006944 <HAL_SD_WriteBlocks+0x240>
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d91f      	bls.n	8006944 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	2b03      	cmp	r3, #3
 800690a:	d01b      	beq.n	8006944 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f001 ffcf 	bl	80088b4 <SDMMC_CmdStopTransfer>
 8006916:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800691a:	2b00      	cmp	r3, #0
 800691c:	d012      	beq.n	8006944 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a3e      	ldr	r2, [pc, #248]	; (8006a1c <HAL_SD_WriteBlocks+0x318>)
 8006924:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800692a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800692c:	431a      	orrs	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e066      	b.n	8006a12 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694a:	f003 0308 	and.w	r3, r3, #8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d106      	bne.n	8006960 <HAL_SD_WriteBlocks+0x25c>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800695c:	2b00      	cmp	r3, #0
 800695e:	d012      	beq.n	8006986 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a2d      	ldr	r2, [pc, #180]	; (8006a1c <HAL_SD_WriteBlocks+0x318>)
 8006966:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696c:	f043 0208 	orr.w	r2, r3, #8
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e045      	b.n	8006a12 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d012      	beq.n	80069ba <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a20      	ldr	r2, [pc, #128]	; (8006a1c <HAL_SD_WriteBlocks+0x318>)
 800699a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	f043 0202 	orr.w	r2, r3, #2
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e02b      	b.n	8006a12 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d012      	beq.n	80069ee <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a13      	ldr	r2, [pc, #76]	; (8006a1c <HAL_SD_WriteBlocks+0x318>)
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	f043 0210 	orr.w	r2, r3, #16
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e011      	b.n	8006a12 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	e006      	b.n	8006a12 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
  }
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3748      	adds	r7, #72	; 0x48
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	004005ff 	.word	0x004005ff

08006a20 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a2e:	0f9b      	lsrs	r3, r3, #30
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a3a:	0e9b      	lsrs	r3, r3, #26
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	f003 030f 	and.w	r3, r3, #15
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a4c:	0e1b      	lsrs	r3, r3, #24
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	f003 0303 	and.w	r3, r3, #3
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a5e:	0c1b      	lsrs	r3, r3, #16
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a80:	0d1b      	lsrs	r3, r3, #20
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a8c:	0c1b      	lsrs	r3, r3, #16
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a9e:	0bdb      	lsrs	r3, r3, #15
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ab0:	0b9b      	lsrs	r3, r3, #14
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ac2:	0b5b      	lsrs	r3, r3, #13
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ad4:	0b1b      	lsrs	r3, r3, #12
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d163      	bne.n	8006bb8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006af4:	009a      	lsls	r2, r3, #2
 8006af6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006afa:	4013      	ands	r3, r2
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006b00:	0f92      	lsrs	r2, r2, #30
 8006b02:	431a      	orrs	r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b0c:	0edb      	lsrs	r3, r3, #27
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b1e:	0e1b      	lsrs	r3, r3, #24
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b30:	0d5b      	lsrs	r3, r3, #21
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b42:	0c9b      	lsrs	r3, r3, #18
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b54:	0bdb      	lsrs	r3, r3, #15
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	7e1b      	ldrb	r3, [r3, #24]
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	3302      	adds	r3, #2
 8006b78:	2201      	movs	r2, #1
 8006b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b82:	fb03 f202 	mul.w	r2, r3, r2
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	7a1b      	ldrb	r3, [r3, #8]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	2201      	movs	r2, #1
 8006b96:	409a      	lsls	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006ba4:	0a52      	lsrs	r2, r2, #9
 8006ba6:	fb03 f202 	mul.w	r2, r3, r2
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bb4:	661a      	str	r2, [r3, #96]	; 0x60
 8006bb6:	e031      	b.n	8006c1c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d11d      	bne.n	8006bfc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bc4:	041b      	lsls	r3, r3, #16
 8006bc6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bce:	0c1b      	lsrs	r3, r3, #16
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	029a      	lsls	r2, r3, #10
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bf0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	661a      	str	r2, [r3, #96]	; 0x60
 8006bfa:	e00f      	b.n	8006c1c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a58      	ldr	r2, [pc, #352]	; (8006d64 <HAL_SD_GetCardCSD+0x344>)
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e09d      	b.n	8006d58 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c20:	0b9b      	lsrs	r3, r3, #14
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c32:	09db      	lsrs	r3, r3, #7
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c54:	0fdb      	lsrs	r3, r3, #31
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c60:	0f5b      	lsrs	r3, r3, #29
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c72:	0e9b      	lsrs	r3, r3, #26
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c84:	0d9b      	lsrs	r3, r3, #22
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c96:	0d5b      	lsrs	r3, r3, #21
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	0c1b      	lsrs	r3, r3, #16
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc6:	0bdb      	lsrs	r3, r3, #15
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cda:	0b9b      	lsrs	r3, r3, #14
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cee:	0b5b      	lsrs	r3, r3, #13
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d02:	0b1b      	lsrs	r3, r3, #12
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d16:	0a9b      	lsrs	r3, r3, #10
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	f003 0303 	and.w	r3, r3, #3
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	0a1b      	lsrs	r3, r3, #8
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3e:	085b      	lsrs	r3, r3, #1
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	004005ff 	.word	0x004005ff

08006d68 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006dc0:	b5b0      	push	{r4, r5, r7, lr}
 8006dc2:	b08e      	sub	sp, #56	; 0x38
 8006dc4:	af04      	add	r7, sp, #16
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2203      	movs	r2, #3
 8006dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d02e      	beq.n	8006e3e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de6:	d106      	bne.n	8006df6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	639a      	str	r2, [r3, #56]	; 0x38
 8006df4:	e029      	b.n	8006e4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dfc:	d10a      	bne.n	8006e14 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa1c 	bl	800723c <SD_WideBus_Enable>
 8006e04:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	639a      	str	r2, [r3, #56]	; 0x38
 8006e12:	e01a      	b.n	8006e4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fa59 	bl	80072d2 <SD_WideBus_Disable>
 8006e20:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8006e2e:	e00c      	b.n	8006e4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e34:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	639a      	str	r2, [r3, #56]	; 0x38
 8006e3c:	e005      	b.n	8006e4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e42:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00b      	beq.n	8006e6a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a26      	ldr	r2, [pc, #152]	; (8006ef0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006e58:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e68:	e01f      	b.n	8006eaa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681d      	ldr	r5, [r3, #0]
 8006e90:	466c      	mov	r4, sp
 8006e92:	f107 0314 	add.w	r3, r7, #20
 8006e96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e9e:	f107 0308 	add.w	r3, r7, #8
 8006ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	f001 fb7f 	bl	80085a8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 fc53 	bl	800875e <SDMMC_CmdBlockLength>
 8006eb8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00c      	beq.n	8006eda <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a0a      	ldr	r2, [pc, #40]	; (8006ef0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3728      	adds	r7, #40	; 0x28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bdb0      	pop	{r4, r5, r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	004005ff 	.word	0x004005ff

08006ef4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006f00:	f107 030c 	add.w	r3, r7, #12
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f970 	bl	80071ec <SD_SendStatus>
 8006f0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	0a5b      	lsrs	r3, r3, #9
 8006f24:	f003 030f 	and.w	r3, r3, #15
 8006f28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006f2a:	693b      	ldr	r3, [r7, #16]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f34:	b5b0      	push	{r4, r5, r7, lr}
 8006f36:	b094      	sub	sp, #80	; 0x50
 8006f38:	af04      	add	r7, sp, #16
 8006f3a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f001 fb86 	bl	8008656 <SDIO_GetPowerState>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d102      	bne.n	8006f56 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006f54:	e0b8      	b.n	80070c8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d02f      	beq.n	8006fbe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 fdb0 	bl	8008ac8 <SDMMC_CmdSendCID>
 8006f68:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <SD_InitCard+0x40>
    {
      return errorstate;
 8006f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f72:	e0a9      	b.n	80070c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 fbb0 	bl	80086e0 <SDIO_GetResponse>
 8006f80:	4602      	mov	r2, r0
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2104      	movs	r1, #4
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f001 fba7 	bl	80086e0 <SDIO_GetResponse>
 8006f92:	4602      	mov	r2, r0
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2108      	movs	r1, #8
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f001 fb9e 	bl	80086e0 <SDIO_GetResponse>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	210c      	movs	r1, #12
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f001 fb95 	bl	80086e0 <SDIO_GetResponse>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d00d      	beq.n	8006fe2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f107 020e 	add.w	r2, r7, #14
 8006fce:	4611      	mov	r1, r2
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 fdb6 	bl	8008b42 <SDMMC_CmdSetRelAdd>
 8006fd6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <SD_InitCard+0xae>
    {
      return errorstate;
 8006fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe0:	e072      	b.n	80070c8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d036      	beq.n	8007058 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006fea:	89fb      	ldrh	r3, [r7, #14]
 8006fec:	461a      	mov	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffa:	041b      	lsls	r3, r3, #16
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f001 fd80 	bl	8008b04 <SDMMC_CmdSendCSD>
 8007004:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <SD_InitCard+0xdc>
    {
      return errorstate;
 800700c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700e:	e05b      	b.n	80070c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2100      	movs	r1, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f001 fb62 	bl	80086e0 <SDIO_GetResponse>
 800701c:	4602      	mov	r2, r0
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2104      	movs	r1, #4
 8007028:	4618      	mov	r0, r3
 800702a:	f001 fb59 	bl	80086e0 <SDIO_GetResponse>
 800702e:	4602      	mov	r2, r0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2108      	movs	r1, #8
 800703a:	4618      	mov	r0, r3
 800703c:	f001 fb50 	bl	80086e0 <SDIO_GetResponse>
 8007040:	4602      	mov	r2, r0
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	210c      	movs	r1, #12
 800704c:	4618      	mov	r0, r3
 800704e:	f001 fb47 	bl	80086e0 <SDIO_GetResponse>
 8007052:	4602      	mov	r2, r0
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2104      	movs	r1, #4
 800705e:	4618      	mov	r0, r3
 8007060:	f001 fb3e 	bl	80086e0 <SDIO_GetResponse>
 8007064:	4603      	mov	r3, r0
 8007066:	0d1a      	lsrs	r2, r3, #20
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800706c:	f107 0310 	add.w	r3, r7, #16
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff fcd4 	bl	8006a20 <HAL_SD_GetCardCSD>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800707e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007082:	e021      	b.n	80070c8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6819      	ldr	r1, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708c:	041b      	lsls	r3, r3, #16
 800708e:	2200      	movs	r2, #0
 8007090:	461c      	mov	r4, r3
 8007092:	4615      	mov	r5, r2
 8007094:	4622      	mov	r2, r4
 8007096:	462b      	mov	r3, r5
 8007098:	4608      	mov	r0, r1
 800709a:	f001 fc2d 	bl	80088f8 <SDMMC_CmdSelDesel>
 800709e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80070a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <SD_InitCard+0x176>
  {
    return errorstate;
 80070a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a8:	e00e      	b.n	80070c8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681d      	ldr	r5, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	466c      	mov	r4, sp
 80070b2:	f103 0210 	add.w	r2, r3, #16
 80070b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80070b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070bc:	3304      	adds	r3, #4
 80070be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070c0:	4628      	mov	r0, r5
 80070c2:	f001 fa71 	bl	80085a8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3740      	adds	r7, #64	; 0x40
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bdb0      	pop	{r4, r5, r7, pc}

080070d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	2300      	movs	r3, #0
 80070e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 fc28 	bl	800893e <SDMMC_CmdGoIdleState>
 80070ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <SD_PowerON+0x2a>
  {
    return errorstate;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	e072      	b.n	80071e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	f001 fc3b 	bl	800897a <SDMMC_CmdOperCond>
 8007104:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00d      	beq.n	8007128 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4618      	mov	r0, r3
 8007118:	f001 fc11 	bl	800893e <SDMMC_CmdGoIdleState>
 800711c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d004      	beq.n	800712e <SD_PowerON+0x5e>
    {
      return errorstate;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	e05b      	b.n	80071e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007132:	2b01      	cmp	r3, #1
 8007134:	d137      	bne.n	80071a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2100      	movs	r1, #0
 800713c:	4618      	mov	r0, r3
 800713e:	f001 fc3b 	bl	80089b8 <SDMMC_CmdAppCommand>
 8007142:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d02d      	beq.n	80071a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800714a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800714e:	e047      	b.n	80071e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f001 fc2e 	bl	80089b8 <SDMMC_CmdAppCommand>
 800715c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <SD_PowerON+0x98>
    {
      return errorstate;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	e03b      	b.n	80071e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	491e      	ldr	r1, [pc, #120]	; (80071e8 <SD_PowerON+0x118>)
 800716e:	4618      	mov	r0, r3
 8007170:	f001 fc44 	bl	80089fc <SDMMC_CmdAppOperCommand>
 8007174:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800717c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007180:	e02e      	b.n	80071e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2100      	movs	r1, #0
 8007188:	4618      	mov	r0, r3
 800718a:	f001 faa9 	bl	80086e0 <SDIO_GetResponse>
 800718e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	0fdb      	lsrs	r3, r3, #31
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <SD_PowerON+0xcc>
 8007198:	2301      	movs	r3, #1
 800719a:	e000      	b.n	800719e <SD_PowerON+0xce>
 800719c:	2300      	movs	r3, #0
 800719e:	613b      	str	r3, [r7, #16]

    count++;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	3301      	adds	r3, #1
 80071a4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d802      	bhi.n	80071b6 <SD_PowerON+0xe6>
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0cc      	beq.n	8007150 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80071bc:	4293      	cmp	r3, r2
 80071be:	d902      	bls.n	80071c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80071c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071c4:	e00c      	b.n	80071e0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	645a      	str	r2, [r3, #68]	; 0x44
 80071d6:	e002      	b.n	80071de <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	c1100000 	.word	0xc1100000

080071ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d102      	bne.n	8007202 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80071fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007200:	e018      	b.n	8007234 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800720a:	041b      	lsls	r3, r3, #16
 800720c:	4619      	mov	r1, r3
 800720e:	4610      	mov	r0, r2
 8007210:	f001 fcb8 	bl	8008b84 <SDMMC_CmdSendStatus>
 8007214:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <SD_SendStatus+0x34>
  {
    return errorstate;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	e009      	b.n	8007234 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2100      	movs	r1, #0
 8007226:	4618      	mov	r0, r3
 8007228:	f001 fa5a 	bl	80086e0 <SDIO_GetResponse>
 800722c:	4602      	mov	r2, r0
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	2300      	movs	r3, #0
 800724a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2100      	movs	r1, #0
 8007252:	4618      	mov	r0, r3
 8007254:	f001 fa44 	bl	80086e0 <SDIO_GetResponse>
 8007258:	4603      	mov	r3, r0
 800725a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800725e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007262:	d102      	bne.n	800726a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007264:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007268:	e02f      	b.n	80072ca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800726a:	f107 030c 	add.w	r3, r7, #12
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f879 	bl	8007368 <SD_FindSCR>
 8007276:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	e023      	b.n	80072ca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01c      	beq.n	80072c6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007294:	041b      	lsls	r3, r3, #16
 8007296:	4619      	mov	r1, r3
 8007298:	4610      	mov	r0, r2
 800729a:	f001 fb8d 	bl	80089b8 <SDMMC_CmdAppCommand>
 800729e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	e00f      	b.n	80072ca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2102      	movs	r1, #2
 80072b0:	4618      	mov	r0, r3
 80072b2:	f001 fbc6 	bl	8008a42 <SDMMC_CmdBusWidth>
 80072b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	e003      	b.n	80072ca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80072c2:	2300      	movs	r3, #0
 80072c4:	e001      	b.n	80072ca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b086      	sub	sp, #24
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	2300      	movs	r3, #0
 80072e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2100      	movs	r1, #0
 80072e8:	4618      	mov	r0, r3
 80072ea:	f001 f9f9 	bl	80086e0 <SDIO_GetResponse>
 80072ee:	4603      	mov	r3, r0
 80072f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072f8:	d102      	bne.n	8007300 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072fe:	e02f      	b.n	8007360 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007300:	f107 030c 	add.w	r3, r7, #12
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f82e 	bl	8007368 <SD_FindSCR>
 800730c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	e023      	b.n	8007360 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d01c      	beq.n	800735c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800732a:	041b      	lsls	r3, r3, #16
 800732c:	4619      	mov	r1, r3
 800732e:	4610      	mov	r0, r2
 8007330:	f001 fb42 	bl	80089b8 <SDMMC_CmdAppCommand>
 8007334:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	e00f      	b.n	8007360 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2100      	movs	r1, #0
 8007346:	4618      	mov	r0, r3
 8007348:	f001 fb7b 	bl	8008a42 <SDMMC_CmdBusWidth>
 800734c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	e003      	b.n	8007360 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007358:	2300      	movs	r3, #0
 800735a:	e001      	b.n	8007360 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800735c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007368:	b590      	push	{r4, r7, lr}
 800736a:	b08f      	sub	sp, #60	; 0x3c
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007372:	f7fc fb4f 	bl	8003a14 <HAL_GetTick>
 8007376:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800737c:	2300      	movs	r3, #0
 800737e:	60bb      	str	r3, [r7, #8]
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2108      	movs	r1, #8
 800738e:	4618      	mov	r0, r3
 8007390:	f001 f9e5 	bl	800875e <SDMMC_CmdBlockLength>
 8007394:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	e0b9      	b.n	8007514 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a8:	041b      	lsls	r3, r3, #16
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f001 fb03 	bl	80089b8 <SDMMC_CmdAppCommand>
 80073b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <SD_FindSCR+0x56>
  {
    return errorstate;
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	e0aa      	b.n	8007514 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073be:	f04f 33ff 	mov.w	r3, #4294967295
 80073c2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80073c4:	2308      	movs	r3, #8
 80073c6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80073c8:	2330      	movs	r3, #48	; 0x30
 80073ca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80073cc:	2302      	movs	r3, #2
 80073ce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80073d4:	2301      	movs	r3, #1
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f107 0210 	add.w	r2, r7, #16
 80073e0:	4611      	mov	r1, r2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f001 f98f 	bl	8008706 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f001 fb4a 	bl	8008a86 <SDMMC_CmdSendSCR>
 80073f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d02a      	beq.n	8007450 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	e08a      	b.n	8007514 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00f      	beq.n	800742c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6819      	ldr	r1, [r3, #0]
 8007410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	f107 0208 	add.w	r2, r7, #8
 8007418:	18d4      	adds	r4, r2, r3
 800741a:	4608      	mov	r0, r1
 800741c:	f001 f8ef 	bl	80085fe <SDIO_ReadFIFO>
 8007420:	4603      	mov	r3, r0
 8007422:	6023      	str	r3, [r4, #0]
      index++;
 8007424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007426:	3301      	adds	r3, #1
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
 800742a:	e006      	b.n	800743a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d012      	beq.n	8007460 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800743a:	f7fc faeb 	bl	8003a14 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007448:	d102      	bne.n	8007450 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800744a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800744e:	e061      	b.n	8007514 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007456:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0cf      	beq.n	80073fe <SD_FindSCR+0x96>
 800745e:	e000      	b.n	8007462 <SD_FindSCR+0xfa>
      break;
 8007460:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b00      	cmp	r3, #0
 800746e:	d106      	bne.n	800747e <SD_FindSCR+0x116>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800747a:	2b00      	cmp	r3, #0
 800747c:	d005      	beq.n	800748a <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2208      	movs	r2, #8
 8007484:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007486:	2308      	movs	r3, #8
 8007488:	e044      	b.n	8007514 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d005      	beq.n	80074a4 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2202      	movs	r2, #2
 800749e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80074a0:	2302      	movs	r3, #2
 80074a2:	e037      	b.n	8007514 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2220      	movs	r2, #32
 80074b8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80074ba:	2320      	movs	r3, #32
 80074bc:	e02a      	b.n	8007514 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80074c6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	061a      	lsls	r2, r3, #24
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	021b      	lsls	r3, r3, #8
 80074d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	0a1b      	lsrs	r3, r3, #8
 80074da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074de:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	0e1b      	lsrs	r3, r3, #24
 80074e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	601a      	str	r2, [r3, #0]
    scr++;
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	3304      	adds	r3, #4
 80074ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	061a      	lsls	r2, r3, #24
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	021b      	lsls	r3, r3, #8
 80074f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	0a1b      	lsrs	r3, r3, #8
 8007502:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007506:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	0e1b      	lsrs	r3, r3, #24
 800750c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	373c      	adds	r7, #60	; 0x3c
 8007518:	46bd      	mov	sp, r7
 800751a:	bd90      	pop	{r4, r7, pc}

0800751c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e041      	b.n	80075b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fc f812 	bl	800356c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3304      	adds	r3, #4
 8007558:	4619      	mov	r1, r3
 800755a:	4610      	mov	r0, r2
 800755c:	f000 fa70 	bl	8007a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d001      	beq.n	80075d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e044      	b.n	800765e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f042 0201 	orr.w	r2, r2, #1
 80075ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a1e      	ldr	r2, [pc, #120]	; (800766c <HAL_TIM_Base_Start_IT+0xb0>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d018      	beq.n	8007628 <HAL_TIM_Base_Start_IT+0x6c>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075fe:	d013      	beq.n	8007628 <HAL_TIM_Base_Start_IT+0x6c>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a1a      	ldr	r2, [pc, #104]	; (8007670 <HAL_TIM_Base_Start_IT+0xb4>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d00e      	beq.n	8007628 <HAL_TIM_Base_Start_IT+0x6c>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a19      	ldr	r2, [pc, #100]	; (8007674 <HAL_TIM_Base_Start_IT+0xb8>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d009      	beq.n	8007628 <HAL_TIM_Base_Start_IT+0x6c>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a17      	ldr	r2, [pc, #92]	; (8007678 <HAL_TIM_Base_Start_IT+0xbc>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d004      	beq.n	8007628 <HAL_TIM_Base_Start_IT+0x6c>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a16      	ldr	r2, [pc, #88]	; (800767c <HAL_TIM_Base_Start_IT+0xc0>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d111      	bne.n	800764c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b06      	cmp	r3, #6
 8007638:	d010      	beq.n	800765c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f042 0201 	orr.w	r2, r2, #1
 8007648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800764a:	e007      	b.n	800765c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0201 	orr.w	r2, r2, #1
 800765a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	40010000 	.word	0x40010000
 8007670:	40000400 	.word	0x40000400
 8007674:	40000800 	.word	0x40000800
 8007678:	40000c00 	.word	0x40000c00
 800767c:	40014000 	.word	0x40014000

08007680 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d020      	beq.n	80076e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f003 0302 	and.w	r3, r3, #2
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d01b      	beq.n	80076e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f06f 0202 	mvn.w	r2, #2
 80076b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f999 	bl	8007a02 <HAL_TIM_IC_CaptureCallback>
 80076d0:	e005      	b.n	80076de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f98b 	bl	80079ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f99c 	bl	8007a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f003 0304 	and.w	r3, r3, #4
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d020      	beq.n	8007730 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01b      	beq.n	8007730 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f06f 0204 	mvn.w	r2, #4
 8007700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2202      	movs	r2, #2
 8007706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f973 	bl	8007a02 <HAL_TIM_IC_CaptureCallback>
 800771c:	e005      	b.n	800772a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f965 	bl	80079ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f976 	bl	8007a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d020      	beq.n	800777c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01b      	beq.n	800777c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f06f 0208 	mvn.w	r2, #8
 800774c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2204      	movs	r2, #4
 8007752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f94d 	bl	8007a02 <HAL_TIM_IC_CaptureCallback>
 8007768:	e005      	b.n	8007776 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f93f 	bl	80079ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f950 	bl	8007a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b00      	cmp	r3, #0
 8007784:	d020      	beq.n	80077c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f003 0310 	and.w	r3, r3, #16
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01b      	beq.n	80077c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f06f 0210 	mvn.w	r2, #16
 8007798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2208      	movs	r2, #8
 800779e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f927 	bl	8007a02 <HAL_TIM_IC_CaptureCallback>
 80077b4:	e005      	b.n	80077c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f919 	bl	80079ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f92a 	bl	8007a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00c      	beq.n	80077ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d007      	beq.n	80077ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f06f 0201 	mvn.w	r2, #1
 80077e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fa f83c 	bl	8001864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00c      	beq.n	8007810 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d007      	beq.n	8007810 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fab6 	bl	8007d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00c      	beq.n	8007834 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007820:	2b00      	cmp	r3, #0
 8007822:	d007      	beq.n	8007834 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800782c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f8fb 	bl	8007a2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00c      	beq.n	8007858 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f003 0320 	and.w	r3, r3, #32
 8007844:	2b00      	cmp	r3, #0
 8007846:	d007      	beq.n	8007858 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f06f 0220 	mvn.w	r2, #32
 8007850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fa88 	bl	8007d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007858:	bf00      	nop
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007874:	2b01      	cmp	r3, #1
 8007876:	d101      	bne.n	800787c <HAL_TIM_ConfigClockSource+0x1c>
 8007878:	2302      	movs	r3, #2
 800787a:	e0b4      	b.n	80079e6 <HAL_TIM_ConfigClockSource+0x186>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800789a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078b4:	d03e      	beq.n	8007934 <HAL_TIM_ConfigClockSource+0xd4>
 80078b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ba:	f200 8087 	bhi.w	80079cc <HAL_TIM_ConfigClockSource+0x16c>
 80078be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c2:	f000 8086 	beq.w	80079d2 <HAL_TIM_ConfigClockSource+0x172>
 80078c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ca:	d87f      	bhi.n	80079cc <HAL_TIM_ConfigClockSource+0x16c>
 80078cc:	2b70      	cmp	r3, #112	; 0x70
 80078ce:	d01a      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0xa6>
 80078d0:	2b70      	cmp	r3, #112	; 0x70
 80078d2:	d87b      	bhi.n	80079cc <HAL_TIM_ConfigClockSource+0x16c>
 80078d4:	2b60      	cmp	r3, #96	; 0x60
 80078d6:	d050      	beq.n	800797a <HAL_TIM_ConfigClockSource+0x11a>
 80078d8:	2b60      	cmp	r3, #96	; 0x60
 80078da:	d877      	bhi.n	80079cc <HAL_TIM_ConfigClockSource+0x16c>
 80078dc:	2b50      	cmp	r3, #80	; 0x50
 80078de:	d03c      	beq.n	800795a <HAL_TIM_ConfigClockSource+0xfa>
 80078e0:	2b50      	cmp	r3, #80	; 0x50
 80078e2:	d873      	bhi.n	80079cc <HAL_TIM_ConfigClockSource+0x16c>
 80078e4:	2b40      	cmp	r3, #64	; 0x40
 80078e6:	d058      	beq.n	800799a <HAL_TIM_ConfigClockSource+0x13a>
 80078e8:	2b40      	cmp	r3, #64	; 0x40
 80078ea:	d86f      	bhi.n	80079cc <HAL_TIM_ConfigClockSource+0x16c>
 80078ec:	2b30      	cmp	r3, #48	; 0x30
 80078ee:	d064      	beq.n	80079ba <HAL_TIM_ConfigClockSource+0x15a>
 80078f0:	2b30      	cmp	r3, #48	; 0x30
 80078f2:	d86b      	bhi.n	80079cc <HAL_TIM_ConfigClockSource+0x16c>
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	d060      	beq.n	80079ba <HAL_TIM_ConfigClockSource+0x15a>
 80078f8:	2b20      	cmp	r3, #32
 80078fa:	d867      	bhi.n	80079cc <HAL_TIM_ConfigClockSource+0x16c>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d05c      	beq.n	80079ba <HAL_TIM_ConfigClockSource+0x15a>
 8007900:	2b10      	cmp	r3, #16
 8007902:	d05a      	beq.n	80079ba <HAL_TIM_ConfigClockSource+0x15a>
 8007904:	e062      	b.n	80079cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007916:	f000 f999 	bl	8007c4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007928:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	609a      	str	r2, [r3, #8]
      break;
 8007932:	e04f      	b.n	80079d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007944:	f000 f982 	bl	8007c4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689a      	ldr	r2, [r3, #8]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007956:	609a      	str	r2, [r3, #8]
      break;
 8007958:	e03c      	b.n	80079d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007966:	461a      	mov	r2, r3
 8007968:	f000 f8f6 	bl	8007b58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2150      	movs	r1, #80	; 0x50
 8007972:	4618      	mov	r0, r3
 8007974:	f000 f94f 	bl	8007c16 <TIM_ITRx_SetConfig>
      break;
 8007978:	e02c      	b.n	80079d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007986:	461a      	mov	r2, r3
 8007988:	f000 f915 	bl	8007bb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2160      	movs	r1, #96	; 0x60
 8007992:	4618      	mov	r0, r3
 8007994:	f000 f93f 	bl	8007c16 <TIM_ITRx_SetConfig>
      break;
 8007998:	e01c      	b.n	80079d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079a6:	461a      	mov	r2, r3
 80079a8:	f000 f8d6 	bl	8007b58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2140      	movs	r1, #64	; 0x40
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 f92f 	bl	8007c16 <TIM_ITRx_SetConfig>
      break;
 80079b8:	e00c      	b.n	80079d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f000 f926 	bl	8007c16 <TIM_ITRx_SetConfig>
      break;
 80079ca:	e003      	b.n	80079d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	73fb      	strb	r3, [r7, #15]
      break;
 80079d0:	e000      	b.n	80079d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a1e:	bf00      	nop
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a32:	bf00      	nop
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
	...

08007a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a3a      	ldr	r2, [pc, #232]	; (8007b3c <TIM_Base_SetConfig+0xfc>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00f      	beq.n	8007a78 <TIM_Base_SetConfig+0x38>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a5e:	d00b      	beq.n	8007a78 <TIM_Base_SetConfig+0x38>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a37      	ldr	r2, [pc, #220]	; (8007b40 <TIM_Base_SetConfig+0x100>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d007      	beq.n	8007a78 <TIM_Base_SetConfig+0x38>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a36      	ldr	r2, [pc, #216]	; (8007b44 <TIM_Base_SetConfig+0x104>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d003      	beq.n	8007a78 <TIM_Base_SetConfig+0x38>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a35      	ldr	r2, [pc, #212]	; (8007b48 <TIM_Base_SetConfig+0x108>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d108      	bne.n	8007a8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a2b      	ldr	r2, [pc, #172]	; (8007b3c <TIM_Base_SetConfig+0xfc>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d01b      	beq.n	8007aca <TIM_Base_SetConfig+0x8a>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a98:	d017      	beq.n	8007aca <TIM_Base_SetConfig+0x8a>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a28      	ldr	r2, [pc, #160]	; (8007b40 <TIM_Base_SetConfig+0x100>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d013      	beq.n	8007aca <TIM_Base_SetConfig+0x8a>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a27      	ldr	r2, [pc, #156]	; (8007b44 <TIM_Base_SetConfig+0x104>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00f      	beq.n	8007aca <TIM_Base_SetConfig+0x8a>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a26      	ldr	r2, [pc, #152]	; (8007b48 <TIM_Base_SetConfig+0x108>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00b      	beq.n	8007aca <TIM_Base_SetConfig+0x8a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a25      	ldr	r2, [pc, #148]	; (8007b4c <TIM_Base_SetConfig+0x10c>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d007      	beq.n	8007aca <TIM_Base_SetConfig+0x8a>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a24      	ldr	r2, [pc, #144]	; (8007b50 <TIM_Base_SetConfig+0x110>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <TIM_Base_SetConfig+0x8a>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a23      	ldr	r2, [pc, #140]	; (8007b54 <TIM_Base_SetConfig+0x114>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d108      	bne.n	8007adc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a0e      	ldr	r2, [pc, #56]	; (8007b3c <TIM_Base_SetConfig+0xfc>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d103      	bne.n	8007b10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d105      	bne.n	8007b2e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f023 0201 	bic.w	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	611a      	str	r2, [r3, #16]
  }
}
 8007b2e:	bf00      	nop
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	40000400 	.word	0x40000400
 8007b44:	40000800 	.word	0x40000800
 8007b48:	40000c00 	.word	0x40000c00
 8007b4c:	40014000 	.word	0x40014000
 8007b50:	40014400 	.word	0x40014400
 8007b54:	40014800 	.word	0x40014800

08007b58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	f023 0201 	bic.w	r2, r3, #1
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	011b      	lsls	r3, r3, #4
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f023 030a 	bic.w	r3, r3, #10
 8007b94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	621a      	str	r2, [r3, #32]
}
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b087      	sub	sp, #28
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	60f8      	str	r0, [r7, #12]
 8007bbe:	60b9      	str	r1, [r7, #8]
 8007bc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	f023 0210 	bic.w	r2, r3, #16
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007be0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	031b      	lsls	r3, r3, #12
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bf2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	621a      	str	r2, [r3, #32]
}
 8007c0a:	bf00      	nop
 8007c0c:	371c      	adds	r7, #28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b085      	sub	sp, #20
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	f043 0307 	orr.w	r3, r3, #7
 8007c38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	609a      	str	r2, [r3, #8]
}
 8007c40:	bf00      	nop
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
 8007c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	021a      	lsls	r2, r3, #8
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	609a      	str	r2, [r3, #8]
}
 8007c80:	bf00      	nop
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d101      	bne.n	8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	e050      	b.n	8007d46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a1c      	ldr	r2, [pc, #112]	; (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d018      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf0:	d013      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a18      	ldr	r2, [pc, #96]	; (8007d58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d00e      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a16      	ldr	r2, [pc, #88]	; (8007d5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d009      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a15      	ldr	r2, [pc, #84]	; (8007d60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d004      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a13      	ldr	r2, [pc, #76]	; (8007d64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d10c      	bne.n	8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	40010000 	.word	0x40010000
 8007d58:	40000400 	.word	0x40000400
 8007d5c:	40000800 	.word	0x40000800
 8007d60:	40000c00 	.word	0x40000c00
 8007d64:	40014000 	.word	0x40014000

08007d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e042      	b.n	8007e28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d106      	bne.n	8007dbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7fb fc1e 	bl	80035f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2224      	movs	r2, #36	; 0x24
 8007dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f973 	bl	80080c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	691a      	ldr	r2, [r3, #16]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	695a      	ldr	r2, [r3, #20]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68da      	ldr	r2, [r3, #12]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2220      	movs	r2, #32
 8007e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2220      	movs	r2, #32
 8007e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08a      	sub	sp, #40	; 0x28
 8007e34:	af02      	add	r7, sp, #8
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b20      	cmp	r3, #32
 8007e4e:	d175      	bne.n	8007f3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <HAL_UART_Transmit+0x2c>
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e06e      	b.n	8007f3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2221      	movs	r2, #33	; 0x21
 8007e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e6e:	f7fb fdd1 	bl	8003a14 <HAL_GetTick>
 8007e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	88fa      	ldrh	r2, [r7, #6]
 8007e78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	88fa      	ldrh	r2, [r7, #6]
 8007e7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e88:	d108      	bne.n	8007e9c <HAL_UART_Transmit+0x6c>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d104      	bne.n	8007e9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	61bb      	str	r3, [r7, #24]
 8007e9a:	e003      	b.n	8007ea4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ea4:	e02e      	b.n	8007f04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2200      	movs	r2, #0
 8007eae:	2180      	movs	r1, #128	; 0x80
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 f848 	bl	8007f46 <UART_WaitOnFlagUntilTimeout>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d005      	beq.n	8007ec8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e03a      	b.n	8007f3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10b      	bne.n	8007ee6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007edc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	3302      	adds	r3, #2
 8007ee2:	61bb      	str	r3, [r7, #24]
 8007ee4:	e007      	b.n	8007ef6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	781a      	ldrb	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1cb      	bne.n	8007ea6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2200      	movs	r2, #0
 8007f16:	2140      	movs	r1, #64	; 0x40
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f814 	bl	8007f46 <UART_WaitOnFlagUntilTimeout>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d005      	beq.n	8007f30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e006      	b.n	8007f3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	e000      	b.n	8007f3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007f3c:	2302      	movs	r3, #2
  }
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3720      	adds	r7, #32
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b086      	sub	sp, #24
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	603b      	str	r3, [r7, #0]
 8007f52:	4613      	mov	r3, r2
 8007f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f56:	e03b      	b.n	8007fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5e:	d037      	beq.n	8007fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f60:	f7fb fd58 	bl	8003a14 <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	6a3a      	ldr	r2, [r7, #32]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d302      	bcc.n	8007f76 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e03a      	b.n	8007ff0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d023      	beq.n	8007fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	2b80      	cmp	r3, #128	; 0x80
 8007f8c:	d020      	beq.n	8007fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b40      	cmp	r3, #64	; 0x40
 8007f92:	d01d      	beq.n	8007fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0308 	and.w	r3, r3, #8
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	d116      	bne.n	8007fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	617b      	str	r3, [r7, #20]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 f81d 	bl	8007ff8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e00f      	b.n	8007ff0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	bf0c      	ite	eq
 8007fe0:	2301      	moveq	r3, #1
 8007fe2:	2300      	movne	r3, #0
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	79fb      	ldrb	r3, [r7, #7]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d0b4      	beq.n	8007f58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b095      	sub	sp, #84	; 0x54
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	330c      	adds	r3, #12
 8008006:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800a:	e853 3f00 	ldrex	r3, [r3]
 800800e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	330c      	adds	r3, #12
 800801e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008020:	643a      	str	r2, [r7, #64]	; 0x40
 8008022:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008026:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008028:	e841 2300 	strex	r3, r2, [r1]
 800802c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e5      	bne.n	8008000 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3314      	adds	r3, #20
 800803a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	e853 3f00 	ldrex	r3, [r3]
 8008042:	61fb      	str	r3, [r7, #28]
   return(result);
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	f023 0301 	bic.w	r3, r3, #1
 800804a:	64bb      	str	r3, [r7, #72]	; 0x48
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3314      	adds	r3, #20
 8008052:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008054:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008056:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800805a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800805c:	e841 2300 	strex	r3, r2, [r1]
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1e5      	bne.n	8008034 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806c:	2b01      	cmp	r3, #1
 800806e:	d119      	bne.n	80080a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	330c      	adds	r3, #12
 8008076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	e853 3f00 	ldrex	r3, [r3]
 800807e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f023 0310 	bic.w	r3, r3, #16
 8008086:	647b      	str	r3, [r7, #68]	; 0x44
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	330c      	adds	r3, #12
 800808e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008090:	61ba      	str	r2, [r7, #24]
 8008092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	6979      	ldr	r1, [r7, #20]
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	e841 2300 	strex	r3, r2, [r1]
 800809c:	613b      	str	r3, [r7, #16]
   return(result);
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e5      	bne.n	8008070 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2220      	movs	r2, #32
 80080a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80080b2:	bf00      	nop
 80080b4:	3754      	adds	r7, #84	; 0x54
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
	...

080080c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080c4:	b0c0      	sub	sp, #256	; 0x100
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080dc:	68d9      	ldr	r1, [r3, #12]
 80080de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	ea40 0301 	orr.w	r3, r0, r1
 80080e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	431a      	orrs	r2, r3
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	431a      	orrs	r2, r3
 8008100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	4313      	orrs	r3, r2
 8008108:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008118:	f021 010c 	bic.w	r1, r1, #12
 800811c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008126:	430b      	orrs	r3, r1
 8008128:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800812a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800813a:	6999      	ldr	r1, [r3, #24]
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	ea40 0301 	orr.w	r3, r0, r1
 8008146:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	4b8f      	ldr	r3, [pc, #572]	; (800838c <UART_SetConfig+0x2cc>)
 8008150:	429a      	cmp	r2, r3
 8008152:	d005      	beq.n	8008160 <UART_SetConfig+0xa0>
 8008154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4b8d      	ldr	r3, [pc, #564]	; (8008390 <UART_SetConfig+0x2d0>)
 800815c:	429a      	cmp	r2, r3
 800815e:	d104      	bne.n	800816a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008160:	f7fe f826 	bl	80061b0 <HAL_RCC_GetPCLK2Freq>
 8008164:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008168:	e003      	b.n	8008172 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800816a:	f7fe f80d 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 800816e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800817c:	f040 810c 	bne.w	8008398 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008184:	2200      	movs	r2, #0
 8008186:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800818a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800818e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008192:	4622      	mov	r2, r4
 8008194:	462b      	mov	r3, r5
 8008196:	1891      	adds	r1, r2, r2
 8008198:	65b9      	str	r1, [r7, #88]	; 0x58
 800819a:	415b      	adcs	r3, r3
 800819c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800819e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081a2:	4621      	mov	r1, r4
 80081a4:	eb12 0801 	adds.w	r8, r2, r1
 80081a8:	4629      	mov	r1, r5
 80081aa:	eb43 0901 	adc.w	r9, r3, r1
 80081ae:	f04f 0200 	mov.w	r2, #0
 80081b2:	f04f 0300 	mov.w	r3, #0
 80081b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081c2:	4690      	mov	r8, r2
 80081c4:	4699      	mov	r9, r3
 80081c6:	4623      	mov	r3, r4
 80081c8:	eb18 0303 	adds.w	r3, r8, r3
 80081cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081d0:	462b      	mov	r3, r5
 80081d2:	eb49 0303 	adc.w	r3, r9, r3
 80081d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081ee:	460b      	mov	r3, r1
 80081f0:	18db      	adds	r3, r3, r3
 80081f2:	653b      	str	r3, [r7, #80]	; 0x50
 80081f4:	4613      	mov	r3, r2
 80081f6:	eb42 0303 	adc.w	r3, r2, r3
 80081fa:	657b      	str	r3, [r7, #84]	; 0x54
 80081fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008200:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008204:	f7f8 fd38 	bl	8000c78 <__aeabi_uldivmod>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4b61      	ldr	r3, [pc, #388]	; (8008394 <UART_SetConfig+0x2d4>)
 800820e:	fba3 2302 	umull	r2, r3, r3, r2
 8008212:	095b      	lsrs	r3, r3, #5
 8008214:	011c      	lsls	r4, r3, #4
 8008216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800821a:	2200      	movs	r2, #0
 800821c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008220:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008224:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008228:	4642      	mov	r2, r8
 800822a:	464b      	mov	r3, r9
 800822c:	1891      	adds	r1, r2, r2
 800822e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008230:	415b      	adcs	r3, r3
 8008232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008234:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008238:	4641      	mov	r1, r8
 800823a:	eb12 0a01 	adds.w	sl, r2, r1
 800823e:	4649      	mov	r1, r9
 8008240:	eb43 0b01 	adc.w	fp, r3, r1
 8008244:	f04f 0200 	mov.w	r2, #0
 8008248:	f04f 0300 	mov.w	r3, #0
 800824c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008250:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008258:	4692      	mov	sl, r2
 800825a:	469b      	mov	fp, r3
 800825c:	4643      	mov	r3, r8
 800825e:	eb1a 0303 	adds.w	r3, sl, r3
 8008262:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008266:	464b      	mov	r3, r9
 8008268:	eb4b 0303 	adc.w	r3, fp, r3
 800826c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800827c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008280:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008284:	460b      	mov	r3, r1
 8008286:	18db      	adds	r3, r3, r3
 8008288:	643b      	str	r3, [r7, #64]	; 0x40
 800828a:	4613      	mov	r3, r2
 800828c:	eb42 0303 	adc.w	r3, r2, r3
 8008290:	647b      	str	r3, [r7, #68]	; 0x44
 8008292:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008296:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800829a:	f7f8 fced 	bl	8000c78 <__aeabi_uldivmod>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4611      	mov	r1, r2
 80082a4:	4b3b      	ldr	r3, [pc, #236]	; (8008394 <UART_SetConfig+0x2d4>)
 80082a6:	fba3 2301 	umull	r2, r3, r3, r1
 80082aa:	095b      	lsrs	r3, r3, #5
 80082ac:	2264      	movs	r2, #100	; 0x64
 80082ae:	fb02 f303 	mul.w	r3, r2, r3
 80082b2:	1acb      	subs	r3, r1, r3
 80082b4:	00db      	lsls	r3, r3, #3
 80082b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082ba:	4b36      	ldr	r3, [pc, #216]	; (8008394 <UART_SetConfig+0x2d4>)
 80082bc:	fba3 2302 	umull	r2, r3, r3, r2
 80082c0:	095b      	lsrs	r3, r3, #5
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082c8:	441c      	add	r4, r3
 80082ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082dc:	4642      	mov	r2, r8
 80082de:	464b      	mov	r3, r9
 80082e0:	1891      	adds	r1, r2, r2
 80082e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80082e4:	415b      	adcs	r3, r3
 80082e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082ec:	4641      	mov	r1, r8
 80082ee:	1851      	adds	r1, r2, r1
 80082f0:	6339      	str	r1, [r7, #48]	; 0x30
 80082f2:	4649      	mov	r1, r9
 80082f4:	414b      	adcs	r3, r1
 80082f6:	637b      	str	r3, [r7, #52]	; 0x34
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	f04f 0300 	mov.w	r3, #0
 8008300:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008304:	4659      	mov	r1, fp
 8008306:	00cb      	lsls	r3, r1, #3
 8008308:	4651      	mov	r1, sl
 800830a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800830e:	4651      	mov	r1, sl
 8008310:	00ca      	lsls	r2, r1, #3
 8008312:	4610      	mov	r0, r2
 8008314:	4619      	mov	r1, r3
 8008316:	4603      	mov	r3, r0
 8008318:	4642      	mov	r2, r8
 800831a:	189b      	adds	r3, r3, r2
 800831c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008320:	464b      	mov	r3, r9
 8008322:	460a      	mov	r2, r1
 8008324:	eb42 0303 	adc.w	r3, r2, r3
 8008328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008338:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800833c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008340:	460b      	mov	r3, r1
 8008342:	18db      	adds	r3, r3, r3
 8008344:	62bb      	str	r3, [r7, #40]	; 0x28
 8008346:	4613      	mov	r3, r2
 8008348:	eb42 0303 	adc.w	r3, r2, r3
 800834c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800834e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008352:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008356:	f7f8 fc8f 	bl	8000c78 <__aeabi_uldivmod>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	4b0d      	ldr	r3, [pc, #52]	; (8008394 <UART_SetConfig+0x2d4>)
 8008360:	fba3 1302 	umull	r1, r3, r3, r2
 8008364:	095b      	lsrs	r3, r3, #5
 8008366:	2164      	movs	r1, #100	; 0x64
 8008368:	fb01 f303 	mul.w	r3, r1, r3
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	00db      	lsls	r3, r3, #3
 8008370:	3332      	adds	r3, #50	; 0x32
 8008372:	4a08      	ldr	r2, [pc, #32]	; (8008394 <UART_SetConfig+0x2d4>)
 8008374:	fba2 2303 	umull	r2, r3, r2, r3
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	f003 0207 	and.w	r2, r3, #7
 800837e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4422      	add	r2, r4
 8008386:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008388:	e106      	b.n	8008598 <UART_SetConfig+0x4d8>
 800838a:	bf00      	nop
 800838c:	40011000 	.word	0x40011000
 8008390:	40011400 	.word	0x40011400
 8008394:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800839c:	2200      	movs	r2, #0
 800839e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083aa:	4642      	mov	r2, r8
 80083ac:	464b      	mov	r3, r9
 80083ae:	1891      	adds	r1, r2, r2
 80083b0:	6239      	str	r1, [r7, #32]
 80083b2:	415b      	adcs	r3, r3
 80083b4:	627b      	str	r3, [r7, #36]	; 0x24
 80083b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083ba:	4641      	mov	r1, r8
 80083bc:	1854      	adds	r4, r2, r1
 80083be:	4649      	mov	r1, r9
 80083c0:	eb43 0501 	adc.w	r5, r3, r1
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	f04f 0300 	mov.w	r3, #0
 80083cc:	00eb      	lsls	r3, r5, #3
 80083ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083d2:	00e2      	lsls	r2, r4, #3
 80083d4:	4614      	mov	r4, r2
 80083d6:	461d      	mov	r5, r3
 80083d8:	4643      	mov	r3, r8
 80083da:	18e3      	adds	r3, r4, r3
 80083dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083e0:	464b      	mov	r3, r9
 80083e2:	eb45 0303 	adc.w	r3, r5, r3
 80083e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083fa:	f04f 0200 	mov.w	r2, #0
 80083fe:	f04f 0300 	mov.w	r3, #0
 8008402:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008406:	4629      	mov	r1, r5
 8008408:	008b      	lsls	r3, r1, #2
 800840a:	4621      	mov	r1, r4
 800840c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008410:	4621      	mov	r1, r4
 8008412:	008a      	lsls	r2, r1, #2
 8008414:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008418:	f7f8 fc2e 	bl	8000c78 <__aeabi_uldivmod>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4b60      	ldr	r3, [pc, #384]	; (80085a4 <UART_SetConfig+0x4e4>)
 8008422:	fba3 2302 	umull	r2, r3, r3, r2
 8008426:	095b      	lsrs	r3, r3, #5
 8008428:	011c      	lsls	r4, r3, #4
 800842a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800842e:	2200      	movs	r2, #0
 8008430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008434:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008438:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800843c:	4642      	mov	r2, r8
 800843e:	464b      	mov	r3, r9
 8008440:	1891      	adds	r1, r2, r2
 8008442:	61b9      	str	r1, [r7, #24]
 8008444:	415b      	adcs	r3, r3
 8008446:	61fb      	str	r3, [r7, #28]
 8008448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800844c:	4641      	mov	r1, r8
 800844e:	1851      	adds	r1, r2, r1
 8008450:	6139      	str	r1, [r7, #16]
 8008452:	4649      	mov	r1, r9
 8008454:	414b      	adcs	r3, r1
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	f04f 0200 	mov.w	r2, #0
 800845c:	f04f 0300 	mov.w	r3, #0
 8008460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008464:	4659      	mov	r1, fp
 8008466:	00cb      	lsls	r3, r1, #3
 8008468:	4651      	mov	r1, sl
 800846a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800846e:	4651      	mov	r1, sl
 8008470:	00ca      	lsls	r2, r1, #3
 8008472:	4610      	mov	r0, r2
 8008474:	4619      	mov	r1, r3
 8008476:	4603      	mov	r3, r0
 8008478:	4642      	mov	r2, r8
 800847a:	189b      	adds	r3, r3, r2
 800847c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008480:	464b      	mov	r3, r9
 8008482:	460a      	mov	r2, r1
 8008484:	eb42 0303 	adc.w	r3, r2, r3
 8008488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	67bb      	str	r3, [r7, #120]	; 0x78
 8008496:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	f04f 0300 	mov.w	r3, #0
 80084a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084a4:	4649      	mov	r1, r9
 80084a6:	008b      	lsls	r3, r1, #2
 80084a8:	4641      	mov	r1, r8
 80084aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084ae:	4641      	mov	r1, r8
 80084b0:	008a      	lsls	r2, r1, #2
 80084b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084b6:	f7f8 fbdf 	bl	8000c78 <__aeabi_uldivmod>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4611      	mov	r1, r2
 80084c0:	4b38      	ldr	r3, [pc, #224]	; (80085a4 <UART_SetConfig+0x4e4>)
 80084c2:	fba3 2301 	umull	r2, r3, r3, r1
 80084c6:	095b      	lsrs	r3, r3, #5
 80084c8:	2264      	movs	r2, #100	; 0x64
 80084ca:	fb02 f303 	mul.w	r3, r2, r3
 80084ce:	1acb      	subs	r3, r1, r3
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	3332      	adds	r3, #50	; 0x32
 80084d4:	4a33      	ldr	r2, [pc, #204]	; (80085a4 <UART_SetConfig+0x4e4>)
 80084d6:	fba2 2303 	umull	r2, r3, r2, r3
 80084da:	095b      	lsrs	r3, r3, #5
 80084dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084e0:	441c      	add	r4, r3
 80084e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084e6:	2200      	movs	r2, #0
 80084e8:	673b      	str	r3, [r7, #112]	; 0x70
 80084ea:	677a      	str	r2, [r7, #116]	; 0x74
 80084ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084f0:	4642      	mov	r2, r8
 80084f2:	464b      	mov	r3, r9
 80084f4:	1891      	adds	r1, r2, r2
 80084f6:	60b9      	str	r1, [r7, #8]
 80084f8:	415b      	adcs	r3, r3
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008500:	4641      	mov	r1, r8
 8008502:	1851      	adds	r1, r2, r1
 8008504:	6039      	str	r1, [r7, #0]
 8008506:	4649      	mov	r1, r9
 8008508:	414b      	adcs	r3, r1
 800850a:	607b      	str	r3, [r7, #4]
 800850c:	f04f 0200 	mov.w	r2, #0
 8008510:	f04f 0300 	mov.w	r3, #0
 8008514:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008518:	4659      	mov	r1, fp
 800851a:	00cb      	lsls	r3, r1, #3
 800851c:	4651      	mov	r1, sl
 800851e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008522:	4651      	mov	r1, sl
 8008524:	00ca      	lsls	r2, r1, #3
 8008526:	4610      	mov	r0, r2
 8008528:	4619      	mov	r1, r3
 800852a:	4603      	mov	r3, r0
 800852c:	4642      	mov	r2, r8
 800852e:	189b      	adds	r3, r3, r2
 8008530:	66bb      	str	r3, [r7, #104]	; 0x68
 8008532:	464b      	mov	r3, r9
 8008534:	460a      	mov	r2, r1
 8008536:	eb42 0303 	adc.w	r3, r2, r3
 800853a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800853c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	663b      	str	r3, [r7, #96]	; 0x60
 8008546:	667a      	str	r2, [r7, #100]	; 0x64
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	f04f 0300 	mov.w	r3, #0
 8008550:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008554:	4649      	mov	r1, r9
 8008556:	008b      	lsls	r3, r1, #2
 8008558:	4641      	mov	r1, r8
 800855a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800855e:	4641      	mov	r1, r8
 8008560:	008a      	lsls	r2, r1, #2
 8008562:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008566:	f7f8 fb87 	bl	8000c78 <__aeabi_uldivmod>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4b0d      	ldr	r3, [pc, #52]	; (80085a4 <UART_SetConfig+0x4e4>)
 8008570:	fba3 1302 	umull	r1, r3, r3, r2
 8008574:	095b      	lsrs	r3, r3, #5
 8008576:	2164      	movs	r1, #100	; 0x64
 8008578:	fb01 f303 	mul.w	r3, r1, r3
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	011b      	lsls	r3, r3, #4
 8008580:	3332      	adds	r3, #50	; 0x32
 8008582:	4a08      	ldr	r2, [pc, #32]	; (80085a4 <UART_SetConfig+0x4e4>)
 8008584:	fba2 2303 	umull	r2, r3, r2, r3
 8008588:	095b      	lsrs	r3, r3, #5
 800858a:	f003 020f 	and.w	r2, r3, #15
 800858e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4422      	add	r2, r4
 8008596:	609a      	str	r2, [r3, #8]
}
 8008598:	bf00      	nop
 800859a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800859e:	46bd      	mov	sp, r7
 80085a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085a4:	51eb851f 	.word	0x51eb851f

080085a8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80085a8:	b084      	sub	sp, #16
 80085aa:	b480      	push	{r7}
 80085ac:	b085      	sub	sp, #20
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	f107 001c 	add.w	r0, r7, #28
 80085b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80085be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80085c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80085c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80085c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80085ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80085cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80085ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80085d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80085e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	431a      	orrs	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	b004      	add	sp, #16
 80085fc:	4770      	bx	lr

080085fe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800860c:	4618      	mov	r0, r3
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2203      	movs	r2, #3
 8008646:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008656:	b480      	push	{r7}
 8008658:	b083      	sub	sp, #12
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0303 	and.w	r3, r3, #3
}
 8008666:	4618      	mov	r0, r3
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008672:	b480      	push	{r7}
 8008674:	b085      	sub	sp, #20
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800867c:	2300      	movs	r3, #0
 800867e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008690:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008696:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800869c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80086ac:	f023 030f 	bic.w	r3, r3, #15
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	431a      	orrs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	b2db      	uxtb	r3, r3
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3314      	adds	r3, #20
 80086ee:	461a      	mov	r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	4413      	add	r3, r2
 80086f4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
}  
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008706:	b480      	push	{r7}
 8008708:	b085      	sub	sp, #20
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800872c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008732:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008738:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4313      	orrs	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008744:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	431a      	orrs	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008750:	2300      	movs	r3, #0

}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b088      	sub	sp, #32
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800876c:	2310      	movs	r3, #16
 800876e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008770:	2340      	movs	r3, #64	; 0x40
 8008772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008774:	2300      	movs	r3, #0
 8008776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800877c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800877e:	f107 0308 	add.w	r3, r7, #8
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff ff74 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800878a:	f241 3288 	movw	r2, #5000	; 0x1388
 800878e:	2110      	movs	r1, #16
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fa19 	bl	8008bc8 <SDMMC_GetCmdResp1>
 8008796:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008798:	69fb      	ldr	r3, [r7, #28]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3720      	adds	r7, #32
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b088      	sub	sp, #32
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80087b0:	2311      	movs	r3, #17
 80087b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80087b4:	2340      	movs	r3, #64	; 0x40
 80087b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087b8:	2300      	movs	r3, #0
 80087ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087c2:	f107 0308 	add.w	r3, r7, #8
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff ff52 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80087ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80087d2:	2111      	movs	r1, #17
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f9f7 	bl	8008bc8 <SDMMC_GetCmdResp1>
 80087da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087dc:	69fb      	ldr	r3, [r7, #28]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3720      	adds	r7, #32
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b088      	sub	sp, #32
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80087f4:	2312      	movs	r3, #18
 80087f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80087f8:	2340      	movs	r3, #64	; 0x40
 80087fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087fc:	2300      	movs	r3, #0
 80087fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008804:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008806:	f107 0308 	add.w	r3, r7, #8
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7ff ff30 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008812:	f241 3288 	movw	r2, #5000	; 0x1388
 8008816:	2112      	movs	r1, #18
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f9d5 	bl	8008bc8 <SDMMC_GetCmdResp1>
 800881e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008820:	69fb      	ldr	r3, [r7, #28]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3720      	adds	r7, #32
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b088      	sub	sp, #32
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008838:	2318      	movs	r3, #24
 800883a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800883c:	2340      	movs	r3, #64	; 0x40
 800883e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008840:	2300      	movs	r3, #0
 8008842:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008848:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800884a:	f107 0308 	add.w	r3, r7, #8
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff ff0e 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008856:	f241 3288 	movw	r2, #5000	; 0x1388
 800885a:	2118      	movs	r1, #24
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f9b3 	bl	8008bc8 <SDMMC_GetCmdResp1>
 8008862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008864:	69fb      	ldr	r3, [r7, #28]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3720      	adds	r7, #32
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b088      	sub	sp, #32
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800887c:	2319      	movs	r3, #25
 800887e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008880:	2340      	movs	r3, #64	; 0x40
 8008882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008884:	2300      	movs	r3, #0
 8008886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800888c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800888e:	f107 0308 	add.w	r3, r7, #8
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7ff feec 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800889a:	f241 3288 	movw	r2, #5000	; 0x1388
 800889e:	2119      	movs	r1, #25
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f991 	bl	8008bc8 <SDMMC_GetCmdResp1>
 80088a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088a8:	69fb      	ldr	r3, [r7, #28]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3720      	adds	r7, #32
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b088      	sub	sp, #32
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80088c0:	230c      	movs	r3, #12
 80088c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80088c4:	2340      	movs	r3, #64	; 0x40
 80088c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088c8:	2300      	movs	r3, #0
 80088ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088d2:	f107 0308 	add.w	r3, r7, #8
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff feca 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80088de:	4a05      	ldr	r2, [pc, #20]	; (80088f4 <SDMMC_CmdStopTransfer+0x40>)
 80088e0:	210c      	movs	r1, #12
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f970 	bl	8008bc8 <SDMMC_GetCmdResp1>
 80088e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088ea:	69fb      	ldr	r3, [r7, #28]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3720      	adds	r7, #32
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	05f5e100 	.word	0x05f5e100

080088f8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08a      	sub	sp, #40	; 0x28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008908:	2307      	movs	r3, #7
 800890a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800890c:	2340      	movs	r3, #64	; 0x40
 800890e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008910:	2300      	movs	r3, #0
 8008912:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008918:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800891a:	f107 0310 	add.w	r3, r7, #16
 800891e:	4619      	mov	r1, r3
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f7ff fea6 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008926:	f241 3288 	movw	r2, #5000	; 0x1388
 800892a:	2107      	movs	r1, #7
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 f94b 	bl	8008bc8 <SDMMC_GetCmdResp1>
 8008932:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008936:	4618      	mov	r0, r3
 8008938:	3728      	adds	r7, #40	; 0x28
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b088      	sub	sp, #32
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800894a:	2300      	movs	r3, #0
 800894c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800894e:	2300      	movs	r3, #0
 8008950:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008952:	2300      	movs	r3, #0
 8008954:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800895a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800895c:	f107 0308 	add.w	r3, r7, #8
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff fe85 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fb65 	bl	8009038 <SDMMC_GetCmdError>
 800896e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008970:	69fb      	ldr	r3, [r7, #28]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3720      	adds	r7, #32
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b088      	sub	sp, #32
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008982:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008986:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008988:	2308      	movs	r3, #8
 800898a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800898c:	2340      	movs	r3, #64	; 0x40
 800898e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008990:	2300      	movs	r3, #0
 8008992:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008998:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800899a:	f107 0308 	add.w	r3, r7, #8
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7ff fe66 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 faf8 	bl	8008f9c <SDMMC_GetCmdResp7>
 80089ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089ae:	69fb      	ldr	r3, [r7, #28]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3720      	adds	r7, #32
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b088      	sub	sp, #32
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80089c6:	2337      	movs	r3, #55	; 0x37
 80089c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80089ca:	2340      	movs	r3, #64	; 0x40
 80089cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089ce:	2300      	movs	r3, #0
 80089d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089d8:	f107 0308 	add.w	r3, r7, #8
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7ff fe47 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80089e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089e8:	2137      	movs	r1, #55	; 0x37
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f8ec 	bl	8008bc8 <SDMMC_GetCmdResp1>
 80089f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089f2:	69fb      	ldr	r3, [r7, #28]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3720      	adds	r7, #32
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b088      	sub	sp, #32
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008a12:	2329      	movs	r3, #41	; 0x29
 8008a14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a16:	2340      	movs	r3, #64	; 0x40
 8008a18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a24:	f107 0308 	add.w	r3, r7, #8
 8008a28:	4619      	mov	r1, r3
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7ff fe21 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f9ff 	bl	8008e34 <SDMMC_GetCmdResp3>
 8008a36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a38:	69fb      	ldr	r3, [r7, #28]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3720      	adds	r7, #32
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b088      	sub	sp, #32
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008a50:	2306      	movs	r3, #6
 8008a52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a54:	2340      	movs	r3, #64	; 0x40
 8008a56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a62:	f107 0308 	add.w	r3, r7, #8
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7ff fe02 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a72:	2106      	movs	r1, #6
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f8a7 	bl	8008bc8 <SDMMC_GetCmdResp1>
 8008a7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a7c:	69fb      	ldr	r3, [r7, #28]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3720      	adds	r7, #32
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b088      	sub	sp, #32
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008a92:	2333      	movs	r3, #51	; 0x33
 8008a94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a96:	2340      	movs	r3, #64	; 0x40
 8008a98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008aa4:	f107 0308 	add.w	r3, r7, #8
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff fde1 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab4:	2133      	movs	r1, #51	; 0x33
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f886 	bl	8008bc8 <SDMMC_GetCmdResp1>
 8008abc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008abe:	69fb      	ldr	r3, [r7, #28]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3720      	adds	r7, #32
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008ad8:	23c0      	movs	r3, #192	; 0xc0
 8008ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008adc:	2300      	movs	r3, #0
 8008ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ae4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ae6:	f107 0308 	add.w	r3, r7, #8
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff fdc0 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f956 	bl	8008da4 <SDMMC_GetCmdResp2>
 8008af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008afa:	69fb      	ldr	r3, [r7, #28]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3720      	adds	r7, #32
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008b12:	2309      	movs	r3, #9
 8008b14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008b16:	23c0      	movs	r3, #192	; 0xc0
 8008b18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b24:	f107 0308 	add.w	r3, r7, #8
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7ff fda1 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f937 	bl	8008da4 <SDMMC_GetCmdResp2>
 8008b36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b38:	69fb      	ldr	r3, [r7, #28]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3720      	adds	r7, #32
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b088      	sub	sp, #32
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008b50:	2303      	movs	r3, #3
 8008b52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b54:	2340      	movs	r3, #64	; 0x40
 8008b56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b62:	f107 0308 	add.w	r3, r7, #8
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7ff fd82 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	2103      	movs	r1, #3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f99c 	bl	8008eb0 <SDMMC_GetCmdResp6>
 8008b78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b7a:	69fb      	ldr	r3, [r7, #28]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3720      	adds	r7, #32
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008b92:	230d      	movs	r3, #13
 8008b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b96:	2340      	movs	r3, #64	; 0x40
 8008b98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ba2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ba4:	f107 0308 	add.w	r3, r7, #8
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7ff fd61 	bl	8008672 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bb4:	210d      	movs	r1, #13
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f806 	bl	8008bc8 <SDMMC_GetCmdResp1>
 8008bbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bbe:	69fb      	ldr	r3, [r7, #28]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3720      	adds	r7, #32
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b088      	sub	sp, #32
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008bd6:	4b70      	ldr	r3, [pc, #448]	; (8008d98 <SDMMC_GetCmdResp1+0x1d0>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a70      	ldr	r2, [pc, #448]	; (8008d9c <SDMMC_GetCmdResp1+0x1d4>)
 8008bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008be0:	0a5a      	lsrs	r2, r3, #9
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	fb02 f303 	mul.w	r3, r2, r3
 8008be8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	1e5a      	subs	r2, r3, #1
 8008bee:	61fa      	str	r2, [r7, #28]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d102      	bne.n	8008bfa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bf8:	e0c9      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d0ef      	beq.n	8008bea <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1ea      	bne.n	8008bea <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c18:	f003 0304 	and.w	r3, r3, #4
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d004      	beq.n	8008c2a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2204      	movs	r2, #4
 8008c24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c26:	2304      	movs	r3, #4
 8008c28:	e0b1      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d004      	beq.n	8008c40 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e0a6      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	22c5      	movs	r2, #197	; 0xc5
 8008c44:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f7ff fd3d 	bl	80086c6 <SDIO_GetCommandResponse>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	461a      	mov	r2, r3
 8008c50:	7afb      	ldrb	r3, [r7, #11]
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d001      	beq.n	8008c5a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e099      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f7ff fd3f 	bl	80086e0 <SDIO_GetResponse>
 8008c62:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	4b4e      	ldr	r3, [pc, #312]	; (8008da0 <SDMMC_GetCmdResp1+0x1d8>)
 8008c68:	4013      	ands	r3, r2
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e08d      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	da02      	bge.n	8008c7e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008c78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c7c:	e087      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008c88:	2340      	movs	r3, #64	; 0x40
 8008c8a:	e080      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008c96:	2380      	movs	r3, #128	; 0x80
 8008c98:	e079      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d002      	beq.n	8008caa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ca8:	e071      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cb8:	e069      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cc8:	e061      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cd8:	e059      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d002      	beq.n	8008cea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ce8:	e051      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008cf8:	e049      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008d04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d08:	e041      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d18:	e039      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d28:	e031      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008d34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d38:	e029      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d002      	beq.n	8008d4a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008d44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008d48:	e021      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008d54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d58:	e019      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d002      	beq.n	8008d6a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008d64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d68:	e011      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d002      	beq.n	8008d7a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008d74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008d78:	e009      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f003 0308 	and.w	r3, r3, #8
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008d84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008d88:	e001      	b.n	8008d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3720      	adds	r7, #32
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	2000000c 	.word	0x2000000c
 8008d9c:	10624dd3 	.word	0x10624dd3
 8008da0:	fdffe008 	.word	0xfdffe008

08008da4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008dac:	4b1f      	ldr	r3, [pc, #124]	; (8008e2c <SDMMC_GetCmdResp2+0x88>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a1f      	ldr	r2, [pc, #124]	; (8008e30 <SDMMC_GetCmdResp2+0x8c>)
 8008db2:	fba2 2303 	umull	r2, r3, r2, r3
 8008db6:	0a5b      	lsrs	r3, r3, #9
 8008db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dbc:	fb02 f303 	mul.w	r3, r2, r3
 8008dc0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	1e5a      	subs	r2, r3, #1
 8008dc6:	60fa      	str	r2, [r7, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d102      	bne.n	8008dd2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008dcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008dd0:	e026      	b.n	8008e20 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0ef      	beq.n	8008dc2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1ea      	bne.n	8008dc2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df0:	f003 0304 	and.w	r3, r3, #4
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d004      	beq.n	8008e02 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2204      	movs	r2, #4
 8008dfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008dfe:	2304      	movs	r3, #4
 8008e00:	e00e      	b.n	8008e20 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d004      	beq.n	8008e18 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e003      	b.n	8008e20 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	22c5      	movs	r2, #197	; 0xc5
 8008e1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	2000000c 	.word	0x2000000c
 8008e30:	10624dd3 	.word	0x10624dd3

08008e34 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e3c:	4b1a      	ldr	r3, [pc, #104]	; (8008ea8 <SDMMC_GetCmdResp3+0x74>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a1a      	ldr	r2, [pc, #104]	; (8008eac <SDMMC_GetCmdResp3+0x78>)
 8008e42:	fba2 2303 	umull	r2, r3, r2, r3
 8008e46:	0a5b      	lsrs	r3, r3, #9
 8008e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e4c:	fb02 f303 	mul.w	r3, r2, r3
 8008e50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	1e5a      	subs	r2, r3, #1
 8008e56:	60fa      	str	r2, [r7, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d102      	bne.n	8008e62 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e60:	e01b      	b.n	8008e9a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0ef      	beq.n	8008e52 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1ea      	bne.n	8008e52 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e80:	f003 0304 	and.w	r3, r3, #4
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d004      	beq.n	8008e92 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2204      	movs	r2, #4
 8008e8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e8e:	2304      	movs	r3, #4
 8008e90:	e003      	b.n	8008e9a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	22c5      	movs	r2, #197	; 0xc5
 8008e96:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	2000000c 	.word	0x2000000c
 8008eac:	10624dd3 	.word	0x10624dd3

08008eb0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b088      	sub	sp, #32
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ebe:	4b35      	ldr	r3, [pc, #212]	; (8008f94 <SDMMC_GetCmdResp6+0xe4>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a35      	ldr	r2, [pc, #212]	; (8008f98 <SDMMC_GetCmdResp6+0xe8>)
 8008ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec8:	0a5b      	lsrs	r3, r3, #9
 8008eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ece:	fb02 f303 	mul.w	r3, r2, r3
 8008ed2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	1e5a      	subs	r2, r3, #1
 8008ed8:	61fa      	str	r2, [r7, #28]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d102      	bne.n	8008ee4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ede:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ee2:	e052      	b.n	8008f8a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d0ef      	beq.n	8008ed4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1ea      	bne.n	8008ed4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f02:	f003 0304 	and.w	r3, r3, #4
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d004      	beq.n	8008f14 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2204      	movs	r2, #4
 8008f0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f10:	2304      	movs	r3, #4
 8008f12:	e03a      	b.n	8008f8a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2201      	movs	r2, #1
 8008f24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e02f      	b.n	8008f8a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f7ff fbcb 	bl	80086c6 <SDIO_GetCommandResponse>
 8008f30:	4603      	mov	r3, r0
 8008f32:	461a      	mov	r2, r3
 8008f34:	7afb      	ldrb	r3, [r7, #11]
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d001      	beq.n	8008f3e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e025      	b.n	8008f8a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	22c5      	movs	r2, #197	; 0xc5
 8008f42:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008f44:	2100      	movs	r1, #0
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f7ff fbca 	bl	80086e0 <SDIO_GetResponse>
 8008f4c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d106      	bne.n	8008f66 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	0c1b      	lsrs	r3, r3, #16
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008f62:	2300      	movs	r3, #0
 8008f64:	e011      	b.n	8008f8a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f74:	e009      	b.n	8008f8a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f84:	e001      	b.n	8008f8a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3720      	adds	r7, #32
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	2000000c 	.word	0x2000000c
 8008f98:	10624dd3 	.word	0x10624dd3

08008f9c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008fa4:	4b22      	ldr	r3, [pc, #136]	; (8009030 <SDMMC_GetCmdResp7+0x94>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a22      	ldr	r2, [pc, #136]	; (8009034 <SDMMC_GetCmdResp7+0x98>)
 8008faa:	fba2 2303 	umull	r2, r3, r2, r3
 8008fae:	0a5b      	lsrs	r3, r3, #9
 8008fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb4:	fb02 f303 	mul.w	r3, r2, r3
 8008fb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	1e5a      	subs	r2, r3, #1
 8008fbe:	60fa      	str	r2, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d102      	bne.n	8008fca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fc8:	e02c      	b.n	8009024 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0ef      	beq.n	8008fba <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1ea      	bne.n	8008fba <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d004      	beq.n	8008ffa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2204      	movs	r2, #4
 8008ff4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ff6:	2304      	movs	r3, #4
 8008ff8:	e014      	b.n	8009024 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d004      	beq.n	8009010 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800900c:	2301      	movs	r3, #1
 800900e:	e009      	b.n	8009024 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2240      	movs	r2, #64	; 0x40
 8009020:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009022:	2300      	movs	r3, #0
  
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	2000000c 	.word	0x2000000c
 8009034:	10624dd3 	.word	0x10624dd3

08009038 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009040:	4b11      	ldr	r3, [pc, #68]	; (8009088 <SDMMC_GetCmdError+0x50>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a11      	ldr	r2, [pc, #68]	; (800908c <SDMMC_GetCmdError+0x54>)
 8009046:	fba2 2303 	umull	r2, r3, r2, r3
 800904a:	0a5b      	lsrs	r3, r3, #9
 800904c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009050:	fb02 f303 	mul.w	r3, r2, r3
 8009054:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	1e5a      	subs	r2, r3, #1
 800905a:	60fa      	str	r2, [r7, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d102      	bne.n	8009066 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009064:	e009      	b.n	800907a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0f1      	beq.n	8009056 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	22c5      	movs	r2, #197	; 0xc5
 8009076:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	2000000c 	.word	0x2000000c
 800908c:	10624dd3 	.word	0x10624dd3

08009090 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009094:	4904      	ldr	r1, [pc, #16]	; (80090a8 <MX_FATFS_Init+0x18>)
 8009096:	4805      	ldr	r0, [pc, #20]	; (80090ac <MX_FATFS_Init+0x1c>)
 8009098:	f003 fe20 	bl	800ccdc <FATFS_LinkDriver>
 800909c:	4603      	mov	r3, r0
 800909e:	461a      	mov	r2, r3
 80090a0:	4b03      	ldr	r3, [pc, #12]	; (80090b0 <MX_FATFS_Init+0x20>)
 80090a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80090a4:	bf00      	nop
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	20002614 	.word	0x20002614
 80090ac:	08017e80 	.word	0x08017e80
 80090b0:	20002610 	.word	0x20002610

080090b4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80090b4:	b480      	push	{r7}
 80090b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80090b8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80090ce:	f000 f879 	bl	80091c4 <BSP_SD_IsDetected>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d001      	beq.n	80090dc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e012      	b.n	8009102 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80090dc:	480b      	ldr	r0, [pc, #44]	; (800910c <BSP_SD_Init+0x48>)
 80090de:	f7fd f87b 	bl	80061d8 <HAL_SD_Init>
 80090e2:	4603      	mov	r3, r0
 80090e4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d109      	bne.n	8009100 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80090ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80090f0:	4806      	ldr	r0, [pc, #24]	; (800910c <BSP_SD_Init+0x48>)
 80090f2:	f7fd fe65 	bl	8006dc0 <HAL_SD_ConfigWideBusOperation>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009100:	79fb      	ldrb	r3, [r7, #7]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	200024a8 	.word	0x200024a8

08009110 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af02      	add	r7, sp, #8
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
 800911c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	68f9      	ldr	r1, [r7, #12]
 800912c:	4806      	ldr	r0, [pc, #24]	; (8009148 <BSP_SD_ReadBlocks+0x38>)
 800912e:	f7fd f903 	bl	8006338 <HAL_SD_ReadBlocks>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800913c:	7dfb      	ldrb	r3, [r7, #23]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	200024a8 	.word	0x200024a8

0800914c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b088      	sub	sp, #32
 8009150:	af02      	add	r7, sp, #8
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
 8009158:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	68f9      	ldr	r1, [r7, #12]
 8009168:	4806      	ldr	r0, [pc, #24]	; (8009184 <BSP_SD_WriteBlocks+0x38>)
 800916a:	f7fd facb 	bl	8006704 <HAL_SD_WriteBlocks>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009178:	7dfb      	ldrb	r3, [r7, #23]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	200024a8 	.word	0x200024a8

08009188 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800918c:	4805      	ldr	r0, [pc, #20]	; (80091a4 <BSP_SD_GetCardState+0x1c>)
 800918e:	f7fd feb1 	bl	8006ef4 <HAL_SD_GetCardState>
 8009192:	4603      	mov	r3, r0
 8009194:	2b04      	cmp	r3, #4
 8009196:	bf14      	ite	ne
 8009198:	2301      	movne	r3, #1
 800919a:	2300      	moveq	r3, #0
 800919c:	b2db      	uxtb	r3, r3
}
 800919e:	4618      	mov	r0, r3
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	200024a8 	.word	0x200024a8

080091a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80091b0:	6879      	ldr	r1, [r7, #4]
 80091b2:	4803      	ldr	r0, [pc, #12]	; (80091c0 <BSP_SD_GetCardInfo+0x18>)
 80091b4:	f7fd fdd8 	bl	8006d68 <HAL_SD_GetCardInfo>
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	200024a8 	.word	0x200024a8

080091c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80091ca:	2301      	movs	r3, #1
 80091cc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80091ce:	f000 f80b 	bl	80091e8 <BSP_PlatformIsDetected>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80091d8:	2300      	movs	r3, #0
 80091da:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	b2db      	uxtb	r3, r3
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80091ee:	2301      	movs	r3, #1
 80091f0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80091f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80091f6:	4806      	ldr	r0, [pc, #24]	; (8009210 <BSP_PlatformIsDetected+0x28>)
 80091f8:	f7fb fae4 	bl	80047c4 <HAL_GPIO_ReadPin>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009202:	2300      	movs	r3, #0
 8009204:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009206:	79fb      	ldrb	r3, [r7, #7]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	40020400 	.word	0x40020400

08009214 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800921e:	4b0b      	ldr	r3, [pc, #44]	; (800924c <SD_CheckStatus+0x38>)
 8009220:	2201      	movs	r2, #1
 8009222:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009224:	f7ff ffb0 	bl	8009188 <BSP_SD_GetCardState>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d107      	bne.n	800923e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800922e:	4b07      	ldr	r3, [pc, #28]	; (800924c <SD_CheckStatus+0x38>)
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	f023 0301 	bic.w	r3, r3, #1
 8009238:	b2da      	uxtb	r2, r3
 800923a:	4b04      	ldr	r3, [pc, #16]	; (800924c <SD_CheckStatus+0x38>)
 800923c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800923e:	4b03      	ldr	r3, [pc, #12]	; (800924c <SD_CheckStatus+0x38>)
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	b2db      	uxtb	r3, r3
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20000015 	.word	0x20000015

08009250 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	4603      	mov	r3, r0
 8009258:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800925a:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <SD_initialize+0x38>)
 800925c:	2201      	movs	r2, #1
 800925e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009260:	f7ff ff30 	bl	80090c4 <BSP_SD_Init>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d107      	bne.n	800927a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800926a:	79fb      	ldrb	r3, [r7, #7]
 800926c:	4618      	mov	r0, r3
 800926e:	f7ff ffd1 	bl	8009214 <SD_CheckStatus>
 8009272:	4603      	mov	r3, r0
 8009274:	461a      	mov	r2, r3
 8009276:	4b04      	ldr	r3, [pc, #16]	; (8009288 <SD_initialize+0x38>)
 8009278:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800927a:	4b03      	ldr	r3, [pc, #12]	; (8009288 <SD_initialize+0x38>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	b2db      	uxtb	r3, r3
}
 8009280:	4618      	mov	r0, r3
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20000015 	.word	0x20000015

0800928c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff ffbb 	bl	8009214 <SD_CheckStatus>
 800929e:	4603      	mov	r3, r0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	607a      	str	r2, [r7, #4]
 80092b2:	603b      	str	r3, [r7, #0]
 80092b4:	4603      	mov	r3, r0
 80092b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80092bc:	f04f 33ff 	mov.w	r3, #4294967295
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	68b8      	ldr	r0, [r7, #8]
 80092c6:	f7ff ff23 	bl	8009110 <BSP_SD_ReadBlocks>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d107      	bne.n	80092e0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80092d0:	bf00      	nop
 80092d2:	f7ff ff59 	bl	8009188 <BSP_SD_GetCardState>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1fa      	bne.n	80092d2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80092e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b086      	sub	sp, #24
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]
 80092f6:	4603      	mov	r3, r0
 80092f8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80092fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	68b8      	ldr	r0, [r7, #8]
 8009308:	f7ff ff20 	bl	800914c <BSP_SD_WriteBlocks>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d107      	bne.n	8009322 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009312:	bf00      	nop
 8009314:	f7ff ff38 	bl	8009188 <BSP_SD_GetCardState>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1fa      	bne.n	8009314 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009322:	7dfb      	ldrb	r3, [r7, #23]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08c      	sub	sp, #48	; 0x30
 8009330:	af00      	add	r7, sp, #0
 8009332:	4603      	mov	r3, r0
 8009334:	603a      	str	r2, [r7, #0]
 8009336:	71fb      	strb	r3, [r7, #7]
 8009338:	460b      	mov	r3, r1
 800933a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009342:	4b25      	ldr	r3, [pc, #148]	; (80093d8 <SD_ioctl+0xac>)
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <SD_ioctl+0x28>
 8009350:	2303      	movs	r3, #3
 8009352:	e03c      	b.n	80093ce <SD_ioctl+0xa2>

  switch (cmd)
 8009354:	79bb      	ldrb	r3, [r7, #6]
 8009356:	2b03      	cmp	r3, #3
 8009358:	d834      	bhi.n	80093c4 <SD_ioctl+0x98>
 800935a:	a201      	add	r2, pc, #4	; (adr r2, 8009360 <SD_ioctl+0x34>)
 800935c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009360:	08009371 	.word	0x08009371
 8009364:	08009379 	.word	0x08009379
 8009368:	08009391 	.word	0x08009391
 800936c:	080093ab 	.word	0x080093ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009370:	2300      	movs	r3, #0
 8009372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009376:	e028      	b.n	80093ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009378:	f107 030c 	add.w	r3, r7, #12
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff ff13 	bl	80091a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800938e:	e01c      	b.n	80093ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009390:	f107 030c 	add.w	r3, r7, #12
 8009394:	4618      	mov	r0, r3
 8009396:	f7ff ff07 	bl	80091a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	b29a      	uxth	r2, r3
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80093a8:	e00f      	b.n	80093ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80093aa:	f107 030c 	add.w	r3, r7, #12
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7ff fefa 	bl	80091a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	0a5a      	lsrs	r2, r3, #9
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80093c2:	e002      	b.n	80093ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80093c4:	2304      	movs	r3, #4
 80093c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80093ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3730      	adds	r7, #48	; 0x30
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20000015 	.word	0x20000015

080093dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80093e6:	79fb      	ldrb	r3, [r7, #7]
 80093e8:	4a08      	ldr	r2, [pc, #32]	; (800940c <disk_status+0x30>)
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4413      	add	r3, r2
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	79fa      	ldrb	r2, [r7, #7]
 80093f4:	4905      	ldr	r1, [pc, #20]	; (800940c <disk_status+0x30>)
 80093f6:	440a      	add	r2, r1
 80093f8:	7a12      	ldrb	r2, [r2, #8]
 80093fa:	4610      	mov	r0, r2
 80093fc:	4798      	blx	r3
 80093fe:	4603      	mov	r3, r0
 8009400:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009402:	7bfb      	ldrb	r3, [r7, #15]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	20002840 	.word	0x20002840

08009410 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800941e:	79fb      	ldrb	r3, [r7, #7]
 8009420:	4a0e      	ldr	r2, [pc, #56]	; (800945c <disk_initialize+0x4c>)
 8009422:	5cd3      	ldrb	r3, [r2, r3]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d114      	bne.n	8009452 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	4a0c      	ldr	r2, [pc, #48]	; (800945c <disk_initialize+0x4c>)
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	79fa      	ldrb	r2, [r7, #7]
 8009436:	4909      	ldr	r1, [pc, #36]	; (800945c <disk_initialize+0x4c>)
 8009438:	440a      	add	r2, r1
 800943a:	7a12      	ldrb	r2, [r2, #8]
 800943c:	4610      	mov	r0, r2
 800943e:	4798      	blx	r3
 8009440:	4603      	mov	r3, r0
 8009442:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d103      	bne.n	8009452 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800944a:	79fb      	ldrb	r3, [r7, #7]
 800944c:	4a03      	ldr	r2, [pc, #12]	; (800945c <disk_initialize+0x4c>)
 800944e:	2101      	movs	r1, #1
 8009450:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009452:	7bfb      	ldrb	r3, [r7, #15]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	20002840 	.word	0x20002840

08009460 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009460:	b590      	push	{r4, r7, lr}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	60b9      	str	r1, [r7, #8]
 8009468:	607a      	str	r2, [r7, #4]
 800946a:	603b      	str	r3, [r7, #0]
 800946c:	4603      	mov	r3, r0
 800946e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	4a0a      	ldr	r2, [pc, #40]	; (800949c <disk_read+0x3c>)
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	689c      	ldr	r4, [r3, #8]
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	4a07      	ldr	r2, [pc, #28]	; (800949c <disk_read+0x3c>)
 8009480:	4413      	add	r3, r2
 8009482:	7a18      	ldrb	r0, [r3, #8]
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	68b9      	ldr	r1, [r7, #8]
 800948a:	47a0      	blx	r4
 800948c:	4603      	mov	r3, r0
 800948e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009490:	7dfb      	ldrb	r3, [r7, #23]
}
 8009492:	4618      	mov	r0, r3
 8009494:	371c      	adds	r7, #28
 8009496:	46bd      	mov	sp, r7
 8009498:	bd90      	pop	{r4, r7, pc}
 800949a:	bf00      	nop
 800949c:	20002840 	.word	0x20002840

080094a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80094a0:	b590      	push	{r4, r7, lr}
 80094a2:	b087      	sub	sp, #28
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60b9      	str	r1, [r7, #8]
 80094a8:	607a      	str	r2, [r7, #4]
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	4603      	mov	r3, r0
 80094ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	4a0a      	ldr	r2, [pc, #40]	; (80094dc <disk_write+0x3c>)
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	68dc      	ldr	r4, [r3, #12]
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	4a07      	ldr	r2, [pc, #28]	; (80094dc <disk_write+0x3c>)
 80094c0:	4413      	add	r3, r2
 80094c2:	7a18      	ldrb	r0, [r3, #8]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	68b9      	ldr	r1, [r7, #8]
 80094ca:	47a0      	blx	r4
 80094cc:	4603      	mov	r3, r0
 80094ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd90      	pop	{r4, r7, pc}
 80094da:	bf00      	nop
 80094dc:	20002840 	.word	0x20002840

080094e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	603a      	str	r2, [r7, #0]
 80094ea:	71fb      	strb	r3, [r7, #7]
 80094ec:	460b      	mov	r3, r1
 80094ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	4a09      	ldr	r2, [pc, #36]	; (8009518 <disk_ioctl+0x38>)
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	79fa      	ldrb	r2, [r7, #7]
 80094fe:	4906      	ldr	r1, [pc, #24]	; (8009518 <disk_ioctl+0x38>)
 8009500:	440a      	add	r2, r1
 8009502:	7a10      	ldrb	r0, [r2, #8]
 8009504:	79b9      	ldrb	r1, [r7, #6]
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	4798      	blx	r3
 800950a:	4603      	mov	r3, r0
 800950c:	73fb      	strb	r3, [r7, #15]
  return res;
 800950e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20002840 	.word	0x20002840

0800951c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	3301      	adds	r3, #1
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800952c:	89fb      	ldrh	r3, [r7, #14]
 800952e:	021b      	lsls	r3, r3, #8
 8009530:	b21a      	sxth	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	b21b      	sxth	r3, r3
 8009538:	4313      	orrs	r3, r2
 800953a:	b21b      	sxth	r3, r3
 800953c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800953e:	89fb      	ldrh	r3, [r7, #14]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	3303      	adds	r3, #3
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	021b      	lsls	r3, r3, #8
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	3202      	adds	r2, #2
 8009564:	7812      	ldrb	r2, [r2, #0]
 8009566:	4313      	orrs	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	021b      	lsls	r3, r3, #8
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	3201      	adds	r2, #1
 8009572:	7812      	ldrb	r2, [r2, #0]
 8009574:	4313      	orrs	r3, r2
 8009576:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	021b      	lsls	r3, r3, #8
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	7812      	ldrb	r2, [r2, #0]
 8009580:	4313      	orrs	r3, r2
 8009582:	60fb      	str	r3, [r7, #12]
	return rv;
 8009584:	68fb      	ldr	r3, [r7, #12]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3714      	adds	r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	460b      	mov	r3, r1
 800959c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	607a      	str	r2, [r7, #4]
 80095a4:	887a      	ldrh	r2, [r7, #2]
 80095a6:	b2d2      	uxtb	r2, r2
 80095a8:	701a      	strb	r2, [r3, #0]
 80095aa:	887b      	ldrh	r3, [r7, #2]
 80095ac:	0a1b      	lsrs	r3, r3, #8
 80095ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	1c5a      	adds	r2, r3, #1
 80095b4:	607a      	str	r2, [r7, #4]
 80095b6:	887a      	ldrh	r2, [r7, #2]
 80095b8:	b2d2      	uxtb	r2, r2
 80095ba:	701a      	strb	r2, [r3, #0]
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	683a      	ldr	r2, [r7, #0]
 80095da:	b2d2      	uxtb	r2, r2
 80095dc:	701a      	strb	r2, [r3, #0]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	0a1b      	lsrs	r3, r3, #8
 80095e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	1c5a      	adds	r2, r3, #1
 80095e8:	607a      	str	r2, [r7, #4]
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	b2d2      	uxtb	r2, r2
 80095ee:	701a      	strb	r2, [r3, #0]
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	0a1b      	lsrs	r3, r3, #8
 80095f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	1c5a      	adds	r2, r3, #1
 80095fa:	607a      	str	r2, [r7, #4]
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	b2d2      	uxtb	r2, r2
 8009600:	701a      	strb	r2, [r3, #0]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	0a1b      	lsrs	r3, r3, #8
 8009606:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	1c5a      	adds	r2, r3, #1
 800960c:	607a      	str	r2, [r7, #4]
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	b2d2      	uxtb	r2, r2
 8009612:	701a      	strb	r2, [r3, #0]
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00d      	beq.n	8009656 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	1c53      	adds	r3, r2, #1
 800963e:	613b      	str	r3, [r7, #16]
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	1c59      	adds	r1, r3, #1
 8009644:	6179      	str	r1, [r7, #20]
 8009646:	7812      	ldrb	r2, [r2, #0]
 8009648:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3b01      	subs	r3, #1
 800964e:	607b      	str	r3, [r7, #4]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1f1      	bne.n	800963a <mem_cpy+0x1a>
	}
}
 8009656:	bf00      	nop
 8009658:	371c      	adds	r7, #28
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009662:	b480      	push	{r7}
 8009664:	b087      	sub	sp, #28
 8009666:	af00      	add	r7, sp, #0
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	617a      	str	r2, [r7, #20]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	b2d2      	uxtb	r2, r2
 800967c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	3b01      	subs	r3, #1
 8009682:	607b      	str	r3, [r7, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1f3      	bne.n	8009672 <mem_set+0x10>
}
 800968a:	bf00      	nop
 800968c:	bf00      	nop
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009698:	b480      	push	{r7}
 800969a:	b089      	sub	sp, #36	; 0x24
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	61fb      	str	r3, [r7, #28]
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	61fa      	str	r2, [r7, #28]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	4619      	mov	r1, r3
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	61ba      	str	r2, [r7, #24]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	1acb      	subs	r3, r1, r3
 80096c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	3b01      	subs	r3, #1
 80096ca:	607b      	str	r3, [r7, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d002      	beq.n	80096d8 <mem_cmp+0x40>
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d0eb      	beq.n	80096b0 <mem_cmp+0x18>

	return r;
 80096d8:	697b      	ldr	r3, [r7, #20]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3724      	adds	r7, #36	; 0x24
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80096f0:	e002      	b.n	80096f8 <chk_chr+0x12>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3301      	adds	r3, #1
 80096f6:	607b      	str	r3, [r7, #4]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d005      	beq.n	800970c <chk_chr+0x26>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	461a      	mov	r2, r3
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	4293      	cmp	r3, r2
 800970a:	d1f2      	bne.n	80096f2 <chk_chr+0xc>
	return *str;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	781b      	ldrb	r3, [r3, #0]
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009726:	2300      	movs	r3, #0
 8009728:	60bb      	str	r3, [r7, #8]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	60fb      	str	r3, [r7, #12]
 800972e:	e029      	b.n	8009784 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009730:	4a27      	ldr	r2, [pc, #156]	; (80097d0 <chk_lock+0xb4>)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	011b      	lsls	r3, r3, #4
 8009736:	4413      	add	r3, r2
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d01d      	beq.n	800977a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800973e:	4a24      	ldr	r2, [pc, #144]	; (80097d0 <chk_lock+0xb4>)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	011b      	lsls	r3, r3, #4
 8009744:	4413      	add	r3, r2
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	429a      	cmp	r2, r3
 800974e:	d116      	bne.n	800977e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009750:	4a1f      	ldr	r2, [pc, #124]	; (80097d0 <chk_lock+0xb4>)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	011b      	lsls	r3, r3, #4
 8009756:	4413      	add	r3, r2
 8009758:	3304      	adds	r3, #4
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009760:	429a      	cmp	r2, r3
 8009762:	d10c      	bne.n	800977e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009764:	4a1a      	ldr	r2, [pc, #104]	; (80097d0 <chk_lock+0xb4>)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	011b      	lsls	r3, r3, #4
 800976a:	4413      	add	r3, r2
 800976c:	3308      	adds	r3, #8
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009774:	429a      	cmp	r2, r3
 8009776:	d102      	bne.n	800977e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009778:	e007      	b.n	800978a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800977a:	2301      	movs	r3, #1
 800977c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3301      	adds	r3, #1
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d9d2      	bls.n	8009730 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2b02      	cmp	r3, #2
 800978e:	d109      	bne.n	80097a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d102      	bne.n	800979c <chk_lock+0x80>
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b02      	cmp	r3, #2
 800979a:	d101      	bne.n	80097a0 <chk_lock+0x84>
 800979c:	2300      	movs	r3, #0
 800979e:	e010      	b.n	80097c2 <chk_lock+0xa6>
 80097a0:	2312      	movs	r3, #18
 80097a2:	e00e      	b.n	80097c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d108      	bne.n	80097bc <chk_lock+0xa0>
 80097aa:	4a09      	ldr	r2, [pc, #36]	; (80097d0 <chk_lock+0xb4>)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	011b      	lsls	r3, r3, #4
 80097b0:	4413      	add	r3, r2
 80097b2:	330c      	adds	r3, #12
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ba:	d101      	bne.n	80097c0 <chk_lock+0xa4>
 80097bc:	2310      	movs	r3, #16
 80097be:	e000      	b.n	80097c2 <chk_lock+0xa6>
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	20002620 	.word	0x20002620

080097d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80097da:	2300      	movs	r3, #0
 80097dc:	607b      	str	r3, [r7, #4]
 80097de:	e002      	b.n	80097e6 <enq_lock+0x12>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	3301      	adds	r3, #1
 80097e4:	607b      	str	r3, [r7, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d806      	bhi.n	80097fa <enq_lock+0x26>
 80097ec:	4a09      	ldr	r2, [pc, #36]	; (8009814 <enq_lock+0x40>)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	011b      	lsls	r3, r3, #4
 80097f2:	4413      	add	r3, r2
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1f2      	bne.n	80097e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	bf14      	ite	ne
 8009800:	2301      	movne	r3, #1
 8009802:	2300      	moveq	r3, #0
 8009804:	b2db      	uxtb	r3, r3
}
 8009806:	4618      	mov	r0, r3
 8009808:	370c      	adds	r7, #12
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	20002620 	.word	0x20002620

08009818 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009822:	2300      	movs	r3, #0
 8009824:	60fb      	str	r3, [r7, #12]
 8009826:	e01f      	b.n	8009868 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009828:	4a41      	ldr	r2, [pc, #260]	; (8009930 <inc_lock+0x118>)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	011b      	lsls	r3, r3, #4
 800982e:	4413      	add	r3, r2
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	429a      	cmp	r2, r3
 8009838:	d113      	bne.n	8009862 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800983a:	4a3d      	ldr	r2, [pc, #244]	; (8009930 <inc_lock+0x118>)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	011b      	lsls	r3, r3, #4
 8009840:	4413      	add	r3, r2
 8009842:	3304      	adds	r3, #4
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800984a:	429a      	cmp	r2, r3
 800984c:	d109      	bne.n	8009862 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800984e:	4a38      	ldr	r2, [pc, #224]	; (8009930 <inc_lock+0x118>)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	011b      	lsls	r3, r3, #4
 8009854:	4413      	add	r3, r2
 8009856:	3308      	adds	r3, #8
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800985e:	429a      	cmp	r2, r3
 8009860:	d006      	beq.n	8009870 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3301      	adds	r3, #1
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d9dc      	bls.n	8009828 <inc_lock+0x10>
 800986e:	e000      	b.n	8009872 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009870:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2b02      	cmp	r3, #2
 8009876:	d132      	bne.n	80098de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009878:	2300      	movs	r3, #0
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	e002      	b.n	8009884 <inc_lock+0x6c>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3301      	adds	r3, #1
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d806      	bhi.n	8009898 <inc_lock+0x80>
 800988a:	4a29      	ldr	r2, [pc, #164]	; (8009930 <inc_lock+0x118>)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	011b      	lsls	r3, r3, #4
 8009890:	4413      	add	r3, r2
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1f2      	bne.n	800987e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2b02      	cmp	r3, #2
 800989c:	d101      	bne.n	80098a2 <inc_lock+0x8a>
 800989e:	2300      	movs	r3, #0
 80098a0:	e040      	b.n	8009924 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	4922      	ldr	r1, [pc, #136]	; (8009930 <inc_lock+0x118>)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	011b      	lsls	r3, r3, #4
 80098ac:	440b      	add	r3, r1
 80098ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	689a      	ldr	r2, [r3, #8]
 80098b4:	491e      	ldr	r1, [pc, #120]	; (8009930 <inc_lock+0x118>)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	011b      	lsls	r3, r3, #4
 80098ba:	440b      	add	r3, r1
 80098bc:	3304      	adds	r3, #4
 80098be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	695a      	ldr	r2, [r3, #20]
 80098c4:	491a      	ldr	r1, [pc, #104]	; (8009930 <inc_lock+0x118>)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	011b      	lsls	r3, r3, #4
 80098ca:	440b      	add	r3, r1
 80098cc:	3308      	adds	r3, #8
 80098ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80098d0:	4a17      	ldr	r2, [pc, #92]	; (8009930 <inc_lock+0x118>)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	011b      	lsls	r3, r3, #4
 80098d6:	4413      	add	r3, r2
 80098d8:	330c      	adds	r3, #12
 80098da:	2200      	movs	r2, #0
 80098dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d009      	beq.n	80098f8 <inc_lock+0xe0>
 80098e4:	4a12      	ldr	r2, [pc, #72]	; (8009930 <inc_lock+0x118>)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	4413      	add	r3, r2
 80098ec:	330c      	adds	r3, #12
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <inc_lock+0xe0>
 80098f4:	2300      	movs	r3, #0
 80098f6:	e015      	b.n	8009924 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d108      	bne.n	8009910 <inc_lock+0xf8>
 80098fe:	4a0c      	ldr	r2, [pc, #48]	; (8009930 <inc_lock+0x118>)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	011b      	lsls	r3, r3, #4
 8009904:	4413      	add	r3, r2
 8009906:	330c      	adds	r3, #12
 8009908:	881b      	ldrh	r3, [r3, #0]
 800990a:	3301      	adds	r3, #1
 800990c:	b29a      	uxth	r2, r3
 800990e:	e001      	b.n	8009914 <inc_lock+0xfc>
 8009910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009914:	4906      	ldr	r1, [pc, #24]	; (8009930 <inc_lock+0x118>)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	011b      	lsls	r3, r3, #4
 800991a:	440b      	add	r3, r1
 800991c:	330c      	adds	r3, #12
 800991e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	3301      	adds	r3, #1
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	20002620 	.word	0x20002620

08009934 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3b01      	subs	r3, #1
 8009940:	607b      	str	r3, [r7, #4]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d825      	bhi.n	8009994 <dec_lock+0x60>
		n = Files[i].ctr;
 8009948:	4a17      	ldr	r2, [pc, #92]	; (80099a8 <dec_lock+0x74>)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	011b      	lsls	r3, r3, #4
 800994e:	4413      	add	r3, r2
 8009950:	330c      	adds	r3, #12
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009956:	89fb      	ldrh	r3, [r7, #14]
 8009958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800995c:	d101      	bne.n	8009962 <dec_lock+0x2e>
 800995e:	2300      	movs	r3, #0
 8009960:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009962:	89fb      	ldrh	r3, [r7, #14]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <dec_lock+0x3a>
 8009968:	89fb      	ldrh	r3, [r7, #14]
 800996a:	3b01      	subs	r3, #1
 800996c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800996e:	4a0e      	ldr	r2, [pc, #56]	; (80099a8 <dec_lock+0x74>)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	011b      	lsls	r3, r3, #4
 8009974:	4413      	add	r3, r2
 8009976:	330c      	adds	r3, #12
 8009978:	89fa      	ldrh	r2, [r7, #14]
 800997a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800997c:	89fb      	ldrh	r3, [r7, #14]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d105      	bne.n	800998e <dec_lock+0x5a>
 8009982:	4a09      	ldr	r2, [pc, #36]	; (80099a8 <dec_lock+0x74>)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	011b      	lsls	r3, r3, #4
 8009988:	4413      	add	r3, r2
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	737b      	strb	r3, [r7, #13]
 8009992:	e001      	b.n	8009998 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009994:	2302      	movs	r3, #2
 8009996:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009998:	7b7b      	ldrb	r3, [r7, #13]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3714      	adds	r7, #20
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	20002620 	.word	0x20002620

080099ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80099b4:	2300      	movs	r3, #0
 80099b6:	60fb      	str	r3, [r7, #12]
 80099b8:	e010      	b.n	80099dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80099ba:	4a0d      	ldr	r2, [pc, #52]	; (80099f0 <clear_lock+0x44>)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	011b      	lsls	r3, r3, #4
 80099c0:	4413      	add	r3, r2
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d105      	bne.n	80099d6 <clear_lock+0x2a>
 80099ca:	4a09      	ldr	r2, [pc, #36]	; (80099f0 <clear_lock+0x44>)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	011b      	lsls	r3, r3, #4
 80099d0:	4413      	add	r3, r2
 80099d2:	2200      	movs	r2, #0
 80099d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3301      	adds	r3, #1
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d9eb      	bls.n	80099ba <clear_lock+0xe>
	}
}
 80099e2:	bf00      	nop
 80099e4:	bf00      	nop
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	20002620 	.word	0x20002620

080099f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	78db      	ldrb	r3, [r3, #3]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d034      	beq.n	8009a72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	7858      	ldrb	r0, [r3, #1]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a18:	2301      	movs	r3, #1
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	f7ff fd40 	bl	80094a0 <disk_write>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d002      	beq.n	8009a2c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	73fb      	strb	r3, [r7, #15]
 8009a2a:	e022      	b.n	8009a72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	1ad2      	subs	r2, r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d217      	bcs.n	8009a72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	789b      	ldrb	r3, [r3, #2]
 8009a46:	613b      	str	r3, [r7, #16]
 8009a48:	e010      	b.n	8009a6c <sync_window+0x78>
					wsect += fs->fsize;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	4413      	add	r3, r2
 8009a52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	7858      	ldrb	r0, [r3, #1]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a5e:	2301      	movs	r3, #1
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	f7ff fd1d 	bl	80094a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	613b      	str	r3, [r7, #16]
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d8eb      	bhi.n	8009a4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3718      	adds	r7, #24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d01b      	beq.n	8009acc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7ff ffad 	bl	80099f4 <sync_window>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d113      	bne.n	8009acc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	7858      	ldrb	r0, [r3, #1]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009aae:	2301      	movs	r3, #1
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	f7ff fcd5 	bl	8009460 <disk_read>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d004      	beq.n	8009ac6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009abc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7ff ff87 	bl	80099f4 <sync_window>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d159      	bne.n	8009ba4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d149      	bne.n	8009b8c <sync_fs+0xb4>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	791b      	ldrb	r3, [r3, #4]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d145      	bne.n	8009b8c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	899b      	ldrh	r3, [r3, #12]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	f7ff fda8 	bl	8009662 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3338      	adds	r3, #56	; 0x38
 8009b16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b1a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7ff fd37 	bl	8009592 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3338      	adds	r3, #56	; 0x38
 8009b28:	4921      	ldr	r1, [pc, #132]	; (8009bb0 <sync_fs+0xd8>)
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7ff fd4c 	bl	80095c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3338      	adds	r3, #56	; 0x38
 8009b34:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009b38:	491e      	ldr	r1, [pc, #120]	; (8009bb4 <sync_fs+0xdc>)
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7ff fd44 	bl	80095c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3338      	adds	r3, #56	; 0x38
 8009b44:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	4610      	mov	r0, r2
 8009b50:	f7ff fd3a 	bl	80095c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	3338      	adds	r3, #56	; 0x38
 8009b58:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	695b      	ldr	r3, [r3, #20]
 8009b60:	4619      	mov	r1, r3
 8009b62:	4610      	mov	r0, r2
 8009b64:	f7ff fd30 	bl	80095c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	1c5a      	adds	r2, r3, #1
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	7858      	ldrb	r0, [r3, #1]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b80:	2301      	movs	r3, #1
 8009b82:	f7ff fc8d 	bl	80094a0 <disk_write>
			fs->fsi_flag = 0;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	785b      	ldrb	r3, [r3, #1]
 8009b90:	2200      	movs	r2, #0
 8009b92:	2100      	movs	r1, #0
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7ff fca3 	bl	80094e0 <disk_ioctl>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <sync_fs+0xcc>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	41615252 	.word	0x41615252
 8009bb4:	61417272 	.word	0x61417272

08009bb8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	3b02      	subs	r3, #2
 8009bc6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	69db      	ldr	r3, [r3, #28]
 8009bcc:	3b02      	subs	r3, #2
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d301      	bcc.n	8009bd8 <clust2sect+0x20>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	e008      	b.n	8009bea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	895b      	ldrh	r3, [r3, #10]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	fb03 f202 	mul.w	r2, r3, r2
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be8:	4413      	add	r3, r2
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b086      	sub	sp, #24
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d904      	bls.n	8009c16 <get_fat+0x20>
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d302      	bcc.n	8009c1c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009c16:	2301      	movs	r3, #1
 8009c18:	617b      	str	r3, [r7, #20]
 8009c1a:	e0bb      	b.n	8009d94 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	f000 8083 	beq.w	8009d32 <get_fat+0x13c>
 8009c2c:	2b03      	cmp	r3, #3
 8009c2e:	f300 80a7 	bgt.w	8009d80 <get_fat+0x18a>
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d002      	beq.n	8009c3c <get_fat+0x46>
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d056      	beq.n	8009ce8 <get_fat+0xf2>
 8009c3a:	e0a1      	b.n	8009d80 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	085b      	lsrs	r3, r3, #1
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	899b      	ldrh	r3, [r3, #12]
 8009c52:	4619      	mov	r1, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c5a:	4413      	add	r3, r2
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6938      	ldr	r0, [r7, #16]
 8009c60:	f7ff ff0c 	bl	8009a7c <move_window>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f040 808d 	bne.w	8009d86 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	1c5a      	adds	r2, r3, #1
 8009c70:	60fa      	str	r2, [r7, #12]
 8009c72:	693a      	ldr	r2, [r7, #16]
 8009c74:	8992      	ldrh	r2, [r2, #12]
 8009c76:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c7a:	fb01 f202 	mul.w	r2, r1, r2
 8009c7e:	1a9b      	subs	r3, r3, r2
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4413      	add	r3, r2
 8009c84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009c88:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	899b      	ldrh	r3, [r3, #12]
 8009c92:	4619      	mov	r1, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c9a:	4413      	add	r3, r2
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6938      	ldr	r0, [r7, #16]
 8009ca0:	f7ff feec 	bl	8009a7c <move_window>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d16f      	bne.n	8009d8a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	899b      	ldrh	r3, [r3, #12]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cb6:	fb01 f202 	mul.w	r2, r1, r2
 8009cba:	1a9b      	subs	r3, r3, r2
 8009cbc:	693a      	ldr	r2, [r7, #16]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009cc4:	021b      	lsls	r3, r3, #8
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	f003 0301 	and.w	r3, r3, #1
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <get_fat+0xe8>
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	091b      	lsrs	r3, r3, #4
 8009cdc:	e002      	b.n	8009ce4 <get_fat+0xee>
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ce4:	617b      	str	r3, [r7, #20]
			break;
 8009ce6:	e055      	b.n	8009d94 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	899b      	ldrh	r3, [r3, #12]
 8009cf0:	085b      	lsrs	r3, r3, #1
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cfc:	4413      	add	r3, r2
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6938      	ldr	r0, [r7, #16]
 8009d02:	f7ff febb 	bl	8009a7c <move_window>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d140      	bne.n	8009d8e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	693a      	ldr	r2, [r7, #16]
 8009d18:	8992      	ldrh	r2, [r2, #12]
 8009d1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d1e:	fb00 f202 	mul.w	r2, r0, r2
 8009d22:	1a9b      	subs	r3, r3, r2
 8009d24:	440b      	add	r3, r1
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff fbf8 	bl	800951c <ld_word>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	617b      	str	r3, [r7, #20]
			break;
 8009d30:	e030      	b.n	8009d94 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	899b      	ldrh	r3, [r3, #12]
 8009d3a:	089b      	lsrs	r3, r3, #2
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	4619      	mov	r1, r3
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d46:	4413      	add	r3, r2
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6938      	ldr	r0, [r7, #16]
 8009d4c:	f7ff fe96 	bl	8009a7c <move_window>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d11d      	bne.n	8009d92 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	8992      	ldrh	r2, [r2, #12]
 8009d64:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d68:	fb00 f202 	mul.w	r2, r0, r2
 8009d6c:	1a9b      	subs	r3, r3, r2
 8009d6e:	440b      	add	r3, r1
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff fbeb 	bl	800954c <ld_dword>
 8009d76:	4603      	mov	r3, r0
 8009d78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009d7c:	617b      	str	r3, [r7, #20]
			break;
 8009d7e:	e009      	b.n	8009d94 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009d80:	2301      	movs	r3, #1
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	e006      	b.n	8009d94 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d86:	bf00      	nop
 8009d88:	e004      	b.n	8009d94 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d8a:	bf00      	nop
 8009d8c:	e002      	b.n	8009d94 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d8e:	bf00      	nop
 8009d90:	e000      	b.n	8009d94 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d92:	bf00      	nop
		}
	}

	return val;
 8009d94:	697b      	ldr	r3, [r7, #20]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009d9e:	b590      	push	{r4, r7, lr}
 8009da0:	b089      	sub	sp, #36	; 0x24
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	60f8      	str	r0, [r7, #12]
 8009da6:	60b9      	str	r1, [r7, #8]
 8009da8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009daa:	2302      	movs	r3, #2
 8009dac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	f240 8109 	bls.w	8009fc8 <put_fat+0x22a>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	69db      	ldr	r3, [r3, #28]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	f080 8103 	bcs.w	8009fc8 <put_fat+0x22a>
		switch (fs->fs_type) {
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	f000 80b6 	beq.w	8009f38 <put_fat+0x19a>
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	f300 80fb 	bgt.w	8009fc8 <put_fat+0x22a>
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d003      	beq.n	8009dde <put_fat+0x40>
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	f000 8083 	beq.w	8009ee2 <put_fat+0x144>
 8009ddc:	e0f4      	b.n	8009fc8 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	61bb      	str	r3, [r7, #24]
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	085b      	lsrs	r3, r3, #1
 8009de6:	69ba      	ldr	r2, [r7, #24]
 8009de8:	4413      	add	r3, r2
 8009dea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	899b      	ldrh	r3, [r3, #12]
 8009df4:	4619      	mov	r1, r3
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	fbb3 f3f1 	udiv	r3, r3, r1
 8009dfc:	4413      	add	r3, r2
 8009dfe:	4619      	mov	r1, r3
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f7ff fe3b 	bl	8009a7c <move_window>
 8009e06:	4603      	mov	r3, r0
 8009e08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e0a:	7ffb      	ldrb	r3, [r7, #31]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f040 80d4 	bne.w	8009fba <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	1c5a      	adds	r2, r3, #1
 8009e1c:	61ba      	str	r2, [r7, #24]
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	8992      	ldrh	r2, [r2, #12]
 8009e22:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e26:	fb00 f202 	mul.w	r2, r0, r2
 8009e2a:	1a9b      	subs	r3, r3, r2
 8009e2c:	440b      	add	r3, r1
 8009e2e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00d      	beq.n	8009e56 <put_fat+0xb8>
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	b25b      	sxtb	r3, r3
 8009e40:	f003 030f 	and.w	r3, r3, #15
 8009e44:	b25a      	sxtb	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	011b      	lsls	r3, r3, #4
 8009e4c:	b25b      	sxtb	r3, r3
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	b25b      	sxtb	r3, r3
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	e001      	b.n	8009e5a <put_fat+0xbc>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2201      	movs	r2, #1
 8009e62:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	899b      	ldrh	r3, [r3, #12]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e74:	4413      	add	r3, r2
 8009e76:	4619      	mov	r1, r3
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f7ff fdff 	bl	8009a7c <move_window>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e82:	7ffb      	ldrb	r3, [r7, #31]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f040 809a 	bne.w	8009fbe <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	899b      	ldrh	r3, [r3, #12]
 8009e94:	461a      	mov	r2, r3
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e9c:	fb00 f202 	mul.w	r2, r0, r2
 8009ea0:	1a9b      	subs	r3, r3, r2
 8009ea2:	440b      	add	r3, r1
 8009ea4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d003      	beq.n	8009eb8 <put_fat+0x11a>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	091b      	lsrs	r3, r3, #4
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	e00e      	b.n	8009ed6 <put_fat+0x138>
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	b25b      	sxtb	r3, r3
 8009ebe:	f023 030f 	bic.w	r3, r3, #15
 8009ec2:	b25a      	sxtb	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	0a1b      	lsrs	r3, r3, #8
 8009ec8:	b25b      	sxtb	r3, r3
 8009eca:	f003 030f 	and.w	r3, r3, #15
 8009ece:	b25b      	sxtb	r3, r3
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	b25b      	sxtb	r3, r3
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2201      	movs	r2, #1
 8009ede:	70da      	strb	r2, [r3, #3]
			break;
 8009ee0:	e072      	b.n	8009fc8 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	899b      	ldrh	r3, [r3, #12]
 8009eea:	085b      	lsrs	r3, r3, #1
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	4619      	mov	r1, r3
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ef6:	4413      	add	r3, r2
 8009ef8:	4619      	mov	r1, r3
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f7ff fdbe 	bl	8009a7c <move_window>
 8009f00:	4603      	mov	r3, r0
 8009f02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f04:	7ffb      	ldrb	r3, [r7, #31]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d15b      	bne.n	8009fc2 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	8992      	ldrh	r2, [r2, #12]
 8009f18:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f1c:	fb00 f202 	mul.w	r2, r0, r2
 8009f20:	1a9b      	subs	r3, r3, r2
 8009f22:	440b      	add	r3, r1
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	b292      	uxth	r2, r2
 8009f28:	4611      	mov	r1, r2
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff fb31 	bl	8009592 <st_word>
			fs->wflag = 1;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2201      	movs	r2, #1
 8009f34:	70da      	strb	r2, [r3, #3]
			break;
 8009f36:	e047      	b.n	8009fc8 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	899b      	ldrh	r3, [r3, #12]
 8009f40:	089b      	lsrs	r3, r3, #2
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	4619      	mov	r1, r3
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f4c:	4413      	add	r3, r2
 8009f4e:	4619      	mov	r1, r3
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f7ff fd93 	bl	8009a7c <move_window>
 8009f56:	4603      	mov	r3, r0
 8009f58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f5a:	7ffb      	ldrb	r3, [r7, #31]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d132      	bne.n	8009fc6 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	8992      	ldrh	r2, [r2, #12]
 8009f74:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f78:	fb00 f202 	mul.w	r2, r0, r2
 8009f7c:	1a9b      	subs	r3, r3, r2
 8009f7e:	440b      	add	r3, r1
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7ff fae3 	bl	800954c <ld_dword>
 8009f86:	4603      	mov	r3, r0
 8009f88:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009f8c:	4323      	orrs	r3, r4
 8009f8e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	8992      	ldrh	r2, [r2, #12]
 8009f9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fa2:	fb00 f202 	mul.w	r2, r0, r2
 8009fa6:	1a9b      	subs	r3, r3, r2
 8009fa8:	440b      	add	r3, r1
 8009faa:	6879      	ldr	r1, [r7, #4]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7ff fb0b 	bl	80095c8 <st_dword>
			fs->wflag = 1;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	70da      	strb	r2, [r3, #3]
			break;
 8009fb8:	e006      	b.n	8009fc8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009fba:	bf00      	nop
 8009fbc:	e004      	b.n	8009fc8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009fbe:	bf00      	nop
 8009fc0:	e002      	b.n	8009fc8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009fc2:	bf00      	nop
 8009fc4:	e000      	b.n	8009fc8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009fc6:	bf00      	nop
		}
	}
	return res;
 8009fc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3724      	adds	r7, #36	; 0x24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd90      	pop	{r4, r7, pc}

08009fd2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b088      	sub	sp, #32
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	60f8      	str	r0, [r7, #12]
 8009fda:	60b9      	str	r1, [r7, #8]
 8009fdc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d904      	bls.n	8009ff8 <remove_chain+0x26>
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d301      	bcc.n	8009ffc <remove_chain+0x2a>
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	e04b      	b.n	800a094 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00c      	beq.n	800a01c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a002:	f04f 32ff 	mov.w	r2, #4294967295
 800a006:	6879      	ldr	r1, [r7, #4]
 800a008:	69b8      	ldr	r0, [r7, #24]
 800a00a:	f7ff fec8 	bl	8009d9e <put_fat>
 800a00e:	4603      	mov	r3, r0
 800a010:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a012:	7ffb      	ldrb	r3, [r7, #31]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d001      	beq.n	800a01c <remove_chain+0x4a>
 800a018:	7ffb      	ldrb	r3, [r7, #31]
 800a01a:	e03b      	b.n	800a094 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a01c:	68b9      	ldr	r1, [r7, #8]
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f7ff fde9 	bl	8009bf6 <get_fat>
 800a024:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d031      	beq.n	800a090 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d101      	bne.n	800a036 <remove_chain+0x64>
 800a032:	2302      	movs	r3, #2
 800a034:	e02e      	b.n	800a094 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a03c:	d101      	bne.n	800a042 <remove_chain+0x70>
 800a03e:	2301      	movs	r3, #1
 800a040:	e028      	b.n	800a094 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a042:	2200      	movs	r2, #0
 800a044:	68b9      	ldr	r1, [r7, #8]
 800a046:	69b8      	ldr	r0, [r7, #24]
 800a048:	f7ff fea9 	bl	8009d9e <put_fat>
 800a04c:	4603      	mov	r3, r0
 800a04e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a050:	7ffb      	ldrb	r3, [r7, #31]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <remove_chain+0x88>
 800a056:	7ffb      	ldrb	r3, [r7, #31]
 800a058:	e01c      	b.n	800a094 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	699a      	ldr	r2, [r3, #24]
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	69db      	ldr	r3, [r3, #28]
 800a062:	3b02      	subs	r3, #2
 800a064:	429a      	cmp	r2, r3
 800a066:	d20b      	bcs.n	800a080 <remove_chain+0xae>
			fs->free_clst++;
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	791b      	ldrb	r3, [r3, #4]
 800a076:	f043 0301 	orr.w	r3, r3, #1
 800a07a:	b2da      	uxtb	r2, r3
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d3c6      	bcc.n	800a01c <remove_chain+0x4a>
 800a08e:	e000      	b.n	800a092 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a090:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3720      	adds	r7, #32
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b088      	sub	sp, #32
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10d      	bne.n	800a0ce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	695b      	ldr	r3, [r3, #20]
 800a0b6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d004      	beq.n	800a0c8 <create_chain+0x2c>
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	69ba      	ldr	r2, [r7, #24]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d31b      	bcc.n	800a100 <create_chain+0x64>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	61bb      	str	r3, [r7, #24]
 800a0cc:	e018      	b.n	800a100 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7ff fd90 	bl	8009bf6 <get_fat>
 800a0d6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d801      	bhi.n	800a0e2 <create_chain+0x46>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e070      	b.n	800a1c4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e8:	d101      	bne.n	800a0ee <create_chain+0x52>
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	e06a      	b.n	800a1c4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d201      	bcs.n	800a0fc <create_chain+0x60>
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	e063      	b.n	800a1c4 <create_chain+0x128>
		scl = clst;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	3301      	adds	r3, #1
 800a108:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	69db      	ldr	r3, [r3, #28]
 800a10e:	69fa      	ldr	r2, [r7, #28]
 800a110:	429a      	cmp	r2, r3
 800a112:	d307      	bcc.n	800a124 <create_chain+0x88>
				ncl = 2;
 800a114:	2302      	movs	r3, #2
 800a116:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a118:	69fa      	ldr	r2, [r7, #28]
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d901      	bls.n	800a124 <create_chain+0x88>
 800a120:	2300      	movs	r3, #0
 800a122:	e04f      	b.n	800a1c4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a124:	69f9      	ldr	r1, [r7, #28]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f7ff fd65 	bl	8009bf6 <get_fat>
 800a12c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00e      	beq.n	800a152 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d003      	beq.n	800a142 <create_chain+0xa6>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a140:	d101      	bne.n	800a146 <create_chain+0xaa>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	e03e      	b.n	800a1c4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a146:	69fa      	ldr	r2, [r7, #28]
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d1da      	bne.n	800a104 <create_chain+0x68>
 800a14e:	2300      	movs	r3, #0
 800a150:	e038      	b.n	800a1c4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a152:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a154:	f04f 32ff 	mov.w	r2, #4294967295
 800a158:	69f9      	ldr	r1, [r7, #28]
 800a15a:	6938      	ldr	r0, [r7, #16]
 800a15c:	f7ff fe1f 	bl	8009d9e <put_fat>
 800a160:	4603      	mov	r3, r0
 800a162:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a164:	7dfb      	ldrb	r3, [r7, #23]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d109      	bne.n	800a17e <create_chain+0xe2>
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d006      	beq.n	800a17e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a170:	69fa      	ldr	r2, [r7, #28]
 800a172:	6839      	ldr	r1, [r7, #0]
 800a174:	6938      	ldr	r0, [r7, #16]
 800a176:	f7ff fe12 	bl	8009d9e <put_fat>
 800a17a:	4603      	mov	r3, r0
 800a17c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a17e:	7dfb      	ldrb	r3, [r7, #23]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d116      	bne.n	800a1b2 <create_chain+0x116>
		fs->last_clst = ncl;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	69fa      	ldr	r2, [r7, #28]
 800a188:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	699a      	ldr	r2, [r3, #24]
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	69db      	ldr	r3, [r3, #28]
 800a192:	3b02      	subs	r3, #2
 800a194:	429a      	cmp	r2, r3
 800a196:	d804      	bhi.n	800a1a2 <create_chain+0x106>
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	1e5a      	subs	r2, r3, #1
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	791b      	ldrb	r3, [r3, #4]
 800a1a6:	f043 0301 	orr.w	r3, r3, #1
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	711a      	strb	r2, [r3, #4]
 800a1b0:	e007      	b.n	800a1c2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d102      	bne.n	800a1be <create_chain+0x122>
 800a1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1bc:	e000      	b.n	800a1c0 <create_chain+0x124>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a1c2:	69fb      	ldr	r3, [r7, #28]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3720      	adds	r7, #32
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b087      	sub	sp, #28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	899b      	ldrh	r3, [r3, #12]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	8952      	ldrh	r2, [r2, #10]
 800a1f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	1d1a      	adds	r2, r3, #4
 800a1fe:	613a      	str	r2, [r7, #16]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d101      	bne.n	800a20e <clmt_clust+0x42>
 800a20a:	2300      	movs	r3, #0
 800a20c:	e010      	b.n	800a230 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	429a      	cmp	r2, r3
 800a214:	d307      	bcc.n	800a226 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	617b      	str	r3, [r7, #20]
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	3304      	adds	r3, #4
 800a222:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a224:	e7e9      	b.n	800a1fa <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a226:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	4413      	add	r3, r2
}
 800a230:	4618      	mov	r0, r3
 800a232:	371c      	adds	r7, #28
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b086      	sub	sp, #24
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a252:	d204      	bcs.n	800a25e <dir_sdi+0x22>
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	f003 031f 	and.w	r3, r3, #31
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a25e:	2302      	movs	r3, #2
 800a260:	e071      	b.n	800a346 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	683a      	ldr	r2, [r7, #0]
 800a266:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d106      	bne.n	800a282 <dir_sdi+0x46>
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d902      	bls.n	800a282 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a280:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10c      	bne.n	800a2a2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	095b      	lsrs	r3, r3, #5
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	8912      	ldrh	r2, [r2, #8]
 800a290:	4293      	cmp	r3, r2
 800a292:	d301      	bcc.n	800a298 <dir_sdi+0x5c>
 800a294:	2302      	movs	r3, #2
 800a296:	e056      	b.n	800a346 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	61da      	str	r2, [r3, #28]
 800a2a0:	e02d      	b.n	800a2fe <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	895b      	ldrh	r3, [r3, #10]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	899b      	ldrh	r3, [r3, #12]
 800a2ac:	fb02 f303 	mul.w	r3, r2, r3
 800a2b0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a2b2:	e019      	b.n	800a2e8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6979      	ldr	r1, [r7, #20]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7ff fc9c 	bl	8009bf6 <get_fat>
 800a2be:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c6:	d101      	bne.n	800a2cc <dir_sdi+0x90>
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e03c      	b.n	800a346 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d904      	bls.n	800a2dc <dir_sdi+0xa0>
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d301      	bcc.n	800a2e0 <dir_sdi+0xa4>
 800a2dc:	2302      	movs	r3, #2
 800a2de:	e032      	b.n	800a346 <dir_sdi+0x10a>
			ofs -= csz;
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d2e1      	bcs.n	800a2b4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a2f0:	6979      	ldr	r1, [r7, #20]
 800a2f2:	6938      	ldr	r0, [r7, #16]
 800a2f4:	f7ff fc60 	bl	8009bb8 <clust2sect>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	69db      	ldr	r3, [r3, #28]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d101      	bne.n	800a310 <dir_sdi+0xd4>
 800a30c:	2302      	movs	r3, #2
 800a30e:	e01a      	b.n	800a346 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	69da      	ldr	r2, [r3, #28]
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	899b      	ldrh	r3, [r3, #12]
 800a318:	4619      	mov	r1, r3
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a320:	441a      	add	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	899b      	ldrh	r3, [r3, #12]
 800a330:	461a      	mov	r2, r3
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	fbb3 f0f2 	udiv	r0, r3, r2
 800a338:	fb00 f202 	mul.w	r2, r0, r2
 800a33c:	1a9b      	subs	r3, r3, r2
 800a33e:	18ca      	adds	r2, r1, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b086      	sub	sp, #24
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	3320      	adds	r3, #32
 800a364:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <dir_next+0x28>
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a374:	d301      	bcc.n	800a37a <dir_next+0x2c>
 800a376:	2304      	movs	r3, #4
 800a378:	e0bb      	b.n	800a4f2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	899b      	ldrh	r3, [r3, #12]
 800a37e:	461a      	mov	r2, r3
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	fbb3 f1f2 	udiv	r1, r3, r2
 800a386:	fb01 f202 	mul.w	r2, r1, r2
 800a38a:	1a9b      	subs	r3, r3, r2
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f040 809d 	bne.w	800a4cc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	69db      	ldr	r3, [r3, #28]
 800a396:	1c5a      	adds	r2, r3, #1
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10b      	bne.n	800a3bc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	095b      	lsrs	r3, r3, #5
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	8912      	ldrh	r2, [r2, #8]
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	f0c0 808d 	bcc.w	800a4cc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	61da      	str	r2, [r3, #28]
 800a3b8:	2304      	movs	r3, #4
 800a3ba:	e09a      	b.n	800a4f2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	899b      	ldrh	r3, [r3, #12]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	8952      	ldrh	r2, [r2, #10]
 800a3cc:	3a01      	subs	r2, #1
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d17b      	bne.n	800a4cc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	4610      	mov	r0, r2
 800a3de:	f7ff fc0a 	bl	8009bf6 <get_fat>
 800a3e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d801      	bhi.n	800a3ee <dir_next+0xa0>
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	e081      	b.n	800a4f2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f4:	d101      	bne.n	800a3fa <dir_next+0xac>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e07b      	b.n	800a4f2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	429a      	cmp	r2, r3
 800a402:	d359      	bcc.n	800a4b8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d104      	bne.n	800a414 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	61da      	str	r2, [r3, #28]
 800a410:	2304      	movs	r3, #4
 800a412:	e06e      	b.n	800a4f2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	699b      	ldr	r3, [r3, #24]
 800a41a:	4619      	mov	r1, r3
 800a41c:	4610      	mov	r0, r2
 800a41e:	f7ff fe3d 	bl	800a09c <create_chain>
 800a422:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d101      	bne.n	800a42e <dir_next+0xe0>
 800a42a:	2307      	movs	r3, #7
 800a42c:	e061      	b.n	800a4f2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d101      	bne.n	800a438 <dir_next+0xea>
 800a434:	2302      	movs	r3, #2
 800a436:	e05c      	b.n	800a4f2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43e:	d101      	bne.n	800a444 <dir_next+0xf6>
 800a440:	2301      	movs	r3, #1
 800a442:	e056      	b.n	800a4f2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f7ff fad5 	bl	80099f4 <sync_window>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <dir_next+0x106>
 800a450:	2301      	movs	r3, #1
 800a452:	e04e      	b.n	800a4f2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	899b      	ldrh	r3, [r3, #12]
 800a45e:	461a      	mov	r2, r3
 800a460:	2100      	movs	r1, #0
 800a462:	f7ff f8fe 	bl	8009662 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a466:	2300      	movs	r3, #0
 800a468:	613b      	str	r3, [r7, #16]
 800a46a:	6979      	ldr	r1, [r7, #20]
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f7ff fba3 	bl	8009bb8 <clust2sect>
 800a472:	4602      	mov	r2, r0
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	635a      	str	r2, [r3, #52]	; 0x34
 800a478:	e012      	b.n	800a4a0 <dir_next+0x152>
						fs->wflag = 1;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2201      	movs	r2, #1
 800a47e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f7ff fab7 	bl	80099f4 <sync_window>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <dir_next+0x142>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e030      	b.n	800a4f2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	3301      	adds	r3, #1
 800a494:	613b      	str	r3, [r7, #16]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49a:	1c5a      	adds	r2, r3, #1
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	635a      	str	r2, [r3, #52]	; 0x34
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	895b      	ldrh	r3, [r3, #10]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d3e6      	bcc.n	800a47a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	1ad2      	subs	r2, r2, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a4be:	6979      	ldr	r1, [r7, #20]
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f7ff fb79 	bl	8009bb8 <clust2sect>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	899b      	ldrh	r3, [r3, #12]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4e4:	fb00 f202 	mul.w	r2, r0, r2
 800a4e8:	1a9b      	subs	r3, r3, r2
 800a4ea:	18ca      	adds	r2, r1, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b086      	sub	sp, #24
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a50a:	2100      	movs	r1, #0
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7ff fe95 	bl	800a23c <dir_sdi>
 800a512:	4603      	mov	r3, r0
 800a514:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a516:	7dfb      	ldrb	r3, [r7, #23]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d12b      	bne.n	800a574 <dir_alloc+0x7a>
		n = 0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	69db      	ldr	r3, [r3, #28]
 800a524:	4619      	mov	r1, r3
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f7ff faa8 	bl	8009a7c <move_window>
 800a52c:	4603      	mov	r3, r0
 800a52e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a530:	7dfb      	ldrb	r3, [r7, #23]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d11d      	bne.n	800a572 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	2be5      	cmp	r3, #229	; 0xe5
 800a53e:	d004      	beq.n	800a54a <dir_alloc+0x50>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a1b      	ldr	r3, [r3, #32]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d107      	bne.n	800a55a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	3301      	adds	r3, #1
 800a54e:	613b      	str	r3, [r7, #16]
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	429a      	cmp	r2, r3
 800a556:	d102      	bne.n	800a55e <dir_alloc+0x64>
 800a558:	e00c      	b.n	800a574 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a55a:	2300      	movs	r3, #0
 800a55c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a55e:	2101      	movs	r1, #1
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7ff fef4 	bl	800a34e <dir_next>
 800a566:	4603      	mov	r3, r0
 800a568:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0d7      	beq.n	800a520 <dir_alloc+0x26>
 800a570:	e000      	b.n	800a574 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a572:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a574:	7dfb      	ldrb	r3, [r7, #23]
 800a576:	2b04      	cmp	r3, #4
 800a578:	d101      	bne.n	800a57e <dir_alloc+0x84>
 800a57a:	2307      	movs	r3, #7
 800a57c:	75fb      	strb	r3, [r7, #23]
	return res;
 800a57e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3718      	adds	r7, #24
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	331a      	adds	r3, #26
 800a596:	4618      	mov	r0, r3
 800a598:	f7fe ffc0 	bl	800951c <ld_word>
 800a59c:	4603      	mov	r3, r0
 800a59e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	2b03      	cmp	r3, #3
 800a5a6:	d109      	bne.n	800a5bc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	3314      	adds	r3, #20
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe ffb5 	bl	800951c <ld_word>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	041b      	lsls	r3, r3, #16
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	60f8      	str	r0, [r7, #12]
 800a5ce:	60b9      	str	r1, [r7, #8]
 800a5d0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	331a      	adds	r3, #26
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	b292      	uxth	r2, r2
 800a5da:	4611      	mov	r1, r2
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fe ffd8 	bl	8009592 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d109      	bne.n	800a5fe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	f103 0214 	add.w	r2, r3, #20
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	0c1b      	lsrs	r3, r3, #16
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	f7fe ffca 	bl	8009592 <st_word>
	}
}
 800a5fe:	bf00      	nop
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a608:	b590      	push	{r4, r7, lr}
 800a60a:	b087      	sub	sp, #28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	331a      	adds	r3, #26
 800a616:	4618      	mov	r0, r3
 800a618:	f7fe ff80 	bl	800951c <ld_word>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <cmp_lfn+0x1e>
 800a622:	2300      	movs	r3, #0
 800a624:	e059      	b.n	800a6da <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a62e:	1e5a      	subs	r2, r3, #1
 800a630:	4613      	mov	r3, r2
 800a632:	005b      	lsls	r3, r3, #1
 800a634:	4413      	add	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a63c:	2301      	movs	r3, #1
 800a63e:	81fb      	strh	r3, [r7, #14]
 800a640:	2300      	movs	r3, #0
 800a642:	613b      	str	r3, [r7, #16]
 800a644:	e033      	b.n	800a6ae <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a646:	4a27      	ldr	r2, [pc, #156]	; (800a6e4 <cmp_lfn+0xdc>)
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	4413      	add	r3, r2
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	4413      	add	r3, r2
 800a654:	4618      	mov	r0, r3
 800a656:	f7fe ff61 	bl	800951c <ld_word>
 800a65a:	4603      	mov	r3, r0
 800a65c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a65e:	89fb      	ldrh	r3, [r7, #14]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d01a      	beq.n	800a69a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	2bfe      	cmp	r3, #254	; 0xfe
 800a668:	d812      	bhi.n	800a690 <cmp_lfn+0x88>
 800a66a:	89bb      	ldrh	r3, [r7, #12]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f002 fb81 	bl	800cd74 <ff_wtoupper>
 800a672:	4603      	mov	r3, r0
 800a674:	461c      	mov	r4, r3
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	1c5a      	adds	r2, r3, #1
 800a67a:	617a      	str	r2, [r7, #20]
 800a67c:	005b      	lsls	r3, r3, #1
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	4413      	add	r3, r2
 800a682:	881b      	ldrh	r3, [r3, #0]
 800a684:	4618      	mov	r0, r3
 800a686:	f002 fb75 	bl	800cd74 <ff_wtoupper>
 800a68a:	4603      	mov	r3, r0
 800a68c:	429c      	cmp	r4, r3
 800a68e:	d001      	beq.n	800a694 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a690:	2300      	movs	r3, #0
 800a692:	e022      	b.n	800a6da <cmp_lfn+0xd2>
			}
			wc = uc;
 800a694:	89bb      	ldrh	r3, [r7, #12]
 800a696:	81fb      	strh	r3, [r7, #14]
 800a698:	e006      	b.n	800a6a8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a69a:	89bb      	ldrh	r3, [r7, #12]
 800a69c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d001      	beq.n	800a6a8 <cmp_lfn+0xa0>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	e018      	b.n	800a6da <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	613b      	str	r3, [r7, #16]
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	2b0c      	cmp	r3, #12
 800a6b2:	d9c8      	bls.n	800a646 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00b      	beq.n	800a6d8 <cmp_lfn+0xd0>
 800a6c0:	89fb      	ldrh	r3, [r7, #14]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d008      	beq.n	800a6d8 <cmp_lfn+0xd0>
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	005b      	lsls	r3, r3, #1
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	881b      	ldrh	r3, [r3, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <cmp_lfn+0xd0>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	e000      	b.n	800a6da <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a6d8:	2301      	movs	r3, #1
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd90      	pop	{r4, r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	08017f14 	.word	0x08017f14

0800a6e8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b088      	sub	sp, #32
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	71fb      	strb	r3, [r7, #7]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	330d      	adds	r3, #13
 800a702:	79ba      	ldrb	r2, [r7, #6]
 800a704:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	330b      	adds	r3, #11
 800a70a:	220f      	movs	r2, #15
 800a70c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	330c      	adds	r3, #12
 800a712:	2200      	movs	r2, #0
 800a714:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	331a      	adds	r3, #26
 800a71a:	2100      	movs	r1, #0
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fe ff38 	bl	8009592 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a722:	79fb      	ldrb	r3, [r7, #7]
 800a724:	1e5a      	subs	r2, r3, #1
 800a726:	4613      	mov	r3, r2
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	4413      	add	r3, r2
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	4413      	add	r3, r2
 800a730:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a732:	2300      	movs	r3, #0
 800a734:	82fb      	strh	r3, [r7, #22]
 800a736:	2300      	movs	r3, #0
 800a738:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a73a:	8afb      	ldrh	r3, [r7, #22]
 800a73c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a740:	4293      	cmp	r3, r2
 800a742:	d007      	beq.n	800a754 <put_lfn+0x6c>
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	61fa      	str	r2, [r7, #28]
 800a74a:	005b      	lsls	r3, r3, #1
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	4413      	add	r3, r2
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a754:	4a17      	ldr	r2, [pc, #92]	; (800a7b4 <put_lfn+0xcc>)
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	4413      	add	r3, r2
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	461a      	mov	r2, r3
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	4413      	add	r3, r2
 800a762:	8afa      	ldrh	r2, [r7, #22]
 800a764:	4611      	mov	r1, r2
 800a766:	4618      	mov	r0, r3
 800a768:	f7fe ff13 	bl	8009592 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a76c:	8afb      	ldrh	r3, [r7, #22]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d102      	bne.n	800a778 <put_lfn+0x90>
 800a772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a776:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	3301      	adds	r3, #1
 800a77c:	61bb      	str	r3, [r7, #24]
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	2b0c      	cmp	r3, #12
 800a782:	d9da      	bls.n	800a73a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a784:	8afb      	ldrh	r3, [r7, #22]
 800a786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d006      	beq.n	800a79c <put_lfn+0xb4>
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	005b      	lsls	r3, r3, #1
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	4413      	add	r3, r2
 800a796:	881b      	ldrh	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d103      	bne.n	800a7a4 <put_lfn+0xbc>
 800a79c:	79fb      	ldrb	r3, [r7, #7]
 800a79e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7a2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	79fa      	ldrb	r2, [r7, #7]
 800a7a8:	701a      	strb	r2, [r3, #0]
}
 800a7aa:	bf00      	nop
 800a7ac:	3720      	adds	r7, #32
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	08017f14 	.word	0x08017f14

0800a7b8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b08c      	sub	sp, #48	; 0x30
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
 800a7c4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a7c6:	220b      	movs	r2, #11
 800a7c8:	68b9      	ldr	r1, [r7, #8]
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f7fe ff28 	bl	8009620 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	2b05      	cmp	r3, #5
 800a7d4:	d92b      	bls.n	800a82e <gen_numname+0x76>
		sr = seq;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a7da:	e022      	b.n	800a822 <gen_numname+0x6a>
			wc = *lfn++;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	1c9a      	adds	r2, r3, #2
 800a7e0:	607a      	str	r2, [r7, #4]
 800a7e2:	881b      	ldrh	r3, [r3, #0]
 800a7e4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7ea:	e017      	b.n	800a81c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	005a      	lsls	r2, r3, #1
 800a7f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	4413      	add	r3, r2
 800a7f8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a7fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7fc:	085b      	lsrs	r3, r3, #1
 800a7fe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a806:	2b00      	cmp	r3, #0
 800a808:	d005      	beq.n	800a816 <gen_numname+0x5e>
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a810:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a814:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a818:	3301      	adds	r3, #1
 800a81a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81e:	2b0f      	cmp	r3, #15
 800a820:	d9e4      	bls.n	800a7ec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	881b      	ldrh	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1d8      	bne.n	800a7dc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a82e:	2307      	movs	r3, #7
 800a830:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	b2db      	uxtb	r3, r3
 800a836:	f003 030f 	and.w	r3, r3, #15
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	3330      	adds	r3, #48	; 0x30
 800a83e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a846:	2b39      	cmp	r3, #57	; 0x39
 800a848:	d904      	bls.n	800a854 <gen_numname+0x9c>
 800a84a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a84e:	3307      	adds	r3, #7
 800a850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	1e5a      	subs	r2, r3, #1
 800a858:	62ba      	str	r2, [r7, #40]	; 0x28
 800a85a:	3330      	adds	r3, #48	; 0x30
 800a85c:	443b      	add	r3, r7
 800a85e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a862:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	091b      	lsrs	r3, r3, #4
 800a86a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1df      	bne.n	800a832 <gen_numname+0x7a>
	ns[i] = '~';
 800a872:	f107 0214 	add.w	r2, r7, #20
 800a876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a878:	4413      	add	r3, r2
 800a87a:	227e      	movs	r2, #126	; 0x7e
 800a87c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a87e:	2300      	movs	r3, #0
 800a880:	627b      	str	r3, [r7, #36]	; 0x24
 800a882:	e002      	b.n	800a88a <gen_numname+0xd2>
 800a884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a886:	3301      	adds	r3, #1
 800a888:	627b      	str	r3, [r7, #36]	; 0x24
 800a88a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	429a      	cmp	r2, r3
 800a890:	d205      	bcs.n	800a89e <gen_numname+0xe6>
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	4413      	add	r3, r2
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	2b20      	cmp	r3, #32
 800a89c:	d1f2      	bne.n	800a884 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	2b07      	cmp	r3, #7
 800a8a2:	d807      	bhi.n	800a8b4 <gen_numname+0xfc>
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	62ba      	str	r2, [r7, #40]	; 0x28
 800a8aa:	3330      	adds	r3, #48	; 0x30
 800a8ac:	443b      	add	r3, r7
 800a8ae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a8b2:	e000      	b.n	800a8b6 <gen_numname+0xfe>
 800a8b4:	2120      	movs	r1, #32
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b8:	1c5a      	adds	r2, r3, #1
 800a8ba:	627a      	str	r2, [r7, #36]	; 0x24
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	4413      	add	r3, r2
 800a8c0:	460a      	mov	r2, r1
 800a8c2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	2b07      	cmp	r3, #7
 800a8c8:	d9e9      	bls.n	800a89e <gen_numname+0xe6>
}
 800a8ca:	bf00      	nop
 800a8cc:	bf00      	nop
 800a8ce:	3730      	adds	r7, #48	; 0x30
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a8e0:	230b      	movs	r3, #11
 800a8e2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a8e4:	7bfb      	ldrb	r3, [r7, #15]
 800a8e6:	b2da      	uxtb	r2, r3
 800a8e8:	0852      	lsrs	r2, r2, #1
 800a8ea:	01db      	lsls	r3, r3, #7
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	b2da      	uxtb	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	1c59      	adds	r1, r3, #1
 800a8f4:	6079      	str	r1, [r7, #4]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	60bb      	str	r3, [r7, #8]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1ed      	bne.n	800a8e4 <sum_sfn+0x10>
	return sum;
 800a908:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b086      	sub	sp, #24
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a924:	2100      	movs	r1, #0
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f7ff fc88 	bl	800a23c <dir_sdi>
 800a92c:	4603      	mov	r3, r0
 800a92e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a930:	7dfb      	ldrb	r3, [r7, #23]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d001      	beq.n	800a93a <dir_find+0x24>
 800a936:	7dfb      	ldrb	r3, [r7, #23]
 800a938:	e0a9      	b.n	800aa8e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a93a:	23ff      	movs	r3, #255	; 0xff
 800a93c:	753b      	strb	r3, [r7, #20]
 800a93e:	7d3b      	ldrb	r3, [r7, #20]
 800a940:	757b      	strb	r3, [r7, #21]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f04f 32ff 	mov.w	r2, #4294967295
 800a948:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	4619      	mov	r1, r3
 800a950:	6938      	ldr	r0, [r7, #16]
 800a952:	f7ff f893 	bl	8009a7c <move_window>
 800a956:	4603      	mov	r3, r0
 800a958:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a95a:	7dfb      	ldrb	r3, [r7, #23]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f040 8090 	bne.w	800aa82 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a96a:	7dbb      	ldrb	r3, [r7, #22]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d102      	bne.n	800a976 <dir_find+0x60>
 800a970:	2304      	movs	r3, #4
 800a972:	75fb      	strb	r3, [r7, #23]
 800a974:	e08a      	b.n	800aa8c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	330b      	adds	r3, #11
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a982:	73fb      	strb	r3, [r7, #15]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	7bfa      	ldrb	r2, [r7, #15]
 800a988:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a98a:	7dbb      	ldrb	r3, [r7, #22]
 800a98c:	2be5      	cmp	r3, #229	; 0xe5
 800a98e:	d007      	beq.n	800a9a0 <dir_find+0x8a>
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	f003 0308 	and.w	r3, r3, #8
 800a996:	2b00      	cmp	r3, #0
 800a998:	d009      	beq.n	800a9ae <dir_find+0x98>
 800a99a:	7bfb      	ldrb	r3, [r7, #15]
 800a99c:	2b0f      	cmp	r3, #15
 800a99e:	d006      	beq.n	800a9ae <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a9a0:	23ff      	movs	r3, #255	; 0xff
 800a9a2:	757b      	strb	r3, [r7, #21]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9aa:	631a      	str	r2, [r3, #48]	; 0x30
 800a9ac:	e05e      	b.n	800aa6c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
 800a9b0:	2b0f      	cmp	r3, #15
 800a9b2:	d136      	bne.n	800aa22 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a9ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d154      	bne.n	800aa6c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a9c2:	7dbb      	ldrb	r3, [r7, #22]
 800a9c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00d      	beq.n	800a9e8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a1b      	ldr	r3, [r3, #32]
 800a9d0:	7b5b      	ldrb	r3, [r3, #13]
 800a9d2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a9d4:	7dbb      	ldrb	r3, [r7, #22]
 800a9d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9da:	75bb      	strb	r3, [r7, #22]
 800a9dc:	7dbb      	ldrb	r3, [r7, #22]
 800a9de:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	695a      	ldr	r2, [r3, #20]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a9e8:	7dba      	ldrb	r2, [r7, #22]
 800a9ea:	7d7b      	ldrb	r3, [r7, #21]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d115      	bne.n	800aa1c <dir_find+0x106>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a1b      	ldr	r3, [r3, #32]
 800a9f4:	330d      	adds	r3, #13
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	7d3a      	ldrb	r2, [r7, #20]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d10e      	bne.n	800aa1c <dir_find+0x106>
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	691a      	ldr	r2, [r3, #16]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a1b      	ldr	r3, [r3, #32]
 800aa06:	4619      	mov	r1, r3
 800aa08:	4610      	mov	r0, r2
 800aa0a:	f7ff fdfd 	bl	800a608 <cmp_lfn>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d003      	beq.n	800aa1c <dir_find+0x106>
 800aa14:	7d7b      	ldrb	r3, [r7, #21]
 800aa16:	3b01      	subs	r3, #1
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	e000      	b.n	800aa1e <dir_find+0x108>
 800aa1c:	23ff      	movs	r3, #255	; 0xff
 800aa1e:	757b      	strb	r3, [r7, #21]
 800aa20:	e024      	b.n	800aa6c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aa22:	7d7b      	ldrb	r3, [r7, #21]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d109      	bne.n	800aa3c <dir_find+0x126>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff ff51 	bl	800a8d4 <sum_sfn>
 800aa32:	4603      	mov	r3, r0
 800aa34:	461a      	mov	r2, r3
 800aa36:	7d3b      	ldrb	r3, [r7, #20]
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d024      	beq.n	800aa86 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d10a      	bne.n	800aa60 <dir_find+0x14a>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a18      	ldr	r0, [r3, #32]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	3324      	adds	r3, #36	; 0x24
 800aa52:	220b      	movs	r2, #11
 800aa54:	4619      	mov	r1, r3
 800aa56:	f7fe fe1f 	bl	8009698 <mem_cmp>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d014      	beq.n	800aa8a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aa60:	23ff      	movs	r3, #255	; 0xff
 800aa62:	757b      	strb	r3, [r7, #21]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f04f 32ff 	mov.w	r2, #4294967295
 800aa6a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7ff fc6d 	bl	800a34e <dir_next>
 800aa74:	4603      	mov	r3, r0
 800aa76:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aa78:	7dfb      	ldrb	r3, [r7, #23]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f43f af65 	beq.w	800a94a <dir_find+0x34>
 800aa80:	e004      	b.n	800aa8c <dir_find+0x176>
		if (res != FR_OK) break;
 800aa82:	bf00      	nop
 800aa84:	e002      	b.n	800aa8c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aa86:	bf00      	nop
 800aa88:	e000      	b.n	800aa8c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800aa8a:	bf00      	nop

	return res;
 800aa8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3718      	adds	r7, #24
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08c      	sub	sp, #48	; 0x30
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aaac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d001      	beq.n	800aab8 <dir_register+0x20>
 800aab4:	2306      	movs	r3, #6
 800aab6:	e0e0      	b.n	800ac7a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800aab8:	2300      	movs	r3, #0
 800aaba:	627b      	str	r3, [r7, #36]	; 0x24
 800aabc:	e002      	b.n	800aac4 <dir_register+0x2c>
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	3301      	adds	r3, #1
 800aac2:	627b      	str	r3, [r7, #36]	; 0x24
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	691a      	ldr	r2, [r3, #16]
 800aac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	4413      	add	r3, r2
 800aace:	881b      	ldrh	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1f4      	bne.n	800aabe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800aada:	f107 030c 	add.w	r3, r7, #12
 800aade:	220c      	movs	r2, #12
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fe fd9d 	bl	8009620 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
 800aae8:	f003 0301 	and.w	r3, r3, #1
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d032      	beq.n	800ab56 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2240      	movs	r2, #64	; 0x40
 800aaf4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800aaf8:	2301      	movs	r3, #1
 800aafa:	62bb      	str	r3, [r7, #40]	; 0x28
 800aafc:	e016      	b.n	800ab2c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	691a      	ldr	r2, [r3, #16]
 800ab08:	f107 010c 	add.w	r1, r7, #12
 800ab0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0e:	f7ff fe53 	bl	800a7b8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7ff feff 	bl	800a916 <dir_find>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ab1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d106      	bne.n	800ab34 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab28:	3301      	adds	r3, #1
 800ab2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2e:	2b63      	cmp	r3, #99	; 0x63
 800ab30:	d9e5      	bls.n	800aafe <dir_register+0x66>
 800ab32:	e000      	b.n	800ab36 <dir_register+0x9e>
			if (res != FR_OK) break;
 800ab34:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ab36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab38:	2b64      	cmp	r3, #100	; 0x64
 800ab3a:	d101      	bne.n	800ab40 <dir_register+0xa8>
 800ab3c:	2307      	movs	r3, #7
 800ab3e:	e09c      	b.n	800ac7a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ab40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab44:	2b04      	cmp	r3, #4
 800ab46:	d002      	beq.n	800ab4e <dir_register+0xb6>
 800ab48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab4c:	e095      	b.n	800ac7a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ab4e:	7dfa      	ldrb	r2, [r7, #23]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ab56:	7dfb      	ldrb	r3, [r7, #23]
 800ab58:	f003 0302 	and.w	r3, r3, #2
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d007      	beq.n	800ab70 <dir_register+0xd8>
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	330c      	adds	r3, #12
 800ab64:	4a47      	ldr	r2, [pc, #284]	; (800ac84 <dir_register+0x1ec>)
 800ab66:	fba2 2303 	umull	r2, r3, r2, r3
 800ab6a:	089b      	lsrs	r3, r3, #2
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	e000      	b.n	800ab72 <dir_register+0xda>
 800ab70:	2301      	movs	r3, #1
 800ab72:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ab74:	6a39      	ldr	r1, [r7, #32]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7ff fcbf 	bl	800a4fa <dir_alloc>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ab82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d148      	bne.n	800ac1c <dir_register+0x184>
 800ab8a:	6a3b      	ldr	r3, [r7, #32]
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	623b      	str	r3, [r7, #32]
 800ab90:	6a3b      	ldr	r3, [r7, #32]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d042      	beq.n	800ac1c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	695a      	ldr	r2, [r3, #20]
 800ab9a:	6a3b      	ldr	r3, [r7, #32]
 800ab9c:	015b      	lsls	r3, r3, #5
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	4619      	mov	r1, r3
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f7ff fb4a 	bl	800a23c <dir_sdi>
 800aba8:	4603      	mov	r3, r0
 800abaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800abae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d132      	bne.n	800ac1c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	3324      	adds	r3, #36	; 0x24
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff fe8a 	bl	800a8d4 <sum_sfn>
 800abc0:	4603      	mov	r3, r0
 800abc2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	69db      	ldr	r3, [r3, #28]
 800abc8:	4619      	mov	r1, r3
 800abca:	69f8      	ldr	r0, [r7, #28]
 800abcc:	f7fe ff56 	bl	8009a7c <move_window>
 800abd0:	4603      	mov	r3, r0
 800abd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800abd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d11d      	bne.n	800ac1a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	6918      	ldr	r0, [r3, #16]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a19      	ldr	r1, [r3, #32]
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	7efb      	ldrb	r3, [r7, #27]
 800abec:	f7ff fd7c 	bl	800a6e8 <put_lfn>
				fs->wflag = 1;
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	2201      	movs	r2, #1
 800abf4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800abf6:	2100      	movs	r1, #0
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f7ff fba8 	bl	800a34e <dir_next>
 800abfe:	4603      	mov	r3, r0
 800ac00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ac04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d107      	bne.n	800ac1c <dir_register+0x184>
 800ac0c:	6a3b      	ldr	r3, [r7, #32]
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	623b      	str	r3, [r7, #32]
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1d5      	bne.n	800abc4 <dir_register+0x12c>
 800ac18:	e000      	b.n	800ac1c <dir_register+0x184>
				if (res != FR_OK) break;
 800ac1a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ac1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d128      	bne.n	800ac76 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	69db      	ldr	r3, [r3, #28]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	69f8      	ldr	r0, [r7, #28]
 800ac2c:	f7fe ff26 	bl	8009a7c <move_window>
 800ac30:	4603      	mov	r3, r0
 800ac32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ac36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d11b      	bne.n	800ac76 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	2220      	movs	r2, #32
 800ac44:	2100      	movs	r1, #0
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fe fd0b 	bl	8009662 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a18      	ldr	r0, [r3, #32]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	3324      	adds	r3, #36	; 0x24
 800ac54:	220b      	movs	r2, #11
 800ac56:	4619      	mov	r1, r3
 800ac58:	f7fe fce2 	bl	8009620 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	330c      	adds	r3, #12
 800ac68:	f002 0218 	and.w	r2, r2, #24
 800ac6c:	b2d2      	uxtb	r2, r2
 800ac6e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	2201      	movs	r2, #1
 800ac74:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ac76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3730      	adds	r7, #48	; 0x30
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	4ec4ec4f 	.word	0x4ec4ec4f

0800ac88 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b088      	sub	sp, #32
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f000 80c9 	beq.w	800ae3a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb0:	d032      	beq.n	800ad18 <get_fileinfo+0x90>
			i = j = 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	61bb      	str	r3, [r7, #24]
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800acba:	e01b      	b.n	800acf4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800acbc:	89fb      	ldrh	r3, [r7, #14]
 800acbe:	2100      	movs	r1, #0
 800acc0:	4618      	mov	r0, r3
 800acc2:	f002 f81b 	bl	800ccfc <ff_convert>
 800acc6:	4603      	mov	r3, r0
 800acc8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800acca:	89fb      	ldrh	r3, [r7, #14]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d102      	bne.n	800acd6 <get_fileinfo+0x4e>
 800acd0:	2300      	movs	r3, #0
 800acd2:	61fb      	str	r3, [r7, #28]
 800acd4:	e01a      	b.n	800ad0c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	2bfe      	cmp	r3, #254	; 0xfe
 800acda:	d902      	bls.n	800ace2 <get_fileinfo+0x5a>
 800acdc:	2300      	movs	r3, #0
 800acde:	61fb      	str	r3, [r7, #28]
 800ace0:	e014      	b.n	800ad0c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	1c5a      	adds	r2, r3, #1
 800ace6:	61fa      	str	r2, [r7, #28]
 800ace8:	89fa      	ldrh	r2, [r7, #14]
 800acea:	b2d1      	uxtb	r1, r2
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	4413      	add	r3, r2
 800acf0:	460a      	mov	r2, r1
 800acf2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	691a      	ldr	r2, [r3, #16]
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	1c59      	adds	r1, r3, #1
 800acfc:	61b9      	str	r1, [r7, #24]
 800acfe:	005b      	lsls	r3, r3, #1
 800ad00:	4413      	add	r3, r2
 800ad02:	881b      	ldrh	r3, [r3, #0]
 800ad04:	81fb      	strh	r3, [r7, #14]
 800ad06:	89fb      	ldrh	r3, [r7, #14]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1d7      	bne.n	800acbc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	4413      	add	r3, r2
 800ad12:	3316      	adds	r3, #22
 800ad14:	2200      	movs	r2, #0
 800ad16:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	61bb      	str	r3, [r7, #24]
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	4413      	add	r3, r2
 800ad26:	3316      	adds	r3, #22
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800ad2c:	e04c      	b.n	800adc8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a1a      	ldr	r2, [r3, #32]
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	1c59      	adds	r1, r3, #1
 800ad36:	61f9      	str	r1, [r7, #28]
 800ad38:	4413      	add	r3, r2
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ad3e:	7dfb      	ldrb	r3, [r7, #23]
 800ad40:	2b20      	cmp	r3, #32
 800ad42:	d100      	bne.n	800ad46 <get_fileinfo+0xbe>
 800ad44:	e040      	b.n	800adc8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ad46:	7dfb      	ldrb	r3, [r7, #23]
 800ad48:	2b05      	cmp	r3, #5
 800ad4a:	d101      	bne.n	800ad50 <get_fileinfo+0xc8>
 800ad4c:	23e5      	movs	r3, #229	; 0xe5
 800ad4e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	2b09      	cmp	r3, #9
 800ad54:	d10f      	bne.n	800ad76 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800ad56:	89bb      	ldrh	r3, [r7, #12]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d105      	bne.n	800ad68 <get_fileinfo+0xe0>
 800ad5c:	683a      	ldr	r2, [r7, #0]
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	4413      	add	r3, r2
 800ad62:	3316      	adds	r3, #22
 800ad64:	222e      	movs	r2, #46	; 0x2e
 800ad66:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	1c5a      	adds	r2, r3, #1
 800ad6c:	61ba      	str	r2, [r7, #24]
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	4413      	add	r3, r2
 800ad72:	222e      	movs	r2, #46	; 0x2e
 800ad74:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	3309      	adds	r3, #9
 800ad7e:	7dfa      	ldrb	r2, [r7, #23]
 800ad80:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800ad82:	89bb      	ldrh	r3, [r7, #12]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d11c      	bne.n	800adc2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ad88:	7dfb      	ldrb	r3, [r7, #23]
 800ad8a:	2b40      	cmp	r3, #64	; 0x40
 800ad8c:	d913      	bls.n	800adb6 <get_fileinfo+0x12e>
 800ad8e:	7dfb      	ldrb	r3, [r7, #23]
 800ad90:	2b5a      	cmp	r3, #90	; 0x5a
 800ad92:	d810      	bhi.n	800adb6 <get_fileinfo+0x12e>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6a1b      	ldr	r3, [r3, #32]
 800ad98:	330c      	adds	r3, #12
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	2b08      	cmp	r3, #8
 800ada2:	d901      	bls.n	800ada8 <get_fileinfo+0x120>
 800ada4:	2310      	movs	r3, #16
 800ada6:	e000      	b.n	800adaa <get_fileinfo+0x122>
 800ada8:	2308      	movs	r3, #8
 800adaa:	4013      	ands	r3, r2
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800adb0:	7dfb      	ldrb	r3, [r7, #23]
 800adb2:	3320      	adds	r3, #32
 800adb4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	4413      	add	r3, r2
 800adbc:	3316      	adds	r3, #22
 800adbe:	7dfa      	ldrb	r2, [r7, #23]
 800adc0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	3301      	adds	r3, #1
 800adc6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	2b0a      	cmp	r3, #10
 800adcc:	d9af      	bls.n	800ad2e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800adce:	89bb      	ldrh	r3, [r7, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10d      	bne.n	800adf0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800add4:	683a      	ldr	r2, [r7, #0]
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	4413      	add	r3, r2
 800adda:	3316      	adds	r3, #22
 800addc:	2200      	movs	r2, #0
 800adde:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
 800ade4:	330c      	adds	r3, #12
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d101      	bne.n	800adf0 <get_fileinfo+0x168>
 800adec:	2300      	movs	r3, #0
 800adee:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	4413      	add	r3, r2
 800adf6:	3309      	adds	r3, #9
 800adf8:	2200      	movs	r2, #0
 800adfa:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a1b      	ldr	r3, [r3, #32]
 800ae00:	7ada      	ldrb	r2, [r3, #11]
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	331c      	adds	r3, #28
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7fe fb9d 	bl	800954c <ld_dword>
 800ae12:	4602      	mov	r2, r0
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	3316      	adds	r3, #22
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fe fb94 	bl	800954c <ld_dword>
 800ae24:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	80da      	strh	r2, [r3, #6]
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	0c1b      	lsrs	r3, r3, #16
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	809a      	strh	r2, [r3, #4]
 800ae38:	e000      	b.n	800ae3c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ae3a:	bf00      	nop
}
 800ae3c:	3720      	adds	r7, #32
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
	...

0800ae44 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b08a      	sub	sp, #40	; 0x28
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	613b      	str	r3, [r7, #16]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	60fb      	str	r3, [r7, #12]
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	617b      	str	r3, [r7, #20]
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	1c5a      	adds	r2, r3, #1
 800ae68:	61ba      	str	r2, [r7, #24]
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ae72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae74:	2b1f      	cmp	r3, #31
 800ae76:	d940      	bls.n	800aefa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ae78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae7a:	2b2f      	cmp	r3, #47	; 0x2f
 800ae7c:	d006      	beq.n	800ae8c <create_name+0x48>
 800ae7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae80:	2b5c      	cmp	r3, #92	; 0x5c
 800ae82:	d110      	bne.n	800aea6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ae84:	e002      	b.n	800ae8c <create_name+0x48>
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	61bb      	str	r3, [r7, #24]
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	4413      	add	r3, r2
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b2f      	cmp	r3, #47	; 0x2f
 800ae96:	d0f6      	beq.n	800ae86 <create_name+0x42>
 800ae98:	693a      	ldr	r2, [r7, #16]
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	2b5c      	cmp	r3, #92	; 0x5c
 800aea2:	d0f0      	beq.n	800ae86 <create_name+0x42>
			break;
 800aea4:	e02a      	b.n	800aefc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2bfe      	cmp	r3, #254	; 0xfe
 800aeaa:	d901      	bls.n	800aeb0 <create_name+0x6c>
 800aeac:	2306      	movs	r3, #6
 800aeae:	e17d      	b.n	800b1ac <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800aeb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800aeb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeb8:	2101      	movs	r1, #1
 800aeba:	4618      	mov	r0, r3
 800aebc:	f001 ff1e 	bl	800ccfc <ff_convert>
 800aec0:	4603      	mov	r3, r0
 800aec2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800aec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d101      	bne.n	800aece <create_name+0x8a>
 800aeca:	2306      	movs	r3, #6
 800aecc:	e16e      	b.n	800b1ac <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800aece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aed0:	2b7f      	cmp	r3, #127	; 0x7f
 800aed2:	d809      	bhi.n	800aee8 <create_name+0xa4>
 800aed4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aed6:	4619      	mov	r1, r3
 800aed8:	488d      	ldr	r0, [pc, #564]	; (800b110 <create_name+0x2cc>)
 800aeda:	f7fe fc04 	bl	80096e6 <chk_chr>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <create_name+0xa4>
 800aee4:	2306      	movs	r3, #6
 800aee6:	e161      	b.n	800b1ac <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	1c5a      	adds	r2, r3, #1
 800aeec:	617a      	str	r2, [r7, #20]
 800aeee:	005b      	lsls	r3, r3, #1
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	4413      	add	r3, r2
 800aef4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aef6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800aef8:	e7b4      	b.n	800ae64 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800aefa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800aefc:	693a      	ldr	r2, [r7, #16]
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	441a      	add	r2, r3
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800af06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af08:	2b1f      	cmp	r3, #31
 800af0a:	d801      	bhi.n	800af10 <create_name+0xcc>
 800af0c:	2304      	movs	r3, #4
 800af0e:	e000      	b.n	800af12 <create_name+0xce>
 800af10:	2300      	movs	r3, #0
 800af12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800af16:	e011      	b.n	800af3c <create_name+0xf8>
		w = lfn[di - 1];
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af1e:	3b01      	subs	r3, #1
 800af20:	005b      	lsls	r3, r3, #1
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	4413      	add	r3, r2
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800af2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af2c:	2b20      	cmp	r3, #32
 800af2e:	d002      	beq.n	800af36 <create_name+0xf2>
 800af30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af32:	2b2e      	cmp	r3, #46	; 0x2e
 800af34:	d106      	bne.n	800af44 <create_name+0x100>
		di--;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	3b01      	subs	r3, #1
 800af3a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1ea      	bne.n	800af18 <create_name+0xd4>
 800af42:	e000      	b.n	800af46 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800af44:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	005b      	lsls	r3, r3, #1
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	4413      	add	r3, r2
 800af4e:	2200      	movs	r2, #0
 800af50:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <create_name+0x118>
 800af58:	2306      	movs	r3, #6
 800af5a:	e127      	b.n	800b1ac <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3324      	adds	r3, #36	; 0x24
 800af60:	220b      	movs	r2, #11
 800af62:	2120      	movs	r1, #32
 800af64:	4618      	mov	r0, r3
 800af66:	f7fe fb7c 	bl	8009662 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800af6a:	2300      	movs	r3, #0
 800af6c:	61bb      	str	r3, [r7, #24]
 800af6e:	e002      	b.n	800af76 <create_name+0x132>
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	3301      	adds	r3, #1
 800af74:	61bb      	str	r3, [r7, #24]
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	005b      	lsls	r3, r3, #1
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	4413      	add	r3, r2
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	2b20      	cmp	r3, #32
 800af82:	d0f5      	beq.n	800af70 <create_name+0x12c>
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	005b      	lsls	r3, r3, #1
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	4413      	add	r3, r2
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	2b2e      	cmp	r3, #46	; 0x2e
 800af90:	d0ee      	beq.n	800af70 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d009      	beq.n	800afac <create_name+0x168>
 800af98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af9c:	f043 0303 	orr.w	r3, r3, #3
 800afa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800afa4:	e002      	b.n	800afac <create_name+0x168>
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	3b01      	subs	r3, #1
 800afaa:	617b      	str	r3, [r7, #20]
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d009      	beq.n	800afc6 <create_name+0x182>
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800afb8:	3b01      	subs	r3, #1
 800afba:	005b      	lsls	r3, r3, #1
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	4413      	add	r3, r2
 800afc0:	881b      	ldrh	r3, [r3, #0]
 800afc2:	2b2e      	cmp	r3, #46	; 0x2e
 800afc4:	d1ef      	bne.n	800afa6 <create_name+0x162>

	i = b = 0; ni = 8;
 800afc6:	2300      	movs	r3, #0
 800afc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800afcc:	2300      	movs	r3, #0
 800afce:	623b      	str	r3, [r7, #32]
 800afd0:	2308      	movs	r3, #8
 800afd2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	1c5a      	adds	r2, r3, #1
 800afd8:	61ba      	str	r2, [r7, #24]
 800afda:	005b      	lsls	r3, r3, #1
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	4413      	add	r3, r2
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800afe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 8090 	beq.w	800b10c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800afec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afee:	2b20      	cmp	r3, #32
 800aff0:	d006      	beq.n	800b000 <create_name+0x1bc>
 800aff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aff4:	2b2e      	cmp	r3, #46	; 0x2e
 800aff6:	d10a      	bne.n	800b00e <create_name+0x1ca>
 800aff8:	69ba      	ldr	r2, [r7, #24]
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	429a      	cmp	r2, r3
 800affe:	d006      	beq.n	800b00e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b004:	f043 0303 	orr.w	r3, r3, #3
 800b008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b00c:	e07d      	b.n	800b10a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b00e:	6a3a      	ldr	r2, [r7, #32]
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	429a      	cmp	r2, r3
 800b014:	d203      	bcs.n	800b01e <create_name+0x1da>
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d123      	bne.n	800b066 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	2b0b      	cmp	r3, #11
 800b022:	d106      	bne.n	800b032 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b028:	f043 0303 	orr.w	r3, r3, #3
 800b02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b030:	e075      	b.n	800b11e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b032:	69ba      	ldr	r2, [r7, #24]
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	429a      	cmp	r2, r3
 800b038:	d005      	beq.n	800b046 <create_name+0x202>
 800b03a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b03e:	f043 0303 	orr.w	r3, r3, #3
 800b042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b046:	69ba      	ldr	r2, [r7, #24]
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d866      	bhi.n	800b11c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	61bb      	str	r3, [r7, #24]
 800b052:	2308      	movs	r3, #8
 800b054:	623b      	str	r3, [r7, #32]
 800b056:	230b      	movs	r3, #11
 800b058:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b05a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b064:	e051      	b.n	800b10a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b068:	2b7f      	cmp	r3, #127	; 0x7f
 800b06a:	d914      	bls.n	800b096 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b06c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b06e:	2100      	movs	r1, #0
 800b070:	4618      	mov	r0, r3
 800b072:	f001 fe43 	bl	800ccfc <ff_convert>
 800b076:	4603      	mov	r3, r0
 800b078:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b07a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d004      	beq.n	800b08a <create_name+0x246>
 800b080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b082:	3b80      	subs	r3, #128	; 0x80
 800b084:	4a23      	ldr	r2, [pc, #140]	; (800b114 <create_name+0x2d0>)
 800b086:	5cd3      	ldrb	r3, [r2, r3]
 800b088:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b08a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b08e:	f043 0302 	orr.w	r3, r3, #2
 800b092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b096:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d007      	beq.n	800b0ac <create_name+0x268>
 800b09c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b09e:	4619      	mov	r1, r3
 800b0a0:	481d      	ldr	r0, [pc, #116]	; (800b118 <create_name+0x2d4>)
 800b0a2:	f7fe fb20 	bl	80096e6 <chk_chr>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d008      	beq.n	800b0be <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b0ac:	235f      	movs	r3, #95	; 0x5f
 800b0ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0b4:	f043 0303 	orr.w	r3, r3, #3
 800b0b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b0bc:	e01b      	b.n	800b0f6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b0be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0c0:	2b40      	cmp	r3, #64	; 0x40
 800b0c2:	d909      	bls.n	800b0d8 <create_name+0x294>
 800b0c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0c6:	2b5a      	cmp	r3, #90	; 0x5a
 800b0c8:	d806      	bhi.n	800b0d8 <create_name+0x294>
					b |= 2;
 800b0ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b0ce:	f043 0302 	orr.w	r3, r3, #2
 800b0d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b0d6:	e00e      	b.n	800b0f6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b0d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0da:	2b60      	cmp	r3, #96	; 0x60
 800b0dc:	d90b      	bls.n	800b0f6 <create_name+0x2b2>
 800b0de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0e0:	2b7a      	cmp	r3, #122	; 0x7a
 800b0e2:	d808      	bhi.n	800b0f6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b0e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b0e8:	f043 0301 	orr.w	r3, r3, #1
 800b0ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b0f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0f2:	3b20      	subs	r3, #32
 800b0f4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	1c5a      	adds	r2, r3, #1
 800b0fa:	623a      	str	r2, [r7, #32]
 800b0fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b0fe:	b2d1      	uxtb	r1, r2
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	4413      	add	r3, r2
 800b104:	460a      	mov	r2, r1
 800b106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b10a:	e763      	b.n	800afd4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b10c:	bf00      	nop
 800b10e:	e006      	b.n	800b11e <create_name+0x2da>
 800b110:	08010d7c 	.word	0x08010d7c
 800b114:	08017e94 	.word	0x08017e94
 800b118:	08010d88 	.word	0x08010d88
			if (si > di) break;			/* No extension */
 800b11c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b124:	2be5      	cmp	r3, #229	; 0xe5
 800b126:	d103      	bne.n	800b130 <create_name+0x2ec>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2205      	movs	r2, #5
 800b12c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	2b08      	cmp	r3, #8
 800b134:	d104      	bne.n	800b140 <create_name+0x2fc>
 800b136:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b140:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b144:	f003 030c 	and.w	r3, r3, #12
 800b148:	2b0c      	cmp	r3, #12
 800b14a:	d005      	beq.n	800b158 <create_name+0x314>
 800b14c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b150:	f003 0303 	and.w	r3, r3, #3
 800b154:	2b03      	cmp	r3, #3
 800b156:	d105      	bne.n	800b164 <create_name+0x320>
 800b158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b15c:	f043 0302 	orr.w	r3, r3, #2
 800b160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b168:	f003 0302 	and.w	r3, r3, #2
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d117      	bne.n	800b1a0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b170:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b174:	f003 0303 	and.w	r3, r3, #3
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d105      	bne.n	800b188 <create_name+0x344>
 800b17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b180:	f043 0310 	orr.w	r3, r3, #16
 800b184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b18c:	f003 030c 	and.w	r3, r3, #12
 800b190:	2b04      	cmp	r3, #4
 800b192:	d105      	bne.n	800b1a0 <create_name+0x35c>
 800b194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b198:	f043 0308 	orr.w	r3, r3, #8
 800b19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b1a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b1aa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3728      	adds	r7, #40	; 0x28
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b1c8:	e002      	b.n	800b1d0 <follow_path+0x1c>
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	603b      	str	r3, [r7, #0]
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	2b2f      	cmp	r3, #47	; 0x2f
 800b1d6:	d0f8      	beq.n	800b1ca <follow_path+0x16>
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	2b5c      	cmp	r3, #92	; 0x5c
 800b1de:	d0f4      	beq.n	800b1ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2b1f      	cmp	r3, #31
 800b1ec:	d80a      	bhi.n	800b204 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2280      	movs	r2, #128	; 0x80
 800b1f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f7ff f81f 	bl	800a23c <dir_sdi>
 800b1fe:	4603      	mov	r3, r0
 800b200:	75fb      	strb	r3, [r7, #23]
 800b202:	e048      	b.n	800b296 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b204:	463b      	mov	r3, r7
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7ff fe1b 	bl	800ae44 <create_name>
 800b20e:	4603      	mov	r3, r0
 800b210:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d139      	bne.n	800b28c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f7ff fb7c 	bl	800a916 <dir_find>
 800b21e:	4603      	mov	r3, r0
 800b220:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b228:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b22a:	7dfb      	ldrb	r3, [r7, #23]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00a      	beq.n	800b246 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b230:	7dfb      	ldrb	r3, [r7, #23]
 800b232:	2b04      	cmp	r3, #4
 800b234:	d12c      	bne.n	800b290 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b236:	7afb      	ldrb	r3, [r7, #11]
 800b238:	f003 0304 	and.w	r3, r3, #4
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d127      	bne.n	800b290 <follow_path+0xdc>
 800b240:	2305      	movs	r3, #5
 800b242:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b244:	e024      	b.n	800b290 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b246:	7afb      	ldrb	r3, [r7, #11]
 800b248:	f003 0304 	and.w	r3, r3, #4
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d121      	bne.n	800b294 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	799b      	ldrb	r3, [r3, #6]
 800b254:	f003 0310 	and.w	r3, r3, #16
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d102      	bne.n	800b262 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b25c:	2305      	movs	r3, #5
 800b25e:	75fb      	strb	r3, [r7, #23]
 800b260:	e019      	b.n	800b296 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	8992      	ldrh	r2, [r2, #12]
 800b270:	fbb3 f0f2 	udiv	r0, r3, r2
 800b274:	fb00 f202 	mul.w	r2, r0, r2
 800b278:	1a9b      	subs	r3, r3, r2
 800b27a:	440b      	add	r3, r1
 800b27c:	4619      	mov	r1, r3
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f7ff f982 	bl	800a588 <ld_clust>
 800b284:	4602      	mov	r2, r0
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b28a:	e7bb      	b.n	800b204 <follow_path+0x50>
			if (res != FR_OK) break;
 800b28c:	bf00      	nop
 800b28e:	e002      	b.n	800b296 <follow_path+0xe2>
				break;
 800b290:	bf00      	nop
 800b292:	e000      	b.n	800b296 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b294:	bf00      	nop
			}
		}
	}

	return res;
 800b296:	7dfb      	ldrb	r3, [r7, #23]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3718      	adds	r7, #24
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d031      	beq.n	800b31a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	617b      	str	r3, [r7, #20]
 800b2bc:	e002      	b.n	800b2c4 <get_ldnumber+0x24>
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	617b      	str	r3, [r7, #20]
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	2b1f      	cmp	r3, #31
 800b2ca:	d903      	bls.n	800b2d4 <get_ldnumber+0x34>
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	2b3a      	cmp	r3, #58	; 0x3a
 800b2d2:	d1f4      	bne.n	800b2be <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	2b3a      	cmp	r3, #58	; 0x3a
 800b2da:	d11c      	bne.n	800b316 <get_ldnumber+0x76>
			tp = *path;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	1c5a      	adds	r2, r3, #1
 800b2e6:	60fa      	str	r2, [r7, #12]
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	3b30      	subs	r3, #48	; 0x30
 800b2ec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2b09      	cmp	r3, #9
 800b2f2:	d80e      	bhi.n	800b312 <get_ldnumber+0x72>
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d10a      	bne.n	800b312 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d107      	bne.n	800b312 <get_ldnumber+0x72>
					vol = (int)i;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	3301      	adds	r3, #1
 800b30a:	617b      	str	r3, [r7, #20]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	e002      	b.n	800b31c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b316:	2300      	movs	r3, #0
 800b318:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b31a:	693b      	ldr	r3, [r7, #16]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	371c      	adds	r7, #28
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	70da      	strb	r2, [r3, #3]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f04f 32ff 	mov.w	r2, #4294967295
 800b33e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7fe fb9a 	bl	8009a7c <move_window>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <check_fs+0x2a>
 800b34e:	2304      	movs	r3, #4
 800b350:	e038      	b.n	800b3c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	3338      	adds	r3, #56	; 0x38
 800b356:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe f8de 	bl	800951c <ld_word>
 800b360:	4603      	mov	r3, r0
 800b362:	461a      	mov	r2, r3
 800b364:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b368:	429a      	cmp	r2, r3
 800b36a:	d001      	beq.n	800b370 <check_fs+0x48>
 800b36c:	2303      	movs	r3, #3
 800b36e:	e029      	b.n	800b3c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b376:	2be9      	cmp	r3, #233	; 0xe9
 800b378:	d009      	beq.n	800b38e <check_fs+0x66>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b380:	2beb      	cmp	r3, #235	; 0xeb
 800b382:	d11e      	bne.n	800b3c2 <check_fs+0x9a>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b38a:	2b90      	cmp	r3, #144	; 0x90
 800b38c:	d119      	bne.n	800b3c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	3338      	adds	r3, #56	; 0x38
 800b392:	3336      	adds	r3, #54	; 0x36
 800b394:	4618      	mov	r0, r3
 800b396:	f7fe f8d9 	bl	800954c <ld_dword>
 800b39a:	4603      	mov	r3, r0
 800b39c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b3a0:	4a0a      	ldr	r2, [pc, #40]	; (800b3cc <check_fs+0xa4>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d101      	bne.n	800b3aa <check_fs+0x82>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	e00c      	b.n	800b3c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	3338      	adds	r3, #56	; 0x38
 800b3ae:	3352      	adds	r3, #82	; 0x52
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fe f8cb 	bl	800954c <ld_dword>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	4a05      	ldr	r2, [pc, #20]	; (800b3d0 <check_fs+0xa8>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d101      	bne.n	800b3c2 <check_fs+0x9a>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e000      	b.n	800b3c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b3c2:	2302      	movs	r3, #2
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	00544146 	.word	0x00544146
 800b3d0:	33544146 	.word	0x33544146

0800b3d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b096      	sub	sp, #88	; 0x58
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	4613      	mov	r3, r2
 800b3e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f7ff ff59 	bl	800b2a0 <get_ldnumber>
 800b3ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	da01      	bge.n	800b3fa <find_volume+0x26>
 800b3f6:	230b      	movs	r3, #11
 800b3f8:	e265      	b.n	800b8c6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b3fa:	4a9f      	ldr	r2, [pc, #636]	; (800b678 <find_volume+0x2a4>)
 800b3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b402:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b406:	2b00      	cmp	r3, #0
 800b408:	d101      	bne.n	800b40e <find_volume+0x3a>
 800b40a:	230c      	movs	r3, #12
 800b40c:	e25b      	b.n	800b8c6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b412:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b414:	79fb      	ldrb	r3, [r7, #7]
 800b416:	f023 0301 	bic.w	r3, r3, #1
 800b41a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d01a      	beq.n	800b45a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b426:	785b      	ldrb	r3, [r3, #1]
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fd ffd7 	bl	80093dc <disk_status>
 800b42e:	4603      	mov	r3, r0
 800b430:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b438:	f003 0301 	and.w	r3, r3, #1
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d10c      	bne.n	800b45a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b440:	79fb      	ldrb	r3, [r7, #7]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d007      	beq.n	800b456 <find_volume+0x82>
 800b446:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b44a:	f003 0304 	and.w	r3, r3, #4
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b452:	230a      	movs	r3, #10
 800b454:	e237      	b.n	800b8c6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b456:	2300      	movs	r3, #0
 800b458:	e235      	b.n	800b8c6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45c:	2200      	movs	r2, #0
 800b45e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b462:	b2da      	uxtb	r2, r3
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46a:	785b      	ldrb	r3, [r3, #1]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7fd ffcf 	bl	8009410 <disk_initialize>
 800b472:	4603      	mov	r3, r0
 800b474:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b478:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	2b00      	cmp	r3, #0
 800b482:	d001      	beq.n	800b488 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b484:	2303      	movs	r3, #3
 800b486:	e21e      	b.n	800b8c6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b488:	79fb      	ldrb	r3, [r7, #7]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d007      	beq.n	800b49e <find_volume+0xca>
 800b48e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b492:	f003 0304 	and.w	r3, r3, #4
 800b496:	2b00      	cmp	r3, #0
 800b498:	d001      	beq.n	800b49e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b49a:	230a      	movs	r3, #10
 800b49c:	e213      	b.n	800b8c6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a0:	7858      	ldrb	r0, [r3, #1]
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a4:	330c      	adds	r3, #12
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	2102      	movs	r1, #2
 800b4aa:	f7fe f819 	bl	80094e0 <disk_ioctl>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <find_volume+0xe4>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e206      	b.n	800b8c6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ba:	899b      	ldrh	r3, [r3, #12]
 800b4bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4c0:	d80d      	bhi.n	800b4de <find_volume+0x10a>
 800b4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c4:	899b      	ldrh	r3, [r3, #12]
 800b4c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4ca:	d308      	bcc.n	800b4de <find_volume+0x10a>
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ce:	899b      	ldrh	r3, [r3, #12]
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d4:	899b      	ldrh	r3, [r3, #12]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	4013      	ands	r3, r2
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d001      	beq.n	800b4e2 <find_volume+0x10e>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e1f1      	b.n	800b8c6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b4e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4ea:	f7ff ff1d 	bl	800b328 <check_fs>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b4f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d149      	bne.n	800b590 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	643b      	str	r3, [r7, #64]	; 0x40
 800b500:	e01e      	b.n	800b540 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b504:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b50a:	011b      	lsls	r3, r3, #4
 800b50c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b510:	4413      	add	r3, r2
 800b512:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b516:	3304      	adds	r3, #4
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d006      	beq.n	800b52c <find_volume+0x158>
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	3308      	adds	r3, #8
 800b522:	4618      	mov	r0, r3
 800b524:	f7fe f812 	bl	800954c <ld_dword>
 800b528:	4602      	mov	r2, r0
 800b52a:	e000      	b.n	800b52e <find_volume+0x15a>
 800b52c:	2200      	movs	r2, #0
 800b52e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	3358      	adds	r3, #88	; 0x58
 800b534:	443b      	add	r3, r7
 800b536:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b53c:	3301      	adds	r3, #1
 800b53e:	643b      	str	r3, [r7, #64]	; 0x40
 800b540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b542:	2b03      	cmp	r3, #3
 800b544:	d9dd      	bls.n	800b502 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b546:	2300      	movs	r3, #0
 800b548:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b54a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <find_volume+0x182>
 800b550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b552:	3b01      	subs	r3, #1
 800b554:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	3358      	adds	r3, #88	; 0x58
 800b55c:	443b      	add	r3, r7
 800b55e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b562:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b566:	2b00      	cmp	r3, #0
 800b568:	d005      	beq.n	800b576 <find_volume+0x1a2>
 800b56a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b56c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b56e:	f7ff fedb 	bl	800b328 <check_fs>
 800b572:	4603      	mov	r3, r0
 800b574:	e000      	b.n	800b578 <find_volume+0x1a4>
 800b576:	2303      	movs	r3, #3
 800b578:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b57c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b580:	2b01      	cmp	r3, #1
 800b582:	d905      	bls.n	800b590 <find_volume+0x1bc>
 800b584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b586:	3301      	adds	r3, #1
 800b588:	643b      	str	r3, [r7, #64]	; 0x40
 800b58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b58c:	2b03      	cmp	r3, #3
 800b58e:	d9e2      	bls.n	800b556 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b590:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b594:	2b04      	cmp	r3, #4
 800b596:	d101      	bne.n	800b59c <find_volume+0x1c8>
 800b598:	2301      	movs	r3, #1
 800b59a:	e194      	b.n	800b8c6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b59c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d901      	bls.n	800b5a8 <find_volume+0x1d4>
 800b5a4:	230d      	movs	r3, #13
 800b5a6:	e18e      	b.n	800b8c6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5aa:	3338      	adds	r3, #56	; 0x38
 800b5ac:	330b      	adds	r3, #11
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fd ffb4 	bl	800951c <ld_word>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ba:	899b      	ldrh	r3, [r3, #12]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d001      	beq.n	800b5c4 <find_volume+0x1f0>
 800b5c0:	230d      	movs	r3, #13
 800b5c2:	e180      	b.n	800b8c6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c6:	3338      	adds	r3, #56	; 0x38
 800b5c8:	3316      	adds	r3, #22
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fd ffa6 	bl	800951c <ld_word>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b5d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d106      	bne.n	800b5e8 <find_volume+0x214>
 800b5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5dc:	3338      	adds	r3, #56	; 0x38
 800b5de:	3324      	adds	r3, #36	; 0x24
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7fd ffb3 	bl	800954c <ld_dword>
 800b5e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5ec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fa:	789b      	ldrb	r3, [r3, #2]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d005      	beq.n	800b60c <find_volume+0x238>
 800b600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b602:	789b      	ldrb	r3, [r3, #2]
 800b604:	2b02      	cmp	r3, #2
 800b606:	d001      	beq.n	800b60c <find_volume+0x238>
 800b608:	230d      	movs	r3, #13
 800b60a:	e15c      	b.n	800b8c6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60e:	789b      	ldrb	r3, [r3, #2]
 800b610:	461a      	mov	r2, r3
 800b612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b614:	fb02 f303 	mul.w	r3, r2, r3
 800b618:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b620:	b29a      	uxth	r2, r3
 800b622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b624:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b628:	895b      	ldrh	r3, [r3, #10]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d008      	beq.n	800b640 <find_volume+0x26c>
 800b62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b630:	895b      	ldrh	r3, [r3, #10]
 800b632:	461a      	mov	r2, r3
 800b634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b636:	895b      	ldrh	r3, [r3, #10]
 800b638:	3b01      	subs	r3, #1
 800b63a:	4013      	ands	r3, r2
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d001      	beq.n	800b644 <find_volume+0x270>
 800b640:	230d      	movs	r3, #13
 800b642:	e140      	b.n	800b8c6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b646:	3338      	adds	r3, #56	; 0x38
 800b648:	3311      	adds	r3, #17
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fd ff66 	bl	800951c <ld_word>
 800b650:	4603      	mov	r3, r0
 800b652:	461a      	mov	r2, r3
 800b654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b656:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65a:	891b      	ldrh	r3, [r3, #8]
 800b65c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b65e:	8992      	ldrh	r2, [r2, #12]
 800b660:	0952      	lsrs	r2, r2, #5
 800b662:	b292      	uxth	r2, r2
 800b664:	fbb3 f1f2 	udiv	r1, r3, r2
 800b668:	fb01 f202 	mul.w	r2, r1, r2
 800b66c:	1a9b      	subs	r3, r3, r2
 800b66e:	b29b      	uxth	r3, r3
 800b670:	2b00      	cmp	r3, #0
 800b672:	d003      	beq.n	800b67c <find_volume+0x2a8>
 800b674:	230d      	movs	r3, #13
 800b676:	e126      	b.n	800b8c6 <find_volume+0x4f2>
 800b678:	20002618 	.word	0x20002618

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67e:	3338      	adds	r3, #56	; 0x38
 800b680:	3313      	adds	r3, #19
 800b682:	4618      	mov	r0, r3
 800b684:	f7fd ff4a 	bl	800951c <ld_word>
 800b688:	4603      	mov	r3, r0
 800b68a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b68c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d106      	bne.n	800b6a0 <find_volume+0x2cc>
 800b692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b694:	3338      	adds	r3, #56	; 0x38
 800b696:	3320      	adds	r3, #32
 800b698:	4618      	mov	r0, r3
 800b69a:	f7fd ff57 	bl	800954c <ld_dword>
 800b69e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a2:	3338      	adds	r3, #56	; 0x38
 800b6a4:	330e      	adds	r3, #14
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fd ff38 	bl	800951c <ld_word>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b6b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <find_volume+0x2e6>
 800b6b6:	230d      	movs	r3, #13
 800b6b8:	e105      	b.n	800b8c6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b6ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b6bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6be:	4413      	add	r3, r2
 800b6c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6c2:	8911      	ldrh	r1, [r2, #8]
 800b6c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6c6:	8992      	ldrh	r2, [r2, #12]
 800b6c8:	0952      	lsrs	r2, r2, #5
 800b6ca:	b292      	uxth	r2, r2
 800b6cc:	fbb1 f2f2 	udiv	r2, r1, r2
 800b6d0:	b292      	uxth	r2, r2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b6d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d201      	bcs.n	800b6e2 <find_volume+0x30e>
 800b6de:	230d      	movs	r3, #13
 800b6e0:	e0f1      	b.n	800b8c6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b6e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e6:	1ad3      	subs	r3, r2, r3
 800b6e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6ea:	8952      	ldrh	r2, [r2, #10]
 800b6ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d101      	bne.n	800b6fc <find_volume+0x328>
 800b6f8:	230d      	movs	r3, #13
 800b6fa:	e0e4      	b.n	800b8c6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b704:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b708:	4293      	cmp	r3, r2
 800b70a:	d802      	bhi.n	800b712 <find_volume+0x33e>
 800b70c:	2302      	movs	r3, #2
 800b70e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b714:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b718:	4293      	cmp	r3, r2
 800b71a:	d802      	bhi.n	800b722 <find_volume+0x34e>
 800b71c:	2301      	movs	r3, #1
 800b71e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b724:	1c9a      	adds	r2, r3, #2
 800b726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b728:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b72e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b730:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b734:	441a      	add	r2, r3
 800b736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b738:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b73a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	441a      	add	r2, r3
 800b740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b742:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b748:	2b03      	cmp	r3, #3
 800b74a:	d11e      	bne.n	800b78a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74e:	3338      	adds	r3, #56	; 0x38
 800b750:	332a      	adds	r3, #42	; 0x2a
 800b752:	4618      	mov	r0, r3
 800b754:	f7fd fee2 	bl	800951c <ld_word>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <find_volume+0x38e>
 800b75e:	230d      	movs	r3, #13
 800b760:	e0b1      	b.n	800b8c6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b764:	891b      	ldrh	r3, [r3, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d001      	beq.n	800b76e <find_volume+0x39a>
 800b76a:	230d      	movs	r3, #13
 800b76c:	e0ab      	b.n	800b8c6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b770:	3338      	adds	r3, #56	; 0x38
 800b772:	332c      	adds	r3, #44	; 0x2c
 800b774:	4618      	mov	r0, r3
 800b776:	f7fd fee9 	bl	800954c <ld_dword>
 800b77a:	4602      	mov	r2, r0
 800b77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b782:	69db      	ldr	r3, [r3, #28]
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	647b      	str	r3, [r7, #68]	; 0x44
 800b788:	e01f      	b.n	800b7ca <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78c:	891b      	ldrh	r3, [r3, #8]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <find_volume+0x3c2>
 800b792:	230d      	movs	r3, #13
 800b794:	e097      	b.n	800b8c6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b79a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b79c:	441a      	add	r2, r3
 800b79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b7a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d103      	bne.n	800b7b2 <find_volume+0x3de>
 800b7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ac:	69db      	ldr	r3, [r3, #28]
 800b7ae:	005b      	lsls	r3, r3, #1
 800b7b0:	e00a      	b.n	800b7c8 <find_volume+0x3f4>
 800b7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b4:	69da      	ldr	r2, [r3, #28]
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	005b      	lsls	r3, r3, #1
 800b7ba:	4413      	add	r3, r2
 800b7bc:	085a      	lsrs	r2, r3, #1
 800b7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c0:	69db      	ldr	r3, [r3, #28]
 800b7c2:	f003 0301 	and.w	r3, r3, #1
 800b7c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b7c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7cc:	6a1a      	ldr	r2, [r3, #32]
 800b7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d0:	899b      	ldrh	r3, [r3, #12]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7d6:	440b      	add	r3, r1
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b7dc:	8989      	ldrh	r1, [r1, #12]
 800b7de:	fbb3 f3f1 	udiv	r3, r3, r1
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d201      	bcs.n	800b7ea <find_volume+0x416>
 800b7e6:	230d      	movs	r3, #13
 800b7e8:	e06d      	b.n	800b8c6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f0:	619a      	str	r2, [r3, #24]
 800b7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f4:	699a      	ldr	r2, [r3, #24]
 800b7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fc:	2280      	movs	r2, #128	; 0x80
 800b7fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b804:	2b03      	cmp	r3, #3
 800b806:	d149      	bne.n	800b89c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80a:	3338      	adds	r3, #56	; 0x38
 800b80c:	3330      	adds	r3, #48	; 0x30
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fd fe84 	bl	800951c <ld_word>
 800b814:	4603      	mov	r3, r0
 800b816:	2b01      	cmp	r3, #1
 800b818:	d140      	bne.n	800b89c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b81c:	3301      	adds	r3, #1
 800b81e:	4619      	mov	r1, r3
 800b820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b822:	f7fe f92b 	bl	8009a7c <move_window>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d137      	bne.n	800b89c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800b82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82e:	2200      	movs	r2, #0
 800b830:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b834:	3338      	adds	r3, #56	; 0x38
 800b836:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fd fe6e 	bl	800951c <ld_word>
 800b840:	4603      	mov	r3, r0
 800b842:	461a      	mov	r2, r3
 800b844:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b848:	429a      	cmp	r2, r3
 800b84a:	d127      	bne.n	800b89c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84e:	3338      	adds	r3, #56	; 0x38
 800b850:	4618      	mov	r0, r3
 800b852:	f7fd fe7b 	bl	800954c <ld_dword>
 800b856:	4603      	mov	r3, r0
 800b858:	4a1d      	ldr	r2, [pc, #116]	; (800b8d0 <find_volume+0x4fc>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d11e      	bne.n	800b89c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b860:	3338      	adds	r3, #56	; 0x38
 800b862:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b866:	4618      	mov	r0, r3
 800b868:	f7fd fe70 	bl	800954c <ld_dword>
 800b86c:	4603      	mov	r3, r0
 800b86e:	4a19      	ldr	r2, [pc, #100]	; (800b8d4 <find_volume+0x500>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d113      	bne.n	800b89c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b876:	3338      	adds	r3, #56	; 0x38
 800b878:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fd fe65 	bl	800954c <ld_dword>
 800b882:	4602      	mov	r2, r0
 800b884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b886:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88a:	3338      	adds	r3, #56	; 0x38
 800b88c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b890:	4618      	mov	r0, r3
 800b892:	f7fd fe5b 	bl	800954c <ld_dword>
 800b896:	4602      	mov	r2, r0
 800b898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b8a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b8a4:	4b0c      	ldr	r3, [pc, #48]	; (800b8d8 <find_volume+0x504>)
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	4b0a      	ldr	r3, [pc, #40]	; (800b8d8 <find_volume+0x504>)
 800b8ae:	801a      	strh	r2, [r3, #0]
 800b8b0:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <find_volume+0x504>)
 800b8b2:	881a      	ldrh	r2, [r3, #0]
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ba:	4a08      	ldr	r2, [pc, #32]	; (800b8dc <find_volume+0x508>)
 800b8bc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b8be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8c0:	f7fe f874 	bl	80099ac <clear_lock>
#endif
	return FR_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3758      	adds	r7, #88	; 0x58
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	41615252 	.word	0x41615252
 800b8d4:	61417272 	.word	0x61417272
 800b8d8:	2000261c 	.word	0x2000261c
 800b8dc:	20002640 	.word	0x20002640

0800b8e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b8ea:	2309      	movs	r3, #9
 800b8ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d01c      	beq.n	800b92e <validate+0x4e>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d018      	beq.n	800b92e <validate+0x4e>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d013      	beq.n	800b92e <validate+0x4e>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	889a      	ldrh	r2, [r3, #4]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	88db      	ldrh	r3, [r3, #6]
 800b910:	429a      	cmp	r2, r3
 800b912:	d10c      	bne.n	800b92e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	785b      	ldrb	r3, [r3, #1]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fd fd5e 	bl	80093dc <disk_status>
 800b920:	4603      	mov	r3, r0
 800b922:	f003 0301 	and.w	r3, r3, #1
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <validate+0x4e>
			res = FR_OK;
 800b92a:	2300      	movs	r3, #0
 800b92c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b92e:	7bfb      	ldrb	r3, [r7, #15]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d102      	bne.n	800b93a <validate+0x5a>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	e000      	b.n	800b93c <validate+0x5c>
 800b93a:	2300      	movs	r3, #0
 800b93c:	683a      	ldr	r2, [r7, #0]
 800b93e:	6013      	str	r3, [r2, #0]
	return res;
 800b940:	7bfb      	ldrb	r3, [r7, #15]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
	...

0800b94c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b088      	sub	sp, #32
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	4613      	mov	r3, r2
 800b958:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b95e:	f107 0310 	add.w	r3, r7, #16
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff fc9c 	bl	800b2a0 <get_ldnumber>
 800b968:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	da01      	bge.n	800b974 <f_mount+0x28>
 800b970:	230b      	movs	r3, #11
 800b972:	e02b      	b.n	800b9cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b974:	4a17      	ldr	r2, [pc, #92]	; (800b9d4 <f_mount+0x88>)
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b97c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d005      	beq.n	800b990 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b984:	69b8      	ldr	r0, [r7, #24]
 800b986:	f7fe f811 	bl	80099ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	2200      	movs	r2, #0
 800b98e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d002      	beq.n	800b99c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	490d      	ldr	r1, [pc, #52]	; (800b9d4 <f_mount+0x88>)
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d002      	beq.n	800b9b2 <f_mount+0x66>
 800b9ac:	79fb      	ldrb	r3, [r7, #7]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d001      	beq.n	800b9b6 <f_mount+0x6a>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e00a      	b.n	800b9cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b9b6:	f107 010c 	add.w	r1, r7, #12
 800b9ba:	f107 0308 	add.w	r3, r7, #8
 800b9be:	2200      	movs	r2, #0
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7ff fd07 	bl	800b3d4 <find_volume>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3720      	adds	r7, #32
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	20002618 	.word	0x20002618

0800b9d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b09a      	sub	sp, #104	; 0x68
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <f_open+0x18>
 800b9ec:	2309      	movs	r3, #9
 800b9ee:	e1bb      	b.n	800bd68 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b9f0:	79fb      	ldrb	r3, [r7, #7]
 800b9f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b9f8:	79fa      	ldrb	r2, [r7, #7]
 800b9fa:	f107 0114 	add.w	r1, r7, #20
 800b9fe:	f107 0308 	add.w	r3, r7, #8
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7ff fce6 	bl	800b3d4 <find_volume>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ba0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f040 819f 	bne.w	800bd56 <f_open+0x37e>
		dj.obj.fs = fs;
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	f107 0318 	add.w	r3, r7, #24
 800ba22:	4611      	mov	r1, r2
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7ff fbc5 	bl	800b1b4 <follow_path>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ba30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d11a      	bne.n	800ba6e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ba38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ba3c:	b25b      	sxtb	r3, r3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	da03      	bge.n	800ba4a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ba42:	2306      	movs	r3, #6
 800ba44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ba48:	e011      	b.n	800ba6e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ba4a:	79fb      	ldrb	r3, [r7, #7]
 800ba4c:	f023 0301 	bic.w	r3, r3, #1
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	bf14      	ite	ne
 800ba54:	2301      	movne	r3, #1
 800ba56:	2300      	moveq	r3, #0
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f107 0318 	add.w	r3, r7, #24
 800ba60:	4611      	mov	r1, r2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fd fe5a 	bl	800971c <chk_lock>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ba6e:	79fb      	ldrb	r3, [r7, #7]
 800ba70:	f003 031c 	and.w	r3, r3, #28
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d07f      	beq.n	800bb78 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ba78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d017      	beq.n	800bab0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ba80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba84:	2b04      	cmp	r3, #4
 800ba86:	d10e      	bne.n	800baa6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ba88:	f7fd fea4 	bl	80097d4 <enq_lock>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d006      	beq.n	800baa0 <f_open+0xc8>
 800ba92:	f107 0318 	add.w	r3, r7, #24
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fe fffe 	bl	800aa98 <dir_register>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	e000      	b.n	800baa2 <f_open+0xca>
 800baa0:	2312      	movs	r3, #18
 800baa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800baa6:	79fb      	ldrb	r3, [r7, #7]
 800baa8:	f043 0308 	orr.w	r3, r3, #8
 800baac:	71fb      	strb	r3, [r7, #7]
 800baae:	e010      	b.n	800bad2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bab0:	7fbb      	ldrb	r3, [r7, #30]
 800bab2:	f003 0311 	and.w	r3, r3, #17
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d003      	beq.n	800bac2 <f_open+0xea>
					res = FR_DENIED;
 800baba:	2307      	movs	r3, #7
 800babc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bac0:	e007      	b.n	800bad2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bac2:	79fb      	ldrb	r3, [r7, #7]
 800bac4:	f003 0304 	and.w	r3, r3, #4
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d002      	beq.n	800bad2 <f_open+0xfa>
 800bacc:	2308      	movs	r3, #8
 800bace:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bad2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d168      	bne.n	800bbac <f_open+0x1d4>
 800bada:	79fb      	ldrb	r3, [r7, #7]
 800badc:	f003 0308 	and.w	r3, r3, #8
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d063      	beq.n	800bbac <f_open+0x1d4>
				dw = GET_FATTIME();
 800bae4:	f7fd fae6 	bl	80090b4 <get_fattime>
 800bae8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800baea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baec:	330e      	adds	r3, #14
 800baee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fd fd69 	bl	80095c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800baf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf8:	3316      	adds	r3, #22
 800bafa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fd fd63 	bl	80095c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb04:	330b      	adds	r3, #11
 800bb06:	2220      	movs	r2, #32
 800bb08:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb0e:	4611      	mov	r1, r2
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fe fd39 	bl	800a588 <ld_clust>
 800bb16:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fe fd51 	bl	800a5c6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb26:	331c      	adds	r3, #28
 800bb28:	2100      	movs	r1, #0
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fd fd4c 	bl	80095c8 <st_dword>
					fs->wflag = 1;
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	2201      	movs	r2, #1
 800bb34:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bb36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d037      	beq.n	800bbac <f_open+0x1d4>
						dw = fs->winsect;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb40:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800bb42:	f107 0318 	add.w	r3, r7, #24
 800bb46:	2200      	movs	r2, #0
 800bb48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fe fa41 	bl	8009fd2 <remove_chain>
 800bb50:	4603      	mov	r3, r0
 800bb52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800bb56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d126      	bne.n	800bbac <f_open+0x1d4>
							res = move_window(fs, dw);
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fd ff8a 	bl	8009a7c <move_window>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb72:	3a01      	subs	r2, #1
 800bb74:	615a      	str	r2, [r3, #20]
 800bb76:	e019      	b.n	800bbac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bb78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d115      	bne.n	800bbac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bb80:	7fbb      	ldrb	r3, [r7, #30]
 800bb82:	f003 0310 	and.w	r3, r3, #16
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <f_open+0x1ba>
					res = FR_NO_FILE;
 800bb8a:	2304      	movs	r3, #4
 800bb8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bb90:	e00c      	b.n	800bbac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bb92:	79fb      	ldrb	r3, [r7, #7]
 800bb94:	f003 0302 	and.w	r3, r3, #2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d007      	beq.n	800bbac <f_open+0x1d4>
 800bb9c:	7fbb      	ldrb	r3, [r7, #30]
 800bb9e:	f003 0301 	and.w	r3, r3, #1
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d002      	beq.n	800bbac <f_open+0x1d4>
						res = FR_DENIED;
 800bba6:	2307      	movs	r3, #7
 800bba8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800bbac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d128      	bne.n	800bc06 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bbb4:	79fb      	ldrb	r3, [r7, #7]
 800bbb6:	f003 0308 	and.w	r3, r3, #8
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d003      	beq.n	800bbc6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bbbe:	79fb      	ldrb	r3, [r7, #7]
 800bbc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbc4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bbce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bbd4:	79fb      	ldrb	r3, [r7, #7]
 800bbd6:	f023 0301 	bic.w	r3, r3, #1
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	bf14      	ite	ne
 800bbde:	2301      	movne	r3, #1
 800bbe0:	2300      	moveq	r3, #0
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	f107 0318 	add.w	r3, r7, #24
 800bbea:	4611      	mov	r1, r2
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7fd fe13 	bl	8009818 <inc_lock>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d102      	bne.n	800bc06 <f_open+0x22e>
 800bc00:	2302      	movs	r3, #2
 800bc02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bc06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f040 80a3 	bne.w	800bd56 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc14:	4611      	mov	r1, r2
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fe fcb6 	bl	800a588 <ld_clust>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc24:	331c      	adds	r3, #28
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fd fc90 	bl	800954c <ld_dword>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2200      	movs	r2, #0
 800bc36:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bc38:	697a      	ldr	r2, [r7, #20]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	88da      	ldrh	r2, [r3, #6]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	79fa      	ldrb	r2, [r7, #7]
 800bc4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	3330      	adds	r3, #48	; 0x30
 800bc62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bc66:	2100      	movs	r1, #0
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fd fcfa 	bl	8009662 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bc6e:	79fb      	ldrb	r3, [r7, #7]
 800bc70:	f003 0320 	and.w	r3, r3, #32
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d06e      	beq.n	800bd56 <f_open+0x37e>
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d06a      	beq.n	800bd56 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	68da      	ldr	r2, [r3, #12]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	895b      	ldrh	r3, [r3, #10]
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	899b      	ldrh	r3, [r3, #12]
 800bc92:	fb02 f303 	mul.w	r3, r2, r3
 800bc96:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bca4:	e016      	b.n	800bcd4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7fd ffa3 	bl	8009bf6 <get_fat>
 800bcb0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800bcb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d802      	bhi.n	800bcbe <f_open+0x2e6>
 800bcb8:	2302      	movs	r3, #2
 800bcba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bcbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc4:	d102      	bne.n	800bccc <f_open+0x2f4>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bccc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bcce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d103      	bne.n	800bce4 <f_open+0x30c>
 800bcdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bcde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d8e0      	bhi.n	800bca6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bce8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bcea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d131      	bne.n	800bd56 <f_open+0x37e>
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	899b      	ldrh	r3, [r3, #12]
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcfa:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcfe:	fb01 f202 	mul.w	r2, r1, r2
 800bd02:	1a9b      	subs	r3, r3, r2
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d026      	beq.n	800bd56 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fd ff53 	bl	8009bb8 <clust2sect>
 800bd12:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bd14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d103      	bne.n	800bd22 <f_open+0x34a>
						res = FR_INT_ERR;
 800bd1a:	2302      	movs	r3, #2
 800bd1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bd20:	e019      	b.n	800bd56 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	899b      	ldrh	r3, [r3, #12]
 800bd26:	461a      	mov	r2, r3
 800bd28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd30:	441a      	add	r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	7858      	ldrb	r0, [r3, #1]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6a1a      	ldr	r2, [r3, #32]
 800bd44:	2301      	movs	r3, #1
 800bd46:	f7fd fb8b 	bl	8009460 <disk_read>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d002      	beq.n	800bd56 <f_open+0x37e>
 800bd50:	2301      	movs	r3, #1
 800bd52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bd56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d002      	beq.n	800bd64 <f_open+0x38c>
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bd64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3768      	adds	r7, #104	; 0x68
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b08e      	sub	sp, #56	; 0x38
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
 800bd7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2200      	movs	r2, #0
 800bd86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f107 0214 	add.w	r2, r7, #20
 800bd8e:	4611      	mov	r1, r2
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7ff fda5 	bl	800b8e0 <validate>
 800bd96:	4603      	mov	r3, r0
 800bd98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bd9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d107      	bne.n	800bdb4 <f_read+0x44>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	7d5b      	ldrb	r3, [r3, #21]
 800bda8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bdac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d002      	beq.n	800bdba <f_read+0x4a>
 800bdb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdb8:	e135      	b.n	800c026 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	7d1b      	ldrb	r3, [r3, #20]
 800bdbe:	f003 0301 	and.w	r3, r3, #1
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d101      	bne.n	800bdca <f_read+0x5a>
 800bdc6:	2307      	movs	r3, #7
 800bdc8:	e12d      	b.n	800c026 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	68da      	ldr	r2, [r3, #12]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	699b      	ldr	r3, [r3, #24]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	f240 811e 	bls.w	800c01c <f_read+0x2ac>
 800bde0:	6a3b      	ldr	r3, [r7, #32]
 800bde2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bde4:	e11a      	b.n	800c01c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	697a      	ldr	r2, [r7, #20]
 800bdec:	8992      	ldrh	r2, [r2, #12]
 800bdee:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdf2:	fb01 f202 	mul.w	r2, r1, r2
 800bdf6:	1a9b      	subs	r3, r3, r2
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f040 80d5 	bne.w	800bfa8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	8992      	ldrh	r2, [r2, #12]
 800be06:	fbb3 f3f2 	udiv	r3, r3, r2
 800be0a:	697a      	ldr	r2, [r7, #20]
 800be0c:	8952      	ldrh	r2, [r2, #10]
 800be0e:	3a01      	subs	r2, #1
 800be10:	4013      	ands	r3, r2
 800be12:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d12f      	bne.n	800be7a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	699b      	ldr	r3, [r3, #24]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d103      	bne.n	800be2a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	633b      	str	r3, [r7, #48]	; 0x30
 800be28:	e013      	b.n	800be52 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d007      	beq.n	800be42 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	4619      	mov	r1, r3
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f7fe f9c7 	bl	800a1cc <clmt_clust>
 800be3e:	6338      	str	r0, [r7, #48]	; 0x30
 800be40:	e007      	b.n	800be52 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	69db      	ldr	r3, [r3, #28]
 800be48:	4619      	mov	r1, r3
 800be4a:	4610      	mov	r0, r2
 800be4c:	f7fd fed3 	bl	8009bf6 <get_fat>
 800be50:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be54:	2b01      	cmp	r3, #1
 800be56:	d804      	bhi.n	800be62 <f_read+0xf2>
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2202      	movs	r2, #2
 800be5c:	755a      	strb	r2, [r3, #21]
 800be5e:	2302      	movs	r3, #2
 800be60:	e0e1      	b.n	800c026 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be68:	d104      	bne.n	800be74 <f_read+0x104>
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2201      	movs	r2, #1
 800be6e:	755a      	strb	r2, [r3, #21]
 800be70:	2301      	movs	r3, #1
 800be72:	e0d8      	b.n	800c026 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be78:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800be7a:	697a      	ldr	r2, [r7, #20]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	69db      	ldr	r3, [r3, #28]
 800be80:	4619      	mov	r1, r3
 800be82:	4610      	mov	r0, r2
 800be84:	f7fd fe98 	bl	8009bb8 <clust2sect>
 800be88:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d104      	bne.n	800be9a <f_read+0x12a>
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2202      	movs	r2, #2
 800be94:	755a      	strb	r2, [r3, #21]
 800be96:	2302      	movs	r3, #2
 800be98:	e0c5      	b.n	800c026 <f_read+0x2b6>
			sect += csect;
 800be9a:	69ba      	ldr	r2, [r7, #24]
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	4413      	add	r3, r2
 800bea0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	899b      	ldrh	r3, [r3, #12]
 800bea6:	461a      	mov	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	fbb3 f3f2 	udiv	r3, r3, r2
 800beae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800beb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d041      	beq.n	800bf3a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800beb6:	69fa      	ldr	r2, [r7, #28]
 800beb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beba:	4413      	add	r3, r2
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	8952      	ldrh	r2, [r2, #10]
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d905      	bls.n	800bed0 <f_read+0x160>
					cc = fs->csize - csect;
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	895b      	ldrh	r3, [r3, #10]
 800bec8:	461a      	mov	r2, r3
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	1ad3      	subs	r3, r2, r3
 800bece:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	7858      	ldrb	r0, [r3, #1]
 800bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed6:	69ba      	ldr	r2, [r7, #24]
 800bed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800beda:	f7fd fac1 	bl	8009460 <disk_read>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d004      	beq.n	800beee <f_read+0x17e>
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2201      	movs	r2, #1
 800bee8:	755a      	strb	r2, [r3, #21]
 800beea:	2301      	movs	r3, #1
 800beec:	e09b      	b.n	800c026 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	7d1b      	ldrb	r3, [r3, #20]
 800bef2:	b25b      	sxtb	r3, r3
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	da18      	bge.n	800bf2a <f_read+0x1ba>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6a1a      	ldr	r2, [r3, #32]
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	1ad3      	subs	r3, r2, r3
 800bf00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d911      	bls.n	800bf2a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6a1a      	ldr	r2, [r3, #32]
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	697a      	ldr	r2, [r7, #20]
 800bf10:	8992      	ldrh	r2, [r2, #12]
 800bf12:	fb02 f303 	mul.w	r3, r2, r3
 800bf16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf18:	18d0      	adds	r0, r2, r3
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	899b      	ldrh	r3, [r3, #12]
 800bf24:	461a      	mov	r2, r3
 800bf26:	f7fd fb7b 	bl	8009620 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	899b      	ldrh	r3, [r3, #12]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf32:	fb02 f303 	mul.w	r3, r2, r3
 800bf36:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800bf38:	e05c      	b.n	800bff4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	69ba      	ldr	r2, [r7, #24]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d02e      	beq.n	800bfa2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	7d1b      	ldrb	r3, [r3, #20]
 800bf48:	b25b      	sxtb	r3, r3
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	da18      	bge.n	800bf80 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	7858      	ldrb	r0, [r3, #1]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6a1a      	ldr	r2, [r3, #32]
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	f7fd fa9f 	bl	80094a0 <disk_write>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d004      	beq.n	800bf72 <f_read+0x202>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	755a      	strb	r2, [r3, #21]
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e059      	b.n	800c026 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	7d1b      	ldrb	r3, [r3, #20]
 800bf76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf7a:	b2da      	uxtb	r2, r3
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	7858      	ldrb	r0, [r3, #1]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	69ba      	ldr	r2, [r7, #24]
 800bf8e:	f7fd fa67 	bl	8009460 <disk_read>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d004      	beq.n	800bfa2 <f_read+0x232>
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	755a      	strb	r2, [r3, #21]
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e041      	b.n	800c026 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	69ba      	ldr	r2, [r7, #24]
 800bfa6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	899b      	ldrh	r3, [r3, #12]
 800bfac:	4618      	mov	r0, r3
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	699b      	ldr	r3, [r3, #24]
 800bfb2:	697a      	ldr	r2, [r7, #20]
 800bfb4:	8992      	ldrh	r2, [r2, #12]
 800bfb6:	fbb3 f1f2 	udiv	r1, r3, r2
 800bfba:	fb01 f202 	mul.w	r2, r1, r2
 800bfbe:	1a9b      	subs	r3, r3, r2
 800bfc0:	1ac3      	subs	r3, r0, r3
 800bfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bfc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d901      	bls.n	800bfd0 <f_read+0x260>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	699b      	ldr	r3, [r3, #24]
 800bfda:	697a      	ldr	r2, [r7, #20]
 800bfdc:	8992      	ldrh	r2, [r2, #12]
 800bfde:	fbb3 f0f2 	udiv	r0, r3, r2
 800bfe2:	fb00 f202 	mul.w	r2, r0, r2
 800bfe6:	1a9b      	subs	r3, r3, r2
 800bfe8:	440b      	add	r3, r1
 800bfea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfec:	4619      	mov	r1, r3
 800bfee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bff0:	f7fd fb16 	bl	8009620 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff8:	4413      	add	r3, r2
 800bffa:	627b      	str	r3, [r7, #36]	; 0x24
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	699a      	ldr	r2, [r3, #24]
 800c000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c002:	441a      	add	r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	619a      	str	r2, [r3, #24]
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00e:	441a      	add	r2, r3
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	601a      	str	r2, [r3, #0]
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c018:	1ad3      	subs	r3, r2, r3
 800c01a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f47f aee1 	bne.w	800bde6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3738      	adds	r7, #56	; 0x38
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b08c      	sub	sp, #48	; 0x30
 800c032:	af00      	add	r7, sp, #0
 800c034:	60f8      	str	r0, [r7, #12]
 800c036:	60b9      	str	r1, [r7, #8]
 800c038:	607a      	str	r2, [r7, #4]
 800c03a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	2200      	movs	r2, #0
 800c044:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f107 0210 	add.w	r2, r7, #16
 800c04c:	4611      	mov	r1, r2
 800c04e:	4618      	mov	r0, r3
 800c050:	f7ff fc46 	bl	800b8e0 <validate>
 800c054:	4603      	mov	r3, r0
 800c056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c05a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d107      	bne.n	800c072 <f_write+0x44>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	7d5b      	ldrb	r3, [r3, #21]
 800c066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c06a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d002      	beq.n	800c078 <f_write+0x4a>
 800c072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c076:	e16a      	b.n	800c34e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	7d1b      	ldrb	r3, [r3, #20]
 800c07c:	f003 0302 	and.w	r3, r3, #2
 800c080:	2b00      	cmp	r3, #0
 800c082:	d101      	bne.n	800c088 <f_write+0x5a>
 800c084:	2307      	movs	r3, #7
 800c086:	e162      	b.n	800c34e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	699a      	ldr	r2, [r3, #24]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	441a      	add	r2, r3
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	699b      	ldr	r3, [r3, #24]
 800c094:	429a      	cmp	r2, r3
 800c096:	f080 814c 	bcs.w	800c332 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	43db      	mvns	r3, r3
 800c0a0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c0a2:	e146      	b.n	800c332 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	699b      	ldr	r3, [r3, #24]
 800c0a8:	693a      	ldr	r2, [r7, #16]
 800c0aa:	8992      	ldrh	r2, [r2, #12]
 800c0ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0b0:	fb01 f202 	mul.w	r2, r1, r2
 800c0b4:	1a9b      	subs	r3, r3, r2
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f040 80f1 	bne.w	800c29e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	699b      	ldr	r3, [r3, #24]
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	8992      	ldrh	r2, [r2, #12]
 800c0c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0c8:	693a      	ldr	r2, [r7, #16]
 800c0ca:	8952      	ldrh	r2, [r2, #10]
 800c0cc:	3a01      	subs	r2, #1
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d143      	bne.n	800c160 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10c      	bne.n	800c0fa <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d11a      	bne.n	800c122 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fd ffd3 	bl	800a09c <create_chain>
 800c0f6:	62b8      	str	r0, [r7, #40]	; 0x28
 800c0f8:	e013      	b.n	800c122 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d007      	beq.n	800c112 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	699b      	ldr	r3, [r3, #24]
 800c106:	4619      	mov	r1, r3
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	f7fe f85f 	bl	800a1cc <clmt_clust>
 800c10e:	62b8      	str	r0, [r7, #40]	; 0x28
 800c110:	e007      	b.n	800c122 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	69db      	ldr	r3, [r3, #28]
 800c118:	4619      	mov	r1, r3
 800c11a:	4610      	mov	r0, r2
 800c11c:	f7fd ffbe 	bl	800a09c <create_chain>
 800c120:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c124:	2b00      	cmp	r3, #0
 800c126:	f000 8109 	beq.w	800c33c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d104      	bne.n	800c13a <f_write+0x10c>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2202      	movs	r2, #2
 800c134:	755a      	strb	r2, [r3, #21]
 800c136:	2302      	movs	r3, #2
 800c138:	e109      	b.n	800c34e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c140:	d104      	bne.n	800c14c <f_write+0x11e>
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2201      	movs	r2, #1
 800c146:	755a      	strb	r2, [r3, #21]
 800c148:	2301      	movs	r3, #1
 800c14a:	e100      	b.n	800c34e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c150:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d102      	bne.n	800c160 <f_write+0x132>
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c15e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	7d1b      	ldrb	r3, [r3, #20]
 800c164:	b25b      	sxtb	r3, r3
 800c166:	2b00      	cmp	r3, #0
 800c168:	da18      	bge.n	800c19c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	7858      	ldrb	r0, [r3, #1]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6a1a      	ldr	r2, [r3, #32]
 800c178:	2301      	movs	r3, #1
 800c17a:	f7fd f991 	bl	80094a0 <disk_write>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d004      	beq.n	800c18e <f_write+0x160>
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2201      	movs	r2, #1
 800c188:	755a      	strb	r2, [r3, #21]
 800c18a:	2301      	movs	r3, #1
 800c18c:	e0df      	b.n	800c34e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	7d1b      	ldrb	r3, [r3, #20]
 800c192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c196:	b2da      	uxtb	r2, r3
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c19c:	693a      	ldr	r2, [r7, #16]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	69db      	ldr	r3, [r3, #28]
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	4610      	mov	r0, r2
 800c1a6:	f7fd fd07 	bl	8009bb8 <clust2sect>
 800c1aa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d104      	bne.n	800c1bc <f_write+0x18e>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2202      	movs	r2, #2
 800c1b6:	755a      	strb	r2, [r3, #21]
 800c1b8:	2302      	movs	r3, #2
 800c1ba:	e0c8      	b.n	800c34e <f_write+0x320>
			sect += csect;
 800c1bc:	697a      	ldr	r2, [r7, #20]
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	899b      	ldrh	r3, [r3, #12]
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c1d2:	6a3b      	ldr	r3, [r7, #32]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d043      	beq.n	800c260 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c1d8:	69ba      	ldr	r2, [r7, #24]
 800c1da:	6a3b      	ldr	r3, [r7, #32]
 800c1dc:	4413      	add	r3, r2
 800c1de:	693a      	ldr	r2, [r7, #16]
 800c1e0:	8952      	ldrh	r2, [r2, #10]
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d905      	bls.n	800c1f2 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	895b      	ldrh	r3, [r3, #10]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	7858      	ldrb	r0, [r3, #1]
 800c1f6:	6a3b      	ldr	r3, [r7, #32]
 800c1f8:	697a      	ldr	r2, [r7, #20]
 800c1fa:	69f9      	ldr	r1, [r7, #28]
 800c1fc:	f7fd f950 	bl	80094a0 <disk_write>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d004      	beq.n	800c210 <f_write+0x1e2>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2201      	movs	r2, #1
 800c20a:	755a      	strb	r2, [r3, #21]
 800c20c:	2301      	movs	r3, #1
 800c20e:	e09e      	b.n	800c34e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6a1a      	ldr	r2, [r3, #32]
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	1ad3      	subs	r3, r2, r3
 800c218:	6a3a      	ldr	r2, [r7, #32]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d918      	bls.n	800c250 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6a1a      	ldr	r2, [r3, #32]
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	8992      	ldrh	r2, [r2, #12]
 800c230:	fb02 f303 	mul.w	r3, r2, r3
 800c234:	69fa      	ldr	r2, [r7, #28]
 800c236:	18d1      	adds	r1, r2, r3
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	899b      	ldrh	r3, [r3, #12]
 800c23c:	461a      	mov	r2, r3
 800c23e:	f7fd f9ef 	bl	8009620 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	7d1b      	ldrb	r3, [r3, #20]
 800c246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c24a:	b2da      	uxtb	r2, r3
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	899b      	ldrh	r3, [r3, #12]
 800c254:	461a      	mov	r2, r3
 800c256:	6a3b      	ldr	r3, [r7, #32]
 800c258:	fb02 f303 	mul.w	r3, r2, r3
 800c25c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c25e:	e04b      	b.n	800c2f8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6a1b      	ldr	r3, [r3, #32]
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	429a      	cmp	r2, r3
 800c268:	d016      	beq.n	800c298 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	699a      	ldr	r2, [r3, #24]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c272:	429a      	cmp	r2, r3
 800c274:	d210      	bcs.n	800c298 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	7858      	ldrb	r0, [r3, #1]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c280:	2301      	movs	r3, #1
 800c282:	697a      	ldr	r2, [r7, #20]
 800c284:	f7fd f8ec 	bl	8009460 <disk_read>
 800c288:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d004      	beq.n	800c298 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2201      	movs	r2, #1
 800c292:	755a      	strb	r2, [r3, #21]
 800c294:	2301      	movs	r3, #1
 800c296:	e05a      	b.n	800c34e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	899b      	ldrh	r3, [r3, #12]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	699b      	ldr	r3, [r3, #24]
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	8992      	ldrh	r2, [r2, #12]
 800c2ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2b0:	fb01 f202 	mul.w	r2, r1, r2
 800c2b4:	1a9b      	subs	r3, r3, r2
 800c2b6:	1ac3      	subs	r3, r0, r3
 800c2b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d901      	bls.n	800c2c6 <f_write+0x298>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	699b      	ldr	r3, [r3, #24]
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	8992      	ldrh	r2, [r2, #12]
 800c2d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c2d8:	fb00 f202 	mul.w	r2, r0, r2
 800c2dc:	1a9b      	subs	r3, r3, r2
 800c2de:	440b      	add	r3, r1
 800c2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2e2:	69f9      	ldr	r1, [r7, #28]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fd f99b 	bl	8009620 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	7d1b      	ldrb	r3, [r3, #20]
 800c2ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c2f2:	b2da      	uxtb	r2, r3
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c2f8:	69fa      	ldr	r2, [r7, #28]
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fc:	4413      	add	r3, r2
 800c2fe:	61fb      	str	r3, [r7, #28]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	699a      	ldr	r2, [r3, #24]
 800c304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c306:	441a      	add	r2, r3
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	619a      	str	r2, [r3, #24]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	68da      	ldr	r2, [r3, #12]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	699b      	ldr	r3, [r3, #24]
 800c314:	429a      	cmp	r2, r3
 800c316:	bf38      	it	cc
 800c318:	461a      	movcc	r2, r3
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	60da      	str	r2, [r3, #12]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c324:	441a      	add	r2, r3
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	601a      	str	r2, [r3, #0]
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	f47f aeb5 	bne.w	800c0a4 <f_write+0x76>
 800c33a:	e000      	b.n	800c33e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c33c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	7d1b      	ldrb	r3, [r3, #20]
 800c342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c346:	b2da      	uxtb	r2, r3
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3730      	adds	r7, #48	; 0x30
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b086      	sub	sp, #24
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f107 0208 	add.w	r2, r7, #8
 800c364:	4611      	mov	r1, r2
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff faba 	bl	800b8e0 <validate>
 800c36c:	4603      	mov	r3, r0
 800c36e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c370:	7dfb      	ldrb	r3, [r7, #23]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d168      	bne.n	800c448 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	7d1b      	ldrb	r3, [r3, #20]
 800c37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d062      	beq.n	800c448 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	7d1b      	ldrb	r3, [r3, #20]
 800c386:	b25b      	sxtb	r3, r3
 800c388:	2b00      	cmp	r3, #0
 800c38a:	da15      	bge.n	800c3b8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	7858      	ldrb	r0, [r3, #1]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a1a      	ldr	r2, [r3, #32]
 800c39a:	2301      	movs	r3, #1
 800c39c:	f7fd f880 	bl	80094a0 <disk_write>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d001      	beq.n	800c3aa <f_sync+0x54>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e04f      	b.n	800c44a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	7d1b      	ldrb	r3, [r3, #20]
 800c3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c3b8:	f7fc fe7c 	bl	80090b4 <get_fattime>
 800c3bc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	f7fd fb58 	bl	8009a7c <move_window>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c3d0:	7dfb      	ldrb	r3, [r7, #23]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d138      	bne.n	800c448 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	330b      	adds	r3, #11
 800c3e0:	781a      	ldrb	r2, [r3, #0]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	330b      	adds	r3, #11
 800c3e6:	f042 0220 	orr.w	r2, r2, #32
 800c3ea:	b2d2      	uxtb	r2, r2
 800c3ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6818      	ldr	r0, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	68f9      	ldr	r1, [r7, #12]
 800c3fa:	f7fe f8e4 	bl	800a5c6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f103 021c 	add.w	r2, r3, #28
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	4619      	mov	r1, r3
 800c40a:	4610      	mov	r0, r2
 800c40c:	f7fd f8dc 	bl	80095c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3316      	adds	r3, #22
 800c414:	6939      	ldr	r1, [r7, #16]
 800c416:	4618      	mov	r0, r3
 800c418:	f7fd f8d6 	bl	80095c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	3312      	adds	r3, #18
 800c420:	2100      	movs	r1, #0
 800c422:	4618      	mov	r0, r3
 800c424:	f7fd f8b5 	bl	8009592 <st_word>
					fs->wflag = 1;
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	2201      	movs	r2, #1
 800c42c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	4618      	mov	r0, r3
 800c432:	f7fd fb51 	bl	8009ad8 <sync_fs>
 800c436:	4603      	mov	r3, r0
 800c438:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	7d1b      	ldrb	r3, [r3, #20]
 800c43e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c442:	b2da      	uxtb	r2, r3
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c448:	7dfb      	ldrb	r3, [r7, #23]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3718      	adds	r7, #24
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b084      	sub	sp, #16
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f7ff ff7b 	bl	800c356 <f_sync>
 800c460:	4603      	mov	r3, r0
 800c462:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c464:	7bfb      	ldrb	r3, [r7, #15]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d118      	bne.n	800c49c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f107 0208 	add.w	r2, r7, #8
 800c470:	4611      	mov	r1, r2
 800c472:	4618      	mov	r0, r3
 800c474:	f7ff fa34 	bl	800b8e0 <validate>
 800c478:	4603      	mov	r3, r0
 800c47a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c47c:	7bfb      	ldrb	r3, [r7, #15]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d10c      	bne.n	800c49c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	691b      	ldr	r3, [r3, #16]
 800c486:	4618      	mov	r0, r3
 800c488:	f7fd fa54 	bl	8009934 <dec_lock>
 800c48c:	4603      	mov	r3, r0
 800c48e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c490:	7bfb      	ldrb	r3, [r7, #15]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d102      	bne.n	800c49c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b090      	sub	sp, #64	; 0x40
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f107 0208 	add.w	r2, r7, #8
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7ff fa11 	bl	800b8e0 <validate>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c4c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d103      	bne.n	800c4d4 <f_lseek+0x2e>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	7d5b      	ldrb	r3, [r3, #21]
 800c4d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c4d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d002      	beq.n	800c4e2 <f_lseek+0x3c>
 800c4dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4e0:	e201      	b.n	800c8e6 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f000 80d9 	beq.w	800c69e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f2:	d15a      	bne.n	800c5aa <f_lseek+0x104>
			tbl = fp->cltbl;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fc:	1d1a      	adds	r2, r3, #4
 800c4fe:	627a      	str	r2, [r7, #36]	; 0x24
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	617b      	str	r3, [r7, #20]
 800c504:	2302      	movs	r3, #2
 800c506:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c510:	2b00      	cmp	r3, #0
 800c512:	d03a      	beq.n	800c58a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c516:	613b      	str	r3, [r7, #16]
 800c518:	2300      	movs	r3, #0
 800c51a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51e:	3302      	adds	r3, #2
 800c520:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	60fb      	str	r3, [r7, #12]
 800c526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c528:	3301      	adds	r3, #1
 800c52a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c530:	4618      	mov	r0, r3
 800c532:	f7fd fb60 	bl	8009bf6 <get_fat>
 800c536:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d804      	bhi.n	800c548 <f_lseek+0xa2>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2202      	movs	r2, #2
 800c542:	755a      	strb	r2, [r3, #21]
 800c544:	2302      	movs	r3, #2
 800c546:	e1ce      	b.n	800c8e6 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54e:	d104      	bne.n	800c55a <f_lseek+0xb4>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	755a      	strb	r2, [r3, #21]
 800c556:	2301      	movs	r3, #1
 800c558:	e1c5      	b.n	800c8e6 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	3301      	adds	r3, #1
 800c55e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c560:	429a      	cmp	r2, r3
 800c562:	d0de      	beq.n	800c522 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d809      	bhi.n	800c580 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56e:	1d1a      	adds	r2, r3, #4
 800c570:	627a      	str	r2, [r7, #36]	; 0x24
 800c572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c578:	1d1a      	adds	r2, r3, #4
 800c57a:	627a      	str	r2, [r7, #36]	; 0x24
 800c57c:	693a      	ldr	r2, [r7, #16]
 800c57e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	69db      	ldr	r3, [r3, #28]
 800c584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c586:	429a      	cmp	r2, r3
 800c588:	d3c4      	bcc.n	800c514 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c590:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	429a      	cmp	r2, r3
 800c598:	d803      	bhi.n	800c5a2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59c:	2200      	movs	r2, #0
 800c59e:	601a      	str	r2, [r3, #0]
 800c5a0:	e19f      	b.n	800c8e2 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c5a2:	2311      	movs	r3, #17
 800c5a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c5a8:	e19b      	b.n	800c8e2 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	683a      	ldr	r2, [r7, #0]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d902      	bls.n	800c5ba <f_lseek+0x114>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	f000 818d 	beq.w	800c8e2 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f7fd fdfc 	bl	800a1cc <clmt_clust>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	69db      	ldr	r3, [r3, #28]
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	4610      	mov	r0, r2
 800c5e4:	f7fd fae8 	bl	8009bb8 <clust2sect>
 800c5e8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c5ea:	69bb      	ldr	r3, [r7, #24]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d104      	bne.n	800c5fa <f_lseek+0x154>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	755a      	strb	r2, [r3, #21]
 800c5f6:	2302      	movs	r3, #2
 800c5f8:	e175      	b.n	800c8e6 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	8992      	ldrh	r2, [r2, #12]
 800c602:	fbb3 f3f2 	udiv	r3, r3, r2
 800c606:	68ba      	ldr	r2, [r7, #8]
 800c608:	8952      	ldrh	r2, [r2, #10]
 800c60a:	3a01      	subs	r2, #1
 800c60c:	4013      	ands	r3, r2
 800c60e:	69ba      	ldr	r2, [r7, #24]
 800c610:	4413      	add	r3, r2
 800c612:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	699b      	ldr	r3, [r3, #24]
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	8992      	ldrh	r2, [r2, #12]
 800c61c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c620:	fb01 f202 	mul.w	r2, r1, r2
 800c624:	1a9b      	subs	r3, r3, r2
 800c626:	2b00      	cmp	r3, #0
 800c628:	f000 815b 	beq.w	800c8e2 <f_lseek+0x43c>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a1b      	ldr	r3, [r3, #32]
 800c630:	69ba      	ldr	r2, [r7, #24]
 800c632:	429a      	cmp	r2, r3
 800c634:	f000 8155 	beq.w	800c8e2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	7d1b      	ldrb	r3, [r3, #20]
 800c63c:	b25b      	sxtb	r3, r3
 800c63e:	2b00      	cmp	r3, #0
 800c640:	da18      	bge.n	800c674 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	7858      	ldrb	r0, [r3, #1]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6a1a      	ldr	r2, [r3, #32]
 800c650:	2301      	movs	r3, #1
 800c652:	f7fc ff25 	bl	80094a0 <disk_write>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d004      	beq.n	800c666 <f_lseek+0x1c0>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	755a      	strb	r2, [r3, #21]
 800c662:	2301      	movs	r3, #1
 800c664:	e13f      	b.n	800c8e6 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	7d1b      	ldrb	r3, [r3, #20]
 800c66a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c66e:	b2da      	uxtb	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	7858      	ldrb	r0, [r3, #1]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c67e:	2301      	movs	r3, #1
 800c680:	69ba      	ldr	r2, [r7, #24]
 800c682:	f7fc feed 	bl	8009460 <disk_read>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d004      	beq.n	800c696 <f_lseek+0x1f0>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	755a      	strb	r2, [r3, #21]
 800c692:	2301      	movs	r3, #1
 800c694:	e127      	b.n	800c8e6 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	69ba      	ldr	r2, [r7, #24]
 800c69a:	621a      	str	r2, [r3, #32]
 800c69c:	e121      	b.n	800c8e2 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	683a      	ldr	r2, [r7, #0]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d908      	bls.n	800c6ba <f_lseek+0x214>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	7d1b      	ldrb	r3, [r3, #20]
 800c6ac:	f003 0302 	and.w	r3, r3, #2
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d102      	bne.n	800c6ba <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	699b      	ldr	r3, [r3, #24]
 800c6be:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	637b      	str	r3, [r7, #52]	; 0x34
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6c8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f000 80b5 	beq.w	800c83c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	895b      	ldrh	r3, [r3, #10]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	899b      	ldrh	r3, [r3, #12]
 800c6dc:	fb02 f303 	mul.w	r3, r2, r3
 800c6e0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c6e2:	6a3b      	ldr	r3, [r7, #32]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d01b      	beq.n	800c720 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	1e5a      	subs	r2, r3, #1
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6f2:	6a3b      	ldr	r3, [r7, #32]
 800c6f4:	1e59      	subs	r1, r3, #1
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d30f      	bcc.n	800c720 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c700:	6a3b      	ldr	r3, [r7, #32]
 800c702:	1e5a      	subs	r2, r3, #1
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	425b      	negs	r3, r3
 800c708:	401a      	ands	r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	699b      	ldr	r3, [r3, #24]
 800c712:	683a      	ldr	r2, [r7, #0]
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	69db      	ldr	r3, [r3, #28]
 800c71c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c71e:	e022      	b.n	800c766 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d119      	bne.n	800c760 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2100      	movs	r1, #0
 800c730:	4618      	mov	r0, r3
 800c732:	f7fd fcb3 	bl	800a09c <create_chain>
 800c736:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d104      	bne.n	800c748 <f_lseek+0x2a2>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2202      	movs	r2, #2
 800c742:	755a      	strb	r2, [r3, #21]
 800c744:	2302      	movs	r3, #2
 800c746:	e0ce      	b.n	800c8e6 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c74e:	d104      	bne.n	800c75a <f_lseek+0x2b4>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2201      	movs	r2, #1
 800c754:	755a      	strb	r2, [r3, #21]
 800c756:	2301      	movs	r3, #1
 800c758:	e0c5      	b.n	800c8e6 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c75e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c764:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d067      	beq.n	800c83c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800c76c:	e03a      	b.n	800c7e4 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800c76e:	683a      	ldr	r2, [r7, #0]
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	603b      	str	r3, [r7, #0]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	699a      	ldr	r2, [r3, #24]
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	441a      	add	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	7d1b      	ldrb	r3, [r3, #20]
 800c786:	f003 0302 	and.w	r3, r3, #2
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00b      	beq.n	800c7a6 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c792:	4618      	mov	r0, r3
 800c794:	f7fd fc82 	bl	800a09c <create_chain>
 800c798:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d108      	bne.n	800c7b2 <f_lseek+0x30c>
							ofs = 0; break;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	603b      	str	r3, [r7, #0]
 800c7a4:	e022      	b.n	800c7ec <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fd fa23 	bl	8009bf6 <get_fat>
 800c7b0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b8:	d104      	bne.n	800c7c4 <f_lseek+0x31e>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2201      	movs	r2, #1
 800c7be:	755a      	strb	r2, [r3, #21]
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	e090      	b.n	800c8e6 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d904      	bls.n	800c7d4 <f_lseek+0x32e>
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	69db      	ldr	r3, [r3, #28]
 800c7ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d304      	bcc.n	800c7de <f_lseek+0x338>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2202      	movs	r2, #2
 800c7d8:	755a      	strb	r2, [r3, #21]
 800c7da:	2302      	movs	r3, #2
 800c7dc:	e083      	b.n	800c8e6 <f_lseek+0x440>
					fp->clust = clst;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7e2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d8c0      	bhi.n	800c76e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	699a      	ldr	r2, [r3, #24]
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	441a      	add	r2, r3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	899b      	ldrh	r3, [r3, #12]
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	fbb3 f1f2 	udiv	r1, r3, r2
 800c804:	fb01 f202 	mul.w	r2, r1, r2
 800c808:	1a9b      	subs	r3, r3, r2
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d016      	beq.n	800c83c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c812:	4618      	mov	r0, r3
 800c814:	f7fd f9d0 	bl	8009bb8 <clust2sect>
 800c818:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d104      	bne.n	800c82a <f_lseek+0x384>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2202      	movs	r2, #2
 800c824:	755a      	strb	r2, [r3, #21]
 800c826:	2302      	movs	r3, #2
 800c828:	e05d      	b.n	800c8e6 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	899b      	ldrh	r3, [r3, #12]
 800c82e:	461a      	mov	r2, r3
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	fbb3 f3f2 	udiv	r3, r3, r2
 800c836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c838:	4413      	add	r3, r2
 800c83a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	699a      	ldr	r2, [r3, #24]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	429a      	cmp	r2, r3
 800c846:	d90a      	bls.n	800c85e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	699a      	ldr	r2, [r3, #24]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	7d1b      	ldrb	r3, [r3, #20]
 800c854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	8992      	ldrh	r2, [r2, #12]
 800c866:	fbb3 f1f2 	udiv	r1, r3, r2
 800c86a:	fb01 f202 	mul.w	r2, r1, r2
 800c86e:	1a9b      	subs	r3, r3, r2
 800c870:	2b00      	cmp	r3, #0
 800c872:	d036      	beq.n	800c8e2 <f_lseek+0x43c>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6a1b      	ldr	r3, [r3, #32]
 800c878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d031      	beq.n	800c8e2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	7d1b      	ldrb	r3, [r3, #20]
 800c882:	b25b      	sxtb	r3, r3
 800c884:	2b00      	cmp	r3, #0
 800c886:	da18      	bge.n	800c8ba <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	7858      	ldrb	r0, [r3, #1]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a1a      	ldr	r2, [r3, #32]
 800c896:	2301      	movs	r3, #1
 800c898:	f7fc fe02 	bl	80094a0 <disk_write>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d004      	beq.n	800c8ac <f_lseek+0x406>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	755a      	strb	r2, [r3, #21]
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	e01c      	b.n	800c8e6 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	7d1b      	ldrb	r3, [r3, #20]
 800c8b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8b4:	b2da      	uxtb	r2, r3
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	7858      	ldrb	r0, [r3, #1]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8c8:	f7fc fdca 	bl	8009460 <disk_read>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d004      	beq.n	800c8dc <f_lseek+0x436>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	755a      	strb	r2, [r3, #21]
 800c8d8:	2301      	movs	r3, #1
 800c8da:	e004      	b.n	800c8e6 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8e0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c8e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3740      	adds	r7, #64	; 0x40
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b086      	sub	sp, #24
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
 800c8f6:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d101      	bne.n	800c902 <f_opendir+0x14>
 800c8fe:	2309      	movs	r3, #9
 800c900:	e064      	b.n	800c9cc <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c906:	f107 010c 	add.w	r1, r7, #12
 800c90a:	463b      	mov	r3, r7
 800c90c:	2200      	movs	r2, #0
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fe fd60 	bl	800b3d4 <find_volume>
 800c914:	4603      	mov	r3, r0
 800c916:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c918:	7dfb      	ldrb	r3, [r7, #23]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d14f      	bne.n	800c9be <f_opendir+0xd0>
		obj->fs = fs;
 800c91e:	68fa      	ldr	r2, [r7, #12]
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	4619      	mov	r1, r3
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f7fe fc43 	bl	800b1b4 <follow_path>
 800c92e:	4603      	mov	r3, r0
 800c930:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c932:	7dfb      	ldrb	r3, [r7, #23]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d13d      	bne.n	800c9b4 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c93e:	b25b      	sxtb	r3, r3
 800c940:	2b00      	cmp	r3, #0
 800c942:	db12      	blt.n	800c96a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	799b      	ldrb	r3, [r3, #6]
 800c948:	f003 0310 	and.w	r3, r3, #16
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00a      	beq.n	800c966 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a1b      	ldr	r3, [r3, #32]
 800c956:	4619      	mov	r1, r3
 800c958:	4610      	mov	r0, r2
 800c95a:	f7fd fe15 	bl	800a588 <ld_clust>
 800c95e:	4602      	mov	r2, r0
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	609a      	str	r2, [r3, #8]
 800c964:	e001      	b.n	800c96a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c966:	2305      	movs	r3, #5
 800c968:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c96a:	7dfb      	ldrb	r3, [r7, #23]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d121      	bne.n	800c9b4 <f_opendir+0xc6>
				obj->id = fs->id;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	88da      	ldrh	r2, [r3, #6]
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c978:	2100      	movs	r1, #0
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f7fd fc5e 	bl	800a23c <dir_sdi>
 800c980:	4603      	mov	r3, r0
 800c982:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c984:	7dfb      	ldrb	r3, [r7, #23]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d114      	bne.n	800c9b4 <f_opendir+0xc6>
					if (obj->sclust) {
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00d      	beq.n	800c9ae <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c992:	2100      	movs	r1, #0
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f7fc ff3f 	bl	8009818 <inc_lock>
 800c99a:	4602      	mov	r2, r0
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d105      	bne.n	800c9b4 <f_opendir+0xc6>
 800c9a8:	2312      	movs	r3, #18
 800c9aa:	75fb      	strb	r3, [r7, #23]
 800c9ac:	e002      	b.n	800c9b4 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c9b4:	7dfb      	ldrb	r3, [r7, #23]
 800c9b6:	2b04      	cmp	r3, #4
 800c9b8:	d101      	bne.n	800c9be <f_opendir+0xd0>
 800c9ba:	2305      	movs	r3, #5
 800c9bc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c9be:	7dfb      	ldrb	r3, [r7, #23]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d002      	beq.n	800c9ca <f_opendir+0xdc>
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c9ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3718      	adds	r7, #24
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f107 0208 	add.w	r2, r7, #8
 800c9e2:	4611      	mov	r1, r2
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fe ff7b 	bl	800b8e0 <validate>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d110      	bne.n	800ca16 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	691b      	ldr	r3, [r3, #16]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d006      	beq.n	800ca0a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7fc ff97 	bl	8009934 <dec_lock>
 800ca06:	4603      	mov	r3, r0
 800ca08:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800ca0a:	7bfb      	ldrb	r3, [r7, #15]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d102      	bne.n	800ca16 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800ca16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b090      	sub	sp, #64	; 0x40
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ca2a:	f107 0108 	add.w	r1, r7, #8
 800ca2e:	1d3b      	adds	r3, r7, #4
 800ca30:	2200      	movs	r2, #0
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7fe fcce 	bl	800b3d4 <find_volume>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800ca3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d11f      	bne.n	800ca86 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	f107 0308 	add.w	r3, r7, #8
 800ca4c:	4611      	mov	r1, r2
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fe fbb0 	bl	800b1b4 <follow_path>
 800ca54:	4603      	mov	r3, r0
 800ca56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800ca5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d111      	bne.n	800ca86 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800ca62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca66:	b25b      	sxtb	r3, r3
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	da03      	bge.n	800ca74 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800ca6c:	2306      	movs	r3, #6
 800ca6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ca72:	e008      	b.n	800ca86 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d005      	beq.n	800ca86 <f_stat+0x66>
 800ca7a:	f107 0308 	add.w	r3, r7, #8
 800ca7e:	6839      	ldr	r1, [r7, #0]
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe f901 	bl	800ac88 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800ca86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3740      	adds	r7, #64	; 0x40
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b088      	sub	sp, #32
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	60f8      	str	r0, [r7, #12]
 800ca9a:	60b9      	str	r1, [r7, #8]
 800ca9c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800caa6:	e01b      	b.n	800cae0 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800caa8:	f107 0310 	add.w	r3, r7, #16
 800caac:	f107 0114 	add.w	r1, r7, #20
 800cab0:	2201      	movs	r2, #1
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff f95c 	bl	800bd70 <f_read>
		if (rc != 1) break;
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d116      	bne.n	800caec <f_gets+0x5a>
		c = s[0];
 800cabe:	7d3b      	ldrb	r3, [r7, #20]
 800cac0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
 800cac4:	2b0d      	cmp	r3, #13
 800cac6:	d100      	bne.n	800caca <f_gets+0x38>
 800cac8:	e00a      	b.n	800cae0 <f_gets+0x4e>
		*p++ = c;
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	1c5a      	adds	r2, r3, #1
 800cace:	61ba      	str	r2, [r7, #24]
 800cad0:	7dfa      	ldrb	r2, [r7, #23]
 800cad2:	701a      	strb	r2, [r3, #0]
		n++;
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	3301      	adds	r3, #1
 800cad8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800cada:	7dfb      	ldrb	r3, [r7, #23]
 800cadc:	2b0a      	cmp	r3, #10
 800cade:	d007      	beq.n	800caf0 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	3b01      	subs	r3, #1
 800cae4:	69fa      	ldr	r2, [r7, #28]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	dbde      	blt.n	800caa8 <f_gets+0x16>
 800caea:	e002      	b.n	800caf2 <f_gets+0x60>
		if (rc != 1) break;
 800caec:	bf00      	nop
 800caee:	e000      	b.n	800caf2 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800caf0:	bf00      	nop
	}
	*p = 0;
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	2200      	movs	r2, #0
 800caf6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <f_gets+0x70>
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	e000      	b.n	800cb04 <f_gets+0x72>
 800cb02:	2300      	movs	r3, #0
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3720      	adds	r7, #32
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	460b      	mov	r3, r1
 800cb16:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800cb18:	78fb      	ldrb	r3, [r7, #3]
 800cb1a:	2b0a      	cmp	r3, #10
 800cb1c:	d103      	bne.n	800cb26 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800cb1e:	210d      	movs	r1, #13
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7ff fff3 	bl	800cb0c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	db25      	blt.n	800cb7e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	1c5a      	adds	r2, r3, #1
 800cb36:	60fa      	str	r2, [r7, #12]
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	78fa      	ldrb	r2, [r7, #3]
 800cb3e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2b3c      	cmp	r3, #60	; 0x3c
 800cb44:	dd12      	ble.n	800cb6c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6818      	ldr	r0, [r3, #0]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f103 010c 	add.w	r1, r3, #12
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	f107 0308 	add.w	r3, r7, #8
 800cb56:	f7ff fa6a 	bl	800c02e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800cb5a:	68ba      	ldr	r2, [r7, #8]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d101      	bne.n	800cb66 <putc_bfd+0x5a>
 800cb62:	2300      	movs	r3, #0
 800cb64:	e001      	b.n	800cb6a <putc_bfd+0x5e>
 800cb66:	f04f 33ff 	mov.w	r3, #4294967295
 800cb6a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	68fa      	ldr	r2, [r7, #12]
 800cb70:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	1c5a      	adds	r2, r3, #1
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	609a      	str	r2, [r3, #8]
 800cb7c:	e000      	b.n	800cb80 <putc_bfd+0x74>
	if (i < 0) return;
 800cb7e:	bf00      	nop
}
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b084      	sub	sp, #16
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	db16      	blt.n	800cbc4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6818      	ldr	r0, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f103 010c 	add.w	r1, r3, #12
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	461a      	mov	r2, r3
 800cba6:	f107 030c 	add.w	r3, r7, #12
 800cbaa:	f7ff fa40 	bl	800c02e <f_write>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d107      	bne.n	800cbc4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d102      	bne.n	800cbc4 <putc_flush+0x3e>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	e001      	b.n	800cbc8 <putc_flush+0x42>
	return EOF;
 800cbc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3710      	adds	r7, #16
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	683a      	ldr	r2, [r7, #0]
 800cbde:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	605a      	str	r2, [r3, #4]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	685a      	ldr	r2, [r3, #4]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	609a      	str	r2, [r3, #8]
}
 800cbee:	bf00      	nop
 800cbf0:	370c      	adds	r7, #12
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr

0800cbfa <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b096      	sub	sp, #88	; 0x58
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
 800cc02:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800cc04:	f107 030c 	add.w	r3, r7, #12
 800cc08:	6839      	ldr	r1, [r7, #0]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7ff ffe0 	bl	800cbd0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800cc10:	e009      	b.n	800cc26 <f_puts+0x2c>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	1c5a      	adds	r2, r3, #1
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	781a      	ldrb	r2, [r3, #0]
 800cc1a:	f107 030c 	add.w	r3, r7, #12
 800cc1e:	4611      	mov	r1, r2
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7ff ff73 	bl	800cb0c <putc_bfd>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d1f1      	bne.n	800cc12 <f_puts+0x18>
	return putc_flush(&pb);
 800cc2e:	f107 030c 	add.w	r3, r7, #12
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7ff ffa7 	bl	800cb86 <putc_flush>
 800cc38:	4603      	mov	r3, r0
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3758      	adds	r7, #88	; 0x58
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
	...

0800cc44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b087      	sub	sp, #28
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	4613      	mov	r3, r2
 800cc50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cc52:	2301      	movs	r3, #1
 800cc54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cc56:	2300      	movs	r3, #0
 800cc58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cc5a:	4b1f      	ldr	r3, [pc, #124]	; (800ccd8 <FATFS_LinkDriverEx+0x94>)
 800cc5c:	7a5b      	ldrb	r3, [r3, #9]
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d131      	bne.n	800ccc8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc64:	4b1c      	ldr	r3, [pc, #112]	; (800ccd8 <FATFS_LinkDriverEx+0x94>)
 800cc66:	7a5b      	ldrb	r3, [r3, #9]
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	4b1a      	ldr	r3, [pc, #104]	; (800ccd8 <FATFS_LinkDriverEx+0x94>)
 800cc6e:	2100      	movs	r1, #0
 800cc70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc72:	4b19      	ldr	r3, [pc, #100]	; (800ccd8 <FATFS_LinkDriverEx+0x94>)
 800cc74:	7a5b      	ldrb	r3, [r3, #9]
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	4a17      	ldr	r2, [pc, #92]	; (800ccd8 <FATFS_LinkDriverEx+0x94>)
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	4413      	add	r3, r2
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc82:	4b15      	ldr	r3, [pc, #84]	; (800ccd8 <FATFS_LinkDriverEx+0x94>)
 800cc84:	7a5b      	ldrb	r3, [r3, #9]
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	461a      	mov	r2, r3
 800cc8a:	4b13      	ldr	r3, [pc, #76]	; (800ccd8 <FATFS_LinkDriverEx+0x94>)
 800cc8c:	4413      	add	r3, r2
 800cc8e:	79fa      	ldrb	r2, [r7, #7]
 800cc90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc92:	4b11      	ldr	r3, [pc, #68]	; (800ccd8 <FATFS_LinkDriverEx+0x94>)
 800cc94:	7a5b      	ldrb	r3, [r3, #9]
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	1c5a      	adds	r2, r3, #1
 800cc9a:	b2d1      	uxtb	r1, r2
 800cc9c:	4a0e      	ldr	r2, [pc, #56]	; (800ccd8 <FATFS_LinkDriverEx+0x94>)
 800cc9e:	7251      	strb	r1, [r2, #9]
 800cca0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cca2:	7dbb      	ldrb	r3, [r7, #22]
 800cca4:	3330      	adds	r3, #48	; 0x30
 800cca6:	b2da      	uxtb	r2, r3
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	223a      	movs	r2, #58	; 0x3a
 800ccb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	3302      	adds	r3, #2
 800ccb8:	222f      	movs	r2, #47	; 0x2f
 800ccba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	3303      	adds	r3, #3
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ccc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	371c      	adds	r7, #28
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr
 800ccd6:	bf00      	nop
 800ccd8:	20002840 	.word	0x20002840

0800ccdc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cce6:	2200      	movs	r2, #0
 800cce8:	6839      	ldr	r1, [r7, #0]
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7ff ffaa 	bl	800cc44 <FATFS_LinkDriverEx>
 800ccf0:	4603      	mov	r3, r0
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
	...

0800ccfc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b085      	sub	sp, #20
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	4603      	mov	r3, r0
 800cd04:	6039      	str	r1, [r7, #0]
 800cd06:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cd08:	88fb      	ldrh	r3, [r7, #6]
 800cd0a:	2b7f      	cmp	r3, #127	; 0x7f
 800cd0c:	d802      	bhi.n	800cd14 <ff_convert+0x18>
		c = chr;
 800cd0e:	88fb      	ldrh	r3, [r7, #6]
 800cd10:	81fb      	strh	r3, [r7, #14]
 800cd12:	e025      	b.n	800cd60 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00b      	beq.n	800cd32 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cd1a:	88fb      	ldrh	r3, [r7, #6]
 800cd1c:	2bff      	cmp	r3, #255	; 0xff
 800cd1e:	d805      	bhi.n	800cd2c <ff_convert+0x30>
 800cd20:	88fb      	ldrh	r3, [r7, #6]
 800cd22:	3b80      	subs	r3, #128	; 0x80
 800cd24:	4a12      	ldr	r2, [pc, #72]	; (800cd70 <ff_convert+0x74>)
 800cd26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd2a:	e000      	b.n	800cd2e <ff_convert+0x32>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	81fb      	strh	r3, [r7, #14]
 800cd30:	e016      	b.n	800cd60 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cd32:	2300      	movs	r3, #0
 800cd34:	81fb      	strh	r3, [r7, #14]
 800cd36:	e009      	b.n	800cd4c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cd38:	89fb      	ldrh	r3, [r7, #14]
 800cd3a:	4a0d      	ldr	r2, [pc, #52]	; (800cd70 <ff_convert+0x74>)
 800cd3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd40:	88fa      	ldrh	r2, [r7, #6]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d006      	beq.n	800cd54 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cd46:	89fb      	ldrh	r3, [r7, #14]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	81fb      	strh	r3, [r7, #14]
 800cd4c:	89fb      	ldrh	r3, [r7, #14]
 800cd4e:	2b7f      	cmp	r3, #127	; 0x7f
 800cd50:	d9f2      	bls.n	800cd38 <ff_convert+0x3c>
 800cd52:	e000      	b.n	800cd56 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cd54:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cd56:	89fb      	ldrh	r3, [r7, #14]
 800cd58:	3380      	adds	r3, #128	; 0x80
 800cd5a:	b29b      	uxth	r3, r3
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cd60:	89fb      	ldrh	r3, [r7, #14]
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3714      	adds	r7, #20
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr
 800cd6e:	bf00      	nop
 800cd70:	08017f24 	.word	0x08017f24

0800cd74 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b087      	sub	sp, #28
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cd7e:	88fb      	ldrh	r3, [r7, #6]
 800cd80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd84:	d201      	bcs.n	800cd8a <ff_wtoupper+0x16>
 800cd86:	4b3e      	ldr	r3, [pc, #248]	; (800ce80 <ff_wtoupper+0x10c>)
 800cd88:	e000      	b.n	800cd8c <ff_wtoupper+0x18>
 800cd8a:	4b3e      	ldr	r3, [pc, #248]	; (800ce84 <ff_wtoupper+0x110>)
 800cd8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	1c9a      	adds	r2, r3, #2
 800cd92:	617a      	str	r2, [r7, #20]
 800cd94:	881b      	ldrh	r3, [r3, #0]
 800cd96:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cd98:	8a7b      	ldrh	r3, [r7, #18]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d068      	beq.n	800ce70 <ff_wtoupper+0xfc>
 800cd9e:	88fa      	ldrh	r2, [r7, #6]
 800cda0:	8a7b      	ldrh	r3, [r7, #18]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d364      	bcc.n	800ce70 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	1c9a      	adds	r2, r3, #2
 800cdaa:	617a      	str	r2, [r7, #20]
 800cdac:	881b      	ldrh	r3, [r3, #0]
 800cdae:	823b      	strh	r3, [r7, #16]
 800cdb0:	8a3b      	ldrh	r3, [r7, #16]
 800cdb2:	0a1b      	lsrs	r3, r3, #8
 800cdb4:	81fb      	strh	r3, [r7, #14]
 800cdb6:	8a3b      	ldrh	r3, [r7, #16]
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cdbc:	88fa      	ldrh	r2, [r7, #6]
 800cdbe:	8a79      	ldrh	r1, [r7, #18]
 800cdc0:	8a3b      	ldrh	r3, [r7, #16]
 800cdc2:	440b      	add	r3, r1
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	da49      	bge.n	800ce5c <ff_wtoupper+0xe8>
			switch (cmd) {
 800cdc8:	89fb      	ldrh	r3, [r7, #14]
 800cdca:	2b08      	cmp	r3, #8
 800cdcc:	d84f      	bhi.n	800ce6e <ff_wtoupper+0xfa>
 800cdce:	a201      	add	r2, pc, #4	; (adr r2, 800cdd4 <ff_wtoupper+0x60>)
 800cdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd4:	0800cdf9 	.word	0x0800cdf9
 800cdd8:	0800ce0b 	.word	0x0800ce0b
 800cddc:	0800ce21 	.word	0x0800ce21
 800cde0:	0800ce29 	.word	0x0800ce29
 800cde4:	0800ce31 	.word	0x0800ce31
 800cde8:	0800ce39 	.word	0x0800ce39
 800cdec:	0800ce41 	.word	0x0800ce41
 800cdf0:	0800ce49 	.word	0x0800ce49
 800cdf4:	0800ce51 	.word	0x0800ce51
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cdf8:	88fa      	ldrh	r2, [r7, #6]
 800cdfa:	8a7b      	ldrh	r3, [r7, #18]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	005b      	lsls	r3, r3, #1
 800ce00:	697a      	ldr	r2, [r7, #20]
 800ce02:	4413      	add	r3, r2
 800ce04:	881b      	ldrh	r3, [r3, #0]
 800ce06:	80fb      	strh	r3, [r7, #6]
 800ce08:	e027      	b.n	800ce5a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ce0a:	88fa      	ldrh	r2, [r7, #6]
 800ce0c:	8a7b      	ldrh	r3, [r7, #18]
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	f003 0301 	and.w	r3, r3, #1
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	88fa      	ldrh	r2, [r7, #6]
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	80fb      	strh	r3, [r7, #6]
 800ce1e:	e01c      	b.n	800ce5a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ce20:	88fb      	ldrh	r3, [r7, #6]
 800ce22:	3b10      	subs	r3, #16
 800ce24:	80fb      	strh	r3, [r7, #6]
 800ce26:	e018      	b.n	800ce5a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ce28:	88fb      	ldrh	r3, [r7, #6]
 800ce2a:	3b20      	subs	r3, #32
 800ce2c:	80fb      	strh	r3, [r7, #6]
 800ce2e:	e014      	b.n	800ce5a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ce30:	88fb      	ldrh	r3, [r7, #6]
 800ce32:	3b30      	subs	r3, #48	; 0x30
 800ce34:	80fb      	strh	r3, [r7, #6]
 800ce36:	e010      	b.n	800ce5a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ce38:	88fb      	ldrh	r3, [r7, #6]
 800ce3a:	3b1a      	subs	r3, #26
 800ce3c:	80fb      	strh	r3, [r7, #6]
 800ce3e:	e00c      	b.n	800ce5a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ce40:	88fb      	ldrh	r3, [r7, #6]
 800ce42:	3308      	adds	r3, #8
 800ce44:	80fb      	strh	r3, [r7, #6]
 800ce46:	e008      	b.n	800ce5a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ce48:	88fb      	ldrh	r3, [r7, #6]
 800ce4a:	3b50      	subs	r3, #80	; 0x50
 800ce4c:	80fb      	strh	r3, [r7, #6]
 800ce4e:	e004      	b.n	800ce5a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ce50:	88fb      	ldrh	r3, [r7, #6]
 800ce52:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ce56:	80fb      	strh	r3, [r7, #6]
 800ce58:	bf00      	nop
			}
			break;
 800ce5a:	e008      	b.n	800ce6e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ce5c:	89fb      	ldrh	r3, [r7, #14]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d195      	bne.n	800cd8e <ff_wtoupper+0x1a>
 800ce62:	8a3b      	ldrh	r3, [r7, #16]
 800ce64:	005b      	lsls	r3, r3, #1
 800ce66:	697a      	ldr	r2, [r7, #20]
 800ce68:	4413      	add	r3, r2
 800ce6a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ce6c:	e78f      	b.n	800cd8e <ff_wtoupper+0x1a>
			break;
 800ce6e:	bf00      	nop
	}

	return chr;
 800ce70:	88fb      	ldrh	r3, [r7, #6]
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	371c      	adds	r7, #28
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	08018024 	.word	0x08018024
 800ce84:	08018218 	.word	0x08018218

0800ce88 <exit>:
 800ce88:	b508      	push	{r3, lr}
 800ce8a:	4b06      	ldr	r3, [pc, #24]	; (800cea4 <exit+0x1c>)
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	b113      	cbz	r3, 800ce96 <exit+0xe>
 800ce90:	2100      	movs	r1, #0
 800ce92:	f3af 8000 	nop.w
 800ce96:	4b04      	ldr	r3, [pc, #16]	; (800cea8 <exit+0x20>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	b103      	cbz	r3, 800ce9e <exit+0x16>
 800ce9c:	4798      	blx	r3
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f7f6 fc68 	bl	8003774 <_exit>
 800cea4:	00000000 	.word	0x00000000
 800cea8:	2000298c 	.word	0x2000298c

0800ceac <malloc>:
 800ceac:	4b02      	ldr	r3, [pc, #8]	; (800ceb8 <malloc+0xc>)
 800ceae:	4601      	mov	r1, r0
 800ceb0:	6818      	ldr	r0, [r3, #0]
 800ceb2:	f000 b823 	b.w	800cefc <_malloc_r>
 800ceb6:	bf00      	nop
 800ceb8:	20000070 	.word	0x20000070

0800cebc <sbrk_aligned>:
 800cebc:	b570      	push	{r4, r5, r6, lr}
 800cebe:	4e0e      	ldr	r6, [pc, #56]	; (800cef8 <sbrk_aligned+0x3c>)
 800cec0:	460c      	mov	r4, r1
 800cec2:	6831      	ldr	r1, [r6, #0]
 800cec4:	4605      	mov	r5, r0
 800cec6:	b911      	cbnz	r1, 800cece <sbrk_aligned+0x12>
 800cec8:	f000 fea8 	bl	800dc1c <_sbrk_r>
 800cecc:	6030      	str	r0, [r6, #0]
 800cece:	4621      	mov	r1, r4
 800ced0:	4628      	mov	r0, r5
 800ced2:	f000 fea3 	bl	800dc1c <_sbrk_r>
 800ced6:	1c43      	adds	r3, r0, #1
 800ced8:	d00a      	beq.n	800cef0 <sbrk_aligned+0x34>
 800ceda:	1cc4      	adds	r4, r0, #3
 800cedc:	f024 0403 	bic.w	r4, r4, #3
 800cee0:	42a0      	cmp	r0, r4
 800cee2:	d007      	beq.n	800cef4 <sbrk_aligned+0x38>
 800cee4:	1a21      	subs	r1, r4, r0
 800cee6:	4628      	mov	r0, r5
 800cee8:	f000 fe98 	bl	800dc1c <_sbrk_r>
 800ceec:	3001      	adds	r0, #1
 800ceee:	d101      	bne.n	800cef4 <sbrk_aligned+0x38>
 800cef0:	f04f 34ff 	mov.w	r4, #4294967295
 800cef4:	4620      	mov	r0, r4
 800cef6:	bd70      	pop	{r4, r5, r6, pc}
 800cef8:	20002850 	.word	0x20002850

0800cefc <_malloc_r>:
 800cefc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf00:	1ccd      	adds	r5, r1, #3
 800cf02:	f025 0503 	bic.w	r5, r5, #3
 800cf06:	3508      	adds	r5, #8
 800cf08:	2d0c      	cmp	r5, #12
 800cf0a:	bf38      	it	cc
 800cf0c:	250c      	movcc	r5, #12
 800cf0e:	2d00      	cmp	r5, #0
 800cf10:	4607      	mov	r7, r0
 800cf12:	db01      	blt.n	800cf18 <_malloc_r+0x1c>
 800cf14:	42a9      	cmp	r1, r5
 800cf16:	d905      	bls.n	800cf24 <_malloc_r+0x28>
 800cf18:	230c      	movs	r3, #12
 800cf1a:	603b      	str	r3, [r7, #0]
 800cf1c:	2600      	movs	r6, #0
 800cf1e:	4630      	mov	r0, r6
 800cf20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cff8 <_malloc_r+0xfc>
 800cf28:	f000 f868 	bl	800cffc <__malloc_lock>
 800cf2c:	f8d8 3000 	ldr.w	r3, [r8]
 800cf30:	461c      	mov	r4, r3
 800cf32:	bb5c      	cbnz	r4, 800cf8c <_malloc_r+0x90>
 800cf34:	4629      	mov	r1, r5
 800cf36:	4638      	mov	r0, r7
 800cf38:	f7ff ffc0 	bl	800cebc <sbrk_aligned>
 800cf3c:	1c43      	adds	r3, r0, #1
 800cf3e:	4604      	mov	r4, r0
 800cf40:	d155      	bne.n	800cfee <_malloc_r+0xf2>
 800cf42:	f8d8 4000 	ldr.w	r4, [r8]
 800cf46:	4626      	mov	r6, r4
 800cf48:	2e00      	cmp	r6, #0
 800cf4a:	d145      	bne.n	800cfd8 <_malloc_r+0xdc>
 800cf4c:	2c00      	cmp	r4, #0
 800cf4e:	d048      	beq.n	800cfe2 <_malloc_r+0xe6>
 800cf50:	6823      	ldr	r3, [r4, #0]
 800cf52:	4631      	mov	r1, r6
 800cf54:	4638      	mov	r0, r7
 800cf56:	eb04 0903 	add.w	r9, r4, r3
 800cf5a:	f000 fe5f 	bl	800dc1c <_sbrk_r>
 800cf5e:	4581      	cmp	r9, r0
 800cf60:	d13f      	bne.n	800cfe2 <_malloc_r+0xe6>
 800cf62:	6821      	ldr	r1, [r4, #0]
 800cf64:	1a6d      	subs	r5, r5, r1
 800cf66:	4629      	mov	r1, r5
 800cf68:	4638      	mov	r0, r7
 800cf6a:	f7ff ffa7 	bl	800cebc <sbrk_aligned>
 800cf6e:	3001      	adds	r0, #1
 800cf70:	d037      	beq.n	800cfe2 <_malloc_r+0xe6>
 800cf72:	6823      	ldr	r3, [r4, #0]
 800cf74:	442b      	add	r3, r5
 800cf76:	6023      	str	r3, [r4, #0]
 800cf78:	f8d8 3000 	ldr.w	r3, [r8]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d038      	beq.n	800cff2 <_malloc_r+0xf6>
 800cf80:	685a      	ldr	r2, [r3, #4]
 800cf82:	42a2      	cmp	r2, r4
 800cf84:	d12b      	bne.n	800cfde <_malloc_r+0xe2>
 800cf86:	2200      	movs	r2, #0
 800cf88:	605a      	str	r2, [r3, #4]
 800cf8a:	e00f      	b.n	800cfac <_malloc_r+0xb0>
 800cf8c:	6822      	ldr	r2, [r4, #0]
 800cf8e:	1b52      	subs	r2, r2, r5
 800cf90:	d41f      	bmi.n	800cfd2 <_malloc_r+0xd6>
 800cf92:	2a0b      	cmp	r2, #11
 800cf94:	d917      	bls.n	800cfc6 <_malloc_r+0xca>
 800cf96:	1961      	adds	r1, r4, r5
 800cf98:	42a3      	cmp	r3, r4
 800cf9a:	6025      	str	r5, [r4, #0]
 800cf9c:	bf18      	it	ne
 800cf9e:	6059      	strne	r1, [r3, #4]
 800cfa0:	6863      	ldr	r3, [r4, #4]
 800cfa2:	bf08      	it	eq
 800cfa4:	f8c8 1000 	streq.w	r1, [r8]
 800cfa8:	5162      	str	r2, [r4, r5]
 800cfaa:	604b      	str	r3, [r1, #4]
 800cfac:	4638      	mov	r0, r7
 800cfae:	f104 060b 	add.w	r6, r4, #11
 800cfb2:	f000 f829 	bl	800d008 <__malloc_unlock>
 800cfb6:	f026 0607 	bic.w	r6, r6, #7
 800cfba:	1d23      	adds	r3, r4, #4
 800cfbc:	1af2      	subs	r2, r6, r3
 800cfbe:	d0ae      	beq.n	800cf1e <_malloc_r+0x22>
 800cfc0:	1b9b      	subs	r3, r3, r6
 800cfc2:	50a3      	str	r3, [r4, r2]
 800cfc4:	e7ab      	b.n	800cf1e <_malloc_r+0x22>
 800cfc6:	42a3      	cmp	r3, r4
 800cfc8:	6862      	ldr	r2, [r4, #4]
 800cfca:	d1dd      	bne.n	800cf88 <_malloc_r+0x8c>
 800cfcc:	f8c8 2000 	str.w	r2, [r8]
 800cfd0:	e7ec      	b.n	800cfac <_malloc_r+0xb0>
 800cfd2:	4623      	mov	r3, r4
 800cfd4:	6864      	ldr	r4, [r4, #4]
 800cfd6:	e7ac      	b.n	800cf32 <_malloc_r+0x36>
 800cfd8:	4634      	mov	r4, r6
 800cfda:	6876      	ldr	r6, [r6, #4]
 800cfdc:	e7b4      	b.n	800cf48 <_malloc_r+0x4c>
 800cfde:	4613      	mov	r3, r2
 800cfe0:	e7cc      	b.n	800cf7c <_malloc_r+0x80>
 800cfe2:	230c      	movs	r3, #12
 800cfe4:	603b      	str	r3, [r7, #0]
 800cfe6:	4638      	mov	r0, r7
 800cfe8:	f000 f80e 	bl	800d008 <__malloc_unlock>
 800cfec:	e797      	b.n	800cf1e <_malloc_r+0x22>
 800cfee:	6025      	str	r5, [r4, #0]
 800cff0:	e7dc      	b.n	800cfac <_malloc_r+0xb0>
 800cff2:	605b      	str	r3, [r3, #4]
 800cff4:	deff      	udf	#255	; 0xff
 800cff6:	bf00      	nop
 800cff8:	2000284c 	.word	0x2000284c

0800cffc <__malloc_lock>:
 800cffc:	4801      	ldr	r0, [pc, #4]	; (800d004 <__malloc_lock+0x8>)
 800cffe:	f000 be5a 	b.w	800dcb6 <__retarget_lock_acquire_recursive>
 800d002:	bf00      	nop
 800d004:	20002994 	.word	0x20002994

0800d008 <__malloc_unlock>:
 800d008:	4801      	ldr	r0, [pc, #4]	; (800d010 <__malloc_unlock+0x8>)
 800d00a:	f000 be55 	b.w	800dcb8 <__retarget_lock_release_recursive>
 800d00e:	bf00      	nop
 800d010:	20002994 	.word	0x20002994

0800d014 <__cvt>:
 800d014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d018:	ec55 4b10 	vmov	r4, r5, d0
 800d01c:	2d00      	cmp	r5, #0
 800d01e:	460e      	mov	r6, r1
 800d020:	4619      	mov	r1, r3
 800d022:	462b      	mov	r3, r5
 800d024:	bfbb      	ittet	lt
 800d026:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d02a:	461d      	movlt	r5, r3
 800d02c:	2300      	movge	r3, #0
 800d02e:	232d      	movlt	r3, #45	; 0x2d
 800d030:	700b      	strb	r3, [r1, #0]
 800d032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d034:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d038:	4691      	mov	r9, r2
 800d03a:	f023 0820 	bic.w	r8, r3, #32
 800d03e:	bfbc      	itt	lt
 800d040:	4622      	movlt	r2, r4
 800d042:	4614      	movlt	r4, r2
 800d044:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d048:	d005      	beq.n	800d056 <__cvt+0x42>
 800d04a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d04e:	d100      	bne.n	800d052 <__cvt+0x3e>
 800d050:	3601      	adds	r6, #1
 800d052:	2102      	movs	r1, #2
 800d054:	e000      	b.n	800d058 <__cvt+0x44>
 800d056:	2103      	movs	r1, #3
 800d058:	ab03      	add	r3, sp, #12
 800d05a:	9301      	str	r3, [sp, #4]
 800d05c:	ab02      	add	r3, sp, #8
 800d05e:	9300      	str	r3, [sp, #0]
 800d060:	ec45 4b10 	vmov	d0, r4, r5
 800d064:	4653      	mov	r3, sl
 800d066:	4632      	mov	r2, r6
 800d068:	f000 feb2 	bl	800ddd0 <_dtoa_r>
 800d06c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d070:	4607      	mov	r7, r0
 800d072:	d102      	bne.n	800d07a <__cvt+0x66>
 800d074:	f019 0f01 	tst.w	r9, #1
 800d078:	d022      	beq.n	800d0c0 <__cvt+0xac>
 800d07a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d07e:	eb07 0906 	add.w	r9, r7, r6
 800d082:	d110      	bne.n	800d0a6 <__cvt+0x92>
 800d084:	783b      	ldrb	r3, [r7, #0]
 800d086:	2b30      	cmp	r3, #48	; 0x30
 800d088:	d10a      	bne.n	800d0a0 <__cvt+0x8c>
 800d08a:	2200      	movs	r2, #0
 800d08c:	2300      	movs	r3, #0
 800d08e:	4620      	mov	r0, r4
 800d090:	4629      	mov	r1, r5
 800d092:	f7f3 fd31 	bl	8000af8 <__aeabi_dcmpeq>
 800d096:	b918      	cbnz	r0, 800d0a0 <__cvt+0x8c>
 800d098:	f1c6 0601 	rsb	r6, r6, #1
 800d09c:	f8ca 6000 	str.w	r6, [sl]
 800d0a0:	f8da 3000 	ldr.w	r3, [sl]
 800d0a4:	4499      	add	r9, r3
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	4629      	mov	r1, r5
 800d0ae:	f7f3 fd23 	bl	8000af8 <__aeabi_dcmpeq>
 800d0b2:	b108      	cbz	r0, 800d0b8 <__cvt+0xa4>
 800d0b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d0b8:	2230      	movs	r2, #48	; 0x30
 800d0ba:	9b03      	ldr	r3, [sp, #12]
 800d0bc:	454b      	cmp	r3, r9
 800d0be:	d307      	bcc.n	800d0d0 <__cvt+0xbc>
 800d0c0:	9b03      	ldr	r3, [sp, #12]
 800d0c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0c4:	1bdb      	subs	r3, r3, r7
 800d0c6:	4638      	mov	r0, r7
 800d0c8:	6013      	str	r3, [r2, #0]
 800d0ca:	b004      	add	sp, #16
 800d0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d0:	1c59      	adds	r1, r3, #1
 800d0d2:	9103      	str	r1, [sp, #12]
 800d0d4:	701a      	strb	r2, [r3, #0]
 800d0d6:	e7f0      	b.n	800d0ba <__cvt+0xa6>

0800d0d8 <__exponent>:
 800d0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2900      	cmp	r1, #0
 800d0de:	bfb8      	it	lt
 800d0e0:	4249      	neglt	r1, r1
 800d0e2:	f803 2b02 	strb.w	r2, [r3], #2
 800d0e6:	bfb4      	ite	lt
 800d0e8:	222d      	movlt	r2, #45	; 0x2d
 800d0ea:	222b      	movge	r2, #43	; 0x2b
 800d0ec:	2909      	cmp	r1, #9
 800d0ee:	7042      	strb	r2, [r0, #1]
 800d0f0:	dd2a      	ble.n	800d148 <__exponent+0x70>
 800d0f2:	f10d 0207 	add.w	r2, sp, #7
 800d0f6:	4617      	mov	r7, r2
 800d0f8:	260a      	movs	r6, #10
 800d0fa:	4694      	mov	ip, r2
 800d0fc:	fb91 f5f6 	sdiv	r5, r1, r6
 800d100:	fb06 1415 	mls	r4, r6, r5, r1
 800d104:	3430      	adds	r4, #48	; 0x30
 800d106:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d10a:	460c      	mov	r4, r1
 800d10c:	2c63      	cmp	r4, #99	; 0x63
 800d10e:	f102 32ff 	add.w	r2, r2, #4294967295
 800d112:	4629      	mov	r1, r5
 800d114:	dcf1      	bgt.n	800d0fa <__exponent+0x22>
 800d116:	3130      	adds	r1, #48	; 0x30
 800d118:	f1ac 0402 	sub.w	r4, ip, #2
 800d11c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d120:	1c41      	adds	r1, r0, #1
 800d122:	4622      	mov	r2, r4
 800d124:	42ba      	cmp	r2, r7
 800d126:	d30a      	bcc.n	800d13e <__exponent+0x66>
 800d128:	f10d 0209 	add.w	r2, sp, #9
 800d12c:	eba2 020c 	sub.w	r2, r2, ip
 800d130:	42bc      	cmp	r4, r7
 800d132:	bf88      	it	hi
 800d134:	2200      	movhi	r2, #0
 800d136:	4413      	add	r3, r2
 800d138:	1a18      	subs	r0, r3, r0
 800d13a:	b003      	add	sp, #12
 800d13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d13e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d142:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d146:	e7ed      	b.n	800d124 <__exponent+0x4c>
 800d148:	2330      	movs	r3, #48	; 0x30
 800d14a:	3130      	adds	r1, #48	; 0x30
 800d14c:	7083      	strb	r3, [r0, #2]
 800d14e:	70c1      	strb	r1, [r0, #3]
 800d150:	1d03      	adds	r3, r0, #4
 800d152:	e7f1      	b.n	800d138 <__exponent+0x60>

0800d154 <_printf_float>:
 800d154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d158:	ed2d 8b02 	vpush	{d8}
 800d15c:	b08d      	sub	sp, #52	; 0x34
 800d15e:	460c      	mov	r4, r1
 800d160:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d164:	4616      	mov	r6, r2
 800d166:	461f      	mov	r7, r3
 800d168:	4605      	mov	r5, r0
 800d16a:	f000 fd1f 	bl	800dbac <_localeconv_r>
 800d16e:	f8d0 a000 	ldr.w	sl, [r0]
 800d172:	4650      	mov	r0, sl
 800d174:	f7f3 f894 	bl	80002a0 <strlen>
 800d178:	2300      	movs	r3, #0
 800d17a:	930a      	str	r3, [sp, #40]	; 0x28
 800d17c:	6823      	ldr	r3, [r4, #0]
 800d17e:	9305      	str	r3, [sp, #20]
 800d180:	f8d8 3000 	ldr.w	r3, [r8]
 800d184:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d188:	3307      	adds	r3, #7
 800d18a:	f023 0307 	bic.w	r3, r3, #7
 800d18e:	f103 0208 	add.w	r2, r3, #8
 800d192:	f8c8 2000 	str.w	r2, [r8]
 800d196:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d19a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d19e:	9307      	str	r3, [sp, #28]
 800d1a0:	f8cd 8018 	str.w	r8, [sp, #24]
 800d1a4:	ee08 0a10 	vmov	s16, r0
 800d1a8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d1ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1b0:	4b9e      	ldr	r3, [pc, #632]	; (800d42c <_printf_float+0x2d8>)
 800d1b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b6:	f7f3 fcd1 	bl	8000b5c <__aeabi_dcmpun>
 800d1ba:	bb88      	cbnz	r0, 800d220 <_printf_float+0xcc>
 800d1bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1c0:	4b9a      	ldr	r3, [pc, #616]	; (800d42c <_printf_float+0x2d8>)
 800d1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d1c6:	f7f3 fcab 	bl	8000b20 <__aeabi_dcmple>
 800d1ca:	bb48      	cbnz	r0, 800d220 <_printf_float+0xcc>
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	4640      	mov	r0, r8
 800d1d2:	4649      	mov	r1, r9
 800d1d4:	f7f3 fc9a 	bl	8000b0c <__aeabi_dcmplt>
 800d1d8:	b110      	cbz	r0, 800d1e0 <_printf_float+0x8c>
 800d1da:	232d      	movs	r3, #45	; 0x2d
 800d1dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1e0:	4a93      	ldr	r2, [pc, #588]	; (800d430 <_printf_float+0x2dc>)
 800d1e2:	4b94      	ldr	r3, [pc, #592]	; (800d434 <_printf_float+0x2e0>)
 800d1e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d1e8:	bf94      	ite	ls
 800d1ea:	4690      	movls	r8, r2
 800d1ec:	4698      	movhi	r8, r3
 800d1ee:	2303      	movs	r3, #3
 800d1f0:	6123      	str	r3, [r4, #16]
 800d1f2:	9b05      	ldr	r3, [sp, #20]
 800d1f4:	f023 0304 	bic.w	r3, r3, #4
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	f04f 0900 	mov.w	r9, #0
 800d1fe:	9700      	str	r7, [sp, #0]
 800d200:	4633      	mov	r3, r6
 800d202:	aa0b      	add	r2, sp, #44	; 0x2c
 800d204:	4621      	mov	r1, r4
 800d206:	4628      	mov	r0, r5
 800d208:	f000 f9da 	bl	800d5c0 <_printf_common>
 800d20c:	3001      	adds	r0, #1
 800d20e:	f040 8090 	bne.w	800d332 <_printf_float+0x1de>
 800d212:	f04f 30ff 	mov.w	r0, #4294967295
 800d216:	b00d      	add	sp, #52	; 0x34
 800d218:	ecbd 8b02 	vpop	{d8}
 800d21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d220:	4642      	mov	r2, r8
 800d222:	464b      	mov	r3, r9
 800d224:	4640      	mov	r0, r8
 800d226:	4649      	mov	r1, r9
 800d228:	f7f3 fc98 	bl	8000b5c <__aeabi_dcmpun>
 800d22c:	b140      	cbz	r0, 800d240 <_printf_float+0xec>
 800d22e:	464b      	mov	r3, r9
 800d230:	2b00      	cmp	r3, #0
 800d232:	bfbc      	itt	lt
 800d234:	232d      	movlt	r3, #45	; 0x2d
 800d236:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d23a:	4a7f      	ldr	r2, [pc, #508]	; (800d438 <_printf_float+0x2e4>)
 800d23c:	4b7f      	ldr	r3, [pc, #508]	; (800d43c <_printf_float+0x2e8>)
 800d23e:	e7d1      	b.n	800d1e4 <_printf_float+0x90>
 800d240:	6863      	ldr	r3, [r4, #4]
 800d242:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d246:	9206      	str	r2, [sp, #24]
 800d248:	1c5a      	adds	r2, r3, #1
 800d24a:	d13f      	bne.n	800d2cc <_printf_float+0x178>
 800d24c:	2306      	movs	r3, #6
 800d24e:	6063      	str	r3, [r4, #4]
 800d250:	9b05      	ldr	r3, [sp, #20]
 800d252:	6861      	ldr	r1, [r4, #4]
 800d254:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d258:	2300      	movs	r3, #0
 800d25a:	9303      	str	r3, [sp, #12]
 800d25c:	ab0a      	add	r3, sp, #40	; 0x28
 800d25e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d262:	ab09      	add	r3, sp, #36	; 0x24
 800d264:	ec49 8b10 	vmov	d0, r8, r9
 800d268:	9300      	str	r3, [sp, #0]
 800d26a:	6022      	str	r2, [r4, #0]
 800d26c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d270:	4628      	mov	r0, r5
 800d272:	f7ff fecf 	bl	800d014 <__cvt>
 800d276:	9b06      	ldr	r3, [sp, #24]
 800d278:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d27a:	2b47      	cmp	r3, #71	; 0x47
 800d27c:	4680      	mov	r8, r0
 800d27e:	d108      	bne.n	800d292 <_printf_float+0x13e>
 800d280:	1cc8      	adds	r0, r1, #3
 800d282:	db02      	blt.n	800d28a <_printf_float+0x136>
 800d284:	6863      	ldr	r3, [r4, #4]
 800d286:	4299      	cmp	r1, r3
 800d288:	dd41      	ble.n	800d30e <_printf_float+0x1ba>
 800d28a:	f1ab 0302 	sub.w	r3, fp, #2
 800d28e:	fa5f fb83 	uxtb.w	fp, r3
 800d292:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d296:	d820      	bhi.n	800d2da <_printf_float+0x186>
 800d298:	3901      	subs	r1, #1
 800d29a:	465a      	mov	r2, fp
 800d29c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d2a0:	9109      	str	r1, [sp, #36]	; 0x24
 800d2a2:	f7ff ff19 	bl	800d0d8 <__exponent>
 800d2a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2a8:	1813      	adds	r3, r2, r0
 800d2aa:	2a01      	cmp	r2, #1
 800d2ac:	4681      	mov	r9, r0
 800d2ae:	6123      	str	r3, [r4, #16]
 800d2b0:	dc02      	bgt.n	800d2b8 <_printf_float+0x164>
 800d2b2:	6822      	ldr	r2, [r4, #0]
 800d2b4:	07d2      	lsls	r2, r2, #31
 800d2b6:	d501      	bpl.n	800d2bc <_printf_float+0x168>
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	6123      	str	r3, [r4, #16]
 800d2bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d09c      	beq.n	800d1fe <_printf_float+0xaa>
 800d2c4:	232d      	movs	r3, #45	; 0x2d
 800d2c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2ca:	e798      	b.n	800d1fe <_printf_float+0xaa>
 800d2cc:	9a06      	ldr	r2, [sp, #24]
 800d2ce:	2a47      	cmp	r2, #71	; 0x47
 800d2d0:	d1be      	bne.n	800d250 <_printf_float+0xfc>
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1bc      	bne.n	800d250 <_printf_float+0xfc>
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e7b9      	b.n	800d24e <_printf_float+0xfa>
 800d2da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d2de:	d118      	bne.n	800d312 <_printf_float+0x1be>
 800d2e0:	2900      	cmp	r1, #0
 800d2e2:	6863      	ldr	r3, [r4, #4]
 800d2e4:	dd0b      	ble.n	800d2fe <_printf_float+0x1aa>
 800d2e6:	6121      	str	r1, [r4, #16]
 800d2e8:	b913      	cbnz	r3, 800d2f0 <_printf_float+0x19c>
 800d2ea:	6822      	ldr	r2, [r4, #0]
 800d2ec:	07d0      	lsls	r0, r2, #31
 800d2ee:	d502      	bpl.n	800d2f6 <_printf_float+0x1a2>
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	440b      	add	r3, r1
 800d2f4:	6123      	str	r3, [r4, #16]
 800d2f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800d2f8:	f04f 0900 	mov.w	r9, #0
 800d2fc:	e7de      	b.n	800d2bc <_printf_float+0x168>
 800d2fe:	b913      	cbnz	r3, 800d306 <_printf_float+0x1b2>
 800d300:	6822      	ldr	r2, [r4, #0]
 800d302:	07d2      	lsls	r2, r2, #31
 800d304:	d501      	bpl.n	800d30a <_printf_float+0x1b6>
 800d306:	3302      	adds	r3, #2
 800d308:	e7f4      	b.n	800d2f4 <_printf_float+0x1a0>
 800d30a:	2301      	movs	r3, #1
 800d30c:	e7f2      	b.n	800d2f4 <_printf_float+0x1a0>
 800d30e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d314:	4299      	cmp	r1, r3
 800d316:	db05      	blt.n	800d324 <_printf_float+0x1d0>
 800d318:	6823      	ldr	r3, [r4, #0]
 800d31a:	6121      	str	r1, [r4, #16]
 800d31c:	07d8      	lsls	r0, r3, #31
 800d31e:	d5ea      	bpl.n	800d2f6 <_printf_float+0x1a2>
 800d320:	1c4b      	adds	r3, r1, #1
 800d322:	e7e7      	b.n	800d2f4 <_printf_float+0x1a0>
 800d324:	2900      	cmp	r1, #0
 800d326:	bfd4      	ite	le
 800d328:	f1c1 0202 	rsble	r2, r1, #2
 800d32c:	2201      	movgt	r2, #1
 800d32e:	4413      	add	r3, r2
 800d330:	e7e0      	b.n	800d2f4 <_printf_float+0x1a0>
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	055a      	lsls	r2, r3, #21
 800d336:	d407      	bmi.n	800d348 <_printf_float+0x1f4>
 800d338:	6923      	ldr	r3, [r4, #16]
 800d33a:	4642      	mov	r2, r8
 800d33c:	4631      	mov	r1, r6
 800d33e:	4628      	mov	r0, r5
 800d340:	47b8      	blx	r7
 800d342:	3001      	adds	r0, #1
 800d344:	d12c      	bne.n	800d3a0 <_printf_float+0x24c>
 800d346:	e764      	b.n	800d212 <_printf_float+0xbe>
 800d348:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d34c:	f240 80e0 	bls.w	800d510 <_printf_float+0x3bc>
 800d350:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d354:	2200      	movs	r2, #0
 800d356:	2300      	movs	r3, #0
 800d358:	f7f3 fbce 	bl	8000af8 <__aeabi_dcmpeq>
 800d35c:	2800      	cmp	r0, #0
 800d35e:	d034      	beq.n	800d3ca <_printf_float+0x276>
 800d360:	4a37      	ldr	r2, [pc, #220]	; (800d440 <_printf_float+0x2ec>)
 800d362:	2301      	movs	r3, #1
 800d364:	4631      	mov	r1, r6
 800d366:	4628      	mov	r0, r5
 800d368:	47b8      	blx	r7
 800d36a:	3001      	adds	r0, #1
 800d36c:	f43f af51 	beq.w	800d212 <_printf_float+0xbe>
 800d370:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d374:	429a      	cmp	r2, r3
 800d376:	db02      	blt.n	800d37e <_printf_float+0x22a>
 800d378:	6823      	ldr	r3, [r4, #0]
 800d37a:	07d8      	lsls	r0, r3, #31
 800d37c:	d510      	bpl.n	800d3a0 <_printf_float+0x24c>
 800d37e:	ee18 3a10 	vmov	r3, s16
 800d382:	4652      	mov	r2, sl
 800d384:	4631      	mov	r1, r6
 800d386:	4628      	mov	r0, r5
 800d388:	47b8      	blx	r7
 800d38a:	3001      	adds	r0, #1
 800d38c:	f43f af41 	beq.w	800d212 <_printf_float+0xbe>
 800d390:	f04f 0800 	mov.w	r8, #0
 800d394:	f104 091a 	add.w	r9, r4, #26
 800d398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d39a:	3b01      	subs	r3, #1
 800d39c:	4543      	cmp	r3, r8
 800d39e:	dc09      	bgt.n	800d3b4 <_printf_float+0x260>
 800d3a0:	6823      	ldr	r3, [r4, #0]
 800d3a2:	079b      	lsls	r3, r3, #30
 800d3a4:	f100 8107 	bmi.w	800d5b6 <_printf_float+0x462>
 800d3a8:	68e0      	ldr	r0, [r4, #12]
 800d3aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3ac:	4298      	cmp	r0, r3
 800d3ae:	bfb8      	it	lt
 800d3b0:	4618      	movlt	r0, r3
 800d3b2:	e730      	b.n	800d216 <_printf_float+0xc2>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	464a      	mov	r2, r9
 800d3b8:	4631      	mov	r1, r6
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	47b8      	blx	r7
 800d3be:	3001      	adds	r0, #1
 800d3c0:	f43f af27 	beq.w	800d212 <_printf_float+0xbe>
 800d3c4:	f108 0801 	add.w	r8, r8, #1
 800d3c8:	e7e6      	b.n	800d398 <_printf_float+0x244>
 800d3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	dc39      	bgt.n	800d444 <_printf_float+0x2f0>
 800d3d0:	4a1b      	ldr	r2, [pc, #108]	; (800d440 <_printf_float+0x2ec>)
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	4631      	mov	r1, r6
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	47b8      	blx	r7
 800d3da:	3001      	adds	r0, #1
 800d3dc:	f43f af19 	beq.w	800d212 <_printf_float+0xbe>
 800d3e0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	d102      	bne.n	800d3ee <_printf_float+0x29a>
 800d3e8:	6823      	ldr	r3, [r4, #0]
 800d3ea:	07d9      	lsls	r1, r3, #31
 800d3ec:	d5d8      	bpl.n	800d3a0 <_printf_float+0x24c>
 800d3ee:	ee18 3a10 	vmov	r3, s16
 800d3f2:	4652      	mov	r2, sl
 800d3f4:	4631      	mov	r1, r6
 800d3f6:	4628      	mov	r0, r5
 800d3f8:	47b8      	blx	r7
 800d3fa:	3001      	adds	r0, #1
 800d3fc:	f43f af09 	beq.w	800d212 <_printf_float+0xbe>
 800d400:	f04f 0900 	mov.w	r9, #0
 800d404:	f104 0a1a 	add.w	sl, r4, #26
 800d408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d40a:	425b      	negs	r3, r3
 800d40c:	454b      	cmp	r3, r9
 800d40e:	dc01      	bgt.n	800d414 <_printf_float+0x2c0>
 800d410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d412:	e792      	b.n	800d33a <_printf_float+0x1e6>
 800d414:	2301      	movs	r3, #1
 800d416:	4652      	mov	r2, sl
 800d418:	4631      	mov	r1, r6
 800d41a:	4628      	mov	r0, r5
 800d41c:	47b8      	blx	r7
 800d41e:	3001      	adds	r0, #1
 800d420:	f43f aef7 	beq.w	800d212 <_printf_float+0xbe>
 800d424:	f109 0901 	add.w	r9, r9, #1
 800d428:	e7ee      	b.n	800d408 <_printf_float+0x2b4>
 800d42a:	bf00      	nop
 800d42c:	7fefffff 	.word	0x7fefffff
 800d430:	080182d4 	.word	0x080182d4
 800d434:	080182d8 	.word	0x080182d8
 800d438:	080182dc 	.word	0x080182dc
 800d43c:	080182e0 	.word	0x080182e0
 800d440:	080182e4 	.word	0x080182e4
 800d444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d446:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d448:	429a      	cmp	r2, r3
 800d44a:	bfa8      	it	ge
 800d44c:	461a      	movge	r2, r3
 800d44e:	2a00      	cmp	r2, #0
 800d450:	4691      	mov	r9, r2
 800d452:	dc37      	bgt.n	800d4c4 <_printf_float+0x370>
 800d454:	f04f 0b00 	mov.w	fp, #0
 800d458:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d45c:	f104 021a 	add.w	r2, r4, #26
 800d460:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d462:	9305      	str	r3, [sp, #20]
 800d464:	eba3 0309 	sub.w	r3, r3, r9
 800d468:	455b      	cmp	r3, fp
 800d46a:	dc33      	bgt.n	800d4d4 <_printf_float+0x380>
 800d46c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d470:	429a      	cmp	r2, r3
 800d472:	db3b      	blt.n	800d4ec <_printf_float+0x398>
 800d474:	6823      	ldr	r3, [r4, #0]
 800d476:	07da      	lsls	r2, r3, #31
 800d478:	d438      	bmi.n	800d4ec <_printf_float+0x398>
 800d47a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d47e:	eba2 0903 	sub.w	r9, r2, r3
 800d482:	9b05      	ldr	r3, [sp, #20]
 800d484:	1ad2      	subs	r2, r2, r3
 800d486:	4591      	cmp	r9, r2
 800d488:	bfa8      	it	ge
 800d48a:	4691      	movge	r9, r2
 800d48c:	f1b9 0f00 	cmp.w	r9, #0
 800d490:	dc35      	bgt.n	800d4fe <_printf_float+0x3aa>
 800d492:	f04f 0800 	mov.w	r8, #0
 800d496:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d49a:	f104 0a1a 	add.w	sl, r4, #26
 800d49e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4a2:	1a9b      	subs	r3, r3, r2
 800d4a4:	eba3 0309 	sub.w	r3, r3, r9
 800d4a8:	4543      	cmp	r3, r8
 800d4aa:	f77f af79 	ble.w	800d3a0 <_printf_float+0x24c>
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	4652      	mov	r2, sl
 800d4b2:	4631      	mov	r1, r6
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	47b8      	blx	r7
 800d4b8:	3001      	adds	r0, #1
 800d4ba:	f43f aeaa 	beq.w	800d212 <_printf_float+0xbe>
 800d4be:	f108 0801 	add.w	r8, r8, #1
 800d4c2:	e7ec      	b.n	800d49e <_printf_float+0x34a>
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	4631      	mov	r1, r6
 800d4c8:	4642      	mov	r2, r8
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	47b8      	blx	r7
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	d1c0      	bne.n	800d454 <_printf_float+0x300>
 800d4d2:	e69e      	b.n	800d212 <_printf_float+0xbe>
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	4631      	mov	r1, r6
 800d4d8:	4628      	mov	r0, r5
 800d4da:	9205      	str	r2, [sp, #20]
 800d4dc:	47b8      	blx	r7
 800d4de:	3001      	adds	r0, #1
 800d4e0:	f43f ae97 	beq.w	800d212 <_printf_float+0xbe>
 800d4e4:	9a05      	ldr	r2, [sp, #20]
 800d4e6:	f10b 0b01 	add.w	fp, fp, #1
 800d4ea:	e7b9      	b.n	800d460 <_printf_float+0x30c>
 800d4ec:	ee18 3a10 	vmov	r3, s16
 800d4f0:	4652      	mov	r2, sl
 800d4f2:	4631      	mov	r1, r6
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	47b8      	blx	r7
 800d4f8:	3001      	adds	r0, #1
 800d4fa:	d1be      	bne.n	800d47a <_printf_float+0x326>
 800d4fc:	e689      	b.n	800d212 <_printf_float+0xbe>
 800d4fe:	9a05      	ldr	r2, [sp, #20]
 800d500:	464b      	mov	r3, r9
 800d502:	4442      	add	r2, r8
 800d504:	4631      	mov	r1, r6
 800d506:	4628      	mov	r0, r5
 800d508:	47b8      	blx	r7
 800d50a:	3001      	adds	r0, #1
 800d50c:	d1c1      	bne.n	800d492 <_printf_float+0x33e>
 800d50e:	e680      	b.n	800d212 <_printf_float+0xbe>
 800d510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d512:	2a01      	cmp	r2, #1
 800d514:	dc01      	bgt.n	800d51a <_printf_float+0x3c6>
 800d516:	07db      	lsls	r3, r3, #31
 800d518:	d53a      	bpl.n	800d590 <_printf_float+0x43c>
 800d51a:	2301      	movs	r3, #1
 800d51c:	4642      	mov	r2, r8
 800d51e:	4631      	mov	r1, r6
 800d520:	4628      	mov	r0, r5
 800d522:	47b8      	blx	r7
 800d524:	3001      	adds	r0, #1
 800d526:	f43f ae74 	beq.w	800d212 <_printf_float+0xbe>
 800d52a:	ee18 3a10 	vmov	r3, s16
 800d52e:	4652      	mov	r2, sl
 800d530:	4631      	mov	r1, r6
 800d532:	4628      	mov	r0, r5
 800d534:	47b8      	blx	r7
 800d536:	3001      	adds	r0, #1
 800d538:	f43f ae6b 	beq.w	800d212 <_printf_float+0xbe>
 800d53c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d540:	2200      	movs	r2, #0
 800d542:	2300      	movs	r3, #0
 800d544:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d548:	f7f3 fad6 	bl	8000af8 <__aeabi_dcmpeq>
 800d54c:	b9d8      	cbnz	r0, 800d586 <_printf_float+0x432>
 800d54e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d552:	f108 0201 	add.w	r2, r8, #1
 800d556:	4631      	mov	r1, r6
 800d558:	4628      	mov	r0, r5
 800d55a:	47b8      	blx	r7
 800d55c:	3001      	adds	r0, #1
 800d55e:	d10e      	bne.n	800d57e <_printf_float+0x42a>
 800d560:	e657      	b.n	800d212 <_printf_float+0xbe>
 800d562:	2301      	movs	r3, #1
 800d564:	4652      	mov	r2, sl
 800d566:	4631      	mov	r1, r6
 800d568:	4628      	mov	r0, r5
 800d56a:	47b8      	blx	r7
 800d56c:	3001      	adds	r0, #1
 800d56e:	f43f ae50 	beq.w	800d212 <_printf_float+0xbe>
 800d572:	f108 0801 	add.w	r8, r8, #1
 800d576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d578:	3b01      	subs	r3, #1
 800d57a:	4543      	cmp	r3, r8
 800d57c:	dcf1      	bgt.n	800d562 <_printf_float+0x40e>
 800d57e:	464b      	mov	r3, r9
 800d580:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d584:	e6da      	b.n	800d33c <_printf_float+0x1e8>
 800d586:	f04f 0800 	mov.w	r8, #0
 800d58a:	f104 0a1a 	add.w	sl, r4, #26
 800d58e:	e7f2      	b.n	800d576 <_printf_float+0x422>
 800d590:	2301      	movs	r3, #1
 800d592:	4642      	mov	r2, r8
 800d594:	e7df      	b.n	800d556 <_printf_float+0x402>
 800d596:	2301      	movs	r3, #1
 800d598:	464a      	mov	r2, r9
 800d59a:	4631      	mov	r1, r6
 800d59c:	4628      	mov	r0, r5
 800d59e:	47b8      	blx	r7
 800d5a0:	3001      	adds	r0, #1
 800d5a2:	f43f ae36 	beq.w	800d212 <_printf_float+0xbe>
 800d5a6:	f108 0801 	add.w	r8, r8, #1
 800d5aa:	68e3      	ldr	r3, [r4, #12]
 800d5ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5ae:	1a5b      	subs	r3, r3, r1
 800d5b0:	4543      	cmp	r3, r8
 800d5b2:	dcf0      	bgt.n	800d596 <_printf_float+0x442>
 800d5b4:	e6f8      	b.n	800d3a8 <_printf_float+0x254>
 800d5b6:	f04f 0800 	mov.w	r8, #0
 800d5ba:	f104 0919 	add.w	r9, r4, #25
 800d5be:	e7f4      	b.n	800d5aa <_printf_float+0x456>

0800d5c0 <_printf_common>:
 800d5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c4:	4616      	mov	r6, r2
 800d5c6:	4699      	mov	r9, r3
 800d5c8:	688a      	ldr	r2, [r1, #8]
 800d5ca:	690b      	ldr	r3, [r1, #16]
 800d5cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	bfb8      	it	lt
 800d5d4:	4613      	movlt	r3, r2
 800d5d6:	6033      	str	r3, [r6, #0]
 800d5d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d5dc:	4607      	mov	r7, r0
 800d5de:	460c      	mov	r4, r1
 800d5e0:	b10a      	cbz	r2, 800d5e6 <_printf_common+0x26>
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	6033      	str	r3, [r6, #0]
 800d5e6:	6823      	ldr	r3, [r4, #0]
 800d5e8:	0699      	lsls	r1, r3, #26
 800d5ea:	bf42      	ittt	mi
 800d5ec:	6833      	ldrmi	r3, [r6, #0]
 800d5ee:	3302      	addmi	r3, #2
 800d5f0:	6033      	strmi	r3, [r6, #0]
 800d5f2:	6825      	ldr	r5, [r4, #0]
 800d5f4:	f015 0506 	ands.w	r5, r5, #6
 800d5f8:	d106      	bne.n	800d608 <_printf_common+0x48>
 800d5fa:	f104 0a19 	add.w	sl, r4, #25
 800d5fe:	68e3      	ldr	r3, [r4, #12]
 800d600:	6832      	ldr	r2, [r6, #0]
 800d602:	1a9b      	subs	r3, r3, r2
 800d604:	42ab      	cmp	r3, r5
 800d606:	dc26      	bgt.n	800d656 <_printf_common+0x96>
 800d608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d60c:	1e13      	subs	r3, r2, #0
 800d60e:	6822      	ldr	r2, [r4, #0]
 800d610:	bf18      	it	ne
 800d612:	2301      	movne	r3, #1
 800d614:	0692      	lsls	r2, r2, #26
 800d616:	d42b      	bmi.n	800d670 <_printf_common+0xb0>
 800d618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d61c:	4649      	mov	r1, r9
 800d61e:	4638      	mov	r0, r7
 800d620:	47c0      	blx	r8
 800d622:	3001      	adds	r0, #1
 800d624:	d01e      	beq.n	800d664 <_printf_common+0xa4>
 800d626:	6823      	ldr	r3, [r4, #0]
 800d628:	6922      	ldr	r2, [r4, #16]
 800d62a:	f003 0306 	and.w	r3, r3, #6
 800d62e:	2b04      	cmp	r3, #4
 800d630:	bf02      	ittt	eq
 800d632:	68e5      	ldreq	r5, [r4, #12]
 800d634:	6833      	ldreq	r3, [r6, #0]
 800d636:	1aed      	subeq	r5, r5, r3
 800d638:	68a3      	ldr	r3, [r4, #8]
 800d63a:	bf0c      	ite	eq
 800d63c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d640:	2500      	movne	r5, #0
 800d642:	4293      	cmp	r3, r2
 800d644:	bfc4      	itt	gt
 800d646:	1a9b      	subgt	r3, r3, r2
 800d648:	18ed      	addgt	r5, r5, r3
 800d64a:	2600      	movs	r6, #0
 800d64c:	341a      	adds	r4, #26
 800d64e:	42b5      	cmp	r5, r6
 800d650:	d11a      	bne.n	800d688 <_printf_common+0xc8>
 800d652:	2000      	movs	r0, #0
 800d654:	e008      	b.n	800d668 <_printf_common+0xa8>
 800d656:	2301      	movs	r3, #1
 800d658:	4652      	mov	r2, sl
 800d65a:	4649      	mov	r1, r9
 800d65c:	4638      	mov	r0, r7
 800d65e:	47c0      	blx	r8
 800d660:	3001      	adds	r0, #1
 800d662:	d103      	bne.n	800d66c <_printf_common+0xac>
 800d664:	f04f 30ff 	mov.w	r0, #4294967295
 800d668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d66c:	3501      	adds	r5, #1
 800d66e:	e7c6      	b.n	800d5fe <_printf_common+0x3e>
 800d670:	18e1      	adds	r1, r4, r3
 800d672:	1c5a      	adds	r2, r3, #1
 800d674:	2030      	movs	r0, #48	; 0x30
 800d676:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d67a:	4422      	add	r2, r4
 800d67c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d680:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d684:	3302      	adds	r3, #2
 800d686:	e7c7      	b.n	800d618 <_printf_common+0x58>
 800d688:	2301      	movs	r3, #1
 800d68a:	4622      	mov	r2, r4
 800d68c:	4649      	mov	r1, r9
 800d68e:	4638      	mov	r0, r7
 800d690:	47c0      	blx	r8
 800d692:	3001      	adds	r0, #1
 800d694:	d0e6      	beq.n	800d664 <_printf_common+0xa4>
 800d696:	3601      	adds	r6, #1
 800d698:	e7d9      	b.n	800d64e <_printf_common+0x8e>
	...

0800d69c <_printf_i>:
 800d69c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6a0:	7e0f      	ldrb	r7, [r1, #24]
 800d6a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d6a4:	2f78      	cmp	r7, #120	; 0x78
 800d6a6:	4691      	mov	r9, r2
 800d6a8:	4680      	mov	r8, r0
 800d6aa:	460c      	mov	r4, r1
 800d6ac:	469a      	mov	sl, r3
 800d6ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d6b2:	d807      	bhi.n	800d6c4 <_printf_i+0x28>
 800d6b4:	2f62      	cmp	r7, #98	; 0x62
 800d6b6:	d80a      	bhi.n	800d6ce <_printf_i+0x32>
 800d6b8:	2f00      	cmp	r7, #0
 800d6ba:	f000 80d4 	beq.w	800d866 <_printf_i+0x1ca>
 800d6be:	2f58      	cmp	r7, #88	; 0x58
 800d6c0:	f000 80c0 	beq.w	800d844 <_printf_i+0x1a8>
 800d6c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d6cc:	e03a      	b.n	800d744 <_printf_i+0xa8>
 800d6ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d6d2:	2b15      	cmp	r3, #21
 800d6d4:	d8f6      	bhi.n	800d6c4 <_printf_i+0x28>
 800d6d6:	a101      	add	r1, pc, #4	; (adr r1, 800d6dc <_printf_i+0x40>)
 800d6d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6dc:	0800d735 	.word	0x0800d735
 800d6e0:	0800d749 	.word	0x0800d749
 800d6e4:	0800d6c5 	.word	0x0800d6c5
 800d6e8:	0800d6c5 	.word	0x0800d6c5
 800d6ec:	0800d6c5 	.word	0x0800d6c5
 800d6f0:	0800d6c5 	.word	0x0800d6c5
 800d6f4:	0800d749 	.word	0x0800d749
 800d6f8:	0800d6c5 	.word	0x0800d6c5
 800d6fc:	0800d6c5 	.word	0x0800d6c5
 800d700:	0800d6c5 	.word	0x0800d6c5
 800d704:	0800d6c5 	.word	0x0800d6c5
 800d708:	0800d84d 	.word	0x0800d84d
 800d70c:	0800d775 	.word	0x0800d775
 800d710:	0800d807 	.word	0x0800d807
 800d714:	0800d6c5 	.word	0x0800d6c5
 800d718:	0800d6c5 	.word	0x0800d6c5
 800d71c:	0800d86f 	.word	0x0800d86f
 800d720:	0800d6c5 	.word	0x0800d6c5
 800d724:	0800d775 	.word	0x0800d775
 800d728:	0800d6c5 	.word	0x0800d6c5
 800d72c:	0800d6c5 	.word	0x0800d6c5
 800d730:	0800d80f 	.word	0x0800d80f
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	1d1a      	adds	r2, r3, #4
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	602a      	str	r2, [r5, #0]
 800d73c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d744:	2301      	movs	r3, #1
 800d746:	e09f      	b.n	800d888 <_printf_i+0x1ec>
 800d748:	6820      	ldr	r0, [r4, #0]
 800d74a:	682b      	ldr	r3, [r5, #0]
 800d74c:	0607      	lsls	r7, r0, #24
 800d74e:	f103 0104 	add.w	r1, r3, #4
 800d752:	6029      	str	r1, [r5, #0]
 800d754:	d501      	bpl.n	800d75a <_printf_i+0xbe>
 800d756:	681e      	ldr	r6, [r3, #0]
 800d758:	e003      	b.n	800d762 <_printf_i+0xc6>
 800d75a:	0646      	lsls	r6, r0, #25
 800d75c:	d5fb      	bpl.n	800d756 <_printf_i+0xba>
 800d75e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d762:	2e00      	cmp	r6, #0
 800d764:	da03      	bge.n	800d76e <_printf_i+0xd2>
 800d766:	232d      	movs	r3, #45	; 0x2d
 800d768:	4276      	negs	r6, r6
 800d76a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d76e:	485a      	ldr	r0, [pc, #360]	; (800d8d8 <_printf_i+0x23c>)
 800d770:	230a      	movs	r3, #10
 800d772:	e012      	b.n	800d79a <_printf_i+0xfe>
 800d774:	682b      	ldr	r3, [r5, #0]
 800d776:	6820      	ldr	r0, [r4, #0]
 800d778:	1d19      	adds	r1, r3, #4
 800d77a:	6029      	str	r1, [r5, #0]
 800d77c:	0605      	lsls	r5, r0, #24
 800d77e:	d501      	bpl.n	800d784 <_printf_i+0xe8>
 800d780:	681e      	ldr	r6, [r3, #0]
 800d782:	e002      	b.n	800d78a <_printf_i+0xee>
 800d784:	0641      	lsls	r1, r0, #25
 800d786:	d5fb      	bpl.n	800d780 <_printf_i+0xe4>
 800d788:	881e      	ldrh	r6, [r3, #0]
 800d78a:	4853      	ldr	r0, [pc, #332]	; (800d8d8 <_printf_i+0x23c>)
 800d78c:	2f6f      	cmp	r7, #111	; 0x6f
 800d78e:	bf0c      	ite	eq
 800d790:	2308      	moveq	r3, #8
 800d792:	230a      	movne	r3, #10
 800d794:	2100      	movs	r1, #0
 800d796:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d79a:	6865      	ldr	r5, [r4, #4]
 800d79c:	60a5      	str	r5, [r4, #8]
 800d79e:	2d00      	cmp	r5, #0
 800d7a0:	bfa2      	ittt	ge
 800d7a2:	6821      	ldrge	r1, [r4, #0]
 800d7a4:	f021 0104 	bicge.w	r1, r1, #4
 800d7a8:	6021      	strge	r1, [r4, #0]
 800d7aa:	b90e      	cbnz	r6, 800d7b0 <_printf_i+0x114>
 800d7ac:	2d00      	cmp	r5, #0
 800d7ae:	d04b      	beq.n	800d848 <_printf_i+0x1ac>
 800d7b0:	4615      	mov	r5, r2
 800d7b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d7b6:	fb03 6711 	mls	r7, r3, r1, r6
 800d7ba:	5dc7      	ldrb	r7, [r0, r7]
 800d7bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d7c0:	4637      	mov	r7, r6
 800d7c2:	42bb      	cmp	r3, r7
 800d7c4:	460e      	mov	r6, r1
 800d7c6:	d9f4      	bls.n	800d7b2 <_printf_i+0x116>
 800d7c8:	2b08      	cmp	r3, #8
 800d7ca:	d10b      	bne.n	800d7e4 <_printf_i+0x148>
 800d7cc:	6823      	ldr	r3, [r4, #0]
 800d7ce:	07de      	lsls	r6, r3, #31
 800d7d0:	d508      	bpl.n	800d7e4 <_printf_i+0x148>
 800d7d2:	6923      	ldr	r3, [r4, #16]
 800d7d4:	6861      	ldr	r1, [r4, #4]
 800d7d6:	4299      	cmp	r1, r3
 800d7d8:	bfde      	ittt	le
 800d7da:	2330      	movle	r3, #48	; 0x30
 800d7dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d7e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d7e4:	1b52      	subs	r2, r2, r5
 800d7e6:	6122      	str	r2, [r4, #16]
 800d7e8:	f8cd a000 	str.w	sl, [sp]
 800d7ec:	464b      	mov	r3, r9
 800d7ee:	aa03      	add	r2, sp, #12
 800d7f0:	4621      	mov	r1, r4
 800d7f2:	4640      	mov	r0, r8
 800d7f4:	f7ff fee4 	bl	800d5c0 <_printf_common>
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	d14a      	bne.n	800d892 <_printf_i+0x1f6>
 800d7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d800:	b004      	add	sp, #16
 800d802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d806:	6823      	ldr	r3, [r4, #0]
 800d808:	f043 0320 	orr.w	r3, r3, #32
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	4833      	ldr	r0, [pc, #204]	; (800d8dc <_printf_i+0x240>)
 800d810:	2778      	movs	r7, #120	; 0x78
 800d812:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d816:	6823      	ldr	r3, [r4, #0]
 800d818:	6829      	ldr	r1, [r5, #0]
 800d81a:	061f      	lsls	r7, r3, #24
 800d81c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d820:	d402      	bmi.n	800d828 <_printf_i+0x18c>
 800d822:	065f      	lsls	r7, r3, #25
 800d824:	bf48      	it	mi
 800d826:	b2b6      	uxthmi	r6, r6
 800d828:	07df      	lsls	r7, r3, #31
 800d82a:	bf48      	it	mi
 800d82c:	f043 0320 	orrmi.w	r3, r3, #32
 800d830:	6029      	str	r1, [r5, #0]
 800d832:	bf48      	it	mi
 800d834:	6023      	strmi	r3, [r4, #0]
 800d836:	b91e      	cbnz	r6, 800d840 <_printf_i+0x1a4>
 800d838:	6823      	ldr	r3, [r4, #0]
 800d83a:	f023 0320 	bic.w	r3, r3, #32
 800d83e:	6023      	str	r3, [r4, #0]
 800d840:	2310      	movs	r3, #16
 800d842:	e7a7      	b.n	800d794 <_printf_i+0xf8>
 800d844:	4824      	ldr	r0, [pc, #144]	; (800d8d8 <_printf_i+0x23c>)
 800d846:	e7e4      	b.n	800d812 <_printf_i+0x176>
 800d848:	4615      	mov	r5, r2
 800d84a:	e7bd      	b.n	800d7c8 <_printf_i+0x12c>
 800d84c:	682b      	ldr	r3, [r5, #0]
 800d84e:	6826      	ldr	r6, [r4, #0]
 800d850:	6961      	ldr	r1, [r4, #20]
 800d852:	1d18      	adds	r0, r3, #4
 800d854:	6028      	str	r0, [r5, #0]
 800d856:	0635      	lsls	r5, r6, #24
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	d501      	bpl.n	800d860 <_printf_i+0x1c4>
 800d85c:	6019      	str	r1, [r3, #0]
 800d85e:	e002      	b.n	800d866 <_printf_i+0x1ca>
 800d860:	0670      	lsls	r0, r6, #25
 800d862:	d5fb      	bpl.n	800d85c <_printf_i+0x1c0>
 800d864:	8019      	strh	r1, [r3, #0]
 800d866:	2300      	movs	r3, #0
 800d868:	6123      	str	r3, [r4, #16]
 800d86a:	4615      	mov	r5, r2
 800d86c:	e7bc      	b.n	800d7e8 <_printf_i+0x14c>
 800d86e:	682b      	ldr	r3, [r5, #0]
 800d870:	1d1a      	adds	r2, r3, #4
 800d872:	602a      	str	r2, [r5, #0]
 800d874:	681d      	ldr	r5, [r3, #0]
 800d876:	6862      	ldr	r2, [r4, #4]
 800d878:	2100      	movs	r1, #0
 800d87a:	4628      	mov	r0, r5
 800d87c:	f7f2 fcc0 	bl	8000200 <memchr>
 800d880:	b108      	cbz	r0, 800d886 <_printf_i+0x1ea>
 800d882:	1b40      	subs	r0, r0, r5
 800d884:	6060      	str	r0, [r4, #4]
 800d886:	6863      	ldr	r3, [r4, #4]
 800d888:	6123      	str	r3, [r4, #16]
 800d88a:	2300      	movs	r3, #0
 800d88c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d890:	e7aa      	b.n	800d7e8 <_printf_i+0x14c>
 800d892:	6923      	ldr	r3, [r4, #16]
 800d894:	462a      	mov	r2, r5
 800d896:	4649      	mov	r1, r9
 800d898:	4640      	mov	r0, r8
 800d89a:	47d0      	blx	sl
 800d89c:	3001      	adds	r0, #1
 800d89e:	d0ad      	beq.n	800d7fc <_printf_i+0x160>
 800d8a0:	6823      	ldr	r3, [r4, #0]
 800d8a2:	079b      	lsls	r3, r3, #30
 800d8a4:	d413      	bmi.n	800d8ce <_printf_i+0x232>
 800d8a6:	68e0      	ldr	r0, [r4, #12]
 800d8a8:	9b03      	ldr	r3, [sp, #12]
 800d8aa:	4298      	cmp	r0, r3
 800d8ac:	bfb8      	it	lt
 800d8ae:	4618      	movlt	r0, r3
 800d8b0:	e7a6      	b.n	800d800 <_printf_i+0x164>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	4632      	mov	r2, r6
 800d8b6:	4649      	mov	r1, r9
 800d8b8:	4640      	mov	r0, r8
 800d8ba:	47d0      	blx	sl
 800d8bc:	3001      	adds	r0, #1
 800d8be:	d09d      	beq.n	800d7fc <_printf_i+0x160>
 800d8c0:	3501      	adds	r5, #1
 800d8c2:	68e3      	ldr	r3, [r4, #12]
 800d8c4:	9903      	ldr	r1, [sp, #12]
 800d8c6:	1a5b      	subs	r3, r3, r1
 800d8c8:	42ab      	cmp	r3, r5
 800d8ca:	dcf2      	bgt.n	800d8b2 <_printf_i+0x216>
 800d8cc:	e7eb      	b.n	800d8a6 <_printf_i+0x20a>
 800d8ce:	2500      	movs	r5, #0
 800d8d0:	f104 0619 	add.w	r6, r4, #25
 800d8d4:	e7f5      	b.n	800d8c2 <_printf_i+0x226>
 800d8d6:	bf00      	nop
 800d8d8:	080182e6 	.word	0x080182e6
 800d8dc:	080182f7 	.word	0x080182f7

0800d8e0 <std>:
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	b510      	push	{r4, lr}
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	e9c0 3300 	strd	r3, r3, [r0]
 800d8ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8ee:	6083      	str	r3, [r0, #8]
 800d8f0:	8181      	strh	r1, [r0, #12]
 800d8f2:	6643      	str	r3, [r0, #100]	; 0x64
 800d8f4:	81c2      	strh	r2, [r0, #14]
 800d8f6:	6183      	str	r3, [r0, #24]
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	2208      	movs	r2, #8
 800d8fc:	305c      	adds	r0, #92	; 0x5c
 800d8fe:	f000 f94d 	bl	800db9c <memset>
 800d902:	4b0d      	ldr	r3, [pc, #52]	; (800d938 <std+0x58>)
 800d904:	6263      	str	r3, [r4, #36]	; 0x24
 800d906:	4b0d      	ldr	r3, [pc, #52]	; (800d93c <std+0x5c>)
 800d908:	62a3      	str	r3, [r4, #40]	; 0x28
 800d90a:	4b0d      	ldr	r3, [pc, #52]	; (800d940 <std+0x60>)
 800d90c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d90e:	4b0d      	ldr	r3, [pc, #52]	; (800d944 <std+0x64>)
 800d910:	6323      	str	r3, [r4, #48]	; 0x30
 800d912:	4b0d      	ldr	r3, [pc, #52]	; (800d948 <std+0x68>)
 800d914:	6224      	str	r4, [r4, #32]
 800d916:	429c      	cmp	r4, r3
 800d918:	d006      	beq.n	800d928 <std+0x48>
 800d91a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d91e:	4294      	cmp	r4, r2
 800d920:	d002      	beq.n	800d928 <std+0x48>
 800d922:	33d0      	adds	r3, #208	; 0xd0
 800d924:	429c      	cmp	r4, r3
 800d926:	d105      	bne.n	800d934 <std+0x54>
 800d928:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d92c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d930:	f000 b9c0 	b.w	800dcb4 <__retarget_lock_init_recursive>
 800d934:	bd10      	pop	{r4, pc}
 800d936:	bf00      	nop
 800d938:	0800daa5 	.word	0x0800daa5
 800d93c:	0800dac7 	.word	0x0800dac7
 800d940:	0800daff 	.word	0x0800daff
 800d944:	0800db23 	.word	0x0800db23
 800d948:	20002854 	.word	0x20002854

0800d94c <stdio_exit_handler>:
 800d94c:	4a02      	ldr	r2, [pc, #8]	; (800d958 <stdio_exit_handler+0xc>)
 800d94e:	4903      	ldr	r1, [pc, #12]	; (800d95c <stdio_exit_handler+0x10>)
 800d950:	4803      	ldr	r0, [pc, #12]	; (800d960 <stdio_exit_handler+0x14>)
 800d952:	f000 b869 	b.w	800da28 <_fwalk_sglue>
 800d956:	bf00      	nop
 800d958:	20000018 	.word	0x20000018
 800d95c:	0800f501 	.word	0x0800f501
 800d960:	20000024 	.word	0x20000024

0800d964 <cleanup_stdio>:
 800d964:	6841      	ldr	r1, [r0, #4]
 800d966:	4b0c      	ldr	r3, [pc, #48]	; (800d998 <cleanup_stdio+0x34>)
 800d968:	4299      	cmp	r1, r3
 800d96a:	b510      	push	{r4, lr}
 800d96c:	4604      	mov	r4, r0
 800d96e:	d001      	beq.n	800d974 <cleanup_stdio+0x10>
 800d970:	f001 fdc6 	bl	800f500 <_fflush_r>
 800d974:	68a1      	ldr	r1, [r4, #8]
 800d976:	4b09      	ldr	r3, [pc, #36]	; (800d99c <cleanup_stdio+0x38>)
 800d978:	4299      	cmp	r1, r3
 800d97a:	d002      	beq.n	800d982 <cleanup_stdio+0x1e>
 800d97c:	4620      	mov	r0, r4
 800d97e:	f001 fdbf 	bl	800f500 <_fflush_r>
 800d982:	68e1      	ldr	r1, [r4, #12]
 800d984:	4b06      	ldr	r3, [pc, #24]	; (800d9a0 <cleanup_stdio+0x3c>)
 800d986:	4299      	cmp	r1, r3
 800d988:	d004      	beq.n	800d994 <cleanup_stdio+0x30>
 800d98a:	4620      	mov	r0, r4
 800d98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d990:	f001 bdb6 	b.w	800f500 <_fflush_r>
 800d994:	bd10      	pop	{r4, pc}
 800d996:	bf00      	nop
 800d998:	20002854 	.word	0x20002854
 800d99c:	200028bc 	.word	0x200028bc
 800d9a0:	20002924 	.word	0x20002924

0800d9a4 <global_stdio_init.part.0>:
 800d9a4:	b510      	push	{r4, lr}
 800d9a6:	4b0b      	ldr	r3, [pc, #44]	; (800d9d4 <global_stdio_init.part.0+0x30>)
 800d9a8:	4c0b      	ldr	r4, [pc, #44]	; (800d9d8 <global_stdio_init.part.0+0x34>)
 800d9aa:	4a0c      	ldr	r2, [pc, #48]	; (800d9dc <global_stdio_init.part.0+0x38>)
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	2104      	movs	r1, #4
 800d9b4:	f7ff ff94 	bl	800d8e0 <std>
 800d9b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d9bc:	2201      	movs	r2, #1
 800d9be:	2109      	movs	r1, #9
 800d9c0:	f7ff ff8e 	bl	800d8e0 <std>
 800d9c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d9c8:	2202      	movs	r2, #2
 800d9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9ce:	2112      	movs	r1, #18
 800d9d0:	f7ff bf86 	b.w	800d8e0 <std>
 800d9d4:	2000298c 	.word	0x2000298c
 800d9d8:	20002854 	.word	0x20002854
 800d9dc:	0800d94d 	.word	0x0800d94d

0800d9e0 <__sfp_lock_acquire>:
 800d9e0:	4801      	ldr	r0, [pc, #4]	; (800d9e8 <__sfp_lock_acquire+0x8>)
 800d9e2:	f000 b968 	b.w	800dcb6 <__retarget_lock_acquire_recursive>
 800d9e6:	bf00      	nop
 800d9e8:	20002995 	.word	0x20002995

0800d9ec <__sfp_lock_release>:
 800d9ec:	4801      	ldr	r0, [pc, #4]	; (800d9f4 <__sfp_lock_release+0x8>)
 800d9ee:	f000 b963 	b.w	800dcb8 <__retarget_lock_release_recursive>
 800d9f2:	bf00      	nop
 800d9f4:	20002995 	.word	0x20002995

0800d9f8 <__sinit>:
 800d9f8:	b510      	push	{r4, lr}
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	f7ff fff0 	bl	800d9e0 <__sfp_lock_acquire>
 800da00:	6a23      	ldr	r3, [r4, #32]
 800da02:	b11b      	cbz	r3, 800da0c <__sinit+0x14>
 800da04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da08:	f7ff bff0 	b.w	800d9ec <__sfp_lock_release>
 800da0c:	4b04      	ldr	r3, [pc, #16]	; (800da20 <__sinit+0x28>)
 800da0e:	6223      	str	r3, [r4, #32]
 800da10:	4b04      	ldr	r3, [pc, #16]	; (800da24 <__sinit+0x2c>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d1f5      	bne.n	800da04 <__sinit+0xc>
 800da18:	f7ff ffc4 	bl	800d9a4 <global_stdio_init.part.0>
 800da1c:	e7f2      	b.n	800da04 <__sinit+0xc>
 800da1e:	bf00      	nop
 800da20:	0800d965 	.word	0x0800d965
 800da24:	2000298c 	.word	0x2000298c

0800da28 <_fwalk_sglue>:
 800da28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da2c:	4607      	mov	r7, r0
 800da2e:	4688      	mov	r8, r1
 800da30:	4614      	mov	r4, r2
 800da32:	2600      	movs	r6, #0
 800da34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da38:	f1b9 0901 	subs.w	r9, r9, #1
 800da3c:	d505      	bpl.n	800da4a <_fwalk_sglue+0x22>
 800da3e:	6824      	ldr	r4, [r4, #0]
 800da40:	2c00      	cmp	r4, #0
 800da42:	d1f7      	bne.n	800da34 <_fwalk_sglue+0xc>
 800da44:	4630      	mov	r0, r6
 800da46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da4a:	89ab      	ldrh	r3, [r5, #12]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d907      	bls.n	800da60 <_fwalk_sglue+0x38>
 800da50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da54:	3301      	adds	r3, #1
 800da56:	d003      	beq.n	800da60 <_fwalk_sglue+0x38>
 800da58:	4629      	mov	r1, r5
 800da5a:	4638      	mov	r0, r7
 800da5c:	47c0      	blx	r8
 800da5e:	4306      	orrs	r6, r0
 800da60:	3568      	adds	r5, #104	; 0x68
 800da62:	e7e9      	b.n	800da38 <_fwalk_sglue+0x10>

0800da64 <siprintf>:
 800da64:	b40e      	push	{r1, r2, r3}
 800da66:	b500      	push	{lr}
 800da68:	b09c      	sub	sp, #112	; 0x70
 800da6a:	ab1d      	add	r3, sp, #116	; 0x74
 800da6c:	9002      	str	r0, [sp, #8]
 800da6e:	9006      	str	r0, [sp, #24]
 800da70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da74:	4809      	ldr	r0, [pc, #36]	; (800da9c <siprintf+0x38>)
 800da76:	9107      	str	r1, [sp, #28]
 800da78:	9104      	str	r1, [sp, #16]
 800da7a:	4909      	ldr	r1, [pc, #36]	; (800daa0 <siprintf+0x3c>)
 800da7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da80:	9105      	str	r1, [sp, #20]
 800da82:	6800      	ldr	r0, [r0, #0]
 800da84:	9301      	str	r3, [sp, #4]
 800da86:	a902      	add	r1, sp, #8
 800da88:	f001 fbb6 	bl	800f1f8 <_svfiprintf_r>
 800da8c:	9b02      	ldr	r3, [sp, #8]
 800da8e:	2200      	movs	r2, #0
 800da90:	701a      	strb	r2, [r3, #0]
 800da92:	b01c      	add	sp, #112	; 0x70
 800da94:	f85d eb04 	ldr.w	lr, [sp], #4
 800da98:	b003      	add	sp, #12
 800da9a:	4770      	bx	lr
 800da9c:	20000070 	.word	0x20000070
 800daa0:	ffff0208 	.word	0xffff0208

0800daa4 <__sread>:
 800daa4:	b510      	push	{r4, lr}
 800daa6:	460c      	mov	r4, r1
 800daa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daac:	f000 f8a4 	bl	800dbf8 <_read_r>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	bfab      	itete	ge
 800dab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dab6:	89a3      	ldrhlt	r3, [r4, #12]
 800dab8:	181b      	addge	r3, r3, r0
 800daba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dabe:	bfac      	ite	ge
 800dac0:	6563      	strge	r3, [r4, #84]	; 0x54
 800dac2:	81a3      	strhlt	r3, [r4, #12]
 800dac4:	bd10      	pop	{r4, pc}

0800dac6 <__swrite>:
 800dac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daca:	461f      	mov	r7, r3
 800dacc:	898b      	ldrh	r3, [r1, #12]
 800dace:	05db      	lsls	r3, r3, #23
 800dad0:	4605      	mov	r5, r0
 800dad2:	460c      	mov	r4, r1
 800dad4:	4616      	mov	r6, r2
 800dad6:	d505      	bpl.n	800dae4 <__swrite+0x1e>
 800dad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dadc:	2302      	movs	r3, #2
 800dade:	2200      	movs	r2, #0
 800dae0:	f000 f878 	bl	800dbd4 <_lseek_r>
 800dae4:	89a3      	ldrh	r3, [r4, #12]
 800dae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800daee:	81a3      	strh	r3, [r4, #12]
 800daf0:	4632      	mov	r2, r6
 800daf2:	463b      	mov	r3, r7
 800daf4:	4628      	mov	r0, r5
 800daf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dafa:	f000 b89f 	b.w	800dc3c <_write_r>

0800dafe <__sseek>:
 800dafe:	b510      	push	{r4, lr}
 800db00:	460c      	mov	r4, r1
 800db02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db06:	f000 f865 	bl	800dbd4 <_lseek_r>
 800db0a:	1c43      	adds	r3, r0, #1
 800db0c:	89a3      	ldrh	r3, [r4, #12]
 800db0e:	bf15      	itete	ne
 800db10:	6560      	strne	r0, [r4, #84]	; 0x54
 800db12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db1a:	81a3      	strheq	r3, [r4, #12]
 800db1c:	bf18      	it	ne
 800db1e:	81a3      	strhne	r3, [r4, #12]
 800db20:	bd10      	pop	{r4, pc}

0800db22 <__sclose>:
 800db22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db26:	f000 b845 	b.w	800dbb4 <_close_r>

0800db2a <_vsniprintf_r>:
 800db2a:	b530      	push	{r4, r5, lr}
 800db2c:	4614      	mov	r4, r2
 800db2e:	2c00      	cmp	r4, #0
 800db30:	b09b      	sub	sp, #108	; 0x6c
 800db32:	4605      	mov	r5, r0
 800db34:	461a      	mov	r2, r3
 800db36:	da05      	bge.n	800db44 <_vsniprintf_r+0x1a>
 800db38:	238b      	movs	r3, #139	; 0x8b
 800db3a:	6003      	str	r3, [r0, #0]
 800db3c:	f04f 30ff 	mov.w	r0, #4294967295
 800db40:	b01b      	add	sp, #108	; 0x6c
 800db42:	bd30      	pop	{r4, r5, pc}
 800db44:	f44f 7302 	mov.w	r3, #520	; 0x208
 800db48:	f8ad 300c 	strh.w	r3, [sp, #12]
 800db4c:	bf14      	ite	ne
 800db4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800db52:	4623      	moveq	r3, r4
 800db54:	9302      	str	r3, [sp, #8]
 800db56:	9305      	str	r3, [sp, #20]
 800db58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db5c:	9100      	str	r1, [sp, #0]
 800db5e:	9104      	str	r1, [sp, #16]
 800db60:	f8ad 300e 	strh.w	r3, [sp, #14]
 800db64:	4669      	mov	r1, sp
 800db66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800db68:	f001 fb46 	bl	800f1f8 <_svfiprintf_r>
 800db6c:	1c43      	adds	r3, r0, #1
 800db6e:	bfbc      	itt	lt
 800db70:	238b      	movlt	r3, #139	; 0x8b
 800db72:	602b      	strlt	r3, [r5, #0]
 800db74:	2c00      	cmp	r4, #0
 800db76:	d0e3      	beq.n	800db40 <_vsniprintf_r+0x16>
 800db78:	9b00      	ldr	r3, [sp, #0]
 800db7a:	2200      	movs	r2, #0
 800db7c:	701a      	strb	r2, [r3, #0]
 800db7e:	e7df      	b.n	800db40 <_vsniprintf_r+0x16>

0800db80 <vsniprintf>:
 800db80:	b507      	push	{r0, r1, r2, lr}
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	4613      	mov	r3, r2
 800db86:	460a      	mov	r2, r1
 800db88:	4601      	mov	r1, r0
 800db8a:	4803      	ldr	r0, [pc, #12]	; (800db98 <vsniprintf+0x18>)
 800db8c:	6800      	ldr	r0, [r0, #0]
 800db8e:	f7ff ffcc 	bl	800db2a <_vsniprintf_r>
 800db92:	b003      	add	sp, #12
 800db94:	f85d fb04 	ldr.w	pc, [sp], #4
 800db98:	20000070 	.word	0x20000070

0800db9c <memset>:
 800db9c:	4402      	add	r2, r0
 800db9e:	4603      	mov	r3, r0
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d100      	bne.n	800dba6 <memset+0xa>
 800dba4:	4770      	bx	lr
 800dba6:	f803 1b01 	strb.w	r1, [r3], #1
 800dbaa:	e7f9      	b.n	800dba0 <memset+0x4>

0800dbac <_localeconv_r>:
 800dbac:	4800      	ldr	r0, [pc, #0]	; (800dbb0 <_localeconv_r+0x4>)
 800dbae:	4770      	bx	lr
 800dbb0:	20000164 	.word	0x20000164

0800dbb4 <_close_r>:
 800dbb4:	b538      	push	{r3, r4, r5, lr}
 800dbb6:	4d06      	ldr	r5, [pc, #24]	; (800dbd0 <_close_r+0x1c>)
 800dbb8:	2300      	movs	r3, #0
 800dbba:	4604      	mov	r4, r0
 800dbbc:	4608      	mov	r0, r1
 800dbbe:	602b      	str	r3, [r5, #0]
 800dbc0:	f7f5 fe1b 	bl	80037fa <_close>
 800dbc4:	1c43      	adds	r3, r0, #1
 800dbc6:	d102      	bne.n	800dbce <_close_r+0x1a>
 800dbc8:	682b      	ldr	r3, [r5, #0]
 800dbca:	b103      	cbz	r3, 800dbce <_close_r+0x1a>
 800dbcc:	6023      	str	r3, [r4, #0]
 800dbce:	bd38      	pop	{r3, r4, r5, pc}
 800dbd0:	20002990 	.word	0x20002990

0800dbd4 <_lseek_r>:
 800dbd4:	b538      	push	{r3, r4, r5, lr}
 800dbd6:	4d07      	ldr	r5, [pc, #28]	; (800dbf4 <_lseek_r+0x20>)
 800dbd8:	4604      	mov	r4, r0
 800dbda:	4608      	mov	r0, r1
 800dbdc:	4611      	mov	r1, r2
 800dbde:	2200      	movs	r2, #0
 800dbe0:	602a      	str	r2, [r5, #0]
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	f7f5 fe30 	bl	8003848 <_lseek>
 800dbe8:	1c43      	adds	r3, r0, #1
 800dbea:	d102      	bne.n	800dbf2 <_lseek_r+0x1e>
 800dbec:	682b      	ldr	r3, [r5, #0]
 800dbee:	b103      	cbz	r3, 800dbf2 <_lseek_r+0x1e>
 800dbf0:	6023      	str	r3, [r4, #0]
 800dbf2:	bd38      	pop	{r3, r4, r5, pc}
 800dbf4:	20002990 	.word	0x20002990

0800dbf8 <_read_r>:
 800dbf8:	b538      	push	{r3, r4, r5, lr}
 800dbfa:	4d07      	ldr	r5, [pc, #28]	; (800dc18 <_read_r+0x20>)
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	4608      	mov	r0, r1
 800dc00:	4611      	mov	r1, r2
 800dc02:	2200      	movs	r2, #0
 800dc04:	602a      	str	r2, [r5, #0]
 800dc06:	461a      	mov	r2, r3
 800dc08:	f7f5 fdbe 	bl	8003788 <_read>
 800dc0c:	1c43      	adds	r3, r0, #1
 800dc0e:	d102      	bne.n	800dc16 <_read_r+0x1e>
 800dc10:	682b      	ldr	r3, [r5, #0]
 800dc12:	b103      	cbz	r3, 800dc16 <_read_r+0x1e>
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	bd38      	pop	{r3, r4, r5, pc}
 800dc18:	20002990 	.word	0x20002990

0800dc1c <_sbrk_r>:
 800dc1c:	b538      	push	{r3, r4, r5, lr}
 800dc1e:	4d06      	ldr	r5, [pc, #24]	; (800dc38 <_sbrk_r+0x1c>)
 800dc20:	2300      	movs	r3, #0
 800dc22:	4604      	mov	r4, r0
 800dc24:	4608      	mov	r0, r1
 800dc26:	602b      	str	r3, [r5, #0]
 800dc28:	f7f5 fe1c 	bl	8003864 <_sbrk>
 800dc2c:	1c43      	adds	r3, r0, #1
 800dc2e:	d102      	bne.n	800dc36 <_sbrk_r+0x1a>
 800dc30:	682b      	ldr	r3, [r5, #0]
 800dc32:	b103      	cbz	r3, 800dc36 <_sbrk_r+0x1a>
 800dc34:	6023      	str	r3, [r4, #0]
 800dc36:	bd38      	pop	{r3, r4, r5, pc}
 800dc38:	20002990 	.word	0x20002990

0800dc3c <_write_r>:
 800dc3c:	b538      	push	{r3, r4, r5, lr}
 800dc3e:	4d07      	ldr	r5, [pc, #28]	; (800dc5c <_write_r+0x20>)
 800dc40:	4604      	mov	r4, r0
 800dc42:	4608      	mov	r0, r1
 800dc44:	4611      	mov	r1, r2
 800dc46:	2200      	movs	r2, #0
 800dc48:	602a      	str	r2, [r5, #0]
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	f7f5 fdb9 	bl	80037c2 <_write>
 800dc50:	1c43      	adds	r3, r0, #1
 800dc52:	d102      	bne.n	800dc5a <_write_r+0x1e>
 800dc54:	682b      	ldr	r3, [r5, #0]
 800dc56:	b103      	cbz	r3, 800dc5a <_write_r+0x1e>
 800dc58:	6023      	str	r3, [r4, #0]
 800dc5a:	bd38      	pop	{r3, r4, r5, pc}
 800dc5c:	20002990 	.word	0x20002990

0800dc60 <__errno>:
 800dc60:	4b01      	ldr	r3, [pc, #4]	; (800dc68 <__errno+0x8>)
 800dc62:	6818      	ldr	r0, [r3, #0]
 800dc64:	4770      	bx	lr
 800dc66:	bf00      	nop
 800dc68:	20000070 	.word	0x20000070

0800dc6c <__libc_init_array>:
 800dc6c:	b570      	push	{r4, r5, r6, lr}
 800dc6e:	4d0d      	ldr	r5, [pc, #52]	; (800dca4 <__libc_init_array+0x38>)
 800dc70:	4c0d      	ldr	r4, [pc, #52]	; (800dca8 <__libc_init_array+0x3c>)
 800dc72:	1b64      	subs	r4, r4, r5
 800dc74:	10a4      	asrs	r4, r4, #2
 800dc76:	2600      	movs	r6, #0
 800dc78:	42a6      	cmp	r6, r4
 800dc7a:	d109      	bne.n	800dc90 <__libc_init_array+0x24>
 800dc7c:	4d0b      	ldr	r5, [pc, #44]	; (800dcac <__libc_init_array+0x40>)
 800dc7e:	4c0c      	ldr	r4, [pc, #48]	; (800dcb0 <__libc_init_array+0x44>)
 800dc80:	f002 fd54 	bl	801072c <_init>
 800dc84:	1b64      	subs	r4, r4, r5
 800dc86:	10a4      	asrs	r4, r4, #2
 800dc88:	2600      	movs	r6, #0
 800dc8a:	42a6      	cmp	r6, r4
 800dc8c:	d105      	bne.n	800dc9a <__libc_init_array+0x2e>
 800dc8e:	bd70      	pop	{r4, r5, r6, pc}
 800dc90:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc94:	4798      	blx	r3
 800dc96:	3601      	adds	r6, #1
 800dc98:	e7ee      	b.n	800dc78 <__libc_init_array+0xc>
 800dc9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc9e:	4798      	blx	r3
 800dca0:	3601      	adds	r6, #1
 800dca2:	e7f2      	b.n	800dc8a <__libc_init_array+0x1e>
 800dca4:	080186c0 	.word	0x080186c0
 800dca8:	080186c0 	.word	0x080186c0
 800dcac:	080186c0 	.word	0x080186c0
 800dcb0:	080186c4 	.word	0x080186c4

0800dcb4 <__retarget_lock_init_recursive>:
 800dcb4:	4770      	bx	lr

0800dcb6 <__retarget_lock_acquire_recursive>:
 800dcb6:	4770      	bx	lr

0800dcb8 <__retarget_lock_release_recursive>:
 800dcb8:	4770      	bx	lr

0800dcba <quorem>:
 800dcba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcbe:	6903      	ldr	r3, [r0, #16]
 800dcc0:	690c      	ldr	r4, [r1, #16]
 800dcc2:	42a3      	cmp	r3, r4
 800dcc4:	4607      	mov	r7, r0
 800dcc6:	db7e      	blt.n	800ddc6 <quorem+0x10c>
 800dcc8:	3c01      	subs	r4, #1
 800dcca:	f101 0814 	add.w	r8, r1, #20
 800dcce:	f100 0514 	add.w	r5, r0, #20
 800dcd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcd6:	9301      	str	r3, [sp, #4]
 800dcd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dcdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dce0:	3301      	adds	r3, #1
 800dce2:	429a      	cmp	r2, r3
 800dce4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dce8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dcec:	fbb2 f6f3 	udiv	r6, r2, r3
 800dcf0:	d331      	bcc.n	800dd56 <quorem+0x9c>
 800dcf2:	f04f 0e00 	mov.w	lr, #0
 800dcf6:	4640      	mov	r0, r8
 800dcf8:	46ac      	mov	ip, r5
 800dcfa:	46f2      	mov	sl, lr
 800dcfc:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd00:	b293      	uxth	r3, r2
 800dd02:	fb06 e303 	mla	r3, r6, r3, lr
 800dd06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd0a:	0c1a      	lsrs	r2, r3, #16
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	ebaa 0303 	sub.w	r3, sl, r3
 800dd12:	f8dc a000 	ldr.w	sl, [ip]
 800dd16:	fa13 f38a 	uxtah	r3, r3, sl
 800dd1a:	fb06 220e 	mla	r2, r6, lr, r2
 800dd1e:	9300      	str	r3, [sp, #0]
 800dd20:	9b00      	ldr	r3, [sp, #0]
 800dd22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd26:	b292      	uxth	r2, r2
 800dd28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dd2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd30:	f8bd 3000 	ldrh.w	r3, [sp]
 800dd34:	4581      	cmp	r9, r0
 800dd36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd3a:	f84c 3b04 	str.w	r3, [ip], #4
 800dd3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dd42:	d2db      	bcs.n	800dcfc <quorem+0x42>
 800dd44:	f855 300b 	ldr.w	r3, [r5, fp]
 800dd48:	b92b      	cbnz	r3, 800dd56 <quorem+0x9c>
 800dd4a:	9b01      	ldr	r3, [sp, #4]
 800dd4c:	3b04      	subs	r3, #4
 800dd4e:	429d      	cmp	r5, r3
 800dd50:	461a      	mov	r2, r3
 800dd52:	d32c      	bcc.n	800ddae <quorem+0xf4>
 800dd54:	613c      	str	r4, [r7, #16]
 800dd56:	4638      	mov	r0, r7
 800dd58:	f001 f8f4 	bl	800ef44 <__mcmp>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	db22      	blt.n	800dda6 <quorem+0xec>
 800dd60:	3601      	adds	r6, #1
 800dd62:	4629      	mov	r1, r5
 800dd64:	2000      	movs	r0, #0
 800dd66:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd6a:	f8d1 c000 	ldr.w	ip, [r1]
 800dd6e:	b293      	uxth	r3, r2
 800dd70:	1ac3      	subs	r3, r0, r3
 800dd72:	0c12      	lsrs	r2, r2, #16
 800dd74:	fa13 f38c 	uxtah	r3, r3, ip
 800dd78:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800dd7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd86:	45c1      	cmp	r9, r8
 800dd88:	f841 3b04 	str.w	r3, [r1], #4
 800dd8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dd90:	d2e9      	bcs.n	800dd66 <quorem+0xac>
 800dd92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd9a:	b922      	cbnz	r2, 800dda6 <quorem+0xec>
 800dd9c:	3b04      	subs	r3, #4
 800dd9e:	429d      	cmp	r5, r3
 800dda0:	461a      	mov	r2, r3
 800dda2:	d30a      	bcc.n	800ddba <quorem+0x100>
 800dda4:	613c      	str	r4, [r7, #16]
 800dda6:	4630      	mov	r0, r6
 800dda8:	b003      	add	sp, #12
 800ddaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddae:	6812      	ldr	r2, [r2, #0]
 800ddb0:	3b04      	subs	r3, #4
 800ddb2:	2a00      	cmp	r2, #0
 800ddb4:	d1ce      	bne.n	800dd54 <quorem+0x9a>
 800ddb6:	3c01      	subs	r4, #1
 800ddb8:	e7c9      	b.n	800dd4e <quorem+0x94>
 800ddba:	6812      	ldr	r2, [r2, #0]
 800ddbc:	3b04      	subs	r3, #4
 800ddbe:	2a00      	cmp	r2, #0
 800ddc0:	d1f0      	bne.n	800dda4 <quorem+0xea>
 800ddc2:	3c01      	subs	r4, #1
 800ddc4:	e7eb      	b.n	800dd9e <quorem+0xe4>
 800ddc6:	2000      	movs	r0, #0
 800ddc8:	e7ee      	b.n	800dda8 <quorem+0xee>
 800ddca:	0000      	movs	r0, r0
 800ddcc:	0000      	movs	r0, r0
	...

0800ddd0 <_dtoa_r>:
 800ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd4:	ed2d 8b04 	vpush	{d8-d9}
 800ddd8:	69c5      	ldr	r5, [r0, #28]
 800ddda:	b093      	sub	sp, #76	; 0x4c
 800dddc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dde0:	ec57 6b10 	vmov	r6, r7, d0
 800dde4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dde8:	9107      	str	r1, [sp, #28]
 800ddea:	4604      	mov	r4, r0
 800ddec:	920a      	str	r2, [sp, #40]	; 0x28
 800ddee:	930d      	str	r3, [sp, #52]	; 0x34
 800ddf0:	b975      	cbnz	r5, 800de10 <_dtoa_r+0x40>
 800ddf2:	2010      	movs	r0, #16
 800ddf4:	f7ff f85a 	bl	800ceac <malloc>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	61e0      	str	r0, [r4, #28]
 800ddfc:	b920      	cbnz	r0, 800de08 <_dtoa_r+0x38>
 800ddfe:	4bae      	ldr	r3, [pc, #696]	; (800e0b8 <_dtoa_r+0x2e8>)
 800de00:	21ef      	movs	r1, #239	; 0xef
 800de02:	48ae      	ldr	r0, [pc, #696]	; (800e0bc <_dtoa_r+0x2ec>)
 800de04:	f001 fbcc 	bl	800f5a0 <__assert_func>
 800de08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de0c:	6005      	str	r5, [r0, #0]
 800de0e:	60c5      	str	r5, [r0, #12]
 800de10:	69e3      	ldr	r3, [r4, #28]
 800de12:	6819      	ldr	r1, [r3, #0]
 800de14:	b151      	cbz	r1, 800de2c <_dtoa_r+0x5c>
 800de16:	685a      	ldr	r2, [r3, #4]
 800de18:	604a      	str	r2, [r1, #4]
 800de1a:	2301      	movs	r3, #1
 800de1c:	4093      	lsls	r3, r2
 800de1e:	608b      	str	r3, [r1, #8]
 800de20:	4620      	mov	r0, r4
 800de22:	f000 fe53 	bl	800eacc <_Bfree>
 800de26:	69e3      	ldr	r3, [r4, #28]
 800de28:	2200      	movs	r2, #0
 800de2a:	601a      	str	r2, [r3, #0]
 800de2c:	1e3b      	subs	r3, r7, #0
 800de2e:	bfbb      	ittet	lt
 800de30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800de34:	9303      	strlt	r3, [sp, #12]
 800de36:	2300      	movge	r3, #0
 800de38:	2201      	movlt	r2, #1
 800de3a:	bfac      	ite	ge
 800de3c:	f8c8 3000 	strge.w	r3, [r8]
 800de40:	f8c8 2000 	strlt.w	r2, [r8]
 800de44:	4b9e      	ldr	r3, [pc, #632]	; (800e0c0 <_dtoa_r+0x2f0>)
 800de46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800de4a:	ea33 0308 	bics.w	r3, r3, r8
 800de4e:	d11b      	bne.n	800de88 <_dtoa_r+0xb8>
 800de50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de52:	f242 730f 	movw	r3, #9999	; 0x270f
 800de56:	6013      	str	r3, [r2, #0]
 800de58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800de5c:	4333      	orrs	r3, r6
 800de5e:	f000 8593 	beq.w	800e988 <_dtoa_r+0xbb8>
 800de62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de64:	b963      	cbnz	r3, 800de80 <_dtoa_r+0xb0>
 800de66:	4b97      	ldr	r3, [pc, #604]	; (800e0c4 <_dtoa_r+0x2f4>)
 800de68:	e027      	b.n	800deba <_dtoa_r+0xea>
 800de6a:	4b97      	ldr	r3, [pc, #604]	; (800e0c8 <_dtoa_r+0x2f8>)
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	3308      	adds	r3, #8
 800de70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de72:	6013      	str	r3, [r2, #0]
 800de74:	9800      	ldr	r0, [sp, #0]
 800de76:	b013      	add	sp, #76	; 0x4c
 800de78:	ecbd 8b04 	vpop	{d8-d9}
 800de7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de80:	4b90      	ldr	r3, [pc, #576]	; (800e0c4 <_dtoa_r+0x2f4>)
 800de82:	9300      	str	r3, [sp, #0]
 800de84:	3303      	adds	r3, #3
 800de86:	e7f3      	b.n	800de70 <_dtoa_r+0xa0>
 800de88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de8c:	2200      	movs	r2, #0
 800de8e:	ec51 0b17 	vmov	r0, r1, d7
 800de92:	eeb0 8a47 	vmov.f32	s16, s14
 800de96:	eef0 8a67 	vmov.f32	s17, s15
 800de9a:	2300      	movs	r3, #0
 800de9c:	f7f2 fe2c 	bl	8000af8 <__aeabi_dcmpeq>
 800dea0:	4681      	mov	r9, r0
 800dea2:	b160      	cbz	r0, 800debe <_dtoa_r+0xee>
 800dea4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dea6:	2301      	movs	r3, #1
 800dea8:	6013      	str	r3, [r2, #0]
 800deaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800deac:	2b00      	cmp	r3, #0
 800deae:	f000 8568 	beq.w	800e982 <_dtoa_r+0xbb2>
 800deb2:	4b86      	ldr	r3, [pc, #536]	; (800e0cc <_dtoa_r+0x2fc>)
 800deb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800deb6:	6013      	str	r3, [r2, #0]
 800deb8:	3b01      	subs	r3, #1
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	e7da      	b.n	800de74 <_dtoa_r+0xa4>
 800debe:	aa10      	add	r2, sp, #64	; 0x40
 800dec0:	a911      	add	r1, sp, #68	; 0x44
 800dec2:	4620      	mov	r0, r4
 800dec4:	eeb0 0a48 	vmov.f32	s0, s16
 800dec8:	eef0 0a68 	vmov.f32	s1, s17
 800decc:	f001 f8e0 	bl	800f090 <__d2b>
 800ded0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ded4:	4682      	mov	sl, r0
 800ded6:	2d00      	cmp	r5, #0
 800ded8:	d07f      	beq.n	800dfda <_dtoa_r+0x20a>
 800deda:	ee18 3a90 	vmov	r3, s17
 800dede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dee2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dee6:	ec51 0b18 	vmov	r0, r1, d8
 800deea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800deee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800def2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800def6:	4619      	mov	r1, r3
 800def8:	2200      	movs	r2, #0
 800defa:	4b75      	ldr	r3, [pc, #468]	; (800e0d0 <_dtoa_r+0x300>)
 800defc:	f7f2 f9dc 	bl	80002b8 <__aeabi_dsub>
 800df00:	a367      	add	r3, pc, #412	; (adr r3, 800e0a0 <_dtoa_r+0x2d0>)
 800df02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df06:	f7f2 fb8f 	bl	8000628 <__aeabi_dmul>
 800df0a:	a367      	add	r3, pc, #412	; (adr r3, 800e0a8 <_dtoa_r+0x2d8>)
 800df0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df10:	f7f2 f9d4 	bl	80002bc <__adddf3>
 800df14:	4606      	mov	r6, r0
 800df16:	4628      	mov	r0, r5
 800df18:	460f      	mov	r7, r1
 800df1a:	f7f2 fb1b 	bl	8000554 <__aeabi_i2d>
 800df1e:	a364      	add	r3, pc, #400	; (adr r3, 800e0b0 <_dtoa_r+0x2e0>)
 800df20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df24:	f7f2 fb80 	bl	8000628 <__aeabi_dmul>
 800df28:	4602      	mov	r2, r0
 800df2a:	460b      	mov	r3, r1
 800df2c:	4630      	mov	r0, r6
 800df2e:	4639      	mov	r1, r7
 800df30:	f7f2 f9c4 	bl	80002bc <__adddf3>
 800df34:	4606      	mov	r6, r0
 800df36:	460f      	mov	r7, r1
 800df38:	f7f2 fe26 	bl	8000b88 <__aeabi_d2iz>
 800df3c:	2200      	movs	r2, #0
 800df3e:	4683      	mov	fp, r0
 800df40:	2300      	movs	r3, #0
 800df42:	4630      	mov	r0, r6
 800df44:	4639      	mov	r1, r7
 800df46:	f7f2 fde1 	bl	8000b0c <__aeabi_dcmplt>
 800df4a:	b148      	cbz	r0, 800df60 <_dtoa_r+0x190>
 800df4c:	4658      	mov	r0, fp
 800df4e:	f7f2 fb01 	bl	8000554 <__aeabi_i2d>
 800df52:	4632      	mov	r2, r6
 800df54:	463b      	mov	r3, r7
 800df56:	f7f2 fdcf 	bl	8000af8 <__aeabi_dcmpeq>
 800df5a:	b908      	cbnz	r0, 800df60 <_dtoa_r+0x190>
 800df5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df60:	f1bb 0f16 	cmp.w	fp, #22
 800df64:	d857      	bhi.n	800e016 <_dtoa_r+0x246>
 800df66:	4b5b      	ldr	r3, [pc, #364]	; (800e0d4 <_dtoa_r+0x304>)
 800df68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800df6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df70:	ec51 0b18 	vmov	r0, r1, d8
 800df74:	f7f2 fdca 	bl	8000b0c <__aeabi_dcmplt>
 800df78:	2800      	cmp	r0, #0
 800df7a:	d04e      	beq.n	800e01a <_dtoa_r+0x24a>
 800df7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df80:	2300      	movs	r3, #0
 800df82:	930c      	str	r3, [sp, #48]	; 0x30
 800df84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df86:	1b5b      	subs	r3, r3, r5
 800df88:	1e5a      	subs	r2, r3, #1
 800df8a:	bf45      	ittet	mi
 800df8c:	f1c3 0301 	rsbmi	r3, r3, #1
 800df90:	9305      	strmi	r3, [sp, #20]
 800df92:	2300      	movpl	r3, #0
 800df94:	2300      	movmi	r3, #0
 800df96:	9206      	str	r2, [sp, #24]
 800df98:	bf54      	ite	pl
 800df9a:	9305      	strpl	r3, [sp, #20]
 800df9c:	9306      	strmi	r3, [sp, #24]
 800df9e:	f1bb 0f00 	cmp.w	fp, #0
 800dfa2:	db3c      	blt.n	800e01e <_dtoa_r+0x24e>
 800dfa4:	9b06      	ldr	r3, [sp, #24]
 800dfa6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800dfaa:	445b      	add	r3, fp
 800dfac:	9306      	str	r3, [sp, #24]
 800dfae:	2300      	movs	r3, #0
 800dfb0:	9308      	str	r3, [sp, #32]
 800dfb2:	9b07      	ldr	r3, [sp, #28]
 800dfb4:	2b09      	cmp	r3, #9
 800dfb6:	d868      	bhi.n	800e08a <_dtoa_r+0x2ba>
 800dfb8:	2b05      	cmp	r3, #5
 800dfba:	bfc4      	itt	gt
 800dfbc:	3b04      	subgt	r3, #4
 800dfbe:	9307      	strgt	r3, [sp, #28]
 800dfc0:	9b07      	ldr	r3, [sp, #28]
 800dfc2:	f1a3 0302 	sub.w	r3, r3, #2
 800dfc6:	bfcc      	ite	gt
 800dfc8:	2500      	movgt	r5, #0
 800dfca:	2501      	movle	r5, #1
 800dfcc:	2b03      	cmp	r3, #3
 800dfce:	f200 8085 	bhi.w	800e0dc <_dtoa_r+0x30c>
 800dfd2:	e8df f003 	tbb	[pc, r3]
 800dfd6:	3b2e      	.short	0x3b2e
 800dfd8:	5839      	.short	0x5839
 800dfda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dfde:	441d      	add	r5, r3
 800dfe0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dfe4:	2b20      	cmp	r3, #32
 800dfe6:	bfc1      	itttt	gt
 800dfe8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dfec:	fa08 f803 	lslgt.w	r8, r8, r3
 800dff0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dff4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dff8:	bfd6      	itet	le
 800dffa:	f1c3 0320 	rsble	r3, r3, #32
 800dffe:	ea48 0003 	orrgt.w	r0, r8, r3
 800e002:	fa06 f003 	lslle.w	r0, r6, r3
 800e006:	f7f2 fa95 	bl	8000534 <__aeabi_ui2d>
 800e00a:	2201      	movs	r2, #1
 800e00c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e010:	3d01      	subs	r5, #1
 800e012:	920e      	str	r2, [sp, #56]	; 0x38
 800e014:	e76f      	b.n	800def6 <_dtoa_r+0x126>
 800e016:	2301      	movs	r3, #1
 800e018:	e7b3      	b.n	800df82 <_dtoa_r+0x1b2>
 800e01a:	900c      	str	r0, [sp, #48]	; 0x30
 800e01c:	e7b2      	b.n	800df84 <_dtoa_r+0x1b4>
 800e01e:	9b05      	ldr	r3, [sp, #20]
 800e020:	eba3 030b 	sub.w	r3, r3, fp
 800e024:	9305      	str	r3, [sp, #20]
 800e026:	f1cb 0300 	rsb	r3, fp, #0
 800e02a:	9308      	str	r3, [sp, #32]
 800e02c:	2300      	movs	r3, #0
 800e02e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e030:	e7bf      	b.n	800dfb2 <_dtoa_r+0x1e2>
 800e032:	2300      	movs	r3, #0
 800e034:	9309      	str	r3, [sp, #36]	; 0x24
 800e036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e038:	2b00      	cmp	r3, #0
 800e03a:	dc52      	bgt.n	800e0e2 <_dtoa_r+0x312>
 800e03c:	2301      	movs	r3, #1
 800e03e:	9301      	str	r3, [sp, #4]
 800e040:	9304      	str	r3, [sp, #16]
 800e042:	461a      	mov	r2, r3
 800e044:	920a      	str	r2, [sp, #40]	; 0x28
 800e046:	e00b      	b.n	800e060 <_dtoa_r+0x290>
 800e048:	2301      	movs	r3, #1
 800e04a:	e7f3      	b.n	800e034 <_dtoa_r+0x264>
 800e04c:	2300      	movs	r3, #0
 800e04e:	9309      	str	r3, [sp, #36]	; 0x24
 800e050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e052:	445b      	add	r3, fp
 800e054:	9301      	str	r3, [sp, #4]
 800e056:	3301      	adds	r3, #1
 800e058:	2b01      	cmp	r3, #1
 800e05a:	9304      	str	r3, [sp, #16]
 800e05c:	bfb8      	it	lt
 800e05e:	2301      	movlt	r3, #1
 800e060:	69e0      	ldr	r0, [r4, #28]
 800e062:	2100      	movs	r1, #0
 800e064:	2204      	movs	r2, #4
 800e066:	f102 0614 	add.w	r6, r2, #20
 800e06a:	429e      	cmp	r6, r3
 800e06c:	d93d      	bls.n	800e0ea <_dtoa_r+0x31a>
 800e06e:	6041      	str	r1, [r0, #4]
 800e070:	4620      	mov	r0, r4
 800e072:	f000 fceb 	bl	800ea4c <_Balloc>
 800e076:	9000      	str	r0, [sp, #0]
 800e078:	2800      	cmp	r0, #0
 800e07a:	d139      	bne.n	800e0f0 <_dtoa_r+0x320>
 800e07c:	4b16      	ldr	r3, [pc, #88]	; (800e0d8 <_dtoa_r+0x308>)
 800e07e:	4602      	mov	r2, r0
 800e080:	f240 11af 	movw	r1, #431	; 0x1af
 800e084:	e6bd      	b.n	800de02 <_dtoa_r+0x32>
 800e086:	2301      	movs	r3, #1
 800e088:	e7e1      	b.n	800e04e <_dtoa_r+0x27e>
 800e08a:	2501      	movs	r5, #1
 800e08c:	2300      	movs	r3, #0
 800e08e:	9307      	str	r3, [sp, #28]
 800e090:	9509      	str	r5, [sp, #36]	; 0x24
 800e092:	f04f 33ff 	mov.w	r3, #4294967295
 800e096:	9301      	str	r3, [sp, #4]
 800e098:	9304      	str	r3, [sp, #16]
 800e09a:	2200      	movs	r2, #0
 800e09c:	2312      	movs	r3, #18
 800e09e:	e7d1      	b.n	800e044 <_dtoa_r+0x274>
 800e0a0:	636f4361 	.word	0x636f4361
 800e0a4:	3fd287a7 	.word	0x3fd287a7
 800e0a8:	8b60c8b3 	.word	0x8b60c8b3
 800e0ac:	3fc68a28 	.word	0x3fc68a28
 800e0b0:	509f79fb 	.word	0x509f79fb
 800e0b4:	3fd34413 	.word	0x3fd34413
 800e0b8:	08018315 	.word	0x08018315
 800e0bc:	0801832c 	.word	0x0801832c
 800e0c0:	7ff00000 	.word	0x7ff00000
 800e0c4:	08018311 	.word	0x08018311
 800e0c8:	08018308 	.word	0x08018308
 800e0cc:	080182e5 	.word	0x080182e5
 800e0d0:	3ff80000 	.word	0x3ff80000
 800e0d4:	08018418 	.word	0x08018418
 800e0d8:	08018384 	.word	0x08018384
 800e0dc:	2301      	movs	r3, #1
 800e0de:	9309      	str	r3, [sp, #36]	; 0x24
 800e0e0:	e7d7      	b.n	800e092 <_dtoa_r+0x2c2>
 800e0e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0e4:	9301      	str	r3, [sp, #4]
 800e0e6:	9304      	str	r3, [sp, #16]
 800e0e8:	e7ba      	b.n	800e060 <_dtoa_r+0x290>
 800e0ea:	3101      	adds	r1, #1
 800e0ec:	0052      	lsls	r2, r2, #1
 800e0ee:	e7ba      	b.n	800e066 <_dtoa_r+0x296>
 800e0f0:	69e3      	ldr	r3, [r4, #28]
 800e0f2:	9a00      	ldr	r2, [sp, #0]
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	9b04      	ldr	r3, [sp, #16]
 800e0f8:	2b0e      	cmp	r3, #14
 800e0fa:	f200 80a8 	bhi.w	800e24e <_dtoa_r+0x47e>
 800e0fe:	2d00      	cmp	r5, #0
 800e100:	f000 80a5 	beq.w	800e24e <_dtoa_r+0x47e>
 800e104:	f1bb 0f00 	cmp.w	fp, #0
 800e108:	dd38      	ble.n	800e17c <_dtoa_r+0x3ac>
 800e10a:	4bc0      	ldr	r3, [pc, #768]	; (800e40c <_dtoa_r+0x63c>)
 800e10c:	f00b 020f 	and.w	r2, fp, #15
 800e110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e114:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e118:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e11c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e120:	d019      	beq.n	800e156 <_dtoa_r+0x386>
 800e122:	4bbb      	ldr	r3, [pc, #748]	; (800e410 <_dtoa_r+0x640>)
 800e124:	ec51 0b18 	vmov	r0, r1, d8
 800e128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e12c:	f7f2 fba6 	bl	800087c <__aeabi_ddiv>
 800e130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e134:	f008 080f 	and.w	r8, r8, #15
 800e138:	2503      	movs	r5, #3
 800e13a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e410 <_dtoa_r+0x640>
 800e13e:	f1b8 0f00 	cmp.w	r8, #0
 800e142:	d10a      	bne.n	800e15a <_dtoa_r+0x38a>
 800e144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e148:	4632      	mov	r2, r6
 800e14a:	463b      	mov	r3, r7
 800e14c:	f7f2 fb96 	bl	800087c <__aeabi_ddiv>
 800e150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e154:	e02b      	b.n	800e1ae <_dtoa_r+0x3de>
 800e156:	2502      	movs	r5, #2
 800e158:	e7ef      	b.n	800e13a <_dtoa_r+0x36a>
 800e15a:	f018 0f01 	tst.w	r8, #1
 800e15e:	d008      	beq.n	800e172 <_dtoa_r+0x3a2>
 800e160:	4630      	mov	r0, r6
 800e162:	4639      	mov	r1, r7
 800e164:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e168:	f7f2 fa5e 	bl	8000628 <__aeabi_dmul>
 800e16c:	3501      	adds	r5, #1
 800e16e:	4606      	mov	r6, r0
 800e170:	460f      	mov	r7, r1
 800e172:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e176:	f109 0908 	add.w	r9, r9, #8
 800e17a:	e7e0      	b.n	800e13e <_dtoa_r+0x36e>
 800e17c:	f000 809f 	beq.w	800e2be <_dtoa_r+0x4ee>
 800e180:	f1cb 0600 	rsb	r6, fp, #0
 800e184:	4ba1      	ldr	r3, [pc, #644]	; (800e40c <_dtoa_r+0x63c>)
 800e186:	4fa2      	ldr	r7, [pc, #648]	; (800e410 <_dtoa_r+0x640>)
 800e188:	f006 020f 	and.w	r2, r6, #15
 800e18c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e194:	ec51 0b18 	vmov	r0, r1, d8
 800e198:	f7f2 fa46 	bl	8000628 <__aeabi_dmul>
 800e19c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1a0:	1136      	asrs	r6, r6, #4
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	2502      	movs	r5, #2
 800e1a6:	2e00      	cmp	r6, #0
 800e1a8:	d17e      	bne.n	800e2a8 <_dtoa_r+0x4d8>
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d1d0      	bne.n	800e150 <_dtoa_r+0x380>
 800e1ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	f000 8084 	beq.w	800e2c2 <_dtoa_r+0x4f2>
 800e1ba:	4b96      	ldr	r3, [pc, #600]	; (800e414 <_dtoa_r+0x644>)
 800e1bc:	2200      	movs	r2, #0
 800e1be:	4640      	mov	r0, r8
 800e1c0:	4649      	mov	r1, r9
 800e1c2:	f7f2 fca3 	bl	8000b0c <__aeabi_dcmplt>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	d07b      	beq.n	800e2c2 <_dtoa_r+0x4f2>
 800e1ca:	9b04      	ldr	r3, [sp, #16]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d078      	beq.n	800e2c2 <_dtoa_r+0x4f2>
 800e1d0:	9b01      	ldr	r3, [sp, #4]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	dd39      	ble.n	800e24a <_dtoa_r+0x47a>
 800e1d6:	4b90      	ldr	r3, [pc, #576]	; (800e418 <_dtoa_r+0x648>)
 800e1d8:	2200      	movs	r2, #0
 800e1da:	4640      	mov	r0, r8
 800e1dc:	4649      	mov	r1, r9
 800e1de:	f7f2 fa23 	bl	8000628 <__aeabi_dmul>
 800e1e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1e6:	9e01      	ldr	r6, [sp, #4]
 800e1e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e1ec:	3501      	adds	r5, #1
 800e1ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e1f2:	4628      	mov	r0, r5
 800e1f4:	f7f2 f9ae 	bl	8000554 <__aeabi_i2d>
 800e1f8:	4642      	mov	r2, r8
 800e1fa:	464b      	mov	r3, r9
 800e1fc:	f7f2 fa14 	bl	8000628 <__aeabi_dmul>
 800e200:	4b86      	ldr	r3, [pc, #536]	; (800e41c <_dtoa_r+0x64c>)
 800e202:	2200      	movs	r2, #0
 800e204:	f7f2 f85a 	bl	80002bc <__adddf3>
 800e208:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e20c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e210:	9303      	str	r3, [sp, #12]
 800e212:	2e00      	cmp	r6, #0
 800e214:	d158      	bne.n	800e2c8 <_dtoa_r+0x4f8>
 800e216:	4b82      	ldr	r3, [pc, #520]	; (800e420 <_dtoa_r+0x650>)
 800e218:	2200      	movs	r2, #0
 800e21a:	4640      	mov	r0, r8
 800e21c:	4649      	mov	r1, r9
 800e21e:	f7f2 f84b 	bl	80002b8 <__aeabi_dsub>
 800e222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e226:	4680      	mov	r8, r0
 800e228:	4689      	mov	r9, r1
 800e22a:	f7f2 fc8d 	bl	8000b48 <__aeabi_dcmpgt>
 800e22e:	2800      	cmp	r0, #0
 800e230:	f040 8296 	bne.w	800e760 <_dtoa_r+0x990>
 800e234:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e238:	4640      	mov	r0, r8
 800e23a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e23e:	4649      	mov	r1, r9
 800e240:	f7f2 fc64 	bl	8000b0c <__aeabi_dcmplt>
 800e244:	2800      	cmp	r0, #0
 800e246:	f040 8289 	bne.w	800e75c <_dtoa_r+0x98c>
 800e24a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e24e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e250:	2b00      	cmp	r3, #0
 800e252:	f2c0 814e 	blt.w	800e4f2 <_dtoa_r+0x722>
 800e256:	f1bb 0f0e 	cmp.w	fp, #14
 800e25a:	f300 814a 	bgt.w	800e4f2 <_dtoa_r+0x722>
 800e25e:	4b6b      	ldr	r3, [pc, #428]	; (800e40c <_dtoa_r+0x63c>)
 800e260:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e264:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	f280 80dc 	bge.w	800e428 <_dtoa_r+0x658>
 800e270:	9b04      	ldr	r3, [sp, #16]
 800e272:	2b00      	cmp	r3, #0
 800e274:	f300 80d8 	bgt.w	800e428 <_dtoa_r+0x658>
 800e278:	f040 826f 	bne.w	800e75a <_dtoa_r+0x98a>
 800e27c:	4b68      	ldr	r3, [pc, #416]	; (800e420 <_dtoa_r+0x650>)
 800e27e:	2200      	movs	r2, #0
 800e280:	4640      	mov	r0, r8
 800e282:	4649      	mov	r1, r9
 800e284:	f7f2 f9d0 	bl	8000628 <__aeabi_dmul>
 800e288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e28c:	f7f2 fc52 	bl	8000b34 <__aeabi_dcmpge>
 800e290:	9e04      	ldr	r6, [sp, #16]
 800e292:	4637      	mov	r7, r6
 800e294:	2800      	cmp	r0, #0
 800e296:	f040 8245 	bne.w	800e724 <_dtoa_r+0x954>
 800e29a:	9d00      	ldr	r5, [sp, #0]
 800e29c:	2331      	movs	r3, #49	; 0x31
 800e29e:	f805 3b01 	strb.w	r3, [r5], #1
 800e2a2:	f10b 0b01 	add.w	fp, fp, #1
 800e2a6:	e241      	b.n	800e72c <_dtoa_r+0x95c>
 800e2a8:	07f2      	lsls	r2, r6, #31
 800e2aa:	d505      	bpl.n	800e2b8 <_dtoa_r+0x4e8>
 800e2ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2b0:	f7f2 f9ba 	bl	8000628 <__aeabi_dmul>
 800e2b4:	3501      	adds	r5, #1
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	1076      	asrs	r6, r6, #1
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	e773      	b.n	800e1a6 <_dtoa_r+0x3d6>
 800e2be:	2502      	movs	r5, #2
 800e2c0:	e775      	b.n	800e1ae <_dtoa_r+0x3de>
 800e2c2:	9e04      	ldr	r6, [sp, #16]
 800e2c4:	465f      	mov	r7, fp
 800e2c6:	e792      	b.n	800e1ee <_dtoa_r+0x41e>
 800e2c8:	9900      	ldr	r1, [sp, #0]
 800e2ca:	4b50      	ldr	r3, [pc, #320]	; (800e40c <_dtoa_r+0x63c>)
 800e2cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2d0:	4431      	add	r1, r6
 800e2d2:	9102      	str	r1, [sp, #8]
 800e2d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e2d6:	eeb0 9a47 	vmov.f32	s18, s14
 800e2da:	eef0 9a67 	vmov.f32	s19, s15
 800e2de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e2e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e2e6:	2900      	cmp	r1, #0
 800e2e8:	d044      	beq.n	800e374 <_dtoa_r+0x5a4>
 800e2ea:	494e      	ldr	r1, [pc, #312]	; (800e424 <_dtoa_r+0x654>)
 800e2ec:	2000      	movs	r0, #0
 800e2ee:	f7f2 fac5 	bl	800087c <__aeabi_ddiv>
 800e2f2:	ec53 2b19 	vmov	r2, r3, d9
 800e2f6:	f7f1 ffdf 	bl	80002b8 <__aeabi_dsub>
 800e2fa:	9d00      	ldr	r5, [sp, #0]
 800e2fc:	ec41 0b19 	vmov	d9, r0, r1
 800e300:	4649      	mov	r1, r9
 800e302:	4640      	mov	r0, r8
 800e304:	f7f2 fc40 	bl	8000b88 <__aeabi_d2iz>
 800e308:	4606      	mov	r6, r0
 800e30a:	f7f2 f923 	bl	8000554 <__aeabi_i2d>
 800e30e:	4602      	mov	r2, r0
 800e310:	460b      	mov	r3, r1
 800e312:	4640      	mov	r0, r8
 800e314:	4649      	mov	r1, r9
 800e316:	f7f1 ffcf 	bl	80002b8 <__aeabi_dsub>
 800e31a:	3630      	adds	r6, #48	; 0x30
 800e31c:	f805 6b01 	strb.w	r6, [r5], #1
 800e320:	ec53 2b19 	vmov	r2, r3, d9
 800e324:	4680      	mov	r8, r0
 800e326:	4689      	mov	r9, r1
 800e328:	f7f2 fbf0 	bl	8000b0c <__aeabi_dcmplt>
 800e32c:	2800      	cmp	r0, #0
 800e32e:	d164      	bne.n	800e3fa <_dtoa_r+0x62a>
 800e330:	4642      	mov	r2, r8
 800e332:	464b      	mov	r3, r9
 800e334:	4937      	ldr	r1, [pc, #220]	; (800e414 <_dtoa_r+0x644>)
 800e336:	2000      	movs	r0, #0
 800e338:	f7f1 ffbe 	bl	80002b8 <__aeabi_dsub>
 800e33c:	ec53 2b19 	vmov	r2, r3, d9
 800e340:	f7f2 fbe4 	bl	8000b0c <__aeabi_dcmplt>
 800e344:	2800      	cmp	r0, #0
 800e346:	f040 80b6 	bne.w	800e4b6 <_dtoa_r+0x6e6>
 800e34a:	9b02      	ldr	r3, [sp, #8]
 800e34c:	429d      	cmp	r5, r3
 800e34e:	f43f af7c 	beq.w	800e24a <_dtoa_r+0x47a>
 800e352:	4b31      	ldr	r3, [pc, #196]	; (800e418 <_dtoa_r+0x648>)
 800e354:	ec51 0b19 	vmov	r0, r1, d9
 800e358:	2200      	movs	r2, #0
 800e35a:	f7f2 f965 	bl	8000628 <__aeabi_dmul>
 800e35e:	4b2e      	ldr	r3, [pc, #184]	; (800e418 <_dtoa_r+0x648>)
 800e360:	ec41 0b19 	vmov	d9, r0, r1
 800e364:	2200      	movs	r2, #0
 800e366:	4640      	mov	r0, r8
 800e368:	4649      	mov	r1, r9
 800e36a:	f7f2 f95d 	bl	8000628 <__aeabi_dmul>
 800e36e:	4680      	mov	r8, r0
 800e370:	4689      	mov	r9, r1
 800e372:	e7c5      	b.n	800e300 <_dtoa_r+0x530>
 800e374:	ec51 0b17 	vmov	r0, r1, d7
 800e378:	f7f2 f956 	bl	8000628 <__aeabi_dmul>
 800e37c:	9b02      	ldr	r3, [sp, #8]
 800e37e:	9d00      	ldr	r5, [sp, #0]
 800e380:	930f      	str	r3, [sp, #60]	; 0x3c
 800e382:	ec41 0b19 	vmov	d9, r0, r1
 800e386:	4649      	mov	r1, r9
 800e388:	4640      	mov	r0, r8
 800e38a:	f7f2 fbfd 	bl	8000b88 <__aeabi_d2iz>
 800e38e:	4606      	mov	r6, r0
 800e390:	f7f2 f8e0 	bl	8000554 <__aeabi_i2d>
 800e394:	3630      	adds	r6, #48	; 0x30
 800e396:	4602      	mov	r2, r0
 800e398:	460b      	mov	r3, r1
 800e39a:	4640      	mov	r0, r8
 800e39c:	4649      	mov	r1, r9
 800e39e:	f7f1 ff8b 	bl	80002b8 <__aeabi_dsub>
 800e3a2:	f805 6b01 	strb.w	r6, [r5], #1
 800e3a6:	9b02      	ldr	r3, [sp, #8]
 800e3a8:	429d      	cmp	r5, r3
 800e3aa:	4680      	mov	r8, r0
 800e3ac:	4689      	mov	r9, r1
 800e3ae:	f04f 0200 	mov.w	r2, #0
 800e3b2:	d124      	bne.n	800e3fe <_dtoa_r+0x62e>
 800e3b4:	4b1b      	ldr	r3, [pc, #108]	; (800e424 <_dtoa_r+0x654>)
 800e3b6:	ec51 0b19 	vmov	r0, r1, d9
 800e3ba:	f7f1 ff7f 	bl	80002bc <__adddf3>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	4640      	mov	r0, r8
 800e3c4:	4649      	mov	r1, r9
 800e3c6:	f7f2 fbbf 	bl	8000b48 <__aeabi_dcmpgt>
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	d173      	bne.n	800e4b6 <_dtoa_r+0x6e6>
 800e3ce:	ec53 2b19 	vmov	r2, r3, d9
 800e3d2:	4914      	ldr	r1, [pc, #80]	; (800e424 <_dtoa_r+0x654>)
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	f7f1 ff6f 	bl	80002b8 <__aeabi_dsub>
 800e3da:	4602      	mov	r2, r0
 800e3dc:	460b      	mov	r3, r1
 800e3de:	4640      	mov	r0, r8
 800e3e0:	4649      	mov	r1, r9
 800e3e2:	f7f2 fb93 	bl	8000b0c <__aeabi_dcmplt>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	f43f af2f 	beq.w	800e24a <_dtoa_r+0x47a>
 800e3ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e3ee:	1e6b      	subs	r3, r5, #1
 800e3f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e3f6:	2b30      	cmp	r3, #48	; 0x30
 800e3f8:	d0f8      	beq.n	800e3ec <_dtoa_r+0x61c>
 800e3fa:	46bb      	mov	fp, r7
 800e3fc:	e04a      	b.n	800e494 <_dtoa_r+0x6c4>
 800e3fe:	4b06      	ldr	r3, [pc, #24]	; (800e418 <_dtoa_r+0x648>)
 800e400:	f7f2 f912 	bl	8000628 <__aeabi_dmul>
 800e404:	4680      	mov	r8, r0
 800e406:	4689      	mov	r9, r1
 800e408:	e7bd      	b.n	800e386 <_dtoa_r+0x5b6>
 800e40a:	bf00      	nop
 800e40c:	08018418 	.word	0x08018418
 800e410:	080183f0 	.word	0x080183f0
 800e414:	3ff00000 	.word	0x3ff00000
 800e418:	40240000 	.word	0x40240000
 800e41c:	401c0000 	.word	0x401c0000
 800e420:	40140000 	.word	0x40140000
 800e424:	3fe00000 	.word	0x3fe00000
 800e428:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e42c:	9d00      	ldr	r5, [sp, #0]
 800e42e:	4642      	mov	r2, r8
 800e430:	464b      	mov	r3, r9
 800e432:	4630      	mov	r0, r6
 800e434:	4639      	mov	r1, r7
 800e436:	f7f2 fa21 	bl	800087c <__aeabi_ddiv>
 800e43a:	f7f2 fba5 	bl	8000b88 <__aeabi_d2iz>
 800e43e:	9001      	str	r0, [sp, #4]
 800e440:	f7f2 f888 	bl	8000554 <__aeabi_i2d>
 800e444:	4642      	mov	r2, r8
 800e446:	464b      	mov	r3, r9
 800e448:	f7f2 f8ee 	bl	8000628 <__aeabi_dmul>
 800e44c:	4602      	mov	r2, r0
 800e44e:	460b      	mov	r3, r1
 800e450:	4630      	mov	r0, r6
 800e452:	4639      	mov	r1, r7
 800e454:	f7f1 ff30 	bl	80002b8 <__aeabi_dsub>
 800e458:	9e01      	ldr	r6, [sp, #4]
 800e45a:	9f04      	ldr	r7, [sp, #16]
 800e45c:	3630      	adds	r6, #48	; 0x30
 800e45e:	f805 6b01 	strb.w	r6, [r5], #1
 800e462:	9e00      	ldr	r6, [sp, #0]
 800e464:	1bae      	subs	r6, r5, r6
 800e466:	42b7      	cmp	r7, r6
 800e468:	4602      	mov	r2, r0
 800e46a:	460b      	mov	r3, r1
 800e46c:	d134      	bne.n	800e4d8 <_dtoa_r+0x708>
 800e46e:	f7f1 ff25 	bl	80002bc <__adddf3>
 800e472:	4642      	mov	r2, r8
 800e474:	464b      	mov	r3, r9
 800e476:	4606      	mov	r6, r0
 800e478:	460f      	mov	r7, r1
 800e47a:	f7f2 fb65 	bl	8000b48 <__aeabi_dcmpgt>
 800e47e:	b9c8      	cbnz	r0, 800e4b4 <_dtoa_r+0x6e4>
 800e480:	4642      	mov	r2, r8
 800e482:	464b      	mov	r3, r9
 800e484:	4630      	mov	r0, r6
 800e486:	4639      	mov	r1, r7
 800e488:	f7f2 fb36 	bl	8000af8 <__aeabi_dcmpeq>
 800e48c:	b110      	cbz	r0, 800e494 <_dtoa_r+0x6c4>
 800e48e:	9b01      	ldr	r3, [sp, #4]
 800e490:	07db      	lsls	r3, r3, #31
 800e492:	d40f      	bmi.n	800e4b4 <_dtoa_r+0x6e4>
 800e494:	4651      	mov	r1, sl
 800e496:	4620      	mov	r0, r4
 800e498:	f000 fb18 	bl	800eacc <_Bfree>
 800e49c:	2300      	movs	r3, #0
 800e49e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4a0:	702b      	strb	r3, [r5, #0]
 800e4a2:	f10b 0301 	add.w	r3, fp, #1
 800e4a6:	6013      	str	r3, [r2, #0]
 800e4a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f43f ace2 	beq.w	800de74 <_dtoa_r+0xa4>
 800e4b0:	601d      	str	r5, [r3, #0]
 800e4b2:	e4df      	b.n	800de74 <_dtoa_r+0xa4>
 800e4b4:	465f      	mov	r7, fp
 800e4b6:	462b      	mov	r3, r5
 800e4b8:	461d      	mov	r5, r3
 800e4ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e4be:	2a39      	cmp	r2, #57	; 0x39
 800e4c0:	d106      	bne.n	800e4d0 <_dtoa_r+0x700>
 800e4c2:	9a00      	ldr	r2, [sp, #0]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d1f7      	bne.n	800e4b8 <_dtoa_r+0x6e8>
 800e4c8:	9900      	ldr	r1, [sp, #0]
 800e4ca:	2230      	movs	r2, #48	; 0x30
 800e4cc:	3701      	adds	r7, #1
 800e4ce:	700a      	strb	r2, [r1, #0]
 800e4d0:	781a      	ldrb	r2, [r3, #0]
 800e4d2:	3201      	adds	r2, #1
 800e4d4:	701a      	strb	r2, [r3, #0]
 800e4d6:	e790      	b.n	800e3fa <_dtoa_r+0x62a>
 800e4d8:	4ba3      	ldr	r3, [pc, #652]	; (800e768 <_dtoa_r+0x998>)
 800e4da:	2200      	movs	r2, #0
 800e4dc:	f7f2 f8a4 	bl	8000628 <__aeabi_dmul>
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	4606      	mov	r6, r0
 800e4e6:	460f      	mov	r7, r1
 800e4e8:	f7f2 fb06 	bl	8000af8 <__aeabi_dcmpeq>
 800e4ec:	2800      	cmp	r0, #0
 800e4ee:	d09e      	beq.n	800e42e <_dtoa_r+0x65e>
 800e4f0:	e7d0      	b.n	800e494 <_dtoa_r+0x6c4>
 800e4f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4f4:	2a00      	cmp	r2, #0
 800e4f6:	f000 80ca 	beq.w	800e68e <_dtoa_r+0x8be>
 800e4fa:	9a07      	ldr	r2, [sp, #28]
 800e4fc:	2a01      	cmp	r2, #1
 800e4fe:	f300 80ad 	bgt.w	800e65c <_dtoa_r+0x88c>
 800e502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e504:	2a00      	cmp	r2, #0
 800e506:	f000 80a5 	beq.w	800e654 <_dtoa_r+0x884>
 800e50a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e50e:	9e08      	ldr	r6, [sp, #32]
 800e510:	9d05      	ldr	r5, [sp, #20]
 800e512:	9a05      	ldr	r2, [sp, #20]
 800e514:	441a      	add	r2, r3
 800e516:	9205      	str	r2, [sp, #20]
 800e518:	9a06      	ldr	r2, [sp, #24]
 800e51a:	2101      	movs	r1, #1
 800e51c:	441a      	add	r2, r3
 800e51e:	4620      	mov	r0, r4
 800e520:	9206      	str	r2, [sp, #24]
 800e522:	f000 fb89 	bl	800ec38 <__i2b>
 800e526:	4607      	mov	r7, r0
 800e528:	b165      	cbz	r5, 800e544 <_dtoa_r+0x774>
 800e52a:	9b06      	ldr	r3, [sp, #24]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	dd09      	ble.n	800e544 <_dtoa_r+0x774>
 800e530:	42ab      	cmp	r3, r5
 800e532:	9a05      	ldr	r2, [sp, #20]
 800e534:	bfa8      	it	ge
 800e536:	462b      	movge	r3, r5
 800e538:	1ad2      	subs	r2, r2, r3
 800e53a:	9205      	str	r2, [sp, #20]
 800e53c:	9a06      	ldr	r2, [sp, #24]
 800e53e:	1aed      	subs	r5, r5, r3
 800e540:	1ad3      	subs	r3, r2, r3
 800e542:	9306      	str	r3, [sp, #24]
 800e544:	9b08      	ldr	r3, [sp, #32]
 800e546:	b1f3      	cbz	r3, 800e586 <_dtoa_r+0x7b6>
 800e548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	f000 80a3 	beq.w	800e696 <_dtoa_r+0x8c6>
 800e550:	2e00      	cmp	r6, #0
 800e552:	dd10      	ble.n	800e576 <_dtoa_r+0x7a6>
 800e554:	4639      	mov	r1, r7
 800e556:	4632      	mov	r2, r6
 800e558:	4620      	mov	r0, r4
 800e55a:	f000 fc2d 	bl	800edb8 <__pow5mult>
 800e55e:	4652      	mov	r2, sl
 800e560:	4601      	mov	r1, r0
 800e562:	4607      	mov	r7, r0
 800e564:	4620      	mov	r0, r4
 800e566:	f000 fb7d 	bl	800ec64 <__multiply>
 800e56a:	4651      	mov	r1, sl
 800e56c:	4680      	mov	r8, r0
 800e56e:	4620      	mov	r0, r4
 800e570:	f000 faac 	bl	800eacc <_Bfree>
 800e574:	46c2      	mov	sl, r8
 800e576:	9b08      	ldr	r3, [sp, #32]
 800e578:	1b9a      	subs	r2, r3, r6
 800e57a:	d004      	beq.n	800e586 <_dtoa_r+0x7b6>
 800e57c:	4651      	mov	r1, sl
 800e57e:	4620      	mov	r0, r4
 800e580:	f000 fc1a 	bl	800edb8 <__pow5mult>
 800e584:	4682      	mov	sl, r0
 800e586:	2101      	movs	r1, #1
 800e588:	4620      	mov	r0, r4
 800e58a:	f000 fb55 	bl	800ec38 <__i2b>
 800e58e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e590:	2b00      	cmp	r3, #0
 800e592:	4606      	mov	r6, r0
 800e594:	f340 8081 	ble.w	800e69a <_dtoa_r+0x8ca>
 800e598:	461a      	mov	r2, r3
 800e59a:	4601      	mov	r1, r0
 800e59c:	4620      	mov	r0, r4
 800e59e:	f000 fc0b 	bl	800edb8 <__pow5mult>
 800e5a2:	9b07      	ldr	r3, [sp, #28]
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	4606      	mov	r6, r0
 800e5a8:	dd7a      	ble.n	800e6a0 <_dtoa_r+0x8d0>
 800e5aa:	f04f 0800 	mov.w	r8, #0
 800e5ae:	6933      	ldr	r3, [r6, #16]
 800e5b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e5b4:	6918      	ldr	r0, [r3, #16]
 800e5b6:	f000 faf1 	bl	800eb9c <__hi0bits>
 800e5ba:	f1c0 0020 	rsb	r0, r0, #32
 800e5be:	9b06      	ldr	r3, [sp, #24]
 800e5c0:	4418      	add	r0, r3
 800e5c2:	f010 001f 	ands.w	r0, r0, #31
 800e5c6:	f000 8094 	beq.w	800e6f2 <_dtoa_r+0x922>
 800e5ca:	f1c0 0320 	rsb	r3, r0, #32
 800e5ce:	2b04      	cmp	r3, #4
 800e5d0:	f340 8085 	ble.w	800e6de <_dtoa_r+0x90e>
 800e5d4:	9b05      	ldr	r3, [sp, #20]
 800e5d6:	f1c0 001c 	rsb	r0, r0, #28
 800e5da:	4403      	add	r3, r0
 800e5dc:	9305      	str	r3, [sp, #20]
 800e5de:	9b06      	ldr	r3, [sp, #24]
 800e5e0:	4403      	add	r3, r0
 800e5e2:	4405      	add	r5, r0
 800e5e4:	9306      	str	r3, [sp, #24]
 800e5e6:	9b05      	ldr	r3, [sp, #20]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	dd05      	ble.n	800e5f8 <_dtoa_r+0x828>
 800e5ec:	4651      	mov	r1, sl
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	f000 fc3b 	bl	800ee6c <__lshift>
 800e5f6:	4682      	mov	sl, r0
 800e5f8:	9b06      	ldr	r3, [sp, #24]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	dd05      	ble.n	800e60a <_dtoa_r+0x83a>
 800e5fe:	4631      	mov	r1, r6
 800e600:	461a      	mov	r2, r3
 800e602:	4620      	mov	r0, r4
 800e604:	f000 fc32 	bl	800ee6c <__lshift>
 800e608:	4606      	mov	r6, r0
 800e60a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d072      	beq.n	800e6f6 <_dtoa_r+0x926>
 800e610:	4631      	mov	r1, r6
 800e612:	4650      	mov	r0, sl
 800e614:	f000 fc96 	bl	800ef44 <__mcmp>
 800e618:	2800      	cmp	r0, #0
 800e61a:	da6c      	bge.n	800e6f6 <_dtoa_r+0x926>
 800e61c:	2300      	movs	r3, #0
 800e61e:	4651      	mov	r1, sl
 800e620:	220a      	movs	r2, #10
 800e622:	4620      	mov	r0, r4
 800e624:	f000 fa74 	bl	800eb10 <__multadd>
 800e628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e62a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e62e:	4682      	mov	sl, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	f000 81b0 	beq.w	800e996 <_dtoa_r+0xbc6>
 800e636:	2300      	movs	r3, #0
 800e638:	4639      	mov	r1, r7
 800e63a:	220a      	movs	r2, #10
 800e63c:	4620      	mov	r0, r4
 800e63e:	f000 fa67 	bl	800eb10 <__multadd>
 800e642:	9b01      	ldr	r3, [sp, #4]
 800e644:	2b00      	cmp	r3, #0
 800e646:	4607      	mov	r7, r0
 800e648:	f300 8096 	bgt.w	800e778 <_dtoa_r+0x9a8>
 800e64c:	9b07      	ldr	r3, [sp, #28]
 800e64e:	2b02      	cmp	r3, #2
 800e650:	dc59      	bgt.n	800e706 <_dtoa_r+0x936>
 800e652:	e091      	b.n	800e778 <_dtoa_r+0x9a8>
 800e654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e656:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e65a:	e758      	b.n	800e50e <_dtoa_r+0x73e>
 800e65c:	9b04      	ldr	r3, [sp, #16]
 800e65e:	1e5e      	subs	r6, r3, #1
 800e660:	9b08      	ldr	r3, [sp, #32]
 800e662:	42b3      	cmp	r3, r6
 800e664:	bfbf      	itttt	lt
 800e666:	9b08      	ldrlt	r3, [sp, #32]
 800e668:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e66a:	9608      	strlt	r6, [sp, #32]
 800e66c:	1af3      	sublt	r3, r6, r3
 800e66e:	bfb4      	ite	lt
 800e670:	18d2      	addlt	r2, r2, r3
 800e672:	1b9e      	subge	r6, r3, r6
 800e674:	9b04      	ldr	r3, [sp, #16]
 800e676:	bfbc      	itt	lt
 800e678:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e67a:	2600      	movlt	r6, #0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	bfb7      	itett	lt
 800e680:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e684:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e688:	1a9d      	sublt	r5, r3, r2
 800e68a:	2300      	movlt	r3, #0
 800e68c:	e741      	b.n	800e512 <_dtoa_r+0x742>
 800e68e:	9e08      	ldr	r6, [sp, #32]
 800e690:	9d05      	ldr	r5, [sp, #20]
 800e692:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e694:	e748      	b.n	800e528 <_dtoa_r+0x758>
 800e696:	9a08      	ldr	r2, [sp, #32]
 800e698:	e770      	b.n	800e57c <_dtoa_r+0x7ac>
 800e69a:	9b07      	ldr	r3, [sp, #28]
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	dc19      	bgt.n	800e6d4 <_dtoa_r+0x904>
 800e6a0:	9b02      	ldr	r3, [sp, #8]
 800e6a2:	b9bb      	cbnz	r3, 800e6d4 <_dtoa_r+0x904>
 800e6a4:	9b03      	ldr	r3, [sp, #12]
 800e6a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6aa:	b99b      	cbnz	r3, 800e6d4 <_dtoa_r+0x904>
 800e6ac:	9b03      	ldr	r3, [sp, #12]
 800e6ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6b2:	0d1b      	lsrs	r3, r3, #20
 800e6b4:	051b      	lsls	r3, r3, #20
 800e6b6:	b183      	cbz	r3, 800e6da <_dtoa_r+0x90a>
 800e6b8:	9b05      	ldr	r3, [sp, #20]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	9305      	str	r3, [sp, #20]
 800e6be:	9b06      	ldr	r3, [sp, #24]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	9306      	str	r3, [sp, #24]
 800e6c4:	f04f 0801 	mov.w	r8, #1
 800e6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	f47f af6f 	bne.w	800e5ae <_dtoa_r+0x7de>
 800e6d0:	2001      	movs	r0, #1
 800e6d2:	e774      	b.n	800e5be <_dtoa_r+0x7ee>
 800e6d4:	f04f 0800 	mov.w	r8, #0
 800e6d8:	e7f6      	b.n	800e6c8 <_dtoa_r+0x8f8>
 800e6da:	4698      	mov	r8, r3
 800e6dc:	e7f4      	b.n	800e6c8 <_dtoa_r+0x8f8>
 800e6de:	d082      	beq.n	800e5e6 <_dtoa_r+0x816>
 800e6e0:	9a05      	ldr	r2, [sp, #20]
 800e6e2:	331c      	adds	r3, #28
 800e6e4:	441a      	add	r2, r3
 800e6e6:	9205      	str	r2, [sp, #20]
 800e6e8:	9a06      	ldr	r2, [sp, #24]
 800e6ea:	441a      	add	r2, r3
 800e6ec:	441d      	add	r5, r3
 800e6ee:	9206      	str	r2, [sp, #24]
 800e6f0:	e779      	b.n	800e5e6 <_dtoa_r+0x816>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	e7f4      	b.n	800e6e0 <_dtoa_r+0x910>
 800e6f6:	9b04      	ldr	r3, [sp, #16]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	dc37      	bgt.n	800e76c <_dtoa_r+0x99c>
 800e6fc:	9b07      	ldr	r3, [sp, #28]
 800e6fe:	2b02      	cmp	r3, #2
 800e700:	dd34      	ble.n	800e76c <_dtoa_r+0x99c>
 800e702:	9b04      	ldr	r3, [sp, #16]
 800e704:	9301      	str	r3, [sp, #4]
 800e706:	9b01      	ldr	r3, [sp, #4]
 800e708:	b963      	cbnz	r3, 800e724 <_dtoa_r+0x954>
 800e70a:	4631      	mov	r1, r6
 800e70c:	2205      	movs	r2, #5
 800e70e:	4620      	mov	r0, r4
 800e710:	f000 f9fe 	bl	800eb10 <__multadd>
 800e714:	4601      	mov	r1, r0
 800e716:	4606      	mov	r6, r0
 800e718:	4650      	mov	r0, sl
 800e71a:	f000 fc13 	bl	800ef44 <__mcmp>
 800e71e:	2800      	cmp	r0, #0
 800e720:	f73f adbb 	bgt.w	800e29a <_dtoa_r+0x4ca>
 800e724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e726:	9d00      	ldr	r5, [sp, #0]
 800e728:	ea6f 0b03 	mvn.w	fp, r3
 800e72c:	f04f 0800 	mov.w	r8, #0
 800e730:	4631      	mov	r1, r6
 800e732:	4620      	mov	r0, r4
 800e734:	f000 f9ca 	bl	800eacc <_Bfree>
 800e738:	2f00      	cmp	r7, #0
 800e73a:	f43f aeab 	beq.w	800e494 <_dtoa_r+0x6c4>
 800e73e:	f1b8 0f00 	cmp.w	r8, #0
 800e742:	d005      	beq.n	800e750 <_dtoa_r+0x980>
 800e744:	45b8      	cmp	r8, r7
 800e746:	d003      	beq.n	800e750 <_dtoa_r+0x980>
 800e748:	4641      	mov	r1, r8
 800e74a:	4620      	mov	r0, r4
 800e74c:	f000 f9be 	bl	800eacc <_Bfree>
 800e750:	4639      	mov	r1, r7
 800e752:	4620      	mov	r0, r4
 800e754:	f000 f9ba 	bl	800eacc <_Bfree>
 800e758:	e69c      	b.n	800e494 <_dtoa_r+0x6c4>
 800e75a:	2600      	movs	r6, #0
 800e75c:	4637      	mov	r7, r6
 800e75e:	e7e1      	b.n	800e724 <_dtoa_r+0x954>
 800e760:	46bb      	mov	fp, r7
 800e762:	4637      	mov	r7, r6
 800e764:	e599      	b.n	800e29a <_dtoa_r+0x4ca>
 800e766:	bf00      	nop
 800e768:	40240000 	.word	0x40240000
 800e76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f000 80c8 	beq.w	800e904 <_dtoa_r+0xb34>
 800e774:	9b04      	ldr	r3, [sp, #16]
 800e776:	9301      	str	r3, [sp, #4]
 800e778:	2d00      	cmp	r5, #0
 800e77a:	dd05      	ble.n	800e788 <_dtoa_r+0x9b8>
 800e77c:	4639      	mov	r1, r7
 800e77e:	462a      	mov	r2, r5
 800e780:	4620      	mov	r0, r4
 800e782:	f000 fb73 	bl	800ee6c <__lshift>
 800e786:	4607      	mov	r7, r0
 800e788:	f1b8 0f00 	cmp.w	r8, #0
 800e78c:	d05b      	beq.n	800e846 <_dtoa_r+0xa76>
 800e78e:	6879      	ldr	r1, [r7, #4]
 800e790:	4620      	mov	r0, r4
 800e792:	f000 f95b 	bl	800ea4c <_Balloc>
 800e796:	4605      	mov	r5, r0
 800e798:	b928      	cbnz	r0, 800e7a6 <_dtoa_r+0x9d6>
 800e79a:	4b83      	ldr	r3, [pc, #524]	; (800e9a8 <_dtoa_r+0xbd8>)
 800e79c:	4602      	mov	r2, r0
 800e79e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e7a2:	f7ff bb2e 	b.w	800de02 <_dtoa_r+0x32>
 800e7a6:	693a      	ldr	r2, [r7, #16]
 800e7a8:	3202      	adds	r2, #2
 800e7aa:	0092      	lsls	r2, r2, #2
 800e7ac:	f107 010c 	add.w	r1, r7, #12
 800e7b0:	300c      	adds	r0, #12
 800e7b2:	f000 fee7 	bl	800f584 <memcpy>
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f000 fb56 	bl	800ee6c <__lshift>
 800e7c0:	9b00      	ldr	r3, [sp, #0]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	9304      	str	r3, [sp, #16]
 800e7c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7ca:	4413      	add	r3, r2
 800e7cc:	9308      	str	r3, [sp, #32]
 800e7ce:	9b02      	ldr	r3, [sp, #8]
 800e7d0:	f003 0301 	and.w	r3, r3, #1
 800e7d4:	46b8      	mov	r8, r7
 800e7d6:	9306      	str	r3, [sp, #24]
 800e7d8:	4607      	mov	r7, r0
 800e7da:	9b04      	ldr	r3, [sp, #16]
 800e7dc:	4631      	mov	r1, r6
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	4650      	mov	r0, sl
 800e7e2:	9301      	str	r3, [sp, #4]
 800e7e4:	f7ff fa69 	bl	800dcba <quorem>
 800e7e8:	4641      	mov	r1, r8
 800e7ea:	9002      	str	r0, [sp, #8]
 800e7ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e7f0:	4650      	mov	r0, sl
 800e7f2:	f000 fba7 	bl	800ef44 <__mcmp>
 800e7f6:	463a      	mov	r2, r7
 800e7f8:	9005      	str	r0, [sp, #20]
 800e7fa:	4631      	mov	r1, r6
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f000 fbbd 	bl	800ef7c <__mdiff>
 800e802:	68c2      	ldr	r2, [r0, #12]
 800e804:	4605      	mov	r5, r0
 800e806:	bb02      	cbnz	r2, 800e84a <_dtoa_r+0xa7a>
 800e808:	4601      	mov	r1, r0
 800e80a:	4650      	mov	r0, sl
 800e80c:	f000 fb9a 	bl	800ef44 <__mcmp>
 800e810:	4602      	mov	r2, r0
 800e812:	4629      	mov	r1, r5
 800e814:	4620      	mov	r0, r4
 800e816:	9209      	str	r2, [sp, #36]	; 0x24
 800e818:	f000 f958 	bl	800eacc <_Bfree>
 800e81c:	9b07      	ldr	r3, [sp, #28]
 800e81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e820:	9d04      	ldr	r5, [sp, #16]
 800e822:	ea43 0102 	orr.w	r1, r3, r2
 800e826:	9b06      	ldr	r3, [sp, #24]
 800e828:	4319      	orrs	r1, r3
 800e82a:	d110      	bne.n	800e84e <_dtoa_r+0xa7e>
 800e82c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e830:	d029      	beq.n	800e886 <_dtoa_r+0xab6>
 800e832:	9b05      	ldr	r3, [sp, #20]
 800e834:	2b00      	cmp	r3, #0
 800e836:	dd02      	ble.n	800e83e <_dtoa_r+0xa6e>
 800e838:	9b02      	ldr	r3, [sp, #8]
 800e83a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e83e:	9b01      	ldr	r3, [sp, #4]
 800e840:	f883 9000 	strb.w	r9, [r3]
 800e844:	e774      	b.n	800e730 <_dtoa_r+0x960>
 800e846:	4638      	mov	r0, r7
 800e848:	e7ba      	b.n	800e7c0 <_dtoa_r+0x9f0>
 800e84a:	2201      	movs	r2, #1
 800e84c:	e7e1      	b.n	800e812 <_dtoa_r+0xa42>
 800e84e:	9b05      	ldr	r3, [sp, #20]
 800e850:	2b00      	cmp	r3, #0
 800e852:	db04      	blt.n	800e85e <_dtoa_r+0xa8e>
 800e854:	9907      	ldr	r1, [sp, #28]
 800e856:	430b      	orrs	r3, r1
 800e858:	9906      	ldr	r1, [sp, #24]
 800e85a:	430b      	orrs	r3, r1
 800e85c:	d120      	bne.n	800e8a0 <_dtoa_r+0xad0>
 800e85e:	2a00      	cmp	r2, #0
 800e860:	dded      	ble.n	800e83e <_dtoa_r+0xa6e>
 800e862:	4651      	mov	r1, sl
 800e864:	2201      	movs	r2, #1
 800e866:	4620      	mov	r0, r4
 800e868:	f000 fb00 	bl	800ee6c <__lshift>
 800e86c:	4631      	mov	r1, r6
 800e86e:	4682      	mov	sl, r0
 800e870:	f000 fb68 	bl	800ef44 <__mcmp>
 800e874:	2800      	cmp	r0, #0
 800e876:	dc03      	bgt.n	800e880 <_dtoa_r+0xab0>
 800e878:	d1e1      	bne.n	800e83e <_dtoa_r+0xa6e>
 800e87a:	f019 0f01 	tst.w	r9, #1
 800e87e:	d0de      	beq.n	800e83e <_dtoa_r+0xa6e>
 800e880:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e884:	d1d8      	bne.n	800e838 <_dtoa_r+0xa68>
 800e886:	9a01      	ldr	r2, [sp, #4]
 800e888:	2339      	movs	r3, #57	; 0x39
 800e88a:	7013      	strb	r3, [r2, #0]
 800e88c:	462b      	mov	r3, r5
 800e88e:	461d      	mov	r5, r3
 800e890:	3b01      	subs	r3, #1
 800e892:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e896:	2a39      	cmp	r2, #57	; 0x39
 800e898:	d06c      	beq.n	800e974 <_dtoa_r+0xba4>
 800e89a:	3201      	adds	r2, #1
 800e89c:	701a      	strb	r2, [r3, #0]
 800e89e:	e747      	b.n	800e730 <_dtoa_r+0x960>
 800e8a0:	2a00      	cmp	r2, #0
 800e8a2:	dd07      	ble.n	800e8b4 <_dtoa_r+0xae4>
 800e8a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e8a8:	d0ed      	beq.n	800e886 <_dtoa_r+0xab6>
 800e8aa:	9a01      	ldr	r2, [sp, #4]
 800e8ac:	f109 0301 	add.w	r3, r9, #1
 800e8b0:	7013      	strb	r3, [r2, #0]
 800e8b2:	e73d      	b.n	800e730 <_dtoa_r+0x960>
 800e8b4:	9b04      	ldr	r3, [sp, #16]
 800e8b6:	9a08      	ldr	r2, [sp, #32]
 800e8b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d043      	beq.n	800e948 <_dtoa_r+0xb78>
 800e8c0:	4651      	mov	r1, sl
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	220a      	movs	r2, #10
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f000 f922 	bl	800eb10 <__multadd>
 800e8cc:	45b8      	cmp	r8, r7
 800e8ce:	4682      	mov	sl, r0
 800e8d0:	f04f 0300 	mov.w	r3, #0
 800e8d4:	f04f 020a 	mov.w	r2, #10
 800e8d8:	4641      	mov	r1, r8
 800e8da:	4620      	mov	r0, r4
 800e8dc:	d107      	bne.n	800e8ee <_dtoa_r+0xb1e>
 800e8de:	f000 f917 	bl	800eb10 <__multadd>
 800e8e2:	4680      	mov	r8, r0
 800e8e4:	4607      	mov	r7, r0
 800e8e6:	9b04      	ldr	r3, [sp, #16]
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	9304      	str	r3, [sp, #16]
 800e8ec:	e775      	b.n	800e7da <_dtoa_r+0xa0a>
 800e8ee:	f000 f90f 	bl	800eb10 <__multadd>
 800e8f2:	4639      	mov	r1, r7
 800e8f4:	4680      	mov	r8, r0
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	220a      	movs	r2, #10
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	f000 f908 	bl	800eb10 <__multadd>
 800e900:	4607      	mov	r7, r0
 800e902:	e7f0      	b.n	800e8e6 <_dtoa_r+0xb16>
 800e904:	9b04      	ldr	r3, [sp, #16]
 800e906:	9301      	str	r3, [sp, #4]
 800e908:	9d00      	ldr	r5, [sp, #0]
 800e90a:	4631      	mov	r1, r6
 800e90c:	4650      	mov	r0, sl
 800e90e:	f7ff f9d4 	bl	800dcba <quorem>
 800e912:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e916:	9b00      	ldr	r3, [sp, #0]
 800e918:	f805 9b01 	strb.w	r9, [r5], #1
 800e91c:	1aea      	subs	r2, r5, r3
 800e91e:	9b01      	ldr	r3, [sp, #4]
 800e920:	4293      	cmp	r3, r2
 800e922:	dd07      	ble.n	800e934 <_dtoa_r+0xb64>
 800e924:	4651      	mov	r1, sl
 800e926:	2300      	movs	r3, #0
 800e928:	220a      	movs	r2, #10
 800e92a:	4620      	mov	r0, r4
 800e92c:	f000 f8f0 	bl	800eb10 <__multadd>
 800e930:	4682      	mov	sl, r0
 800e932:	e7ea      	b.n	800e90a <_dtoa_r+0xb3a>
 800e934:	9b01      	ldr	r3, [sp, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	bfc8      	it	gt
 800e93a:	461d      	movgt	r5, r3
 800e93c:	9b00      	ldr	r3, [sp, #0]
 800e93e:	bfd8      	it	le
 800e940:	2501      	movle	r5, #1
 800e942:	441d      	add	r5, r3
 800e944:	f04f 0800 	mov.w	r8, #0
 800e948:	4651      	mov	r1, sl
 800e94a:	2201      	movs	r2, #1
 800e94c:	4620      	mov	r0, r4
 800e94e:	f000 fa8d 	bl	800ee6c <__lshift>
 800e952:	4631      	mov	r1, r6
 800e954:	4682      	mov	sl, r0
 800e956:	f000 faf5 	bl	800ef44 <__mcmp>
 800e95a:	2800      	cmp	r0, #0
 800e95c:	dc96      	bgt.n	800e88c <_dtoa_r+0xabc>
 800e95e:	d102      	bne.n	800e966 <_dtoa_r+0xb96>
 800e960:	f019 0f01 	tst.w	r9, #1
 800e964:	d192      	bne.n	800e88c <_dtoa_r+0xabc>
 800e966:	462b      	mov	r3, r5
 800e968:	461d      	mov	r5, r3
 800e96a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e96e:	2a30      	cmp	r2, #48	; 0x30
 800e970:	d0fa      	beq.n	800e968 <_dtoa_r+0xb98>
 800e972:	e6dd      	b.n	800e730 <_dtoa_r+0x960>
 800e974:	9a00      	ldr	r2, [sp, #0]
 800e976:	429a      	cmp	r2, r3
 800e978:	d189      	bne.n	800e88e <_dtoa_r+0xabe>
 800e97a:	f10b 0b01 	add.w	fp, fp, #1
 800e97e:	2331      	movs	r3, #49	; 0x31
 800e980:	e796      	b.n	800e8b0 <_dtoa_r+0xae0>
 800e982:	4b0a      	ldr	r3, [pc, #40]	; (800e9ac <_dtoa_r+0xbdc>)
 800e984:	f7ff ba99 	b.w	800deba <_dtoa_r+0xea>
 800e988:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	f47f aa6d 	bne.w	800de6a <_dtoa_r+0x9a>
 800e990:	4b07      	ldr	r3, [pc, #28]	; (800e9b0 <_dtoa_r+0xbe0>)
 800e992:	f7ff ba92 	b.w	800deba <_dtoa_r+0xea>
 800e996:	9b01      	ldr	r3, [sp, #4]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	dcb5      	bgt.n	800e908 <_dtoa_r+0xb38>
 800e99c:	9b07      	ldr	r3, [sp, #28]
 800e99e:	2b02      	cmp	r3, #2
 800e9a0:	f73f aeb1 	bgt.w	800e706 <_dtoa_r+0x936>
 800e9a4:	e7b0      	b.n	800e908 <_dtoa_r+0xb38>
 800e9a6:	bf00      	nop
 800e9a8:	08018384 	.word	0x08018384
 800e9ac:	080182e4 	.word	0x080182e4
 800e9b0:	08018308 	.word	0x08018308

0800e9b4 <_free_r>:
 800e9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9b6:	2900      	cmp	r1, #0
 800e9b8:	d044      	beq.n	800ea44 <_free_r+0x90>
 800e9ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9be:	9001      	str	r0, [sp, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	f1a1 0404 	sub.w	r4, r1, #4
 800e9c6:	bfb8      	it	lt
 800e9c8:	18e4      	addlt	r4, r4, r3
 800e9ca:	f7fe fb17 	bl	800cffc <__malloc_lock>
 800e9ce:	4a1e      	ldr	r2, [pc, #120]	; (800ea48 <_free_r+0x94>)
 800e9d0:	9801      	ldr	r0, [sp, #4]
 800e9d2:	6813      	ldr	r3, [r2, #0]
 800e9d4:	b933      	cbnz	r3, 800e9e4 <_free_r+0x30>
 800e9d6:	6063      	str	r3, [r4, #4]
 800e9d8:	6014      	str	r4, [r2, #0]
 800e9da:	b003      	add	sp, #12
 800e9dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9e0:	f7fe bb12 	b.w	800d008 <__malloc_unlock>
 800e9e4:	42a3      	cmp	r3, r4
 800e9e6:	d908      	bls.n	800e9fa <_free_r+0x46>
 800e9e8:	6825      	ldr	r5, [r4, #0]
 800e9ea:	1961      	adds	r1, r4, r5
 800e9ec:	428b      	cmp	r3, r1
 800e9ee:	bf01      	itttt	eq
 800e9f0:	6819      	ldreq	r1, [r3, #0]
 800e9f2:	685b      	ldreq	r3, [r3, #4]
 800e9f4:	1949      	addeq	r1, r1, r5
 800e9f6:	6021      	streq	r1, [r4, #0]
 800e9f8:	e7ed      	b.n	800e9d6 <_free_r+0x22>
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	b10b      	cbz	r3, 800ea04 <_free_r+0x50>
 800ea00:	42a3      	cmp	r3, r4
 800ea02:	d9fa      	bls.n	800e9fa <_free_r+0x46>
 800ea04:	6811      	ldr	r1, [r2, #0]
 800ea06:	1855      	adds	r5, r2, r1
 800ea08:	42a5      	cmp	r5, r4
 800ea0a:	d10b      	bne.n	800ea24 <_free_r+0x70>
 800ea0c:	6824      	ldr	r4, [r4, #0]
 800ea0e:	4421      	add	r1, r4
 800ea10:	1854      	adds	r4, r2, r1
 800ea12:	42a3      	cmp	r3, r4
 800ea14:	6011      	str	r1, [r2, #0]
 800ea16:	d1e0      	bne.n	800e9da <_free_r+0x26>
 800ea18:	681c      	ldr	r4, [r3, #0]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	6053      	str	r3, [r2, #4]
 800ea1e:	440c      	add	r4, r1
 800ea20:	6014      	str	r4, [r2, #0]
 800ea22:	e7da      	b.n	800e9da <_free_r+0x26>
 800ea24:	d902      	bls.n	800ea2c <_free_r+0x78>
 800ea26:	230c      	movs	r3, #12
 800ea28:	6003      	str	r3, [r0, #0]
 800ea2a:	e7d6      	b.n	800e9da <_free_r+0x26>
 800ea2c:	6825      	ldr	r5, [r4, #0]
 800ea2e:	1961      	adds	r1, r4, r5
 800ea30:	428b      	cmp	r3, r1
 800ea32:	bf04      	itt	eq
 800ea34:	6819      	ldreq	r1, [r3, #0]
 800ea36:	685b      	ldreq	r3, [r3, #4]
 800ea38:	6063      	str	r3, [r4, #4]
 800ea3a:	bf04      	itt	eq
 800ea3c:	1949      	addeq	r1, r1, r5
 800ea3e:	6021      	streq	r1, [r4, #0]
 800ea40:	6054      	str	r4, [r2, #4]
 800ea42:	e7ca      	b.n	800e9da <_free_r+0x26>
 800ea44:	b003      	add	sp, #12
 800ea46:	bd30      	pop	{r4, r5, pc}
 800ea48:	2000284c 	.word	0x2000284c

0800ea4c <_Balloc>:
 800ea4c:	b570      	push	{r4, r5, r6, lr}
 800ea4e:	69c6      	ldr	r6, [r0, #28]
 800ea50:	4604      	mov	r4, r0
 800ea52:	460d      	mov	r5, r1
 800ea54:	b976      	cbnz	r6, 800ea74 <_Balloc+0x28>
 800ea56:	2010      	movs	r0, #16
 800ea58:	f7fe fa28 	bl	800ceac <malloc>
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	61e0      	str	r0, [r4, #28]
 800ea60:	b920      	cbnz	r0, 800ea6c <_Balloc+0x20>
 800ea62:	4b18      	ldr	r3, [pc, #96]	; (800eac4 <_Balloc+0x78>)
 800ea64:	4818      	ldr	r0, [pc, #96]	; (800eac8 <_Balloc+0x7c>)
 800ea66:	216b      	movs	r1, #107	; 0x6b
 800ea68:	f000 fd9a 	bl	800f5a0 <__assert_func>
 800ea6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea70:	6006      	str	r6, [r0, #0]
 800ea72:	60c6      	str	r6, [r0, #12]
 800ea74:	69e6      	ldr	r6, [r4, #28]
 800ea76:	68f3      	ldr	r3, [r6, #12]
 800ea78:	b183      	cbz	r3, 800ea9c <_Balloc+0x50>
 800ea7a:	69e3      	ldr	r3, [r4, #28]
 800ea7c:	68db      	ldr	r3, [r3, #12]
 800ea7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea82:	b9b8      	cbnz	r0, 800eab4 <_Balloc+0x68>
 800ea84:	2101      	movs	r1, #1
 800ea86:	fa01 f605 	lsl.w	r6, r1, r5
 800ea8a:	1d72      	adds	r2, r6, #5
 800ea8c:	0092      	lsls	r2, r2, #2
 800ea8e:	4620      	mov	r0, r4
 800ea90:	f000 fda4 	bl	800f5dc <_calloc_r>
 800ea94:	b160      	cbz	r0, 800eab0 <_Balloc+0x64>
 800ea96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea9a:	e00e      	b.n	800eaba <_Balloc+0x6e>
 800ea9c:	2221      	movs	r2, #33	; 0x21
 800ea9e:	2104      	movs	r1, #4
 800eaa0:	4620      	mov	r0, r4
 800eaa2:	f000 fd9b 	bl	800f5dc <_calloc_r>
 800eaa6:	69e3      	ldr	r3, [r4, #28]
 800eaa8:	60f0      	str	r0, [r6, #12]
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d1e4      	bne.n	800ea7a <_Balloc+0x2e>
 800eab0:	2000      	movs	r0, #0
 800eab2:	bd70      	pop	{r4, r5, r6, pc}
 800eab4:	6802      	ldr	r2, [r0, #0]
 800eab6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eaba:	2300      	movs	r3, #0
 800eabc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eac0:	e7f7      	b.n	800eab2 <_Balloc+0x66>
 800eac2:	bf00      	nop
 800eac4:	08018315 	.word	0x08018315
 800eac8:	08018395 	.word	0x08018395

0800eacc <_Bfree>:
 800eacc:	b570      	push	{r4, r5, r6, lr}
 800eace:	69c6      	ldr	r6, [r0, #28]
 800ead0:	4605      	mov	r5, r0
 800ead2:	460c      	mov	r4, r1
 800ead4:	b976      	cbnz	r6, 800eaf4 <_Bfree+0x28>
 800ead6:	2010      	movs	r0, #16
 800ead8:	f7fe f9e8 	bl	800ceac <malloc>
 800eadc:	4602      	mov	r2, r0
 800eade:	61e8      	str	r0, [r5, #28]
 800eae0:	b920      	cbnz	r0, 800eaec <_Bfree+0x20>
 800eae2:	4b09      	ldr	r3, [pc, #36]	; (800eb08 <_Bfree+0x3c>)
 800eae4:	4809      	ldr	r0, [pc, #36]	; (800eb0c <_Bfree+0x40>)
 800eae6:	218f      	movs	r1, #143	; 0x8f
 800eae8:	f000 fd5a 	bl	800f5a0 <__assert_func>
 800eaec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eaf0:	6006      	str	r6, [r0, #0]
 800eaf2:	60c6      	str	r6, [r0, #12]
 800eaf4:	b13c      	cbz	r4, 800eb06 <_Bfree+0x3a>
 800eaf6:	69eb      	ldr	r3, [r5, #28]
 800eaf8:	6862      	ldr	r2, [r4, #4]
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb00:	6021      	str	r1, [r4, #0]
 800eb02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb06:	bd70      	pop	{r4, r5, r6, pc}
 800eb08:	08018315 	.word	0x08018315
 800eb0c:	08018395 	.word	0x08018395

0800eb10 <__multadd>:
 800eb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb14:	690d      	ldr	r5, [r1, #16]
 800eb16:	4607      	mov	r7, r0
 800eb18:	460c      	mov	r4, r1
 800eb1a:	461e      	mov	r6, r3
 800eb1c:	f101 0c14 	add.w	ip, r1, #20
 800eb20:	2000      	movs	r0, #0
 800eb22:	f8dc 3000 	ldr.w	r3, [ip]
 800eb26:	b299      	uxth	r1, r3
 800eb28:	fb02 6101 	mla	r1, r2, r1, r6
 800eb2c:	0c1e      	lsrs	r6, r3, #16
 800eb2e:	0c0b      	lsrs	r3, r1, #16
 800eb30:	fb02 3306 	mla	r3, r2, r6, r3
 800eb34:	b289      	uxth	r1, r1
 800eb36:	3001      	adds	r0, #1
 800eb38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eb3c:	4285      	cmp	r5, r0
 800eb3e:	f84c 1b04 	str.w	r1, [ip], #4
 800eb42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb46:	dcec      	bgt.n	800eb22 <__multadd+0x12>
 800eb48:	b30e      	cbz	r6, 800eb8e <__multadd+0x7e>
 800eb4a:	68a3      	ldr	r3, [r4, #8]
 800eb4c:	42ab      	cmp	r3, r5
 800eb4e:	dc19      	bgt.n	800eb84 <__multadd+0x74>
 800eb50:	6861      	ldr	r1, [r4, #4]
 800eb52:	4638      	mov	r0, r7
 800eb54:	3101      	adds	r1, #1
 800eb56:	f7ff ff79 	bl	800ea4c <_Balloc>
 800eb5a:	4680      	mov	r8, r0
 800eb5c:	b928      	cbnz	r0, 800eb6a <__multadd+0x5a>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	4b0c      	ldr	r3, [pc, #48]	; (800eb94 <__multadd+0x84>)
 800eb62:	480d      	ldr	r0, [pc, #52]	; (800eb98 <__multadd+0x88>)
 800eb64:	21ba      	movs	r1, #186	; 0xba
 800eb66:	f000 fd1b 	bl	800f5a0 <__assert_func>
 800eb6a:	6922      	ldr	r2, [r4, #16]
 800eb6c:	3202      	adds	r2, #2
 800eb6e:	f104 010c 	add.w	r1, r4, #12
 800eb72:	0092      	lsls	r2, r2, #2
 800eb74:	300c      	adds	r0, #12
 800eb76:	f000 fd05 	bl	800f584 <memcpy>
 800eb7a:	4621      	mov	r1, r4
 800eb7c:	4638      	mov	r0, r7
 800eb7e:	f7ff ffa5 	bl	800eacc <_Bfree>
 800eb82:	4644      	mov	r4, r8
 800eb84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb88:	3501      	adds	r5, #1
 800eb8a:	615e      	str	r6, [r3, #20]
 800eb8c:	6125      	str	r5, [r4, #16]
 800eb8e:	4620      	mov	r0, r4
 800eb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb94:	08018384 	.word	0x08018384
 800eb98:	08018395 	.word	0x08018395

0800eb9c <__hi0bits>:
 800eb9c:	0c03      	lsrs	r3, r0, #16
 800eb9e:	041b      	lsls	r3, r3, #16
 800eba0:	b9d3      	cbnz	r3, 800ebd8 <__hi0bits+0x3c>
 800eba2:	0400      	lsls	r0, r0, #16
 800eba4:	2310      	movs	r3, #16
 800eba6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ebaa:	bf04      	itt	eq
 800ebac:	0200      	lsleq	r0, r0, #8
 800ebae:	3308      	addeq	r3, #8
 800ebb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ebb4:	bf04      	itt	eq
 800ebb6:	0100      	lsleq	r0, r0, #4
 800ebb8:	3304      	addeq	r3, #4
 800ebba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ebbe:	bf04      	itt	eq
 800ebc0:	0080      	lsleq	r0, r0, #2
 800ebc2:	3302      	addeq	r3, #2
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	db05      	blt.n	800ebd4 <__hi0bits+0x38>
 800ebc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ebcc:	f103 0301 	add.w	r3, r3, #1
 800ebd0:	bf08      	it	eq
 800ebd2:	2320      	moveq	r3, #32
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	4770      	bx	lr
 800ebd8:	2300      	movs	r3, #0
 800ebda:	e7e4      	b.n	800eba6 <__hi0bits+0xa>

0800ebdc <__lo0bits>:
 800ebdc:	6803      	ldr	r3, [r0, #0]
 800ebde:	f013 0207 	ands.w	r2, r3, #7
 800ebe2:	d00c      	beq.n	800ebfe <__lo0bits+0x22>
 800ebe4:	07d9      	lsls	r1, r3, #31
 800ebe6:	d422      	bmi.n	800ec2e <__lo0bits+0x52>
 800ebe8:	079a      	lsls	r2, r3, #30
 800ebea:	bf49      	itett	mi
 800ebec:	085b      	lsrmi	r3, r3, #1
 800ebee:	089b      	lsrpl	r3, r3, #2
 800ebf0:	6003      	strmi	r3, [r0, #0]
 800ebf2:	2201      	movmi	r2, #1
 800ebf4:	bf5c      	itt	pl
 800ebf6:	6003      	strpl	r3, [r0, #0]
 800ebf8:	2202      	movpl	r2, #2
 800ebfa:	4610      	mov	r0, r2
 800ebfc:	4770      	bx	lr
 800ebfe:	b299      	uxth	r1, r3
 800ec00:	b909      	cbnz	r1, 800ec06 <__lo0bits+0x2a>
 800ec02:	0c1b      	lsrs	r3, r3, #16
 800ec04:	2210      	movs	r2, #16
 800ec06:	b2d9      	uxtb	r1, r3
 800ec08:	b909      	cbnz	r1, 800ec0e <__lo0bits+0x32>
 800ec0a:	3208      	adds	r2, #8
 800ec0c:	0a1b      	lsrs	r3, r3, #8
 800ec0e:	0719      	lsls	r1, r3, #28
 800ec10:	bf04      	itt	eq
 800ec12:	091b      	lsreq	r3, r3, #4
 800ec14:	3204      	addeq	r2, #4
 800ec16:	0799      	lsls	r1, r3, #30
 800ec18:	bf04      	itt	eq
 800ec1a:	089b      	lsreq	r3, r3, #2
 800ec1c:	3202      	addeq	r2, #2
 800ec1e:	07d9      	lsls	r1, r3, #31
 800ec20:	d403      	bmi.n	800ec2a <__lo0bits+0x4e>
 800ec22:	085b      	lsrs	r3, r3, #1
 800ec24:	f102 0201 	add.w	r2, r2, #1
 800ec28:	d003      	beq.n	800ec32 <__lo0bits+0x56>
 800ec2a:	6003      	str	r3, [r0, #0]
 800ec2c:	e7e5      	b.n	800ebfa <__lo0bits+0x1e>
 800ec2e:	2200      	movs	r2, #0
 800ec30:	e7e3      	b.n	800ebfa <__lo0bits+0x1e>
 800ec32:	2220      	movs	r2, #32
 800ec34:	e7e1      	b.n	800ebfa <__lo0bits+0x1e>
	...

0800ec38 <__i2b>:
 800ec38:	b510      	push	{r4, lr}
 800ec3a:	460c      	mov	r4, r1
 800ec3c:	2101      	movs	r1, #1
 800ec3e:	f7ff ff05 	bl	800ea4c <_Balloc>
 800ec42:	4602      	mov	r2, r0
 800ec44:	b928      	cbnz	r0, 800ec52 <__i2b+0x1a>
 800ec46:	4b05      	ldr	r3, [pc, #20]	; (800ec5c <__i2b+0x24>)
 800ec48:	4805      	ldr	r0, [pc, #20]	; (800ec60 <__i2b+0x28>)
 800ec4a:	f240 1145 	movw	r1, #325	; 0x145
 800ec4e:	f000 fca7 	bl	800f5a0 <__assert_func>
 800ec52:	2301      	movs	r3, #1
 800ec54:	6144      	str	r4, [r0, #20]
 800ec56:	6103      	str	r3, [r0, #16]
 800ec58:	bd10      	pop	{r4, pc}
 800ec5a:	bf00      	nop
 800ec5c:	08018384 	.word	0x08018384
 800ec60:	08018395 	.word	0x08018395

0800ec64 <__multiply>:
 800ec64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec68:	4691      	mov	r9, r2
 800ec6a:	690a      	ldr	r2, [r1, #16]
 800ec6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	bfb8      	it	lt
 800ec74:	460b      	movlt	r3, r1
 800ec76:	460c      	mov	r4, r1
 800ec78:	bfbc      	itt	lt
 800ec7a:	464c      	movlt	r4, r9
 800ec7c:	4699      	movlt	r9, r3
 800ec7e:	6927      	ldr	r7, [r4, #16]
 800ec80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ec84:	68a3      	ldr	r3, [r4, #8]
 800ec86:	6861      	ldr	r1, [r4, #4]
 800ec88:	eb07 060a 	add.w	r6, r7, sl
 800ec8c:	42b3      	cmp	r3, r6
 800ec8e:	b085      	sub	sp, #20
 800ec90:	bfb8      	it	lt
 800ec92:	3101      	addlt	r1, #1
 800ec94:	f7ff feda 	bl	800ea4c <_Balloc>
 800ec98:	b930      	cbnz	r0, 800eca8 <__multiply+0x44>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	4b44      	ldr	r3, [pc, #272]	; (800edb0 <__multiply+0x14c>)
 800ec9e:	4845      	ldr	r0, [pc, #276]	; (800edb4 <__multiply+0x150>)
 800eca0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800eca4:	f000 fc7c 	bl	800f5a0 <__assert_func>
 800eca8:	f100 0514 	add.w	r5, r0, #20
 800ecac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ecb0:	462b      	mov	r3, r5
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	4543      	cmp	r3, r8
 800ecb6:	d321      	bcc.n	800ecfc <__multiply+0x98>
 800ecb8:	f104 0314 	add.w	r3, r4, #20
 800ecbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ecc0:	f109 0314 	add.w	r3, r9, #20
 800ecc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ecc8:	9202      	str	r2, [sp, #8]
 800ecca:	1b3a      	subs	r2, r7, r4
 800eccc:	3a15      	subs	r2, #21
 800ecce:	f022 0203 	bic.w	r2, r2, #3
 800ecd2:	3204      	adds	r2, #4
 800ecd4:	f104 0115 	add.w	r1, r4, #21
 800ecd8:	428f      	cmp	r7, r1
 800ecda:	bf38      	it	cc
 800ecdc:	2204      	movcc	r2, #4
 800ecde:	9201      	str	r2, [sp, #4]
 800ece0:	9a02      	ldr	r2, [sp, #8]
 800ece2:	9303      	str	r3, [sp, #12]
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d80c      	bhi.n	800ed02 <__multiply+0x9e>
 800ece8:	2e00      	cmp	r6, #0
 800ecea:	dd03      	ble.n	800ecf4 <__multiply+0x90>
 800ecec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d05b      	beq.n	800edac <__multiply+0x148>
 800ecf4:	6106      	str	r6, [r0, #16]
 800ecf6:	b005      	add	sp, #20
 800ecf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecfc:	f843 2b04 	str.w	r2, [r3], #4
 800ed00:	e7d8      	b.n	800ecb4 <__multiply+0x50>
 800ed02:	f8b3 a000 	ldrh.w	sl, [r3]
 800ed06:	f1ba 0f00 	cmp.w	sl, #0
 800ed0a:	d024      	beq.n	800ed56 <__multiply+0xf2>
 800ed0c:	f104 0e14 	add.w	lr, r4, #20
 800ed10:	46a9      	mov	r9, r5
 800ed12:	f04f 0c00 	mov.w	ip, #0
 800ed16:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ed1a:	f8d9 1000 	ldr.w	r1, [r9]
 800ed1e:	fa1f fb82 	uxth.w	fp, r2
 800ed22:	b289      	uxth	r1, r1
 800ed24:	fb0a 110b 	mla	r1, sl, fp, r1
 800ed28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ed2c:	f8d9 2000 	ldr.w	r2, [r9]
 800ed30:	4461      	add	r1, ip
 800ed32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed36:	fb0a c20b 	mla	r2, sl, fp, ip
 800ed3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ed3e:	b289      	uxth	r1, r1
 800ed40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed44:	4577      	cmp	r7, lr
 800ed46:	f849 1b04 	str.w	r1, [r9], #4
 800ed4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed4e:	d8e2      	bhi.n	800ed16 <__multiply+0xb2>
 800ed50:	9a01      	ldr	r2, [sp, #4]
 800ed52:	f845 c002 	str.w	ip, [r5, r2]
 800ed56:	9a03      	ldr	r2, [sp, #12]
 800ed58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ed5c:	3304      	adds	r3, #4
 800ed5e:	f1b9 0f00 	cmp.w	r9, #0
 800ed62:	d021      	beq.n	800eda8 <__multiply+0x144>
 800ed64:	6829      	ldr	r1, [r5, #0]
 800ed66:	f104 0c14 	add.w	ip, r4, #20
 800ed6a:	46ae      	mov	lr, r5
 800ed6c:	f04f 0a00 	mov.w	sl, #0
 800ed70:	f8bc b000 	ldrh.w	fp, [ip]
 800ed74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ed78:	fb09 220b 	mla	r2, r9, fp, r2
 800ed7c:	4452      	add	r2, sl
 800ed7e:	b289      	uxth	r1, r1
 800ed80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed84:	f84e 1b04 	str.w	r1, [lr], #4
 800ed88:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ed8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ed90:	f8be 1000 	ldrh.w	r1, [lr]
 800ed94:	fb09 110a 	mla	r1, r9, sl, r1
 800ed98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ed9c:	4567      	cmp	r7, ip
 800ed9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eda2:	d8e5      	bhi.n	800ed70 <__multiply+0x10c>
 800eda4:	9a01      	ldr	r2, [sp, #4]
 800eda6:	50a9      	str	r1, [r5, r2]
 800eda8:	3504      	adds	r5, #4
 800edaa:	e799      	b.n	800ece0 <__multiply+0x7c>
 800edac:	3e01      	subs	r6, #1
 800edae:	e79b      	b.n	800ece8 <__multiply+0x84>
 800edb0:	08018384 	.word	0x08018384
 800edb4:	08018395 	.word	0x08018395

0800edb8 <__pow5mult>:
 800edb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edbc:	4615      	mov	r5, r2
 800edbe:	f012 0203 	ands.w	r2, r2, #3
 800edc2:	4606      	mov	r6, r0
 800edc4:	460f      	mov	r7, r1
 800edc6:	d007      	beq.n	800edd8 <__pow5mult+0x20>
 800edc8:	4c25      	ldr	r4, [pc, #148]	; (800ee60 <__pow5mult+0xa8>)
 800edca:	3a01      	subs	r2, #1
 800edcc:	2300      	movs	r3, #0
 800edce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800edd2:	f7ff fe9d 	bl	800eb10 <__multadd>
 800edd6:	4607      	mov	r7, r0
 800edd8:	10ad      	asrs	r5, r5, #2
 800edda:	d03d      	beq.n	800ee58 <__pow5mult+0xa0>
 800eddc:	69f4      	ldr	r4, [r6, #28]
 800edde:	b97c      	cbnz	r4, 800ee00 <__pow5mult+0x48>
 800ede0:	2010      	movs	r0, #16
 800ede2:	f7fe f863 	bl	800ceac <malloc>
 800ede6:	4602      	mov	r2, r0
 800ede8:	61f0      	str	r0, [r6, #28]
 800edea:	b928      	cbnz	r0, 800edf8 <__pow5mult+0x40>
 800edec:	4b1d      	ldr	r3, [pc, #116]	; (800ee64 <__pow5mult+0xac>)
 800edee:	481e      	ldr	r0, [pc, #120]	; (800ee68 <__pow5mult+0xb0>)
 800edf0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800edf4:	f000 fbd4 	bl	800f5a0 <__assert_func>
 800edf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800edfc:	6004      	str	r4, [r0, #0]
 800edfe:	60c4      	str	r4, [r0, #12]
 800ee00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ee04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee08:	b94c      	cbnz	r4, 800ee1e <__pow5mult+0x66>
 800ee0a:	f240 2171 	movw	r1, #625	; 0x271
 800ee0e:	4630      	mov	r0, r6
 800ee10:	f7ff ff12 	bl	800ec38 <__i2b>
 800ee14:	2300      	movs	r3, #0
 800ee16:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	6003      	str	r3, [r0, #0]
 800ee1e:	f04f 0900 	mov.w	r9, #0
 800ee22:	07eb      	lsls	r3, r5, #31
 800ee24:	d50a      	bpl.n	800ee3c <__pow5mult+0x84>
 800ee26:	4639      	mov	r1, r7
 800ee28:	4622      	mov	r2, r4
 800ee2a:	4630      	mov	r0, r6
 800ee2c:	f7ff ff1a 	bl	800ec64 <__multiply>
 800ee30:	4639      	mov	r1, r7
 800ee32:	4680      	mov	r8, r0
 800ee34:	4630      	mov	r0, r6
 800ee36:	f7ff fe49 	bl	800eacc <_Bfree>
 800ee3a:	4647      	mov	r7, r8
 800ee3c:	106d      	asrs	r5, r5, #1
 800ee3e:	d00b      	beq.n	800ee58 <__pow5mult+0xa0>
 800ee40:	6820      	ldr	r0, [r4, #0]
 800ee42:	b938      	cbnz	r0, 800ee54 <__pow5mult+0x9c>
 800ee44:	4622      	mov	r2, r4
 800ee46:	4621      	mov	r1, r4
 800ee48:	4630      	mov	r0, r6
 800ee4a:	f7ff ff0b 	bl	800ec64 <__multiply>
 800ee4e:	6020      	str	r0, [r4, #0]
 800ee50:	f8c0 9000 	str.w	r9, [r0]
 800ee54:	4604      	mov	r4, r0
 800ee56:	e7e4      	b.n	800ee22 <__pow5mult+0x6a>
 800ee58:	4638      	mov	r0, r7
 800ee5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee5e:	bf00      	nop
 800ee60:	080184e0 	.word	0x080184e0
 800ee64:	08018315 	.word	0x08018315
 800ee68:	08018395 	.word	0x08018395

0800ee6c <__lshift>:
 800ee6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee70:	460c      	mov	r4, r1
 800ee72:	6849      	ldr	r1, [r1, #4]
 800ee74:	6923      	ldr	r3, [r4, #16]
 800ee76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee7a:	68a3      	ldr	r3, [r4, #8]
 800ee7c:	4607      	mov	r7, r0
 800ee7e:	4691      	mov	r9, r2
 800ee80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee84:	f108 0601 	add.w	r6, r8, #1
 800ee88:	42b3      	cmp	r3, r6
 800ee8a:	db0b      	blt.n	800eea4 <__lshift+0x38>
 800ee8c:	4638      	mov	r0, r7
 800ee8e:	f7ff fddd 	bl	800ea4c <_Balloc>
 800ee92:	4605      	mov	r5, r0
 800ee94:	b948      	cbnz	r0, 800eeaa <__lshift+0x3e>
 800ee96:	4602      	mov	r2, r0
 800ee98:	4b28      	ldr	r3, [pc, #160]	; (800ef3c <__lshift+0xd0>)
 800ee9a:	4829      	ldr	r0, [pc, #164]	; (800ef40 <__lshift+0xd4>)
 800ee9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800eea0:	f000 fb7e 	bl	800f5a0 <__assert_func>
 800eea4:	3101      	adds	r1, #1
 800eea6:	005b      	lsls	r3, r3, #1
 800eea8:	e7ee      	b.n	800ee88 <__lshift+0x1c>
 800eeaa:	2300      	movs	r3, #0
 800eeac:	f100 0114 	add.w	r1, r0, #20
 800eeb0:	f100 0210 	add.w	r2, r0, #16
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	4553      	cmp	r3, sl
 800eeb8:	db33      	blt.n	800ef22 <__lshift+0xb6>
 800eeba:	6920      	ldr	r0, [r4, #16]
 800eebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eec0:	f104 0314 	add.w	r3, r4, #20
 800eec4:	f019 091f 	ands.w	r9, r9, #31
 800eec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eecc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eed0:	d02b      	beq.n	800ef2a <__lshift+0xbe>
 800eed2:	f1c9 0e20 	rsb	lr, r9, #32
 800eed6:	468a      	mov	sl, r1
 800eed8:	2200      	movs	r2, #0
 800eeda:	6818      	ldr	r0, [r3, #0]
 800eedc:	fa00 f009 	lsl.w	r0, r0, r9
 800eee0:	4310      	orrs	r0, r2
 800eee2:	f84a 0b04 	str.w	r0, [sl], #4
 800eee6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eeea:	459c      	cmp	ip, r3
 800eeec:	fa22 f20e 	lsr.w	r2, r2, lr
 800eef0:	d8f3      	bhi.n	800eeda <__lshift+0x6e>
 800eef2:	ebac 0304 	sub.w	r3, ip, r4
 800eef6:	3b15      	subs	r3, #21
 800eef8:	f023 0303 	bic.w	r3, r3, #3
 800eefc:	3304      	adds	r3, #4
 800eefe:	f104 0015 	add.w	r0, r4, #21
 800ef02:	4584      	cmp	ip, r0
 800ef04:	bf38      	it	cc
 800ef06:	2304      	movcc	r3, #4
 800ef08:	50ca      	str	r2, [r1, r3]
 800ef0a:	b10a      	cbz	r2, 800ef10 <__lshift+0xa4>
 800ef0c:	f108 0602 	add.w	r6, r8, #2
 800ef10:	3e01      	subs	r6, #1
 800ef12:	4638      	mov	r0, r7
 800ef14:	612e      	str	r6, [r5, #16]
 800ef16:	4621      	mov	r1, r4
 800ef18:	f7ff fdd8 	bl	800eacc <_Bfree>
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef22:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef26:	3301      	adds	r3, #1
 800ef28:	e7c5      	b.n	800eeb6 <__lshift+0x4a>
 800ef2a:	3904      	subs	r1, #4
 800ef2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef30:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef34:	459c      	cmp	ip, r3
 800ef36:	d8f9      	bhi.n	800ef2c <__lshift+0xc0>
 800ef38:	e7ea      	b.n	800ef10 <__lshift+0xa4>
 800ef3a:	bf00      	nop
 800ef3c:	08018384 	.word	0x08018384
 800ef40:	08018395 	.word	0x08018395

0800ef44 <__mcmp>:
 800ef44:	b530      	push	{r4, r5, lr}
 800ef46:	6902      	ldr	r2, [r0, #16]
 800ef48:	690c      	ldr	r4, [r1, #16]
 800ef4a:	1b12      	subs	r2, r2, r4
 800ef4c:	d10e      	bne.n	800ef6c <__mcmp+0x28>
 800ef4e:	f100 0314 	add.w	r3, r0, #20
 800ef52:	3114      	adds	r1, #20
 800ef54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ef58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ef5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ef60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ef64:	42a5      	cmp	r5, r4
 800ef66:	d003      	beq.n	800ef70 <__mcmp+0x2c>
 800ef68:	d305      	bcc.n	800ef76 <__mcmp+0x32>
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	4610      	mov	r0, r2
 800ef6e:	bd30      	pop	{r4, r5, pc}
 800ef70:	4283      	cmp	r3, r0
 800ef72:	d3f3      	bcc.n	800ef5c <__mcmp+0x18>
 800ef74:	e7fa      	b.n	800ef6c <__mcmp+0x28>
 800ef76:	f04f 32ff 	mov.w	r2, #4294967295
 800ef7a:	e7f7      	b.n	800ef6c <__mcmp+0x28>

0800ef7c <__mdiff>:
 800ef7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef80:	460c      	mov	r4, r1
 800ef82:	4606      	mov	r6, r0
 800ef84:	4611      	mov	r1, r2
 800ef86:	4620      	mov	r0, r4
 800ef88:	4690      	mov	r8, r2
 800ef8a:	f7ff ffdb 	bl	800ef44 <__mcmp>
 800ef8e:	1e05      	subs	r5, r0, #0
 800ef90:	d110      	bne.n	800efb4 <__mdiff+0x38>
 800ef92:	4629      	mov	r1, r5
 800ef94:	4630      	mov	r0, r6
 800ef96:	f7ff fd59 	bl	800ea4c <_Balloc>
 800ef9a:	b930      	cbnz	r0, 800efaa <__mdiff+0x2e>
 800ef9c:	4b3a      	ldr	r3, [pc, #232]	; (800f088 <__mdiff+0x10c>)
 800ef9e:	4602      	mov	r2, r0
 800efa0:	f240 2137 	movw	r1, #567	; 0x237
 800efa4:	4839      	ldr	r0, [pc, #228]	; (800f08c <__mdiff+0x110>)
 800efa6:	f000 fafb 	bl	800f5a0 <__assert_func>
 800efaa:	2301      	movs	r3, #1
 800efac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800efb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb4:	bfa4      	itt	ge
 800efb6:	4643      	movge	r3, r8
 800efb8:	46a0      	movge	r8, r4
 800efba:	4630      	mov	r0, r6
 800efbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800efc0:	bfa6      	itte	ge
 800efc2:	461c      	movge	r4, r3
 800efc4:	2500      	movge	r5, #0
 800efc6:	2501      	movlt	r5, #1
 800efc8:	f7ff fd40 	bl	800ea4c <_Balloc>
 800efcc:	b920      	cbnz	r0, 800efd8 <__mdiff+0x5c>
 800efce:	4b2e      	ldr	r3, [pc, #184]	; (800f088 <__mdiff+0x10c>)
 800efd0:	4602      	mov	r2, r0
 800efd2:	f240 2145 	movw	r1, #581	; 0x245
 800efd6:	e7e5      	b.n	800efa4 <__mdiff+0x28>
 800efd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800efdc:	6926      	ldr	r6, [r4, #16]
 800efde:	60c5      	str	r5, [r0, #12]
 800efe0:	f104 0914 	add.w	r9, r4, #20
 800efe4:	f108 0514 	add.w	r5, r8, #20
 800efe8:	f100 0e14 	add.w	lr, r0, #20
 800efec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eff0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eff4:	f108 0210 	add.w	r2, r8, #16
 800eff8:	46f2      	mov	sl, lr
 800effa:	2100      	movs	r1, #0
 800effc:	f859 3b04 	ldr.w	r3, [r9], #4
 800f000:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f004:	fa11 f88b 	uxtah	r8, r1, fp
 800f008:	b299      	uxth	r1, r3
 800f00a:	0c1b      	lsrs	r3, r3, #16
 800f00c:	eba8 0801 	sub.w	r8, r8, r1
 800f010:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f014:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f018:	fa1f f888 	uxth.w	r8, r8
 800f01c:	1419      	asrs	r1, r3, #16
 800f01e:	454e      	cmp	r6, r9
 800f020:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f024:	f84a 3b04 	str.w	r3, [sl], #4
 800f028:	d8e8      	bhi.n	800effc <__mdiff+0x80>
 800f02a:	1b33      	subs	r3, r6, r4
 800f02c:	3b15      	subs	r3, #21
 800f02e:	f023 0303 	bic.w	r3, r3, #3
 800f032:	3304      	adds	r3, #4
 800f034:	3415      	adds	r4, #21
 800f036:	42a6      	cmp	r6, r4
 800f038:	bf38      	it	cc
 800f03a:	2304      	movcc	r3, #4
 800f03c:	441d      	add	r5, r3
 800f03e:	4473      	add	r3, lr
 800f040:	469e      	mov	lr, r3
 800f042:	462e      	mov	r6, r5
 800f044:	4566      	cmp	r6, ip
 800f046:	d30e      	bcc.n	800f066 <__mdiff+0xea>
 800f048:	f10c 0203 	add.w	r2, ip, #3
 800f04c:	1b52      	subs	r2, r2, r5
 800f04e:	f022 0203 	bic.w	r2, r2, #3
 800f052:	3d03      	subs	r5, #3
 800f054:	45ac      	cmp	ip, r5
 800f056:	bf38      	it	cc
 800f058:	2200      	movcc	r2, #0
 800f05a:	4413      	add	r3, r2
 800f05c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f060:	b17a      	cbz	r2, 800f082 <__mdiff+0x106>
 800f062:	6107      	str	r7, [r0, #16]
 800f064:	e7a4      	b.n	800efb0 <__mdiff+0x34>
 800f066:	f856 8b04 	ldr.w	r8, [r6], #4
 800f06a:	fa11 f288 	uxtah	r2, r1, r8
 800f06e:	1414      	asrs	r4, r2, #16
 800f070:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f074:	b292      	uxth	r2, r2
 800f076:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f07a:	f84e 2b04 	str.w	r2, [lr], #4
 800f07e:	1421      	asrs	r1, r4, #16
 800f080:	e7e0      	b.n	800f044 <__mdiff+0xc8>
 800f082:	3f01      	subs	r7, #1
 800f084:	e7ea      	b.n	800f05c <__mdiff+0xe0>
 800f086:	bf00      	nop
 800f088:	08018384 	.word	0x08018384
 800f08c:	08018395 	.word	0x08018395

0800f090 <__d2b>:
 800f090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f094:	460f      	mov	r7, r1
 800f096:	2101      	movs	r1, #1
 800f098:	ec59 8b10 	vmov	r8, r9, d0
 800f09c:	4616      	mov	r6, r2
 800f09e:	f7ff fcd5 	bl	800ea4c <_Balloc>
 800f0a2:	4604      	mov	r4, r0
 800f0a4:	b930      	cbnz	r0, 800f0b4 <__d2b+0x24>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	4b24      	ldr	r3, [pc, #144]	; (800f13c <__d2b+0xac>)
 800f0aa:	4825      	ldr	r0, [pc, #148]	; (800f140 <__d2b+0xb0>)
 800f0ac:	f240 310f 	movw	r1, #783	; 0x30f
 800f0b0:	f000 fa76 	bl	800f5a0 <__assert_func>
 800f0b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f0b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f0bc:	bb2d      	cbnz	r5, 800f10a <__d2b+0x7a>
 800f0be:	9301      	str	r3, [sp, #4]
 800f0c0:	f1b8 0300 	subs.w	r3, r8, #0
 800f0c4:	d026      	beq.n	800f114 <__d2b+0x84>
 800f0c6:	4668      	mov	r0, sp
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	f7ff fd87 	bl	800ebdc <__lo0bits>
 800f0ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f0d2:	b1e8      	cbz	r0, 800f110 <__d2b+0x80>
 800f0d4:	f1c0 0320 	rsb	r3, r0, #32
 800f0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f0dc:	430b      	orrs	r3, r1
 800f0de:	40c2      	lsrs	r2, r0
 800f0e0:	6163      	str	r3, [r4, #20]
 800f0e2:	9201      	str	r2, [sp, #4]
 800f0e4:	9b01      	ldr	r3, [sp, #4]
 800f0e6:	61a3      	str	r3, [r4, #24]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	bf14      	ite	ne
 800f0ec:	2202      	movne	r2, #2
 800f0ee:	2201      	moveq	r2, #1
 800f0f0:	6122      	str	r2, [r4, #16]
 800f0f2:	b1bd      	cbz	r5, 800f124 <__d2b+0x94>
 800f0f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f0f8:	4405      	add	r5, r0
 800f0fa:	603d      	str	r5, [r7, #0]
 800f0fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f100:	6030      	str	r0, [r6, #0]
 800f102:	4620      	mov	r0, r4
 800f104:	b003      	add	sp, #12
 800f106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f10a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f10e:	e7d6      	b.n	800f0be <__d2b+0x2e>
 800f110:	6161      	str	r1, [r4, #20]
 800f112:	e7e7      	b.n	800f0e4 <__d2b+0x54>
 800f114:	a801      	add	r0, sp, #4
 800f116:	f7ff fd61 	bl	800ebdc <__lo0bits>
 800f11a:	9b01      	ldr	r3, [sp, #4]
 800f11c:	6163      	str	r3, [r4, #20]
 800f11e:	3020      	adds	r0, #32
 800f120:	2201      	movs	r2, #1
 800f122:	e7e5      	b.n	800f0f0 <__d2b+0x60>
 800f124:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f128:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f12c:	6038      	str	r0, [r7, #0]
 800f12e:	6918      	ldr	r0, [r3, #16]
 800f130:	f7ff fd34 	bl	800eb9c <__hi0bits>
 800f134:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f138:	e7e2      	b.n	800f100 <__d2b+0x70>
 800f13a:	bf00      	nop
 800f13c:	08018384 	.word	0x08018384
 800f140:	08018395 	.word	0x08018395

0800f144 <__ssputs_r>:
 800f144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f148:	688e      	ldr	r6, [r1, #8]
 800f14a:	461f      	mov	r7, r3
 800f14c:	42be      	cmp	r6, r7
 800f14e:	680b      	ldr	r3, [r1, #0]
 800f150:	4682      	mov	sl, r0
 800f152:	460c      	mov	r4, r1
 800f154:	4690      	mov	r8, r2
 800f156:	d82c      	bhi.n	800f1b2 <__ssputs_r+0x6e>
 800f158:	898a      	ldrh	r2, [r1, #12]
 800f15a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f15e:	d026      	beq.n	800f1ae <__ssputs_r+0x6a>
 800f160:	6965      	ldr	r5, [r4, #20]
 800f162:	6909      	ldr	r1, [r1, #16]
 800f164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f168:	eba3 0901 	sub.w	r9, r3, r1
 800f16c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f170:	1c7b      	adds	r3, r7, #1
 800f172:	444b      	add	r3, r9
 800f174:	106d      	asrs	r5, r5, #1
 800f176:	429d      	cmp	r5, r3
 800f178:	bf38      	it	cc
 800f17a:	461d      	movcc	r5, r3
 800f17c:	0553      	lsls	r3, r2, #21
 800f17e:	d527      	bpl.n	800f1d0 <__ssputs_r+0x8c>
 800f180:	4629      	mov	r1, r5
 800f182:	f7fd febb 	bl	800cefc <_malloc_r>
 800f186:	4606      	mov	r6, r0
 800f188:	b360      	cbz	r0, 800f1e4 <__ssputs_r+0xa0>
 800f18a:	6921      	ldr	r1, [r4, #16]
 800f18c:	464a      	mov	r2, r9
 800f18e:	f000 f9f9 	bl	800f584 <memcpy>
 800f192:	89a3      	ldrh	r3, [r4, #12]
 800f194:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f19c:	81a3      	strh	r3, [r4, #12]
 800f19e:	6126      	str	r6, [r4, #16]
 800f1a0:	6165      	str	r5, [r4, #20]
 800f1a2:	444e      	add	r6, r9
 800f1a4:	eba5 0509 	sub.w	r5, r5, r9
 800f1a8:	6026      	str	r6, [r4, #0]
 800f1aa:	60a5      	str	r5, [r4, #8]
 800f1ac:	463e      	mov	r6, r7
 800f1ae:	42be      	cmp	r6, r7
 800f1b0:	d900      	bls.n	800f1b4 <__ssputs_r+0x70>
 800f1b2:	463e      	mov	r6, r7
 800f1b4:	6820      	ldr	r0, [r4, #0]
 800f1b6:	4632      	mov	r2, r6
 800f1b8:	4641      	mov	r1, r8
 800f1ba:	f000 f9c9 	bl	800f550 <memmove>
 800f1be:	68a3      	ldr	r3, [r4, #8]
 800f1c0:	1b9b      	subs	r3, r3, r6
 800f1c2:	60a3      	str	r3, [r4, #8]
 800f1c4:	6823      	ldr	r3, [r4, #0]
 800f1c6:	4433      	add	r3, r6
 800f1c8:	6023      	str	r3, [r4, #0]
 800f1ca:	2000      	movs	r0, #0
 800f1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1d0:	462a      	mov	r2, r5
 800f1d2:	f000 fa2b 	bl	800f62c <_realloc_r>
 800f1d6:	4606      	mov	r6, r0
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d1e0      	bne.n	800f19e <__ssputs_r+0x5a>
 800f1dc:	6921      	ldr	r1, [r4, #16]
 800f1de:	4650      	mov	r0, sl
 800f1e0:	f7ff fbe8 	bl	800e9b4 <_free_r>
 800f1e4:	230c      	movs	r3, #12
 800f1e6:	f8ca 3000 	str.w	r3, [sl]
 800f1ea:	89a3      	ldrh	r3, [r4, #12]
 800f1ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1f0:	81a3      	strh	r3, [r4, #12]
 800f1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f6:	e7e9      	b.n	800f1cc <__ssputs_r+0x88>

0800f1f8 <_svfiprintf_r>:
 800f1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1fc:	4698      	mov	r8, r3
 800f1fe:	898b      	ldrh	r3, [r1, #12]
 800f200:	061b      	lsls	r3, r3, #24
 800f202:	b09d      	sub	sp, #116	; 0x74
 800f204:	4607      	mov	r7, r0
 800f206:	460d      	mov	r5, r1
 800f208:	4614      	mov	r4, r2
 800f20a:	d50e      	bpl.n	800f22a <_svfiprintf_r+0x32>
 800f20c:	690b      	ldr	r3, [r1, #16]
 800f20e:	b963      	cbnz	r3, 800f22a <_svfiprintf_r+0x32>
 800f210:	2140      	movs	r1, #64	; 0x40
 800f212:	f7fd fe73 	bl	800cefc <_malloc_r>
 800f216:	6028      	str	r0, [r5, #0]
 800f218:	6128      	str	r0, [r5, #16]
 800f21a:	b920      	cbnz	r0, 800f226 <_svfiprintf_r+0x2e>
 800f21c:	230c      	movs	r3, #12
 800f21e:	603b      	str	r3, [r7, #0]
 800f220:	f04f 30ff 	mov.w	r0, #4294967295
 800f224:	e0d0      	b.n	800f3c8 <_svfiprintf_r+0x1d0>
 800f226:	2340      	movs	r3, #64	; 0x40
 800f228:	616b      	str	r3, [r5, #20]
 800f22a:	2300      	movs	r3, #0
 800f22c:	9309      	str	r3, [sp, #36]	; 0x24
 800f22e:	2320      	movs	r3, #32
 800f230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f234:	f8cd 800c 	str.w	r8, [sp, #12]
 800f238:	2330      	movs	r3, #48	; 0x30
 800f23a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f3e0 <_svfiprintf_r+0x1e8>
 800f23e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f242:	f04f 0901 	mov.w	r9, #1
 800f246:	4623      	mov	r3, r4
 800f248:	469a      	mov	sl, r3
 800f24a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f24e:	b10a      	cbz	r2, 800f254 <_svfiprintf_r+0x5c>
 800f250:	2a25      	cmp	r2, #37	; 0x25
 800f252:	d1f9      	bne.n	800f248 <_svfiprintf_r+0x50>
 800f254:	ebba 0b04 	subs.w	fp, sl, r4
 800f258:	d00b      	beq.n	800f272 <_svfiprintf_r+0x7a>
 800f25a:	465b      	mov	r3, fp
 800f25c:	4622      	mov	r2, r4
 800f25e:	4629      	mov	r1, r5
 800f260:	4638      	mov	r0, r7
 800f262:	f7ff ff6f 	bl	800f144 <__ssputs_r>
 800f266:	3001      	adds	r0, #1
 800f268:	f000 80a9 	beq.w	800f3be <_svfiprintf_r+0x1c6>
 800f26c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f26e:	445a      	add	r2, fp
 800f270:	9209      	str	r2, [sp, #36]	; 0x24
 800f272:	f89a 3000 	ldrb.w	r3, [sl]
 800f276:	2b00      	cmp	r3, #0
 800f278:	f000 80a1 	beq.w	800f3be <_svfiprintf_r+0x1c6>
 800f27c:	2300      	movs	r3, #0
 800f27e:	f04f 32ff 	mov.w	r2, #4294967295
 800f282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f286:	f10a 0a01 	add.w	sl, sl, #1
 800f28a:	9304      	str	r3, [sp, #16]
 800f28c:	9307      	str	r3, [sp, #28]
 800f28e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f292:	931a      	str	r3, [sp, #104]	; 0x68
 800f294:	4654      	mov	r4, sl
 800f296:	2205      	movs	r2, #5
 800f298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f29c:	4850      	ldr	r0, [pc, #320]	; (800f3e0 <_svfiprintf_r+0x1e8>)
 800f29e:	f7f0 ffaf 	bl	8000200 <memchr>
 800f2a2:	9a04      	ldr	r2, [sp, #16]
 800f2a4:	b9d8      	cbnz	r0, 800f2de <_svfiprintf_r+0xe6>
 800f2a6:	06d0      	lsls	r0, r2, #27
 800f2a8:	bf44      	itt	mi
 800f2aa:	2320      	movmi	r3, #32
 800f2ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2b0:	0711      	lsls	r1, r2, #28
 800f2b2:	bf44      	itt	mi
 800f2b4:	232b      	movmi	r3, #43	; 0x2b
 800f2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800f2be:	2b2a      	cmp	r3, #42	; 0x2a
 800f2c0:	d015      	beq.n	800f2ee <_svfiprintf_r+0xf6>
 800f2c2:	9a07      	ldr	r2, [sp, #28]
 800f2c4:	4654      	mov	r4, sl
 800f2c6:	2000      	movs	r0, #0
 800f2c8:	f04f 0c0a 	mov.w	ip, #10
 800f2cc:	4621      	mov	r1, r4
 800f2ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2d2:	3b30      	subs	r3, #48	; 0x30
 800f2d4:	2b09      	cmp	r3, #9
 800f2d6:	d94d      	bls.n	800f374 <_svfiprintf_r+0x17c>
 800f2d8:	b1b0      	cbz	r0, 800f308 <_svfiprintf_r+0x110>
 800f2da:	9207      	str	r2, [sp, #28]
 800f2dc:	e014      	b.n	800f308 <_svfiprintf_r+0x110>
 800f2de:	eba0 0308 	sub.w	r3, r0, r8
 800f2e2:	fa09 f303 	lsl.w	r3, r9, r3
 800f2e6:	4313      	orrs	r3, r2
 800f2e8:	9304      	str	r3, [sp, #16]
 800f2ea:	46a2      	mov	sl, r4
 800f2ec:	e7d2      	b.n	800f294 <_svfiprintf_r+0x9c>
 800f2ee:	9b03      	ldr	r3, [sp, #12]
 800f2f0:	1d19      	adds	r1, r3, #4
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	9103      	str	r1, [sp, #12]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	bfbb      	ittet	lt
 800f2fa:	425b      	neglt	r3, r3
 800f2fc:	f042 0202 	orrlt.w	r2, r2, #2
 800f300:	9307      	strge	r3, [sp, #28]
 800f302:	9307      	strlt	r3, [sp, #28]
 800f304:	bfb8      	it	lt
 800f306:	9204      	strlt	r2, [sp, #16]
 800f308:	7823      	ldrb	r3, [r4, #0]
 800f30a:	2b2e      	cmp	r3, #46	; 0x2e
 800f30c:	d10c      	bne.n	800f328 <_svfiprintf_r+0x130>
 800f30e:	7863      	ldrb	r3, [r4, #1]
 800f310:	2b2a      	cmp	r3, #42	; 0x2a
 800f312:	d134      	bne.n	800f37e <_svfiprintf_r+0x186>
 800f314:	9b03      	ldr	r3, [sp, #12]
 800f316:	1d1a      	adds	r2, r3, #4
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	9203      	str	r2, [sp, #12]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	bfb8      	it	lt
 800f320:	f04f 33ff 	movlt.w	r3, #4294967295
 800f324:	3402      	adds	r4, #2
 800f326:	9305      	str	r3, [sp, #20]
 800f328:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f3f0 <_svfiprintf_r+0x1f8>
 800f32c:	7821      	ldrb	r1, [r4, #0]
 800f32e:	2203      	movs	r2, #3
 800f330:	4650      	mov	r0, sl
 800f332:	f7f0 ff65 	bl	8000200 <memchr>
 800f336:	b138      	cbz	r0, 800f348 <_svfiprintf_r+0x150>
 800f338:	9b04      	ldr	r3, [sp, #16]
 800f33a:	eba0 000a 	sub.w	r0, r0, sl
 800f33e:	2240      	movs	r2, #64	; 0x40
 800f340:	4082      	lsls	r2, r0
 800f342:	4313      	orrs	r3, r2
 800f344:	3401      	adds	r4, #1
 800f346:	9304      	str	r3, [sp, #16]
 800f348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f34c:	4825      	ldr	r0, [pc, #148]	; (800f3e4 <_svfiprintf_r+0x1ec>)
 800f34e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f352:	2206      	movs	r2, #6
 800f354:	f7f0 ff54 	bl	8000200 <memchr>
 800f358:	2800      	cmp	r0, #0
 800f35a:	d038      	beq.n	800f3ce <_svfiprintf_r+0x1d6>
 800f35c:	4b22      	ldr	r3, [pc, #136]	; (800f3e8 <_svfiprintf_r+0x1f0>)
 800f35e:	bb1b      	cbnz	r3, 800f3a8 <_svfiprintf_r+0x1b0>
 800f360:	9b03      	ldr	r3, [sp, #12]
 800f362:	3307      	adds	r3, #7
 800f364:	f023 0307 	bic.w	r3, r3, #7
 800f368:	3308      	adds	r3, #8
 800f36a:	9303      	str	r3, [sp, #12]
 800f36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f36e:	4433      	add	r3, r6
 800f370:	9309      	str	r3, [sp, #36]	; 0x24
 800f372:	e768      	b.n	800f246 <_svfiprintf_r+0x4e>
 800f374:	fb0c 3202 	mla	r2, ip, r2, r3
 800f378:	460c      	mov	r4, r1
 800f37a:	2001      	movs	r0, #1
 800f37c:	e7a6      	b.n	800f2cc <_svfiprintf_r+0xd4>
 800f37e:	2300      	movs	r3, #0
 800f380:	3401      	adds	r4, #1
 800f382:	9305      	str	r3, [sp, #20]
 800f384:	4619      	mov	r1, r3
 800f386:	f04f 0c0a 	mov.w	ip, #10
 800f38a:	4620      	mov	r0, r4
 800f38c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f390:	3a30      	subs	r2, #48	; 0x30
 800f392:	2a09      	cmp	r2, #9
 800f394:	d903      	bls.n	800f39e <_svfiprintf_r+0x1a6>
 800f396:	2b00      	cmp	r3, #0
 800f398:	d0c6      	beq.n	800f328 <_svfiprintf_r+0x130>
 800f39a:	9105      	str	r1, [sp, #20]
 800f39c:	e7c4      	b.n	800f328 <_svfiprintf_r+0x130>
 800f39e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e7f0      	b.n	800f38a <_svfiprintf_r+0x192>
 800f3a8:	ab03      	add	r3, sp, #12
 800f3aa:	9300      	str	r3, [sp, #0]
 800f3ac:	462a      	mov	r2, r5
 800f3ae:	4b0f      	ldr	r3, [pc, #60]	; (800f3ec <_svfiprintf_r+0x1f4>)
 800f3b0:	a904      	add	r1, sp, #16
 800f3b2:	4638      	mov	r0, r7
 800f3b4:	f7fd fece 	bl	800d154 <_printf_float>
 800f3b8:	1c42      	adds	r2, r0, #1
 800f3ba:	4606      	mov	r6, r0
 800f3bc:	d1d6      	bne.n	800f36c <_svfiprintf_r+0x174>
 800f3be:	89ab      	ldrh	r3, [r5, #12]
 800f3c0:	065b      	lsls	r3, r3, #25
 800f3c2:	f53f af2d 	bmi.w	800f220 <_svfiprintf_r+0x28>
 800f3c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3c8:	b01d      	add	sp, #116	; 0x74
 800f3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ce:	ab03      	add	r3, sp, #12
 800f3d0:	9300      	str	r3, [sp, #0]
 800f3d2:	462a      	mov	r2, r5
 800f3d4:	4b05      	ldr	r3, [pc, #20]	; (800f3ec <_svfiprintf_r+0x1f4>)
 800f3d6:	a904      	add	r1, sp, #16
 800f3d8:	4638      	mov	r0, r7
 800f3da:	f7fe f95f 	bl	800d69c <_printf_i>
 800f3de:	e7eb      	b.n	800f3b8 <_svfiprintf_r+0x1c0>
 800f3e0:	080184ec 	.word	0x080184ec
 800f3e4:	080184f6 	.word	0x080184f6
 800f3e8:	0800d155 	.word	0x0800d155
 800f3ec:	0800f145 	.word	0x0800f145
 800f3f0:	080184f2 	.word	0x080184f2

0800f3f4 <__sflush_r>:
 800f3f4:	898a      	ldrh	r2, [r1, #12]
 800f3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3fa:	4605      	mov	r5, r0
 800f3fc:	0710      	lsls	r0, r2, #28
 800f3fe:	460c      	mov	r4, r1
 800f400:	d458      	bmi.n	800f4b4 <__sflush_r+0xc0>
 800f402:	684b      	ldr	r3, [r1, #4]
 800f404:	2b00      	cmp	r3, #0
 800f406:	dc05      	bgt.n	800f414 <__sflush_r+0x20>
 800f408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	dc02      	bgt.n	800f414 <__sflush_r+0x20>
 800f40e:	2000      	movs	r0, #0
 800f410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f416:	2e00      	cmp	r6, #0
 800f418:	d0f9      	beq.n	800f40e <__sflush_r+0x1a>
 800f41a:	2300      	movs	r3, #0
 800f41c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f420:	682f      	ldr	r7, [r5, #0]
 800f422:	6a21      	ldr	r1, [r4, #32]
 800f424:	602b      	str	r3, [r5, #0]
 800f426:	d032      	beq.n	800f48e <__sflush_r+0x9a>
 800f428:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f42a:	89a3      	ldrh	r3, [r4, #12]
 800f42c:	075a      	lsls	r2, r3, #29
 800f42e:	d505      	bpl.n	800f43c <__sflush_r+0x48>
 800f430:	6863      	ldr	r3, [r4, #4]
 800f432:	1ac0      	subs	r0, r0, r3
 800f434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f436:	b10b      	cbz	r3, 800f43c <__sflush_r+0x48>
 800f438:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f43a:	1ac0      	subs	r0, r0, r3
 800f43c:	2300      	movs	r3, #0
 800f43e:	4602      	mov	r2, r0
 800f440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f442:	6a21      	ldr	r1, [r4, #32]
 800f444:	4628      	mov	r0, r5
 800f446:	47b0      	blx	r6
 800f448:	1c43      	adds	r3, r0, #1
 800f44a:	89a3      	ldrh	r3, [r4, #12]
 800f44c:	d106      	bne.n	800f45c <__sflush_r+0x68>
 800f44e:	6829      	ldr	r1, [r5, #0]
 800f450:	291d      	cmp	r1, #29
 800f452:	d82b      	bhi.n	800f4ac <__sflush_r+0xb8>
 800f454:	4a29      	ldr	r2, [pc, #164]	; (800f4fc <__sflush_r+0x108>)
 800f456:	410a      	asrs	r2, r1
 800f458:	07d6      	lsls	r6, r2, #31
 800f45a:	d427      	bmi.n	800f4ac <__sflush_r+0xb8>
 800f45c:	2200      	movs	r2, #0
 800f45e:	6062      	str	r2, [r4, #4]
 800f460:	04d9      	lsls	r1, r3, #19
 800f462:	6922      	ldr	r2, [r4, #16]
 800f464:	6022      	str	r2, [r4, #0]
 800f466:	d504      	bpl.n	800f472 <__sflush_r+0x7e>
 800f468:	1c42      	adds	r2, r0, #1
 800f46a:	d101      	bne.n	800f470 <__sflush_r+0x7c>
 800f46c:	682b      	ldr	r3, [r5, #0]
 800f46e:	b903      	cbnz	r3, 800f472 <__sflush_r+0x7e>
 800f470:	6560      	str	r0, [r4, #84]	; 0x54
 800f472:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f474:	602f      	str	r7, [r5, #0]
 800f476:	2900      	cmp	r1, #0
 800f478:	d0c9      	beq.n	800f40e <__sflush_r+0x1a>
 800f47a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f47e:	4299      	cmp	r1, r3
 800f480:	d002      	beq.n	800f488 <__sflush_r+0x94>
 800f482:	4628      	mov	r0, r5
 800f484:	f7ff fa96 	bl	800e9b4 <_free_r>
 800f488:	2000      	movs	r0, #0
 800f48a:	6360      	str	r0, [r4, #52]	; 0x34
 800f48c:	e7c0      	b.n	800f410 <__sflush_r+0x1c>
 800f48e:	2301      	movs	r3, #1
 800f490:	4628      	mov	r0, r5
 800f492:	47b0      	blx	r6
 800f494:	1c41      	adds	r1, r0, #1
 800f496:	d1c8      	bne.n	800f42a <__sflush_r+0x36>
 800f498:	682b      	ldr	r3, [r5, #0]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d0c5      	beq.n	800f42a <__sflush_r+0x36>
 800f49e:	2b1d      	cmp	r3, #29
 800f4a0:	d001      	beq.n	800f4a6 <__sflush_r+0xb2>
 800f4a2:	2b16      	cmp	r3, #22
 800f4a4:	d101      	bne.n	800f4aa <__sflush_r+0xb6>
 800f4a6:	602f      	str	r7, [r5, #0]
 800f4a8:	e7b1      	b.n	800f40e <__sflush_r+0x1a>
 800f4aa:	89a3      	ldrh	r3, [r4, #12]
 800f4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4b0:	81a3      	strh	r3, [r4, #12]
 800f4b2:	e7ad      	b.n	800f410 <__sflush_r+0x1c>
 800f4b4:	690f      	ldr	r7, [r1, #16]
 800f4b6:	2f00      	cmp	r7, #0
 800f4b8:	d0a9      	beq.n	800f40e <__sflush_r+0x1a>
 800f4ba:	0793      	lsls	r3, r2, #30
 800f4bc:	680e      	ldr	r6, [r1, #0]
 800f4be:	bf08      	it	eq
 800f4c0:	694b      	ldreq	r3, [r1, #20]
 800f4c2:	600f      	str	r7, [r1, #0]
 800f4c4:	bf18      	it	ne
 800f4c6:	2300      	movne	r3, #0
 800f4c8:	eba6 0807 	sub.w	r8, r6, r7
 800f4cc:	608b      	str	r3, [r1, #8]
 800f4ce:	f1b8 0f00 	cmp.w	r8, #0
 800f4d2:	dd9c      	ble.n	800f40e <__sflush_r+0x1a>
 800f4d4:	6a21      	ldr	r1, [r4, #32]
 800f4d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f4d8:	4643      	mov	r3, r8
 800f4da:	463a      	mov	r2, r7
 800f4dc:	4628      	mov	r0, r5
 800f4de:	47b0      	blx	r6
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	dc06      	bgt.n	800f4f2 <__sflush_r+0xfe>
 800f4e4:	89a3      	ldrh	r3, [r4, #12]
 800f4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4ea:	81a3      	strh	r3, [r4, #12]
 800f4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f0:	e78e      	b.n	800f410 <__sflush_r+0x1c>
 800f4f2:	4407      	add	r7, r0
 800f4f4:	eba8 0800 	sub.w	r8, r8, r0
 800f4f8:	e7e9      	b.n	800f4ce <__sflush_r+0xda>
 800f4fa:	bf00      	nop
 800f4fc:	dfbffffe 	.word	0xdfbffffe

0800f500 <_fflush_r>:
 800f500:	b538      	push	{r3, r4, r5, lr}
 800f502:	690b      	ldr	r3, [r1, #16]
 800f504:	4605      	mov	r5, r0
 800f506:	460c      	mov	r4, r1
 800f508:	b913      	cbnz	r3, 800f510 <_fflush_r+0x10>
 800f50a:	2500      	movs	r5, #0
 800f50c:	4628      	mov	r0, r5
 800f50e:	bd38      	pop	{r3, r4, r5, pc}
 800f510:	b118      	cbz	r0, 800f51a <_fflush_r+0x1a>
 800f512:	6a03      	ldr	r3, [r0, #32]
 800f514:	b90b      	cbnz	r3, 800f51a <_fflush_r+0x1a>
 800f516:	f7fe fa6f 	bl	800d9f8 <__sinit>
 800f51a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d0f3      	beq.n	800f50a <_fflush_r+0xa>
 800f522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f524:	07d0      	lsls	r0, r2, #31
 800f526:	d404      	bmi.n	800f532 <_fflush_r+0x32>
 800f528:	0599      	lsls	r1, r3, #22
 800f52a:	d402      	bmi.n	800f532 <_fflush_r+0x32>
 800f52c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f52e:	f7fe fbc2 	bl	800dcb6 <__retarget_lock_acquire_recursive>
 800f532:	4628      	mov	r0, r5
 800f534:	4621      	mov	r1, r4
 800f536:	f7ff ff5d 	bl	800f3f4 <__sflush_r>
 800f53a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f53c:	07da      	lsls	r2, r3, #31
 800f53e:	4605      	mov	r5, r0
 800f540:	d4e4      	bmi.n	800f50c <_fflush_r+0xc>
 800f542:	89a3      	ldrh	r3, [r4, #12]
 800f544:	059b      	lsls	r3, r3, #22
 800f546:	d4e1      	bmi.n	800f50c <_fflush_r+0xc>
 800f548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f54a:	f7fe fbb5 	bl	800dcb8 <__retarget_lock_release_recursive>
 800f54e:	e7dd      	b.n	800f50c <_fflush_r+0xc>

0800f550 <memmove>:
 800f550:	4288      	cmp	r0, r1
 800f552:	b510      	push	{r4, lr}
 800f554:	eb01 0402 	add.w	r4, r1, r2
 800f558:	d902      	bls.n	800f560 <memmove+0x10>
 800f55a:	4284      	cmp	r4, r0
 800f55c:	4623      	mov	r3, r4
 800f55e:	d807      	bhi.n	800f570 <memmove+0x20>
 800f560:	1e43      	subs	r3, r0, #1
 800f562:	42a1      	cmp	r1, r4
 800f564:	d008      	beq.n	800f578 <memmove+0x28>
 800f566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f56a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f56e:	e7f8      	b.n	800f562 <memmove+0x12>
 800f570:	4402      	add	r2, r0
 800f572:	4601      	mov	r1, r0
 800f574:	428a      	cmp	r2, r1
 800f576:	d100      	bne.n	800f57a <memmove+0x2a>
 800f578:	bd10      	pop	{r4, pc}
 800f57a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f57e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f582:	e7f7      	b.n	800f574 <memmove+0x24>

0800f584 <memcpy>:
 800f584:	440a      	add	r2, r1
 800f586:	4291      	cmp	r1, r2
 800f588:	f100 33ff 	add.w	r3, r0, #4294967295
 800f58c:	d100      	bne.n	800f590 <memcpy+0xc>
 800f58e:	4770      	bx	lr
 800f590:	b510      	push	{r4, lr}
 800f592:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f59a:	4291      	cmp	r1, r2
 800f59c:	d1f9      	bne.n	800f592 <memcpy+0xe>
 800f59e:	bd10      	pop	{r4, pc}

0800f5a0 <__assert_func>:
 800f5a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5a2:	4614      	mov	r4, r2
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	4b09      	ldr	r3, [pc, #36]	; (800f5cc <__assert_func+0x2c>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4605      	mov	r5, r0
 800f5ac:	68d8      	ldr	r0, [r3, #12]
 800f5ae:	b14c      	cbz	r4, 800f5c4 <__assert_func+0x24>
 800f5b0:	4b07      	ldr	r3, [pc, #28]	; (800f5d0 <__assert_func+0x30>)
 800f5b2:	9100      	str	r1, [sp, #0]
 800f5b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f5b8:	4906      	ldr	r1, [pc, #24]	; (800f5d4 <__assert_func+0x34>)
 800f5ba:	462b      	mov	r3, r5
 800f5bc:	f000 f872 	bl	800f6a4 <fiprintf>
 800f5c0:	f000 f882 	bl	800f6c8 <abort>
 800f5c4:	4b04      	ldr	r3, [pc, #16]	; (800f5d8 <__assert_func+0x38>)
 800f5c6:	461c      	mov	r4, r3
 800f5c8:	e7f3      	b.n	800f5b2 <__assert_func+0x12>
 800f5ca:	bf00      	nop
 800f5cc:	20000070 	.word	0x20000070
 800f5d0:	08018507 	.word	0x08018507
 800f5d4:	08018514 	.word	0x08018514
 800f5d8:	08018542 	.word	0x08018542

0800f5dc <_calloc_r>:
 800f5dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5de:	fba1 2402 	umull	r2, r4, r1, r2
 800f5e2:	b94c      	cbnz	r4, 800f5f8 <_calloc_r+0x1c>
 800f5e4:	4611      	mov	r1, r2
 800f5e6:	9201      	str	r2, [sp, #4]
 800f5e8:	f7fd fc88 	bl	800cefc <_malloc_r>
 800f5ec:	9a01      	ldr	r2, [sp, #4]
 800f5ee:	4605      	mov	r5, r0
 800f5f0:	b930      	cbnz	r0, 800f600 <_calloc_r+0x24>
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	b003      	add	sp, #12
 800f5f6:	bd30      	pop	{r4, r5, pc}
 800f5f8:	220c      	movs	r2, #12
 800f5fa:	6002      	str	r2, [r0, #0]
 800f5fc:	2500      	movs	r5, #0
 800f5fe:	e7f8      	b.n	800f5f2 <_calloc_r+0x16>
 800f600:	4621      	mov	r1, r4
 800f602:	f7fe facb 	bl	800db9c <memset>
 800f606:	e7f4      	b.n	800f5f2 <_calloc_r+0x16>

0800f608 <__ascii_mbtowc>:
 800f608:	b082      	sub	sp, #8
 800f60a:	b901      	cbnz	r1, 800f60e <__ascii_mbtowc+0x6>
 800f60c:	a901      	add	r1, sp, #4
 800f60e:	b142      	cbz	r2, 800f622 <__ascii_mbtowc+0x1a>
 800f610:	b14b      	cbz	r3, 800f626 <__ascii_mbtowc+0x1e>
 800f612:	7813      	ldrb	r3, [r2, #0]
 800f614:	600b      	str	r3, [r1, #0]
 800f616:	7812      	ldrb	r2, [r2, #0]
 800f618:	1e10      	subs	r0, r2, #0
 800f61a:	bf18      	it	ne
 800f61c:	2001      	movne	r0, #1
 800f61e:	b002      	add	sp, #8
 800f620:	4770      	bx	lr
 800f622:	4610      	mov	r0, r2
 800f624:	e7fb      	b.n	800f61e <__ascii_mbtowc+0x16>
 800f626:	f06f 0001 	mvn.w	r0, #1
 800f62a:	e7f8      	b.n	800f61e <__ascii_mbtowc+0x16>

0800f62c <_realloc_r>:
 800f62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f630:	4680      	mov	r8, r0
 800f632:	4614      	mov	r4, r2
 800f634:	460e      	mov	r6, r1
 800f636:	b921      	cbnz	r1, 800f642 <_realloc_r+0x16>
 800f638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f63c:	4611      	mov	r1, r2
 800f63e:	f7fd bc5d 	b.w	800cefc <_malloc_r>
 800f642:	b92a      	cbnz	r2, 800f650 <_realloc_r+0x24>
 800f644:	f7ff f9b6 	bl	800e9b4 <_free_r>
 800f648:	4625      	mov	r5, r4
 800f64a:	4628      	mov	r0, r5
 800f64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f650:	f000 f841 	bl	800f6d6 <_malloc_usable_size_r>
 800f654:	4284      	cmp	r4, r0
 800f656:	4607      	mov	r7, r0
 800f658:	d802      	bhi.n	800f660 <_realloc_r+0x34>
 800f65a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f65e:	d812      	bhi.n	800f686 <_realloc_r+0x5a>
 800f660:	4621      	mov	r1, r4
 800f662:	4640      	mov	r0, r8
 800f664:	f7fd fc4a 	bl	800cefc <_malloc_r>
 800f668:	4605      	mov	r5, r0
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d0ed      	beq.n	800f64a <_realloc_r+0x1e>
 800f66e:	42bc      	cmp	r4, r7
 800f670:	4622      	mov	r2, r4
 800f672:	4631      	mov	r1, r6
 800f674:	bf28      	it	cs
 800f676:	463a      	movcs	r2, r7
 800f678:	f7ff ff84 	bl	800f584 <memcpy>
 800f67c:	4631      	mov	r1, r6
 800f67e:	4640      	mov	r0, r8
 800f680:	f7ff f998 	bl	800e9b4 <_free_r>
 800f684:	e7e1      	b.n	800f64a <_realloc_r+0x1e>
 800f686:	4635      	mov	r5, r6
 800f688:	e7df      	b.n	800f64a <_realloc_r+0x1e>

0800f68a <__ascii_wctomb>:
 800f68a:	b149      	cbz	r1, 800f6a0 <__ascii_wctomb+0x16>
 800f68c:	2aff      	cmp	r2, #255	; 0xff
 800f68e:	bf85      	ittet	hi
 800f690:	238a      	movhi	r3, #138	; 0x8a
 800f692:	6003      	strhi	r3, [r0, #0]
 800f694:	700a      	strbls	r2, [r1, #0]
 800f696:	f04f 30ff 	movhi.w	r0, #4294967295
 800f69a:	bf98      	it	ls
 800f69c:	2001      	movls	r0, #1
 800f69e:	4770      	bx	lr
 800f6a0:	4608      	mov	r0, r1
 800f6a2:	4770      	bx	lr

0800f6a4 <fiprintf>:
 800f6a4:	b40e      	push	{r1, r2, r3}
 800f6a6:	b503      	push	{r0, r1, lr}
 800f6a8:	4601      	mov	r1, r0
 800f6aa:	ab03      	add	r3, sp, #12
 800f6ac:	4805      	ldr	r0, [pc, #20]	; (800f6c4 <fiprintf+0x20>)
 800f6ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6b2:	6800      	ldr	r0, [r0, #0]
 800f6b4:	9301      	str	r3, [sp, #4]
 800f6b6:	f000 f83f 	bl	800f738 <_vfiprintf_r>
 800f6ba:	b002      	add	sp, #8
 800f6bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6c0:	b003      	add	sp, #12
 800f6c2:	4770      	bx	lr
 800f6c4:	20000070 	.word	0x20000070

0800f6c8 <abort>:
 800f6c8:	b508      	push	{r3, lr}
 800f6ca:	2006      	movs	r0, #6
 800f6cc:	f000 fa0c 	bl	800fae8 <raise>
 800f6d0:	2001      	movs	r0, #1
 800f6d2:	f7f4 f84f 	bl	8003774 <_exit>

0800f6d6 <_malloc_usable_size_r>:
 800f6d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6da:	1f18      	subs	r0, r3, #4
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	bfbc      	itt	lt
 800f6e0:	580b      	ldrlt	r3, [r1, r0]
 800f6e2:	18c0      	addlt	r0, r0, r3
 800f6e4:	4770      	bx	lr

0800f6e6 <__sfputc_r>:
 800f6e6:	6893      	ldr	r3, [r2, #8]
 800f6e8:	3b01      	subs	r3, #1
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	b410      	push	{r4}
 800f6ee:	6093      	str	r3, [r2, #8]
 800f6f0:	da08      	bge.n	800f704 <__sfputc_r+0x1e>
 800f6f2:	6994      	ldr	r4, [r2, #24]
 800f6f4:	42a3      	cmp	r3, r4
 800f6f6:	db01      	blt.n	800f6fc <__sfputc_r+0x16>
 800f6f8:	290a      	cmp	r1, #10
 800f6fa:	d103      	bne.n	800f704 <__sfputc_r+0x1e>
 800f6fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f700:	f000 b934 	b.w	800f96c <__swbuf_r>
 800f704:	6813      	ldr	r3, [r2, #0]
 800f706:	1c58      	adds	r0, r3, #1
 800f708:	6010      	str	r0, [r2, #0]
 800f70a:	7019      	strb	r1, [r3, #0]
 800f70c:	4608      	mov	r0, r1
 800f70e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f712:	4770      	bx	lr

0800f714 <__sfputs_r>:
 800f714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f716:	4606      	mov	r6, r0
 800f718:	460f      	mov	r7, r1
 800f71a:	4614      	mov	r4, r2
 800f71c:	18d5      	adds	r5, r2, r3
 800f71e:	42ac      	cmp	r4, r5
 800f720:	d101      	bne.n	800f726 <__sfputs_r+0x12>
 800f722:	2000      	movs	r0, #0
 800f724:	e007      	b.n	800f736 <__sfputs_r+0x22>
 800f726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f72a:	463a      	mov	r2, r7
 800f72c:	4630      	mov	r0, r6
 800f72e:	f7ff ffda 	bl	800f6e6 <__sfputc_r>
 800f732:	1c43      	adds	r3, r0, #1
 800f734:	d1f3      	bne.n	800f71e <__sfputs_r+0xa>
 800f736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f738 <_vfiprintf_r>:
 800f738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f73c:	460d      	mov	r5, r1
 800f73e:	b09d      	sub	sp, #116	; 0x74
 800f740:	4614      	mov	r4, r2
 800f742:	4698      	mov	r8, r3
 800f744:	4606      	mov	r6, r0
 800f746:	b118      	cbz	r0, 800f750 <_vfiprintf_r+0x18>
 800f748:	6a03      	ldr	r3, [r0, #32]
 800f74a:	b90b      	cbnz	r3, 800f750 <_vfiprintf_r+0x18>
 800f74c:	f7fe f954 	bl	800d9f8 <__sinit>
 800f750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f752:	07d9      	lsls	r1, r3, #31
 800f754:	d405      	bmi.n	800f762 <_vfiprintf_r+0x2a>
 800f756:	89ab      	ldrh	r3, [r5, #12]
 800f758:	059a      	lsls	r2, r3, #22
 800f75a:	d402      	bmi.n	800f762 <_vfiprintf_r+0x2a>
 800f75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f75e:	f7fe faaa 	bl	800dcb6 <__retarget_lock_acquire_recursive>
 800f762:	89ab      	ldrh	r3, [r5, #12]
 800f764:	071b      	lsls	r3, r3, #28
 800f766:	d501      	bpl.n	800f76c <_vfiprintf_r+0x34>
 800f768:	692b      	ldr	r3, [r5, #16]
 800f76a:	b99b      	cbnz	r3, 800f794 <_vfiprintf_r+0x5c>
 800f76c:	4629      	mov	r1, r5
 800f76e:	4630      	mov	r0, r6
 800f770:	f000 f93a 	bl	800f9e8 <__swsetup_r>
 800f774:	b170      	cbz	r0, 800f794 <_vfiprintf_r+0x5c>
 800f776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f778:	07dc      	lsls	r4, r3, #31
 800f77a:	d504      	bpl.n	800f786 <_vfiprintf_r+0x4e>
 800f77c:	f04f 30ff 	mov.w	r0, #4294967295
 800f780:	b01d      	add	sp, #116	; 0x74
 800f782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f786:	89ab      	ldrh	r3, [r5, #12]
 800f788:	0598      	lsls	r0, r3, #22
 800f78a:	d4f7      	bmi.n	800f77c <_vfiprintf_r+0x44>
 800f78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f78e:	f7fe fa93 	bl	800dcb8 <__retarget_lock_release_recursive>
 800f792:	e7f3      	b.n	800f77c <_vfiprintf_r+0x44>
 800f794:	2300      	movs	r3, #0
 800f796:	9309      	str	r3, [sp, #36]	; 0x24
 800f798:	2320      	movs	r3, #32
 800f79a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f79e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7a2:	2330      	movs	r3, #48	; 0x30
 800f7a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f958 <_vfiprintf_r+0x220>
 800f7a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7ac:	f04f 0901 	mov.w	r9, #1
 800f7b0:	4623      	mov	r3, r4
 800f7b2:	469a      	mov	sl, r3
 800f7b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7b8:	b10a      	cbz	r2, 800f7be <_vfiprintf_r+0x86>
 800f7ba:	2a25      	cmp	r2, #37	; 0x25
 800f7bc:	d1f9      	bne.n	800f7b2 <_vfiprintf_r+0x7a>
 800f7be:	ebba 0b04 	subs.w	fp, sl, r4
 800f7c2:	d00b      	beq.n	800f7dc <_vfiprintf_r+0xa4>
 800f7c4:	465b      	mov	r3, fp
 800f7c6:	4622      	mov	r2, r4
 800f7c8:	4629      	mov	r1, r5
 800f7ca:	4630      	mov	r0, r6
 800f7cc:	f7ff ffa2 	bl	800f714 <__sfputs_r>
 800f7d0:	3001      	adds	r0, #1
 800f7d2:	f000 80a9 	beq.w	800f928 <_vfiprintf_r+0x1f0>
 800f7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7d8:	445a      	add	r2, fp
 800f7da:	9209      	str	r2, [sp, #36]	; 0x24
 800f7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f000 80a1 	beq.w	800f928 <_vfiprintf_r+0x1f0>
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f7ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7f0:	f10a 0a01 	add.w	sl, sl, #1
 800f7f4:	9304      	str	r3, [sp, #16]
 800f7f6:	9307      	str	r3, [sp, #28]
 800f7f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7fc:	931a      	str	r3, [sp, #104]	; 0x68
 800f7fe:	4654      	mov	r4, sl
 800f800:	2205      	movs	r2, #5
 800f802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f806:	4854      	ldr	r0, [pc, #336]	; (800f958 <_vfiprintf_r+0x220>)
 800f808:	f7f0 fcfa 	bl	8000200 <memchr>
 800f80c:	9a04      	ldr	r2, [sp, #16]
 800f80e:	b9d8      	cbnz	r0, 800f848 <_vfiprintf_r+0x110>
 800f810:	06d1      	lsls	r1, r2, #27
 800f812:	bf44      	itt	mi
 800f814:	2320      	movmi	r3, #32
 800f816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f81a:	0713      	lsls	r3, r2, #28
 800f81c:	bf44      	itt	mi
 800f81e:	232b      	movmi	r3, #43	; 0x2b
 800f820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f824:	f89a 3000 	ldrb.w	r3, [sl]
 800f828:	2b2a      	cmp	r3, #42	; 0x2a
 800f82a:	d015      	beq.n	800f858 <_vfiprintf_r+0x120>
 800f82c:	9a07      	ldr	r2, [sp, #28]
 800f82e:	4654      	mov	r4, sl
 800f830:	2000      	movs	r0, #0
 800f832:	f04f 0c0a 	mov.w	ip, #10
 800f836:	4621      	mov	r1, r4
 800f838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f83c:	3b30      	subs	r3, #48	; 0x30
 800f83e:	2b09      	cmp	r3, #9
 800f840:	d94d      	bls.n	800f8de <_vfiprintf_r+0x1a6>
 800f842:	b1b0      	cbz	r0, 800f872 <_vfiprintf_r+0x13a>
 800f844:	9207      	str	r2, [sp, #28]
 800f846:	e014      	b.n	800f872 <_vfiprintf_r+0x13a>
 800f848:	eba0 0308 	sub.w	r3, r0, r8
 800f84c:	fa09 f303 	lsl.w	r3, r9, r3
 800f850:	4313      	orrs	r3, r2
 800f852:	9304      	str	r3, [sp, #16]
 800f854:	46a2      	mov	sl, r4
 800f856:	e7d2      	b.n	800f7fe <_vfiprintf_r+0xc6>
 800f858:	9b03      	ldr	r3, [sp, #12]
 800f85a:	1d19      	adds	r1, r3, #4
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	9103      	str	r1, [sp, #12]
 800f860:	2b00      	cmp	r3, #0
 800f862:	bfbb      	ittet	lt
 800f864:	425b      	neglt	r3, r3
 800f866:	f042 0202 	orrlt.w	r2, r2, #2
 800f86a:	9307      	strge	r3, [sp, #28]
 800f86c:	9307      	strlt	r3, [sp, #28]
 800f86e:	bfb8      	it	lt
 800f870:	9204      	strlt	r2, [sp, #16]
 800f872:	7823      	ldrb	r3, [r4, #0]
 800f874:	2b2e      	cmp	r3, #46	; 0x2e
 800f876:	d10c      	bne.n	800f892 <_vfiprintf_r+0x15a>
 800f878:	7863      	ldrb	r3, [r4, #1]
 800f87a:	2b2a      	cmp	r3, #42	; 0x2a
 800f87c:	d134      	bne.n	800f8e8 <_vfiprintf_r+0x1b0>
 800f87e:	9b03      	ldr	r3, [sp, #12]
 800f880:	1d1a      	adds	r2, r3, #4
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	9203      	str	r2, [sp, #12]
 800f886:	2b00      	cmp	r3, #0
 800f888:	bfb8      	it	lt
 800f88a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f88e:	3402      	adds	r4, #2
 800f890:	9305      	str	r3, [sp, #20]
 800f892:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f968 <_vfiprintf_r+0x230>
 800f896:	7821      	ldrb	r1, [r4, #0]
 800f898:	2203      	movs	r2, #3
 800f89a:	4650      	mov	r0, sl
 800f89c:	f7f0 fcb0 	bl	8000200 <memchr>
 800f8a0:	b138      	cbz	r0, 800f8b2 <_vfiprintf_r+0x17a>
 800f8a2:	9b04      	ldr	r3, [sp, #16]
 800f8a4:	eba0 000a 	sub.w	r0, r0, sl
 800f8a8:	2240      	movs	r2, #64	; 0x40
 800f8aa:	4082      	lsls	r2, r0
 800f8ac:	4313      	orrs	r3, r2
 800f8ae:	3401      	adds	r4, #1
 800f8b0:	9304      	str	r3, [sp, #16]
 800f8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8b6:	4829      	ldr	r0, [pc, #164]	; (800f95c <_vfiprintf_r+0x224>)
 800f8b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8bc:	2206      	movs	r2, #6
 800f8be:	f7f0 fc9f 	bl	8000200 <memchr>
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	d03f      	beq.n	800f946 <_vfiprintf_r+0x20e>
 800f8c6:	4b26      	ldr	r3, [pc, #152]	; (800f960 <_vfiprintf_r+0x228>)
 800f8c8:	bb1b      	cbnz	r3, 800f912 <_vfiprintf_r+0x1da>
 800f8ca:	9b03      	ldr	r3, [sp, #12]
 800f8cc:	3307      	adds	r3, #7
 800f8ce:	f023 0307 	bic.w	r3, r3, #7
 800f8d2:	3308      	adds	r3, #8
 800f8d4:	9303      	str	r3, [sp, #12]
 800f8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8d8:	443b      	add	r3, r7
 800f8da:	9309      	str	r3, [sp, #36]	; 0x24
 800f8dc:	e768      	b.n	800f7b0 <_vfiprintf_r+0x78>
 800f8de:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8e2:	460c      	mov	r4, r1
 800f8e4:	2001      	movs	r0, #1
 800f8e6:	e7a6      	b.n	800f836 <_vfiprintf_r+0xfe>
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	3401      	adds	r4, #1
 800f8ec:	9305      	str	r3, [sp, #20]
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	f04f 0c0a 	mov.w	ip, #10
 800f8f4:	4620      	mov	r0, r4
 800f8f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8fa:	3a30      	subs	r2, #48	; 0x30
 800f8fc:	2a09      	cmp	r2, #9
 800f8fe:	d903      	bls.n	800f908 <_vfiprintf_r+0x1d0>
 800f900:	2b00      	cmp	r3, #0
 800f902:	d0c6      	beq.n	800f892 <_vfiprintf_r+0x15a>
 800f904:	9105      	str	r1, [sp, #20]
 800f906:	e7c4      	b.n	800f892 <_vfiprintf_r+0x15a>
 800f908:	fb0c 2101 	mla	r1, ip, r1, r2
 800f90c:	4604      	mov	r4, r0
 800f90e:	2301      	movs	r3, #1
 800f910:	e7f0      	b.n	800f8f4 <_vfiprintf_r+0x1bc>
 800f912:	ab03      	add	r3, sp, #12
 800f914:	9300      	str	r3, [sp, #0]
 800f916:	462a      	mov	r2, r5
 800f918:	4b12      	ldr	r3, [pc, #72]	; (800f964 <_vfiprintf_r+0x22c>)
 800f91a:	a904      	add	r1, sp, #16
 800f91c:	4630      	mov	r0, r6
 800f91e:	f7fd fc19 	bl	800d154 <_printf_float>
 800f922:	4607      	mov	r7, r0
 800f924:	1c78      	adds	r0, r7, #1
 800f926:	d1d6      	bne.n	800f8d6 <_vfiprintf_r+0x19e>
 800f928:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f92a:	07d9      	lsls	r1, r3, #31
 800f92c:	d405      	bmi.n	800f93a <_vfiprintf_r+0x202>
 800f92e:	89ab      	ldrh	r3, [r5, #12]
 800f930:	059a      	lsls	r2, r3, #22
 800f932:	d402      	bmi.n	800f93a <_vfiprintf_r+0x202>
 800f934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f936:	f7fe f9bf 	bl	800dcb8 <__retarget_lock_release_recursive>
 800f93a:	89ab      	ldrh	r3, [r5, #12]
 800f93c:	065b      	lsls	r3, r3, #25
 800f93e:	f53f af1d 	bmi.w	800f77c <_vfiprintf_r+0x44>
 800f942:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f944:	e71c      	b.n	800f780 <_vfiprintf_r+0x48>
 800f946:	ab03      	add	r3, sp, #12
 800f948:	9300      	str	r3, [sp, #0]
 800f94a:	462a      	mov	r2, r5
 800f94c:	4b05      	ldr	r3, [pc, #20]	; (800f964 <_vfiprintf_r+0x22c>)
 800f94e:	a904      	add	r1, sp, #16
 800f950:	4630      	mov	r0, r6
 800f952:	f7fd fea3 	bl	800d69c <_printf_i>
 800f956:	e7e4      	b.n	800f922 <_vfiprintf_r+0x1ea>
 800f958:	080184ec 	.word	0x080184ec
 800f95c:	080184f6 	.word	0x080184f6
 800f960:	0800d155 	.word	0x0800d155
 800f964:	0800f715 	.word	0x0800f715
 800f968:	080184f2 	.word	0x080184f2

0800f96c <__swbuf_r>:
 800f96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f96e:	460e      	mov	r6, r1
 800f970:	4614      	mov	r4, r2
 800f972:	4605      	mov	r5, r0
 800f974:	b118      	cbz	r0, 800f97e <__swbuf_r+0x12>
 800f976:	6a03      	ldr	r3, [r0, #32]
 800f978:	b90b      	cbnz	r3, 800f97e <__swbuf_r+0x12>
 800f97a:	f7fe f83d 	bl	800d9f8 <__sinit>
 800f97e:	69a3      	ldr	r3, [r4, #24]
 800f980:	60a3      	str	r3, [r4, #8]
 800f982:	89a3      	ldrh	r3, [r4, #12]
 800f984:	071a      	lsls	r2, r3, #28
 800f986:	d525      	bpl.n	800f9d4 <__swbuf_r+0x68>
 800f988:	6923      	ldr	r3, [r4, #16]
 800f98a:	b31b      	cbz	r3, 800f9d4 <__swbuf_r+0x68>
 800f98c:	6823      	ldr	r3, [r4, #0]
 800f98e:	6922      	ldr	r2, [r4, #16]
 800f990:	1a98      	subs	r0, r3, r2
 800f992:	6963      	ldr	r3, [r4, #20]
 800f994:	b2f6      	uxtb	r6, r6
 800f996:	4283      	cmp	r3, r0
 800f998:	4637      	mov	r7, r6
 800f99a:	dc04      	bgt.n	800f9a6 <__swbuf_r+0x3a>
 800f99c:	4621      	mov	r1, r4
 800f99e:	4628      	mov	r0, r5
 800f9a0:	f7ff fdae 	bl	800f500 <_fflush_r>
 800f9a4:	b9e0      	cbnz	r0, 800f9e0 <__swbuf_r+0x74>
 800f9a6:	68a3      	ldr	r3, [r4, #8]
 800f9a8:	3b01      	subs	r3, #1
 800f9aa:	60a3      	str	r3, [r4, #8]
 800f9ac:	6823      	ldr	r3, [r4, #0]
 800f9ae:	1c5a      	adds	r2, r3, #1
 800f9b0:	6022      	str	r2, [r4, #0]
 800f9b2:	701e      	strb	r6, [r3, #0]
 800f9b4:	6962      	ldr	r2, [r4, #20]
 800f9b6:	1c43      	adds	r3, r0, #1
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d004      	beq.n	800f9c6 <__swbuf_r+0x5a>
 800f9bc:	89a3      	ldrh	r3, [r4, #12]
 800f9be:	07db      	lsls	r3, r3, #31
 800f9c0:	d506      	bpl.n	800f9d0 <__swbuf_r+0x64>
 800f9c2:	2e0a      	cmp	r6, #10
 800f9c4:	d104      	bne.n	800f9d0 <__swbuf_r+0x64>
 800f9c6:	4621      	mov	r1, r4
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	f7ff fd99 	bl	800f500 <_fflush_r>
 800f9ce:	b938      	cbnz	r0, 800f9e0 <__swbuf_r+0x74>
 800f9d0:	4638      	mov	r0, r7
 800f9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9d4:	4621      	mov	r1, r4
 800f9d6:	4628      	mov	r0, r5
 800f9d8:	f000 f806 	bl	800f9e8 <__swsetup_r>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d0d5      	beq.n	800f98c <__swbuf_r+0x20>
 800f9e0:	f04f 37ff 	mov.w	r7, #4294967295
 800f9e4:	e7f4      	b.n	800f9d0 <__swbuf_r+0x64>
	...

0800f9e8 <__swsetup_r>:
 800f9e8:	b538      	push	{r3, r4, r5, lr}
 800f9ea:	4b2a      	ldr	r3, [pc, #168]	; (800fa94 <__swsetup_r+0xac>)
 800f9ec:	4605      	mov	r5, r0
 800f9ee:	6818      	ldr	r0, [r3, #0]
 800f9f0:	460c      	mov	r4, r1
 800f9f2:	b118      	cbz	r0, 800f9fc <__swsetup_r+0x14>
 800f9f4:	6a03      	ldr	r3, [r0, #32]
 800f9f6:	b90b      	cbnz	r3, 800f9fc <__swsetup_r+0x14>
 800f9f8:	f7fd fffe 	bl	800d9f8 <__sinit>
 800f9fc:	89a3      	ldrh	r3, [r4, #12]
 800f9fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa02:	0718      	lsls	r0, r3, #28
 800fa04:	d422      	bmi.n	800fa4c <__swsetup_r+0x64>
 800fa06:	06d9      	lsls	r1, r3, #27
 800fa08:	d407      	bmi.n	800fa1a <__swsetup_r+0x32>
 800fa0a:	2309      	movs	r3, #9
 800fa0c:	602b      	str	r3, [r5, #0]
 800fa0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa12:	81a3      	strh	r3, [r4, #12]
 800fa14:	f04f 30ff 	mov.w	r0, #4294967295
 800fa18:	e034      	b.n	800fa84 <__swsetup_r+0x9c>
 800fa1a:	0758      	lsls	r0, r3, #29
 800fa1c:	d512      	bpl.n	800fa44 <__swsetup_r+0x5c>
 800fa1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa20:	b141      	cbz	r1, 800fa34 <__swsetup_r+0x4c>
 800fa22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa26:	4299      	cmp	r1, r3
 800fa28:	d002      	beq.n	800fa30 <__swsetup_r+0x48>
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	f7fe ffc2 	bl	800e9b4 <_free_r>
 800fa30:	2300      	movs	r3, #0
 800fa32:	6363      	str	r3, [r4, #52]	; 0x34
 800fa34:	89a3      	ldrh	r3, [r4, #12]
 800fa36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa3a:	81a3      	strh	r3, [r4, #12]
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	6063      	str	r3, [r4, #4]
 800fa40:	6923      	ldr	r3, [r4, #16]
 800fa42:	6023      	str	r3, [r4, #0]
 800fa44:	89a3      	ldrh	r3, [r4, #12]
 800fa46:	f043 0308 	orr.w	r3, r3, #8
 800fa4a:	81a3      	strh	r3, [r4, #12]
 800fa4c:	6923      	ldr	r3, [r4, #16]
 800fa4e:	b94b      	cbnz	r3, 800fa64 <__swsetup_r+0x7c>
 800fa50:	89a3      	ldrh	r3, [r4, #12]
 800fa52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa5a:	d003      	beq.n	800fa64 <__swsetup_r+0x7c>
 800fa5c:	4621      	mov	r1, r4
 800fa5e:	4628      	mov	r0, r5
 800fa60:	f000 f884 	bl	800fb6c <__smakebuf_r>
 800fa64:	89a0      	ldrh	r0, [r4, #12]
 800fa66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa6a:	f010 0301 	ands.w	r3, r0, #1
 800fa6e:	d00a      	beq.n	800fa86 <__swsetup_r+0x9e>
 800fa70:	2300      	movs	r3, #0
 800fa72:	60a3      	str	r3, [r4, #8]
 800fa74:	6963      	ldr	r3, [r4, #20]
 800fa76:	425b      	negs	r3, r3
 800fa78:	61a3      	str	r3, [r4, #24]
 800fa7a:	6923      	ldr	r3, [r4, #16]
 800fa7c:	b943      	cbnz	r3, 800fa90 <__swsetup_r+0xa8>
 800fa7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa82:	d1c4      	bne.n	800fa0e <__swsetup_r+0x26>
 800fa84:	bd38      	pop	{r3, r4, r5, pc}
 800fa86:	0781      	lsls	r1, r0, #30
 800fa88:	bf58      	it	pl
 800fa8a:	6963      	ldrpl	r3, [r4, #20]
 800fa8c:	60a3      	str	r3, [r4, #8]
 800fa8e:	e7f4      	b.n	800fa7a <__swsetup_r+0x92>
 800fa90:	2000      	movs	r0, #0
 800fa92:	e7f7      	b.n	800fa84 <__swsetup_r+0x9c>
 800fa94:	20000070 	.word	0x20000070

0800fa98 <_raise_r>:
 800fa98:	291f      	cmp	r1, #31
 800fa9a:	b538      	push	{r3, r4, r5, lr}
 800fa9c:	4604      	mov	r4, r0
 800fa9e:	460d      	mov	r5, r1
 800faa0:	d904      	bls.n	800faac <_raise_r+0x14>
 800faa2:	2316      	movs	r3, #22
 800faa4:	6003      	str	r3, [r0, #0]
 800faa6:	f04f 30ff 	mov.w	r0, #4294967295
 800faaa:	bd38      	pop	{r3, r4, r5, pc}
 800faac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800faae:	b112      	cbz	r2, 800fab6 <_raise_r+0x1e>
 800fab0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fab4:	b94b      	cbnz	r3, 800faca <_raise_r+0x32>
 800fab6:	4620      	mov	r0, r4
 800fab8:	f000 f830 	bl	800fb1c <_getpid_r>
 800fabc:	462a      	mov	r2, r5
 800fabe:	4601      	mov	r1, r0
 800fac0:	4620      	mov	r0, r4
 800fac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fac6:	f000 b817 	b.w	800faf8 <_kill_r>
 800faca:	2b01      	cmp	r3, #1
 800facc:	d00a      	beq.n	800fae4 <_raise_r+0x4c>
 800face:	1c59      	adds	r1, r3, #1
 800fad0:	d103      	bne.n	800fada <_raise_r+0x42>
 800fad2:	2316      	movs	r3, #22
 800fad4:	6003      	str	r3, [r0, #0]
 800fad6:	2001      	movs	r0, #1
 800fad8:	e7e7      	b.n	800faaa <_raise_r+0x12>
 800fada:	2400      	movs	r4, #0
 800fadc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fae0:	4628      	mov	r0, r5
 800fae2:	4798      	blx	r3
 800fae4:	2000      	movs	r0, #0
 800fae6:	e7e0      	b.n	800faaa <_raise_r+0x12>

0800fae8 <raise>:
 800fae8:	4b02      	ldr	r3, [pc, #8]	; (800faf4 <raise+0xc>)
 800faea:	4601      	mov	r1, r0
 800faec:	6818      	ldr	r0, [r3, #0]
 800faee:	f7ff bfd3 	b.w	800fa98 <_raise_r>
 800faf2:	bf00      	nop
 800faf4:	20000070 	.word	0x20000070

0800faf8 <_kill_r>:
 800faf8:	b538      	push	{r3, r4, r5, lr}
 800fafa:	4d07      	ldr	r5, [pc, #28]	; (800fb18 <_kill_r+0x20>)
 800fafc:	2300      	movs	r3, #0
 800fafe:	4604      	mov	r4, r0
 800fb00:	4608      	mov	r0, r1
 800fb02:	4611      	mov	r1, r2
 800fb04:	602b      	str	r3, [r5, #0]
 800fb06:	f7f3 fe25 	bl	8003754 <_kill>
 800fb0a:	1c43      	adds	r3, r0, #1
 800fb0c:	d102      	bne.n	800fb14 <_kill_r+0x1c>
 800fb0e:	682b      	ldr	r3, [r5, #0]
 800fb10:	b103      	cbz	r3, 800fb14 <_kill_r+0x1c>
 800fb12:	6023      	str	r3, [r4, #0]
 800fb14:	bd38      	pop	{r3, r4, r5, pc}
 800fb16:	bf00      	nop
 800fb18:	20002990 	.word	0x20002990

0800fb1c <_getpid_r>:
 800fb1c:	f7f3 be12 	b.w	8003744 <_getpid>

0800fb20 <__swhatbuf_r>:
 800fb20:	b570      	push	{r4, r5, r6, lr}
 800fb22:	460c      	mov	r4, r1
 800fb24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb28:	2900      	cmp	r1, #0
 800fb2a:	b096      	sub	sp, #88	; 0x58
 800fb2c:	4615      	mov	r5, r2
 800fb2e:	461e      	mov	r6, r3
 800fb30:	da0d      	bge.n	800fb4e <__swhatbuf_r+0x2e>
 800fb32:	89a3      	ldrh	r3, [r4, #12]
 800fb34:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fb38:	f04f 0100 	mov.w	r1, #0
 800fb3c:	bf0c      	ite	eq
 800fb3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fb42:	2340      	movne	r3, #64	; 0x40
 800fb44:	2000      	movs	r0, #0
 800fb46:	6031      	str	r1, [r6, #0]
 800fb48:	602b      	str	r3, [r5, #0]
 800fb4a:	b016      	add	sp, #88	; 0x58
 800fb4c:	bd70      	pop	{r4, r5, r6, pc}
 800fb4e:	466a      	mov	r2, sp
 800fb50:	f000 f848 	bl	800fbe4 <_fstat_r>
 800fb54:	2800      	cmp	r0, #0
 800fb56:	dbec      	blt.n	800fb32 <__swhatbuf_r+0x12>
 800fb58:	9901      	ldr	r1, [sp, #4]
 800fb5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fb5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fb62:	4259      	negs	r1, r3
 800fb64:	4159      	adcs	r1, r3
 800fb66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb6a:	e7eb      	b.n	800fb44 <__swhatbuf_r+0x24>

0800fb6c <__smakebuf_r>:
 800fb6c:	898b      	ldrh	r3, [r1, #12]
 800fb6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb70:	079d      	lsls	r5, r3, #30
 800fb72:	4606      	mov	r6, r0
 800fb74:	460c      	mov	r4, r1
 800fb76:	d507      	bpl.n	800fb88 <__smakebuf_r+0x1c>
 800fb78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb7c:	6023      	str	r3, [r4, #0]
 800fb7e:	6123      	str	r3, [r4, #16]
 800fb80:	2301      	movs	r3, #1
 800fb82:	6163      	str	r3, [r4, #20]
 800fb84:	b002      	add	sp, #8
 800fb86:	bd70      	pop	{r4, r5, r6, pc}
 800fb88:	ab01      	add	r3, sp, #4
 800fb8a:	466a      	mov	r2, sp
 800fb8c:	f7ff ffc8 	bl	800fb20 <__swhatbuf_r>
 800fb90:	9900      	ldr	r1, [sp, #0]
 800fb92:	4605      	mov	r5, r0
 800fb94:	4630      	mov	r0, r6
 800fb96:	f7fd f9b1 	bl	800cefc <_malloc_r>
 800fb9a:	b948      	cbnz	r0, 800fbb0 <__smakebuf_r+0x44>
 800fb9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fba0:	059a      	lsls	r2, r3, #22
 800fba2:	d4ef      	bmi.n	800fb84 <__smakebuf_r+0x18>
 800fba4:	f023 0303 	bic.w	r3, r3, #3
 800fba8:	f043 0302 	orr.w	r3, r3, #2
 800fbac:	81a3      	strh	r3, [r4, #12]
 800fbae:	e7e3      	b.n	800fb78 <__smakebuf_r+0xc>
 800fbb0:	89a3      	ldrh	r3, [r4, #12]
 800fbb2:	6020      	str	r0, [r4, #0]
 800fbb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbb8:	81a3      	strh	r3, [r4, #12]
 800fbba:	9b00      	ldr	r3, [sp, #0]
 800fbbc:	6163      	str	r3, [r4, #20]
 800fbbe:	9b01      	ldr	r3, [sp, #4]
 800fbc0:	6120      	str	r0, [r4, #16]
 800fbc2:	b15b      	cbz	r3, 800fbdc <__smakebuf_r+0x70>
 800fbc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbc8:	4630      	mov	r0, r6
 800fbca:	f000 f81d 	bl	800fc08 <_isatty_r>
 800fbce:	b128      	cbz	r0, 800fbdc <__smakebuf_r+0x70>
 800fbd0:	89a3      	ldrh	r3, [r4, #12]
 800fbd2:	f023 0303 	bic.w	r3, r3, #3
 800fbd6:	f043 0301 	orr.w	r3, r3, #1
 800fbda:	81a3      	strh	r3, [r4, #12]
 800fbdc:	89a3      	ldrh	r3, [r4, #12]
 800fbde:	431d      	orrs	r5, r3
 800fbe0:	81a5      	strh	r5, [r4, #12]
 800fbe2:	e7cf      	b.n	800fb84 <__smakebuf_r+0x18>

0800fbe4 <_fstat_r>:
 800fbe4:	b538      	push	{r3, r4, r5, lr}
 800fbe6:	4d07      	ldr	r5, [pc, #28]	; (800fc04 <_fstat_r+0x20>)
 800fbe8:	2300      	movs	r3, #0
 800fbea:	4604      	mov	r4, r0
 800fbec:	4608      	mov	r0, r1
 800fbee:	4611      	mov	r1, r2
 800fbf0:	602b      	str	r3, [r5, #0]
 800fbf2:	f7f3 fe0e 	bl	8003812 <_fstat>
 800fbf6:	1c43      	adds	r3, r0, #1
 800fbf8:	d102      	bne.n	800fc00 <_fstat_r+0x1c>
 800fbfa:	682b      	ldr	r3, [r5, #0]
 800fbfc:	b103      	cbz	r3, 800fc00 <_fstat_r+0x1c>
 800fbfe:	6023      	str	r3, [r4, #0]
 800fc00:	bd38      	pop	{r3, r4, r5, pc}
 800fc02:	bf00      	nop
 800fc04:	20002990 	.word	0x20002990

0800fc08 <_isatty_r>:
 800fc08:	b538      	push	{r3, r4, r5, lr}
 800fc0a:	4d06      	ldr	r5, [pc, #24]	; (800fc24 <_isatty_r+0x1c>)
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	4604      	mov	r4, r0
 800fc10:	4608      	mov	r0, r1
 800fc12:	602b      	str	r3, [r5, #0]
 800fc14:	f7f3 fe0d 	bl	8003832 <_isatty>
 800fc18:	1c43      	adds	r3, r0, #1
 800fc1a:	d102      	bne.n	800fc22 <_isatty_r+0x1a>
 800fc1c:	682b      	ldr	r3, [r5, #0]
 800fc1e:	b103      	cbz	r3, 800fc22 <_isatty_r+0x1a>
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	bd38      	pop	{r3, r4, r5, pc}
 800fc24:	20002990 	.word	0x20002990

0800fc28 <atan2>:
 800fc28:	f000 b952 	b.w	800fed0 <__ieee754_atan2>
 800fc2c:	0000      	movs	r0, r0
	...

0800fc30 <log>:
 800fc30:	b538      	push	{r3, r4, r5, lr}
 800fc32:	ed2d 8b02 	vpush	{d8}
 800fc36:	ec55 4b10 	vmov	r4, r5, d0
 800fc3a:	f000 fa11 	bl	8010060 <__ieee754_log>
 800fc3e:	4622      	mov	r2, r4
 800fc40:	462b      	mov	r3, r5
 800fc42:	4620      	mov	r0, r4
 800fc44:	4629      	mov	r1, r5
 800fc46:	eeb0 8a40 	vmov.f32	s16, s0
 800fc4a:	eef0 8a60 	vmov.f32	s17, s1
 800fc4e:	f7f0 ff85 	bl	8000b5c <__aeabi_dcmpun>
 800fc52:	b998      	cbnz	r0, 800fc7c <log+0x4c>
 800fc54:	2200      	movs	r2, #0
 800fc56:	2300      	movs	r3, #0
 800fc58:	4620      	mov	r0, r4
 800fc5a:	4629      	mov	r1, r5
 800fc5c:	f7f0 ff74 	bl	8000b48 <__aeabi_dcmpgt>
 800fc60:	b960      	cbnz	r0, 800fc7c <log+0x4c>
 800fc62:	2200      	movs	r2, #0
 800fc64:	2300      	movs	r3, #0
 800fc66:	4620      	mov	r0, r4
 800fc68:	4629      	mov	r1, r5
 800fc6a:	f7f0 ff45 	bl	8000af8 <__aeabi_dcmpeq>
 800fc6e:	b160      	cbz	r0, 800fc8a <log+0x5a>
 800fc70:	f7fd fff6 	bl	800dc60 <__errno>
 800fc74:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800fca0 <log+0x70>
 800fc78:	2322      	movs	r3, #34	; 0x22
 800fc7a:	6003      	str	r3, [r0, #0]
 800fc7c:	eeb0 0a48 	vmov.f32	s0, s16
 800fc80:	eef0 0a68 	vmov.f32	s1, s17
 800fc84:	ecbd 8b02 	vpop	{d8}
 800fc88:	bd38      	pop	{r3, r4, r5, pc}
 800fc8a:	f7fd ffe9 	bl	800dc60 <__errno>
 800fc8e:	ecbd 8b02 	vpop	{d8}
 800fc92:	2321      	movs	r3, #33	; 0x21
 800fc94:	6003      	str	r3, [r0, #0]
 800fc96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc9a:	4803      	ldr	r0, [pc, #12]	; (800fca8 <log+0x78>)
 800fc9c:	f000 b834 	b.w	800fd08 <nan>
 800fca0:	00000000 	.word	0x00000000
 800fca4:	fff00000 	.word	0xfff00000
 800fca8:	08018542 	.word	0x08018542

0800fcac <sqrt>:
 800fcac:	b538      	push	{r3, r4, r5, lr}
 800fcae:	ed2d 8b02 	vpush	{d8}
 800fcb2:	ec55 4b10 	vmov	r4, r5, d0
 800fcb6:	f000 f82f 	bl	800fd18 <__ieee754_sqrt>
 800fcba:	4622      	mov	r2, r4
 800fcbc:	462b      	mov	r3, r5
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	4629      	mov	r1, r5
 800fcc2:	eeb0 8a40 	vmov.f32	s16, s0
 800fcc6:	eef0 8a60 	vmov.f32	s17, s1
 800fcca:	f7f0 ff47 	bl	8000b5c <__aeabi_dcmpun>
 800fcce:	b990      	cbnz	r0, 800fcf6 <sqrt+0x4a>
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	4629      	mov	r1, r5
 800fcd8:	f7f0 ff18 	bl	8000b0c <__aeabi_dcmplt>
 800fcdc:	b158      	cbz	r0, 800fcf6 <sqrt+0x4a>
 800fcde:	f7fd ffbf 	bl	800dc60 <__errno>
 800fce2:	2321      	movs	r3, #33	; 0x21
 800fce4:	6003      	str	r3, [r0, #0]
 800fce6:	2200      	movs	r2, #0
 800fce8:	2300      	movs	r3, #0
 800fcea:	4610      	mov	r0, r2
 800fcec:	4619      	mov	r1, r3
 800fcee:	f7f0 fdc5 	bl	800087c <__aeabi_ddiv>
 800fcf2:	ec41 0b18 	vmov	d8, r0, r1
 800fcf6:	eeb0 0a48 	vmov.f32	s0, s16
 800fcfa:	eef0 0a68 	vmov.f32	s1, s17
 800fcfe:	ecbd 8b02 	vpop	{d8}
 800fd02:	bd38      	pop	{r3, r4, r5, pc}
 800fd04:	0000      	movs	r0, r0
	...

0800fd08 <nan>:
 800fd08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fd10 <nan+0x8>
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop
 800fd10:	00000000 	.word	0x00000000
 800fd14:	7ff80000 	.word	0x7ff80000

0800fd18 <__ieee754_sqrt>:
 800fd18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd1c:	ec55 4b10 	vmov	r4, r5, d0
 800fd20:	4e67      	ldr	r6, [pc, #412]	; (800fec0 <__ieee754_sqrt+0x1a8>)
 800fd22:	43ae      	bics	r6, r5
 800fd24:	ee10 0a10 	vmov	r0, s0
 800fd28:	ee10 2a10 	vmov	r2, s0
 800fd2c:	4629      	mov	r1, r5
 800fd2e:	462b      	mov	r3, r5
 800fd30:	d10d      	bne.n	800fd4e <__ieee754_sqrt+0x36>
 800fd32:	f7f0 fc79 	bl	8000628 <__aeabi_dmul>
 800fd36:	4602      	mov	r2, r0
 800fd38:	460b      	mov	r3, r1
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	4629      	mov	r1, r5
 800fd3e:	f7f0 fabd 	bl	80002bc <__adddf3>
 800fd42:	4604      	mov	r4, r0
 800fd44:	460d      	mov	r5, r1
 800fd46:	ec45 4b10 	vmov	d0, r4, r5
 800fd4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd4e:	2d00      	cmp	r5, #0
 800fd50:	dc0b      	bgt.n	800fd6a <__ieee754_sqrt+0x52>
 800fd52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fd56:	4326      	orrs	r6, r4
 800fd58:	d0f5      	beq.n	800fd46 <__ieee754_sqrt+0x2e>
 800fd5a:	b135      	cbz	r5, 800fd6a <__ieee754_sqrt+0x52>
 800fd5c:	f7f0 faac 	bl	80002b8 <__aeabi_dsub>
 800fd60:	4602      	mov	r2, r0
 800fd62:	460b      	mov	r3, r1
 800fd64:	f7f0 fd8a 	bl	800087c <__aeabi_ddiv>
 800fd68:	e7eb      	b.n	800fd42 <__ieee754_sqrt+0x2a>
 800fd6a:	1509      	asrs	r1, r1, #20
 800fd6c:	f000 808d 	beq.w	800fe8a <__ieee754_sqrt+0x172>
 800fd70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd74:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800fd78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd7c:	07c9      	lsls	r1, r1, #31
 800fd7e:	bf5c      	itt	pl
 800fd80:	005b      	lslpl	r3, r3, #1
 800fd82:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800fd86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fd8a:	bf58      	it	pl
 800fd8c:	0052      	lslpl	r2, r2, #1
 800fd8e:	2500      	movs	r5, #0
 800fd90:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fd94:	1076      	asrs	r6, r6, #1
 800fd96:	0052      	lsls	r2, r2, #1
 800fd98:	f04f 0e16 	mov.w	lr, #22
 800fd9c:	46ac      	mov	ip, r5
 800fd9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fda2:	eb0c 0001 	add.w	r0, ip, r1
 800fda6:	4298      	cmp	r0, r3
 800fda8:	bfde      	ittt	le
 800fdaa:	1a1b      	suble	r3, r3, r0
 800fdac:	eb00 0c01 	addle.w	ip, r0, r1
 800fdb0:	186d      	addle	r5, r5, r1
 800fdb2:	005b      	lsls	r3, r3, #1
 800fdb4:	f1be 0e01 	subs.w	lr, lr, #1
 800fdb8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fdbc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fdc0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fdc4:	d1ed      	bne.n	800fda2 <__ieee754_sqrt+0x8a>
 800fdc6:	4674      	mov	r4, lr
 800fdc8:	2720      	movs	r7, #32
 800fdca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fdce:	4563      	cmp	r3, ip
 800fdd0:	eb01 000e 	add.w	r0, r1, lr
 800fdd4:	dc02      	bgt.n	800fddc <__ieee754_sqrt+0xc4>
 800fdd6:	d113      	bne.n	800fe00 <__ieee754_sqrt+0xe8>
 800fdd8:	4290      	cmp	r0, r2
 800fdda:	d811      	bhi.n	800fe00 <__ieee754_sqrt+0xe8>
 800fddc:	2800      	cmp	r0, #0
 800fdde:	eb00 0e01 	add.w	lr, r0, r1
 800fde2:	da57      	bge.n	800fe94 <__ieee754_sqrt+0x17c>
 800fde4:	f1be 0f00 	cmp.w	lr, #0
 800fde8:	db54      	blt.n	800fe94 <__ieee754_sqrt+0x17c>
 800fdea:	f10c 0801 	add.w	r8, ip, #1
 800fdee:	eba3 030c 	sub.w	r3, r3, ip
 800fdf2:	4290      	cmp	r0, r2
 800fdf4:	bf88      	it	hi
 800fdf6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fdfa:	1a12      	subs	r2, r2, r0
 800fdfc:	440c      	add	r4, r1
 800fdfe:	46c4      	mov	ip, r8
 800fe00:	005b      	lsls	r3, r3, #1
 800fe02:	3f01      	subs	r7, #1
 800fe04:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fe08:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fe0c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fe10:	d1dd      	bne.n	800fdce <__ieee754_sqrt+0xb6>
 800fe12:	4313      	orrs	r3, r2
 800fe14:	d01b      	beq.n	800fe4e <__ieee754_sqrt+0x136>
 800fe16:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800fec4 <__ieee754_sqrt+0x1ac>
 800fe1a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800fec8 <__ieee754_sqrt+0x1b0>
 800fe1e:	e9da 0100 	ldrd	r0, r1, [sl]
 800fe22:	e9db 2300 	ldrd	r2, r3, [fp]
 800fe26:	f7f0 fa47 	bl	80002b8 <__aeabi_dsub>
 800fe2a:	e9da 8900 	ldrd	r8, r9, [sl]
 800fe2e:	4602      	mov	r2, r0
 800fe30:	460b      	mov	r3, r1
 800fe32:	4640      	mov	r0, r8
 800fe34:	4649      	mov	r1, r9
 800fe36:	f7f0 fe73 	bl	8000b20 <__aeabi_dcmple>
 800fe3a:	b140      	cbz	r0, 800fe4e <__ieee754_sqrt+0x136>
 800fe3c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fe40:	e9da 0100 	ldrd	r0, r1, [sl]
 800fe44:	e9db 2300 	ldrd	r2, r3, [fp]
 800fe48:	d126      	bne.n	800fe98 <__ieee754_sqrt+0x180>
 800fe4a:	3501      	adds	r5, #1
 800fe4c:	463c      	mov	r4, r7
 800fe4e:	106a      	asrs	r2, r5, #1
 800fe50:	0863      	lsrs	r3, r4, #1
 800fe52:	07e9      	lsls	r1, r5, #31
 800fe54:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800fe58:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800fe5c:	bf48      	it	mi
 800fe5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800fe62:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800fe66:	461c      	mov	r4, r3
 800fe68:	e76d      	b.n	800fd46 <__ieee754_sqrt+0x2e>
 800fe6a:	0ad3      	lsrs	r3, r2, #11
 800fe6c:	3815      	subs	r0, #21
 800fe6e:	0552      	lsls	r2, r2, #21
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d0fa      	beq.n	800fe6a <__ieee754_sqrt+0x152>
 800fe74:	02dc      	lsls	r4, r3, #11
 800fe76:	d50a      	bpl.n	800fe8e <__ieee754_sqrt+0x176>
 800fe78:	f1c1 0420 	rsb	r4, r1, #32
 800fe7c:	fa22 f404 	lsr.w	r4, r2, r4
 800fe80:	1e4d      	subs	r5, r1, #1
 800fe82:	408a      	lsls	r2, r1
 800fe84:	4323      	orrs	r3, r4
 800fe86:	1b41      	subs	r1, r0, r5
 800fe88:	e772      	b.n	800fd70 <__ieee754_sqrt+0x58>
 800fe8a:	4608      	mov	r0, r1
 800fe8c:	e7f0      	b.n	800fe70 <__ieee754_sqrt+0x158>
 800fe8e:	005b      	lsls	r3, r3, #1
 800fe90:	3101      	adds	r1, #1
 800fe92:	e7ef      	b.n	800fe74 <__ieee754_sqrt+0x15c>
 800fe94:	46e0      	mov	r8, ip
 800fe96:	e7aa      	b.n	800fdee <__ieee754_sqrt+0xd6>
 800fe98:	f7f0 fa10 	bl	80002bc <__adddf3>
 800fe9c:	e9da 8900 	ldrd	r8, r9, [sl]
 800fea0:	4602      	mov	r2, r0
 800fea2:	460b      	mov	r3, r1
 800fea4:	4640      	mov	r0, r8
 800fea6:	4649      	mov	r1, r9
 800fea8:	f7f0 fe30 	bl	8000b0c <__aeabi_dcmplt>
 800feac:	b120      	cbz	r0, 800feb8 <__ieee754_sqrt+0x1a0>
 800feae:	1ca0      	adds	r0, r4, #2
 800feb0:	bf08      	it	eq
 800feb2:	3501      	addeq	r5, #1
 800feb4:	3402      	adds	r4, #2
 800feb6:	e7ca      	b.n	800fe4e <__ieee754_sqrt+0x136>
 800feb8:	3401      	adds	r4, #1
 800feba:	f024 0401 	bic.w	r4, r4, #1
 800febe:	e7c6      	b.n	800fe4e <__ieee754_sqrt+0x136>
 800fec0:	7ff00000 	.word	0x7ff00000
 800fec4:	200001e0 	.word	0x200001e0
 800fec8:	200001e8 	.word	0x200001e8
 800fecc:	00000000 	.word	0x00000000

0800fed0 <__ieee754_atan2>:
 800fed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fed4:	ec57 6b11 	vmov	r6, r7, d1
 800fed8:	4273      	negs	r3, r6
 800feda:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8010058 <__ieee754_atan2+0x188>
 800fede:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800fee2:	4333      	orrs	r3, r6
 800fee4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fee8:	4543      	cmp	r3, r8
 800feea:	ec51 0b10 	vmov	r0, r1, d0
 800feee:	ee11 5a10 	vmov	r5, s2
 800fef2:	d80a      	bhi.n	800ff0a <__ieee754_atan2+0x3a>
 800fef4:	4244      	negs	r4, r0
 800fef6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fefa:	4304      	orrs	r4, r0
 800fefc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ff00:	4544      	cmp	r4, r8
 800ff02:	ee10 9a10 	vmov	r9, s0
 800ff06:	468e      	mov	lr, r1
 800ff08:	d907      	bls.n	800ff1a <__ieee754_atan2+0x4a>
 800ff0a:	4632      	mov	r2, r6
 800ff0c:	463b      	mov	r3, r7
 800ff0e:	f7f0 f9d5 	bl	80002bc <__adddf3>
 800ff12:	ec41 0b10 	vmov	d0, r0, r1
 800ff16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff1a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ff1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ff22:	4334      	orrs	r4, r6
 800ff24:	d103      	bne.n	800ff2e <__ieee754_atan2+0x5e>
 800ff26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff2a:	f000 ba55 	b.w	80103d8 <atan>
 800ff2e:	17bc      	asrs	r4, r7, #30
 800ff30:	f004 0402 	and.w	r4, r4, #2
 800ff34:	ea53 0909 	orrs.w	r9, r3, r9
 800ff38:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ff3c:	d107      	bne.n	800ff4e <__ieee754_atan2+0x7e>
 800ff3e:	2c02      	cmp	r4, #2
 800ff40:	d05f      	beq.n	8010002 <__ieee754_atan2+0x132>
 800ff42:	2c03      	cmp	r4, #3
 800ff44:	d1e5      	bne.n	800ff12 <__ieee754_atan2+0x42>
 800ff46:	a140      	add	r1, pc, #256	; (adr r1, 8010048 <__ieee754_atan2+0x178>)
 800ff48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff4c:	e7e1      	b.n	800ff12 <__ieee754_atan2+0x42>
 800ff4e:	4315      	orrs	r5, r2
 800ff50:	d106      	bne.n	800ff60 <__ieee754_atan2+0x90>
 800ff52:	f1be 0f00 	cmp.w	lr, #0
 800ff56:	da5f      	bge.n	8010018 <__ieee754_atan2+0x148>
 800ff58:	a13d      	add	r1, pc, #244	; (adr r1, 8010050 <__ieee754_atan2+0x180>)
 800ff5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff5e:	e7d8      	b.n	800ff12 <__ieee754_atan2+0x42>
 800ff60:	4542      	cmp	r2, r8
 800ff62:	d10f      	bne.n	800ff84 <__ieee754_atan2+0xb4>
 800ff64:	4293      	cmp	r3, r2
 800ff66:	f104 34ff 	add.w	r4, r4, #4294967295
 800ff6a:	d107      	bne.n	800ff7c <__ieee754_atan2+0xac>
 800ff6c:	2c02      	cmp	r4, #2
 800ff6e:	d84c      	bhi.n	801000a <__ieee754_atan2+0x13a>
 800ff70:	4b33      	ldr	r3, [pc, #204]	; (8010040 <__ieee754_atan2+0x170>)
 800ff72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ff76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff7a:	e7ca      	b.n	800ff12 <__ieee754_atan2+0x42>
 800ff7c:	2c02      	cmp	r4, #2
 800ff7e:	d848      	bhi.n	8010012 <__ieee754_atan2+0x142>
 800ff80:	4b30      	ldr	r3, [pc, #192]	; (8010044 <__ieee754_atan2+0x174>)
 800ff82:	e7f6      	b.n	800ff72 <__ieee754_atan2+0xa2>
 800ff84:	4543      	cmp	r3, r8
 800ff86:	d0e4      	beq.n	800ff52 <__ieee754_atan2+0x82>
 800ff88:	1a9b      	subs	r3, r3, r2
 800ff8a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ff8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ff92:	da1e      	bge.n	800ffd2 <__ieee754_atan2+0x102>
 800ff94:	2f00      	cmp	r7, #0
 800ff96:	da01      	bge.n	800ff9c <__ieee754_atan2+0xcc>
 800ff98:	323c      	adds	r2, #60	; 0x3c
 800ff9a:	db1e      	blt.n	800ffda <__ieee754_atan2+0x10a>
 800ff9c:	4632      	mov	r2, r6
 800ff9e:	463b      	mov	r3, r7
 800ffa0:	f7f0 fc6c 	bl	800087c <__aeabi_ddiv>
 800ffa4:	ec41 0b10 	vmov	d0, r0, r1
 800ffa8:	f000 fbb6 	bl	8010718 <fabs>
 800ffac:	f000 fa14 	bl	80103d8 <atan>
 800ffb0:	ec51 0b10 	vmov	r0, r1, d0
 800ffb4:	2c01      	cmp	r4, #1
 800ffb6:	d013      	beq.n	800ffe0 <__ieee754_atan2+0x110>
 800ffb8:	2c02      	cmp	r4, #2
 800ffba:	d015      	beq.n	800ffe8 <__ieee754_atan2+0x118>
 800ffbc:	2c00      	cmp	r4, #0
 800ffbe:	d0a8      	beq.n	800ff12 <__ieee754_atan2+0x42>
 800ffc0:	a317      	add	r3, pc, #92	; (adr r3, 8010020 <__ieee754_atan2+0x150>)
 800ffc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc6:	f7f0 f977 	bl	80002b8 <__aeabi_dsub>
 800ffca:	a317      	add	r3, pc, #92	; (adr r3, 8010028 <__ieee754_atan2+0x158>)
 800ffcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd0:	e014      	b.n	800fffc <__ieee754_atan2+0x12c>
 800ffd2:	a117      	add	r1, pc, #92	; (adr r1, 8010030 <__ieee754_atan2+0x160>)
 800ffd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffd8:	e7ec      	b.n	800ffb4 <__ieee754_atan2+0xe4>
 800ffda:	2000      	movs	r0, #0
 800ffdc:	2100      	movs	r1, #0
 800ffde:	e7e9      	b.n	800ffb4 <__ieee754_atan2+0xe4>
 800ffe0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	e794      	b.n	800ff12 <__ieee754_atan2+0x42>
 800ffe8:	a30d      	add	r3, pc, #52	; (adr r3, 8010020 <__ieee754_atan2+0x150>)
 800ffea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffee:	f7f0 f963 	bl	80002b8 <__aeabi_dsub>
 800fff2:	4602      	mov	r2, r0
 800fff4:	460b      	mov	r3, r1
 800fff6:	a10c      	add	r1, pc, #48	; (adr r1, 8010028 <__ieee754_atan2+0x158>)
 800fff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fffc:	f7f0 f95c 	bl	80002b8 <__aeabi_dsub>
 8010000:	e787      	b.n	800ff12 <__ieee754_atan2+0x42>
 8010002:	a109      	add	r1, pc, #36	; (adr r1, 8010028 <__ieee754_atan2+0x158>)
 8010004:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010008:	e783      	b.n	800ff12 <__ieee754_atan2+0x42>
 801000a:	a10b      	add	r1, pc, #44	; (adr r1, 8010038 <__ieee754_atan2+0x168>)
 801000c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010010:	e77f      	b.n	800ff12 <__ieee754_atan2+0x42>
 8010012:	2000      	movs	r0, #0
 8010014:	2100      	movs	r1, #0
 8010016:	e77c      	b.n	800ff12 <__ieee754_atan2+0x42>
 8010018:	a105      	add	r1, pc, #20	; (adr r1, 8010030 <__ieee754_atan2+0x160>)
 801001a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801001e:	e778      	b.n	800ff12 <__ieee754_atan2+0x42>
 8010020:	33145c07 	.word	0x33145c07
 8010024:	3ca1a626 	.word	0x3ca1a626
 8010028:	54442d18 	.word	0x54442d18
 801002c:	400921fb 	.word	0x400921fb
 8010030:	54442d18 	.word	0x54442d18
 8010034:	3ff921fb 	.word	0x3ff921fb
 8010038:	54442d18 	.word	0x54442d18
 801003c:	3fe921fb 	.word	0x3fe921fb
 8010040:	08018648 	.word	0x08018648
 8010044:	08018660 	.word	0x08018660
 8010048:	54442d18 	.word	0x54442d18
 801004c:	c00921fb 	.word	0xc00921fb
 8010050:	54442d18 	.word	0x54442d18
 8010054:	bff921fb 	.word	0xbff921fb
 8010058:	7ff00000 	.word	0x7ff00000
 801005c:	00000000 	.word	0x00000000

08010060 <__ieee754_log>:
 8010060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010064:	ec51 0b10 	vmov	r0, r1, d0
 8010068:	ed2d 8b04 	vpush	{d8-d9}
 801006c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010070:	b083      	sub	sp, #12
 8010072:	460d      	mov	r5, r1
 8010074:	da29      	bge.n	80100ca <__ieee754_log+0x6a>
 8010076:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801007a:	4303      	orrs	r3, r0
 801007c:	ee10 2a10 	vmov	r2, s0
 8010080:	d10c      	bne.n	801009c <__ieee754_log+0x3c>
 8010082:	49cf      	ldr	r1, [pc, #828]	; (80103c0 <__ieee754_log+0x360>)
 8010084:	2200      	movs	r2, #0
 8010086:	2300      	movs	r3, #0
 8010088:	2000      	movs	r0, #0
 801008a:	f7f0 fbf7 	bl	800087c <__aeabi_ddiv>
 801008e:	ec41 0b10 	vmov	d0, r0, r1
 8010092:	b003      	add	sp, #12
 8010094:	ecbd 8b04 	vpop	{d8-d9}
 8010098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801009c:	2900      	cmp	r1, #0
 801009e:	da05      	bge.n	80100ac <__ieee754_log+0x4c>
 80100a0:	460b      	mov	r3, r1
 80100a2:	f7f0 f909 	bl	80002b8 <__aeabi_dsub>
 80100a6:	2200      	movs	r2, #0
 80100a8:	2300      	movs	r3, #0
 80100aa:	e7ee      	b.n	801008a <__ieee754_log+0x2a>
 80100ac:	4bc5      	ldr	r3, [pc, #788]	; (80103c4 <__ieee754_log+0x364>)
 80100ae:	2200      	movs	r2, #0
 80100b0:	f7f0 faba 	bl	8000628 <__aeabi_dmul>
 80100b4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80100b8:	460d      	mov	r5, r1
 80100ba:	4ac3      	ldr	r2, [pc, #780]	; (80103c8 <__ieee754_log+0x368>)
 80100bc:	4295      	cmp	r5, r2
 80100be:	dd06      	ble.n	80100ce <__ieee754_log+0x6e>
 80100c0:	4602      	mov	r2, r0
 80100c2:	460b      	mov	r3, r1
 80100c4:	f7f0 f8fa 	bl	80002bc <__adddf3>
 80100c8:	e7e1      	b.n	801008e <__ieee754_log+0x2e>
 80100ca:	2300      	movs	r3, #0
 80100cc:	e7f5      	b.n	80100ba <__ieee754_log+0x5a>
 80100ce:	152c      	asrs	r4, r5, #20
 80100d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80100d4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80100d8:	441c      	add	r4, r3
 80100da:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80100de:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80100e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80100e6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80100ea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80100ee:	ea42 0105 	orr.w	r1, r2, r5
 80100f2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80100f6:	2200      	movs	r2, #0
 80100f8:	4bb4      	ldr	r3, [pc, #720]	; (80103cc <__ieee754_log+0x36c>)
 80100fa:	f7f0 f8dd 	bl	80002b8 <__aeabi_dsub>
 80100fe:	1cab      	adds	r3, r5, #2
 8010100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010104:	2b02      	cmp	r3, #2
 8010106:	4682      	mov	sl, r0
 8010108:	468b      	mov	fp, r1
 801010a:	f04f 0200 	mov.w	r2, #0
 801010e:	dc53      	bgt.n	80101b8 <__ieee754_log+0x158>
 8010110:	2300      	movs	r3, #0
 8010112:	f7f0 fcf1 	bl	8000af8 <__aeabi_dcmpeq>
 8010116:	b1d0      	cbz	r0, 801014e <__ieee754_log+0xee>
 8010118:	2c00      	cmp	r4, #0
 801011a:	f000 8122 	beq.w	8010362 <__ieee754_log+0x302>
 801011e:	4620      	mov	r0, r4
 8010120:	f7f0 fa18 	bl	8000554 <__aeabi_i2d>
 8010124:	a390      	add	r3, pc, #576	; (adr r3, 8010368 <__ieee754_log+0x308>)
 8010126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012a:	4606      	mov	r6, r0
 801012c:	460f      	mov	r7, r1
 801012e:	f7f0 fa7b 	bl	8000628 <__aeabi_dmul>
 8010132:	a38f      	add	r3, pc, #572	; (adr r3, 8010370 <__ieee754_log+0x310>)
 8010134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010138:	4604      	mov	r4, r0
 801013a:	460d      	mov	r5, r1
 801013c:	4630      	mov	r0, r6
 801013e:	4639      	mov	r1, r7
 8010140:	f7f0 fa72 	bl	8000628 <__aeabi_dmul>
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	4620      	mov	r0, r4
 801014a:	4629      	mov	r1, r5
 801014c:	e7ba      	b.n	80100c4 <__ieee754_log+0x64>
 801014e:	a38a      	add	r3, pc, #552	; (adr r3, 8010378 <__ieee754_log+0x318>)
 8010150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010154:	4650      	mov	r0, sl
 8010156:	4659      	mov	r1, fp
 8010158:	f7f0 fa66 	bl	8000628 <__aeabi_dmul>
 801015c:	4602      	mov	r2, r0
 801015e:	460b      	mov	r3, r1
 8010160:	2000      	movs	r0, #0
 8010162:	499b      	ldr	r1, [pc, #620]	; (80103d0 <__ieee754_log+0x370>)
 8010164:	f7f0 f8a8 	bl	80002b8 <__aeabi_dsub>
 8010168:	4652      	mov	r2, sl
 801016a:	4606      	mov	r6, r0
 801016c:	460f      	mov	r7, r1
 801016e:	465b      	mov	r3, fp
 8010170:	4650      	mov	r0, sl
 8010172:	4659      	mov	r1, fp
 8010174:	f7f0 fa58 	bl	8000628 <__aeabi_dmul>
 8010178:	4602      	mov	r2, r0
 801017a:	460b      	mov	r3, r1
 801017c:	4630      	mov	r0, r6
 801017e:	4639      	mov	r1, r7
 8010180:	f7f0 fa52 	bl	8000628 <__aeabi_dmul>
 8010184:	4606      	mov	r6, r0
 8010186:	460f      	mov	r7, r1
 8010188:	b914      	cbnz	r4, 8010190 <__ieee754_log+0x130>
 801018a:	4632      	mov	r2, r6
 801018c:	463b      	mov	r3, r7
 801018e:	e0a2      	b.n	80102d6 <__ieee754_log+0x276>
 8010190:	4620      	mov	r0, r4
 8010192:	f7f0 f9df 	bl	8000554 <__aeabi_i2d>
 8010196:	a374      	add	r3, pc, #464	; (adr r3, 8010368 <__ieee754_log+0x308>)
 8010198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019c:	4680      	mov	r8, r0
 801019e:	4689      	mov	r9, r1
 80101a0:	f7f0 fa42 	bl	8000628 <__aeabi_dmul>
 80101a4:	a372      	add	r3, pc, #456	; (adr r3, 8010370 <__ieee754_log+0x310>)
 80101a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101aa:	4604      	mov	r4, r0
 80101ac:	460d      	mov	r5, r1
 80101ae:	4640      	mov	r0, r8
 80101b0:	4649      	mov	r1, r9
 80101b2:	f7f0 fa39 	bl	8000628 <__aeabi_dmul>
 80101b6:	e0a7      	b.n	8010308 <__ieee754_log+0x2a8>
 80101b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80101bc:	f7f0 f87e 	bl	80002bc <__adddf3>
 80101c0:	4602      	mov	r2, r0
 80101c2:	460b      	mov	r3, r1
 80101c4:	4650      	mov	r0, sl
 80101c6:	4659      	mov	r1, fp
 80101c8:	f7f0 fb58 	bl	800087c <__aeabi_ddiv>
 80101cc:	ec41 0b18 	vmov	d8, r0, r1
 80101d0:	4620      	mov	r0, r4
 80101d2:	f7f0 f9bf 	bl	8000554 <__aeabi_i2d>
 80101d6:	ec53 2b18 	vmov	r2, r3, d8
 80101da:	ec41 0b19 	vmov	d9, r0, r1
 80101de:	ec51 0b18 	vmov	r0, r1, d8
 80101e2:	f7f0 fa21 	bl	8000628 <__aeabi_dmul>
 80101e6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80101ea:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80101ee:	9301      	str	r3, [sp, #4]
 80101f0:	4602      	mov	r2, r0
 80101f2:	460b      	mov	r3, r1
 80101f4:	4680      	mov	r8, r0
 80101f6:	4689      	mov	r9, r1
 80101f8:	f7f0 fa16 	bl	8000628 <__aeabi_dmul>
 80101fc:	a360      	add	r3, pc, #384	; (adr r3, 8010380 <__ieee754_log+0x320>)
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	4606      	mov	r6, r0
 8010204:	460f      	mov	r7, r1
 8010206:	f7f0 fa0f 	bl	8000628 <__aeabi_dmul>
 801020a:	a35f      	add	r3, pc, #380	; (adr r3, 8010388 <__ieee754_log+0x328>)
 801020c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010210:	f7f0 f854 	bl	80002bc <__adddf3>
 8010214:	4632      	mov	r2, r6
 8010216:	463b      	mov	r3, r7
 8010218:	f7f0 fa06 	bl	8000628 <__aeabi_dmul>
 801021c:	a35c      	add	r3, pc, #368	; (adr r3, 8010390 <__ieee754_log+0x330>)
 801021e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010222:	f7f0 f84b 	bl	80002bc <__adddf3>
 8010226:	4632      	mov	r2, r6
 8010228:	463b      	mov	r3, r7
 801022a:	f7f0 f9fd 	bl	8000628 <__aeabi_dmul>
 801022e:	a35a      	add	r3, pc, #360	; (adr r3, 8010398 <__ieee754_log+0x338>)
 8010230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010234:	f7f0 f842 	bl	80002bc <__adddf3>
 8010238:	4642      	mov	r2, r8
 801023a:	464b      	mov	r3, r9
 801023c:	f7f0 f9f4 	bl	8000628 <__aeabi_dmul>
 8010240:	a357      	add	r3, pc, #348	; (adr r3, 80103a0 <__ieee754_log+0x340>)
 8010242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010246:	4680      	mov	r8, r0
 8010248:	4689      	mov	r9, r1
 801024a:	4630      	mov	r0, r6
 801024c:	4639      	mov	r1, r7
 801024e:	f7f0 f9eb 	bl	8000628 <__aeabi_dmul>
 8010252:	a355      	add	r3, pc, #340	; (adr r3, 80103a8 <__ieee754_log+0x348>)
 8010254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010258:	f7f0 f830 	bl	80002bc <__adddf3>
 801025c:	4632      	mov	r2, r6
 801025e:	463b      	mov	r3, r7
 8010260:	f7f0 f9e2 	bl	8000628 <__aeabi_dmul>
 8010264:	a352      	add	r3, pc, #328	; (adr r3, 80103b0 <__ieee754_log+0x350>)
 8010266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801026a:	f7f0 f827 	bl	80002bc <__adddf3>
 801026e:	4632      	mov	r2, r6
 8010270:	463b      	mov	r3, r7
 8010272:	f7f0 f9d9 	bl	8000628 <__aeabi_dmul>
 8010276:	460b      	mov	r3, r1
 8010278:	4602      	mov	r2, r0
 801027a:	4649      	mov	r1, r9
 801027c:	4640      	mov	r0, r8
 801027e:	f7f0 f81d 	bl	80002bc <__adddf3>
 8010282:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8010286:	9b01      	ldr	r3, [sp, #4]
 8010288:	3551      	adds	r5, #81	; 0x51
 801028a:	431d      	orrs	r5, r3
 801028c:	2d00      	cmp	r5, #0
 801028e:	4680      	mov	r8, r0
 8010290:	4689      	mov	r9, r1
 8010292:	dd48      	ble.n	8010326 <__ieee754_log+0x2c6>
 8010294:	4b4e      	ldr	r3, [pc, #312]	; (80103d0 <__ieee754_log+0x370>)
 8010296:	2200      	movs	r2, #0
 8010298:	4650      	mov	r0, sl
 801029a:	4659      	mov	r1, fp
 801029c:	f7f0 f9c4 	bl	8000628 <__aeabi_dmul>
 80102a0:	4652      	mov	r2, sl
 80102a2:	465b      	mov	r3, fp
 80102a4:	f7f0 f9c0 	bl	8000628 <__aeabi_dmul>
 80102a8:	4602      	mov	r2, r0
 80102aa:	460b      	mov	r3, r1
 80102ac:	4606      	mov	r6, r0
 80102ae:	460f      	mov	r7, r1
 80102b0:	4640      	mov	r0, r8
 80102b2:	4649      	mov	r1, r9
 80102b4:	f7f0 f802 	bl	80002bc <__adddf3>
 80102b8:	ec53 2b18 	vmov	r2, r3, d8
 80102bc:	f7f0 f9b4 	bl	8000628 <__aeabi_dmul>
 80102c0:	4680      	mov	r8, r0
 80102c2:	4689      	mov	r9, r1
 80102c4:	b964      	cbnz	r4, 80102e0 <__ieee754_log+0x280>
 80102c6:	4602      	mov	r2, r0
 80102c8:	460b      	mov	r3, r1
 80102ca:	4630      	mov	r0, r6
 80102cc:	4639      	mov	r1, r7
 80102ce:	f7ef fff3 	bl	80002b8 <__aeabi_dsub>
 80102d2:	4602      	mov	r2, r0
 80102d4:	460b      	mov	r3, r1
 80102d6:	4650      	mov	r0, sl
 80102d8:	4659      	mov	r1, fp
 80102da:	f7ef ffed 	bl	80002b8 <__aeabi_dsub>
 80102de:	e6d6      	b.n	801008e <__ieee754_log+0x2e>
 80102e0:	a321      	add	r3, pc, #132	; (adr r3, 8010368 <__ieee754_log+0x308>)
 80102e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e6:	ec51 0b19 	vmov	r0, r1, d9
 80102ea:	f7f0 f99d 	bl	8000628 <__aeabi_dmul>
 80102ee:	a320      	add	r3, pc, #128	; (adr r3, 8010370 <__ieee754_log+0x310>)
 80102f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f4:	4604      	mov	r4, r0
 80102f6:	460d      	mov	r5, r1
 80102f8:	ec51 0b19 	vmov	r0, r1, d9
 80102fc:	f7f0 f994 	bl	8000628 <__aeabi_dmul>
 8010300:	4642      	mov	r2, r8
 8010302:	464b      	mov	r3, r9
 8010304:	f7ef ffda 	bl	80002bc <__adddf3>
 8010308:	4602      	mov	r2, r0
 801030a:	460b      	mov	r3, r1
 801030c:	4630      	mov	r0, r6
 801030e:	4639      	mov	r1, r7
 8010310:	f7ef ffd2 	bl	80002b8 <__aeabi_dsub>
 8010314:	4652      	mov	r2, sl
 8010316:	465b      	mov	r3, fp
 8010318:	f7ef ffce 	bl	80002b8 <__aeabi_dsub>
 801031c:	4602      	mov	r2, r0
 801031e:	460b      	mov	r3, r1
 8010320:	4620      	mov	r0, r4
 8010322:	4629      	mov	r1, r5
 8010324:	e7d9      	b.n	80102da <__ieee754_log+0x27a>
 8010326:	4602      	mov	r2, r0
 8010328:	460b      	mov	r3, r1
 801032a:	4650      	mov	r0, sl
 801032c:	4659      	mov	r1, fp
 801032e:	f7ef ffc3 	bl	80002b8 <__aeabi_dsub>
 8010332:	ec53 2b18 	vmov	r2, r3, d8
 8010336:	f7f0 f977 	bl	8000628 <__aeabi_dmul>
 801033a:	4606      	mov	r6, r0
 801033c:	460f      	mov	r7, r1
 801033e:	2c00      	cmp	r4, #0
 8010340:	f43f af23 	beq.w	801018a <__ieee754_log+0x12a>
 8010344:	a308      	add	r3, pc, #32	; (adr r3, 8010368 <__ieee754_log+0x308>)
 8010346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801034a:	ec51 0b19 	vmov	r0, r1, d9
 801034e:	f7f0 f96b 	bl	8000628 <__aeabi_dmul>
 8010352:	a307      	add	r3, pc, #28	; (adr r3, 8010370 <__ieee754_log+0x310>)
 8010354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010358:	4604      	mov	r4, r0
 801035a:	460d      	mov	r5, r1
 801035c:	ec51 0b19 	vmov	r0, r1, d9
 8010360:	e727      	b.n	80101b2 <__ieee754_log+0x152>
 8010362:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80103b8 <__ieee754_log+0x358>
 8010366:	e694      	b.n	8010092 <__ieee754_log+0x32>
 8010368:	fee00000 	.word	0xfee00000
 801036c:	3fe62e42 	.word	0x3fe62e42
 8010370:	35793c76 	.word	0x35793c76
 8010374:	3dea39ef 	.word	0x3dea39ef
 8010378:	55555555 	.word	0x55555555
 801037c:	3fd55555 	.word	0x3fd55555
 8010380:	df3e5244 	.word	0xdf3e5244
 8010384:	3fc2f112 	.word	0x3fc2f112
 8010388:	96cb03de 	.word	0x96cb03de
 801038c:	3fc74664 	.word	0x3fc74664
 8010390:	94229359 	.word	0x94229359
 8010394:	3fd24924 	.word	0x3fd24924
 8010398:	55555593 	.word	0x55555593
 801039c:	3fe55555 	.word	0x3fe55555
 80103a0:	d078c69f 	.word	0xd078c69f
 80103a4:	3fc39a09 	.word	0x3fc39a09
 80103a8:	1d8e78af 	.word	0x1d8e78af
 80103ac:	3fcc71c5 	.word	0x3fcc71c5
 80103b0:	9997fa04 	.word	0x9997fa04
 80103b4:	3fd99999 	.word	0x3fd99999
	...
 80103c0:	c3500000 	.word	0xc3500000
 80103c4:	43500000 	.word	0x43500000
 80103c8:	7fefffff 	.word	0x7fefffff
 80103cc:	3ff00000 	.word	0x3ff00000
 80103d0:	3fe00000 	.word	0x3fe00000
 80103d4:	00000000 	.word	0x00000000

080103d8 <atan>:
 80103d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103dc:	ec55 4b10 	vmov	r4, r5, d0
 80103e0:	4bc3      	ldr	r3, [pc, #780]	; (80106f0 <atan+0x318>)
 80103e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80103e6:	429e      	cmp	r6, r3
 80103e8:	46ab      	mov	fp, r5
 80103ea:	dd18      	ble.n	801041e <atan+0x46>
 80103ec:	4bc1      	ldr	r3, [pc, #772]	; (80106f4 <atan+0x31c>)
 80103ee:	429e      	cmp	r6, r3
 80103f0:	dc01      	bgt.n	80103f6 <atan+0x1e>
 80103f2:	d109      	bne.n	8010408 <atan+0x30>
 80103f4:	b144      	cbz	r4, 8010408 <atan+0x30>
 80103f6:	4622      	mov	r2, r4
 80103f8:	462b      	mov	r3, r5
 80103fa:	4620      	mov	r0, r4
 80103fc:	4629      	mov	r1, r5
 80103fe:	f7ef ff5d 	bl	80002bc <__adddf3>
 8010402:	4604      	mov	r4, r0
 8010404:	460d      	mov	r5, r1
 8010406:	e006      	b.n	8010416 <atan+0x3e>
 8010408:	f1bb 0f00 	cmp.w	fp, #0
 801040c:	f300 8131 	bgt.w	8010672 <atan+0x29a>
 8010410:	a59b      	add	r5, pc, #620	; (adr r5, 8010680 <atan+0x2a8>)
 8010412:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010416:	ec45 4b10 	vmov	d0, r4, r5
 801041a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801041e:	4bb6      	ldr	r3, [pc, #728]	; (80106f8 <atan+0x320>)
 8010420:	429e      	cmp	r6, r3
 8010422:	dc14      	bgt.n	801044e <atan+0x76>
 8010424:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010428:	429e      	cmp	r6, r3
 801042a:	dc0d      	bgt.n	8010448 <atan+0x70>
 801042c:	a396      	add	r3, pc, #600	; (adr r3, 8010688 <atan+0x2b0>)
 801042e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010432:	ee10 0a10 	vmov	r0, s0
 8010436:	4629      	mov	r1, r5
 8010438:	f7ef ff40 	bl	80002bc <__adddf3>
 801043c:	4baf      	ldr	r3, [pc, #700]	; (80106fc <atan+0x324>)
 801043e:	2200      	movs	r2, #0
 8010440:	f7f0 fb82 	bl	8000b48 <__aeabi_dcmpgt>
 8010444:	2800      	cmp	r0, #0
 8010446:	d1e6      	bne.n	8010416 <atan+0x3e>
 8010448:	f04f 3aff 	mov.w	sl, #4294967295
 801044c:	e02b      	b.n	80104a6 <atan+0xce>
 801044e:	f000 f963 	bl	8010718 <fabs>
 8010452:	4bab      	ldr	r3, [pc, #684]	; (8010700 <atan+0x328>)
 8010454:	429e      	cmp	r6, r3
 8010456:	ec55 4b10 	vmov	r4, r5, d0
 801045a:	f300 80bf 	bgt.w	80105dc <atan+0x204>
 801045e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010462:	429e      	cmp	r6, r3
 8010464:	f300 80a0 	bgt.w	80105a8 <atan+0x1d0>
 8010468:	ee10 2a10 	vmov	r2, s0
 801046c:	ee10 0a10 	vmov	r0, s0
 8010470:	462b      	mov	r3, r5
 8010472:	4629      	mov	r1, r5
 8010474:	f7ef ff22 	bl	80002bc <__adddf3>
 8010478:	4ba0      	ldr	r3, [pc, #640]	; (80106fc <atan+0x324>)
 801047a:	2200      	movs	r2, #0
 801047c:	f7ef ff1c 	bl	80002b8 <__aeabi_dsub>
 8010480:	2200      	movs	r2, #0
 8010482:	4606      	mov	r6, r0
 8010484:	460f      	mov	r7, r1
 8010486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801048a:	4620      	mov	r0, r4
 801048c:	4629      	mov	r1, r5
 801048e:	f7ef ff15 	bl	80002bc <__adddf3>
 8010492:	4602      	mov	r2, r0
 8010494:	460b      	mov	r3, r1
 8010496:	4630      	mov	r0, r6
 8010498:	4639      	mov	r1, r7
 801049a:	f7f0 f9ef 	bl	800087c <__aeabi_ddiv>
 801049e:	f04f 0a00 	mov.w	sl, #0
 80104a2:	4604      	mov	r4, r0
 80104a4:	460d      	mov	r5, r1
 80104a6:	4622      	mov	r2, r4
 80104a8:	462b      	mov	r3, r5
 80104aa:	4620      	mov	r0, r4
 80104ac:	4629      	mov	r1, r5
 80104ae:	f7f0 f8bb 	bl	8000628 <__aeabi_dmul>
 80104b2:	4602      	mov	r2, r0
 80104b4:	460b      	mov	r3, r1
 80104b6:	4680      	mov	r8, r0
 80104b8:	4689      	mov	r9, r1
 80104ba:	f7f0 f8b5 	bl	8000628 <__aeabi_dmul>
 80104be:	a374      	add	r3, pc, #464	; (adr r3, 8010690 <atan+0x2b8>)
 80104c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c4:	4606      	mov	r6, r0
 80104c6:	460f      	mov	r7, r1
 80104c8:	f7f0 f8ae 	bl	8000628 <__aeabi_dmul>
 80104cc:	a372      	add	r3, pc, #456	; (adr r3, 8010698 <atan+0x2c0>)
 80104ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d2:	f7ef fef3 	bl	80002bc <__adddf3>
 80104d6:	4632      	mov	r2, r6
 80104d8:	463b      	mov	r3, r7
 80104da:	f7f0 f8a5 	bl	8000628 <__aeabi_dmul>
 80104de:	a370      	add	r3, pc, #448	; (adr r3, 80106a0 <atan+0x2c8>)
 80104e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e4:	f7ef feea 	bl	80002bc <__adddf3>
 80104e8:	4632      	mov	r2, r6
 80104ea:	463b      	mov	r3, r7
 80104ec:	f7f0 f89c 	bl	8000628 <__aeabi_dmul>
 80104f0:	a36d      	add	r3, pc, #436	; (adr r3, 80106a8 <atan+0x2d0>)
 80104f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f6:	f7ef fee1 	bl	80002bc <__adddf3>
 80104fa:	4632      	mov	r2, r6
 80104fc:	463b      	mov	r3, r7
 80104fe:	f7f0 f893 	bl	8000628 <__aeabi_dmul>
 8010502:	a36b      	add	r3, pc, #428	; (adr r3, 80106b0 <atan+0x2d8>)
 8010504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010508:	f7ef fed8 	bl	80002bc <__adddf3>
 801050c:	4632      	mov	r2, r6
 801050e:	463b      	mov	r3, r7
 8010510:	f7f0 f88a 	bl	8000628 <__aeabi_dmul>
 8010514:	a368      	add	r3, pc, #416	; (adr r3, 80106b8 <atan+0x2e0>)
 8010516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051a:	f7ef fecf 	bl	80002bc <__adddf3>
 801051e:	4642      	mov	r2, r8
 8010520:	464b      	mov	r3, r9
 8010522:	f7f0 f881 	bl	8000628 <__aeabi_dmul>
 8010526:	a366      	add	r3, pc, #408	; (adr r3, 80106c0 <atan+0x2e8>)
 8010528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801052c:	4680      	mov	r8, r0
 801052e:	4689      	mov	r9, r1
 8010530:	4630      	mov	r0, r6
 8010532:	4639      	mov	r1, r7
 8010534:	f7f0 f878 	bl	8000628 <__aeabi_dmul>
 8010538:	a363      	add	r3, pc, #396	; (adr r3, 80106c8 <atan+0x2f0>)
 801053a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053e:	f7ef febb 	bl	80002b8 <__aeabi_dsub>
 8010542:	4632      	mov	r2, r6
 8010544:	463b      	mov	r3, r7
 8010546:	f7f0 f86f 	bl	8000628 <__aeabi_dmul>
 801054a:	a361      	add	r3, pc, #388	; (adr r3, 80106d0 <atan+0x2f8>)
 801054c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010550:	f7ef feb2 	bl	80002b8 <__aeabi_dsub>
 8010554:	4632      	mov	r2, r6
 8010556:	463b      	mov	r3, r7
 8010558:	f7f0 f866 	bl	8000628 <__aeabi_dmul>
 801055c:	a35e      	add	r3, pc, #376	; (adr r3, 80106d8 <atan+0x300>)
 801055e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010562:	f7ef fea9 	bl	80002b8 <__aeabi_dsub>
 8010566:	4632      	mov	r2, r6
 8010568:	463b      	mov	r3, r7
 801056a:	f7f0 f85d 	bl	8000628 <__aeabi_dmul>
 801056e:	a35c      	add	r3, pc, #368	; (adr r3, 80106e0 <atan+0x308>)
 8010570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010574:	f7ef fea0 	bl	80002b8 <__aeabi_dsub>
 8010578:	4632      	mov	r2, r6
 801057a:	463b      	mov	r3, r7
 801057c:	f7f0 f854 	bl	8000628 <__aeabi_dmul>
 8010580:	4602      	mov	r2, r0
 8010582:	460b      	mov	r3, r1
 8010584:	4640      	mov	r0, r8
 8010586:	4649      	mov	r1, r9
 8010588:	f7ef fe98 	bl	80002bc <__adddf3>
 801058c:	4622      	mov	r2, r4
 801058e:	462b      	mov	r3, r5
 8010590:	f7f0 f84a 	bl	8000628 <__aeabi_dmul>
 8010594:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010598:	4602      	mov	r2, r0
 801059a:	460b      	mov	r3, r1
 801059c:	d14b      	bne.n	8010636 <atan+0x25e>
 801059e:	4620      	mov	r0, r4
 80105a0:	4629      	mov	r1, r5
 80105a2:	f7ef fe89 	bl	80002b8 <__aeabi_dsub>
 80105a6:	e72c      	b.n	8010402 <atan+0x2a>
 80105a8:	ee10 0a10 	vmov	r0, s0
 80105ac:	4b53      	ldr	r3, [pc, #332]	; (80106fc <atan+0x324>)
 80105ae:	2200      	movs	r2, #0
 80105b0:	4629      	mov	r1, r5
 80105b2:	f7ef fe81 	bl	80002b8 <__aeabi_dsub>
 80105b6:	4b51      	ldr	r3, [pc, #324]	; (80106fc <atan+0x324>)
 80105b8:	4606      	mov	r6, r0
 80105ba:	460f      	mov	r7, r1
 80105bc:	2200      	movs	r2, #0
 80105be:	4620      	mov	r0, r4
 80105c0:	4629      	mov	r1, r5
 80105c2:	f7ef fe7b 	bl	80002bc <__adddf3>
 80105c6:	4602      	mov	r2, r0
 80105c8:	460b      	mov	r3, r1
 80105ca:	4630      	mov	r0, r6
 80105cc:	4639      	mov	r1, r7
 80105ce:	f7f0 f955 	bl	800087c <__aeabi_ddiv>
 80105d2:	f04f 0a01 	mov.w	sl, #1
 80105d6:	4604      	mov	r4, r0
 80105d8:	460d      	mov	r5, r1
 80105da:	e764      	b.n	80104a6 <atan+0xce>
 80105dc:	4b49      	ldr	r3, [pc, #292]	; (8010704 <atan+0x32c>)
 80105de:	429e      	cmp	r6, r3
 80105e0:	da1d      	bge.n	801061e <atan+0x246>
 80105e2:	ee10 0a10 	vmov	r0, s0
 80105e6:	4b48      	ldr	r3, [pc, #288]	; (8010708 <atan+0x330>)
 80105e8:	2200      	movs	r2, #0
 80105ea:	4629      	mov	r1, r5
 80105ec:	f7ef fe64 	bl	80002b8 <__aeabi_dsub>
 80105f0:	4b45      	ldr	r3, [pc, #276]	; (8010708 <atan+0x330>)
 80105f2:	4606      	mov	r6, r0
 80105f4:	460f      	mov	r7, r1
 80105f6:	2200      	movs	r2, #0
 80105f8:	4620      	mov	r0, r4
 80105fa:	4629      	mov	r1, r5
 80105fc:	f7f0 f814 	bl	8000628 <__aeabi_dmul>
 8010600:	4b3e      	ldr	r3, [pc, #248]	; (80106fc <atan+0x324>)
 8010602:	2200      	movs	r2, #0
 8010604:	f7ef fe5a 	bl	80002bc <__adddf3>
 8010608:	4602      	mov	r2, r0
 801060a:	460b      	mov	r3, r1
 801060c:	4630      	mov	r0, r6
 801060e:	4639      	mov	r1, r7
 8010610:	f7f0 f934 	bl	800087c <__aeabi_ddiv>
 8010614:	f04f 0a02 	mov.w	sl, #2
 8010618:	4604      	mov	r4, r0
 801061a:	460d      	mov	r5, r1
 801061c:	e743      	b.n	80104a6 <atan+0xce>
 801061e:	462b      	mov	r3, r5
 8010620:	ee10 2a10 	vmov	r2, s0
 8010624:	4939      	ldr	r1, [pc, #228]	; (801070c <atan+0x334>)
 8010626:	2000      	movs	r0, #0
 8010628:	f7f0 f928 	bl	800087c <__aeabi_ddiv>
 801062c:	f04f 0a03 	mov.w	sl, #3
 8010630:	4604      	mov	r4, r0
 8010632:	460d      	mov	r5, r1
 8010634:	e737      	b.n	80104a6 <atan+0xce>
 8010636:	4b36      	ldr	r3, [pc, #216]	; (8010710 <atan+0x338>)
 8010638:	4e36      	ldr	r6, [pc, #216]	; (8010714 <atan+0x33c>)
 801063a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801063e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010642:	f7ef fe39 	bl	80002b8 <__aeabi_dsub>
 8010646:	4622      	mov	r2, r4
 8010648:	462b      	mov	r3, r5
 801064a:	f7ef fe35 	bl	80002b8 <__aeabi_dsub>
 801064e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010652:	4602      	mov	r2, r0
 8010654:	460b      	mov	r3, r1
 8010656:	e9d6 0100 	ldrd	r0, r1, [r6]
 801065a:	f7ef fe2d 	bl	80002b8 <__aeabi_dsub>
 801065e:	f1bb 0f00 	cmp.w	fp, #0
 8010662:	4604      	mov	r4, r0
 8010664:	460d      	mov	r5, r1
 8010666:	f6bf aed6 	bge.w	8010416 <atan+0x3e>
 801066a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801066e:	461d      	mov	r5, r3
 8010670:	e6d1      	b.n	8010416 <atan+0x3e>
 8010672:	a51d      	add	r5, pc, #116	; (adr r5, 80106e8 <atan+0x310>)
 8010674:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010678:	e6cd      	b.n	8010416 <atan+0x3e>
 801067a:	bf00      	nop
 801067c:	f3af 8000 	nop.w
 8010680:	54442d18 	.word	0x54442d18
 8010684:	bff921fb 	.word	0xbff921fb
 8010688:	8800759c 	.word	0x8800759c
 801068c:	7e37e43c 	.word	0x7e37e43c
 8010690:	e322da11 	.word	0xe322da11
 8010694:	3f90ad3a 	.word	0x3f90ad3a
 8010698:	24760deb 	.word	0x24760deb
 801069c:	3fa97b4b 	.word	0x3fa97b4b
 80106a0:	a0d03d51 	.word	0xa0d03d51
 80106a4:	3fb10d66 	.word	0x3fb10d66
 80106a8:	c54c206e 	.word	0xc54c206e
 80106ac:	3fb745cd 	.word	0x3fb745cd
 80106b0:	920083ff 	.word	0x920083ff
 80106b4:	3fc24924 	.word	0x3fc24924
 80106b8:	5555550d 	.word	0x5555550d
 80106bc:	3fd55555 	.word	0x3fd55555
 80106c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80106c4:	bfa2b444 	.word	0xbfa2b444
 80106c8:	52defd9a 	.word	0x52defd9a
 80106cc:	3fadde2d 	.word	0x3fadde2d
 80106d0:	af749a6d 	.word	0xaf749a6d
 80106d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80106d8:	fe231671 	.word	0xfe231671
 80106dc:	3fbc71c6 	.word	0x3fbc71c6
 80106e0:	9998ebc4 	.word	0x9998ebc4
 80106e4:	3fc99999 	.word	0x3fc99999
 80106e8:	54442d18 	.word	0x54442d18
 80106ec:	3ff921fb 	.word	0x3ff921fb
 80106f0:	440fffff 	.word	0x440fffff
 80106f4:	7ff00000 	.word	0x7ff00000
 80106f8:	3fdbffff 	.word	0x3fdbffff
 80106fc:	3ff00000 	.word	0x3ff00000
 8010700:	3ff2ffff 	.word	0x3ff2ffff
 8010704:	40038000 	.word	0x40038000
 8010708:	3ff80000 	.word	0x3ff80000
 801070c:	bff00000 	.word	0xbff00000
 8010710:	08018698 	.word	0x08018698
 8010714:	08018678 	.word	0x08018678

08010718 <fabs>:
 8010718:	ec51 0b10 	vmov	r0, r1, d0
 801071c:	ee10 2a10 	vmov	r2, s0
 8010720:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010724:	ec43 2b10 	vmov	d0, r2, r3
 8010728:	4770      	bx	lr
	...

0801072c <_init>:
 801072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801072e:	bf00      	nop
 8010730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010732:	bc08      	pop	{r3}
 8010734:	469e      	mov	lr, r3
 8010736:	4770      	bx	lr

08010738 <_fini>:
 8010738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801073a:	bf00      	nop
 801073c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801073e:	bc08      	pop	{r3}
 8010740:	469e      	mov	lr, r3
 8010742:	4770      	bx	lr
